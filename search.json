[
  {
    "objectID": "projects/prospective_tariff_for_telecom/temp.html",
    "href": "projects/prospective_tariff_for_telecom/temp.html",
    "title": "Pavel Grigoryev projects",
    "section": "",
    "text": "Описание тарифов\n\nТариф «Смарт»\n\nЕжемесячная плата: 550 рублей\nВключено 500 минут разговора, 50 сообщений и 15 Гб интернет-трафика\nСтоимость услуг сверх тарифного пакета: 1. минута разговора: 3 рубля («Мегалайн» всегда округляет вверх значения минут и мегабайтов. Если пользователь проговорил всего 1 секунду, в тарифе засчитывается целая минута); 2. сообщение: 3 рубля; 3. 1 Гб интернет-трафика: 200 рублей.\n\nТариф «Ультра»\n\nЕжемесячная плата: 1950 рублей\nВключено 3000 минут разговора, 1000 сообщений и 30 Гб интернет-трафика\nСтоимость услуг сверх тарифного пакета: 1. минута разговора: 1 рубль; 2. сообщение: 1 рубль; 3. 1 Гб интернет-трафика: 150 рублей.\n\n\n\nТаблица users (информация о пользователях):\n\nuser_id - уникальный идентификатор пользователя\nfirst_name - имя пользователя\nlast_name - фамилия пользователя\nage - возраст пользователя (годы)\nreg_date - дата подключения тарифа (день, месяц, год)\nchurn_date - дата прекращения пользования тарифом (если значение пропущено, то тариф ещё действовал на момент выгрузки данных)\ncity - город проживания пользователя\ntarif - название тарифного плана\n\n\noutliers\n\n- В колонке с датой подключения тарифа 26 % дней пропущено.\n- В колонке с датой прекращения пользования тарифом 92 % пропусков. Значит 92 % пользователей ещё пользуются таррифом.\n\n\n\nobservations\n\n- В таблице users 500 уникльных пользователей.\n\n\n\n\nТаблица calls (информация о звонках):\n\nid - уникальный номер звонка\ncall_date - дата звонка\nduration - длительность звонка в минутах\nuser_id - идентификатор пользователя, сделавшего звонок\n\n\noutliers\n\n- В колонке с длительностью звонка 20 процентов нулей.\n\n\n\n\n\nobservations\n\n- Максимальная длительность звонка 38 минут.\n- Длительность звонка варьируется от 0 до 38 минут.\n- В основном длительность звонка находится в диапазоне от 1.3 до 10.7 минут.\n- Чаще всего звонок составляет 0 минут.\n\n- В таблице calls 492 уникальных пользователя. \n\n\n\n\n\nТаблица messages (информация о сообщениях):\n\nid - уникальный номер сообщения\nmessage_date - дата сообщения\nuser_id - идентификатор пользователя, отправившего сообщение\n\n\noutliers\n\n\nobservations\n\n\n\nТаблица internet (информация об интернет-сессиях):\n\nid - уникальный номер сессии\nmb_used - объём потраченного за сессию интернет-трафика (в мегабайтах)\nsession_date - дата интернет-сессии\nuser_id - идентификатор пользователя\n\n\noutliers\n\n\nobservations\n\n\n\nТаблица tariffs (информация о тарифах):\n\ntariff_name - название тарифа\nrub_monthly_fee - ежемесячная абонентская плата в рублях\nminutes_included - количество минут разговора в месяц, включённых в абонентскую плату\nmessages_included - количество сообщений в месяц, включённых в абонентскую плату\nmb_per_month_included - объём интернет-трафика, включённого в абонентскую плату (в мегабайтах)\nrub_per_minute - стоимость минуты разговора сверх тарифного пакета (например, если в тарифе 100 минут разговора в месяц, то со 101 минуты будет взиматься плата)\nrub_per_message - стоимость отправки сообщения сверх тарифного пакета\nrub_per_gb - стоимость дополнительного гигабайта интернет-трафика сверх тарифного пакета (1 гигабайт = 1024 мегабайта)\n\n\noutliers\n\n\nobservations"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html",
    "title": "Исследование объявлений о продаже квартир",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nПроект направлен на исследование факторов, влияющих на ценообразование на рынке недвижимости в Санкт-Петербурге.\nВ ходе проекта будут выявлены ключевые параметры, которые определяют стоимость квартир.\nПолученные знания будут использованы для создания системы, которая будет отслеживать аномалии и предупреждать о возможных случаях мошенничества.\nЦель:\nВыявить ключевые параметры, определяющие стоимость квартир, и разработать рекомендации для создания системы мониторинга,\nкоторая поможет выявлять аномалии в ценах и предупреждать о мошенничестве на рынке недвижимости.\nИсточники данных:\nДанные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктах за несколько лет.\nУсловия проведения анализа данных:\nДля анализ будут использоваться данные с 27 ноября 2014 по 3 мая 2019 года\nГлавные выводы:\n- В среднем объявление находится в продаже 180 дней.\n- Сильная положительная корреляция между жилой площадью и общей площадью\n- Сильная положительная корреляция между числом комнат и общей площадью\n- Сильная положительная корреляция между числом комнат и жилой площадью\n- Сильная отрицательная корреляция между отношением площади кухни к общей площади и отношением жилой площади к общей площади\n- Общая площадь является самым значимым признаком для предсказания цены квартиры. Число дней экспозиции находится на втором месте.\n- Можно заметить, что чем ближе к центру или парку, тем дороже стоит квартира.\n- Чем больше число комнат, тем больше общая площадь.\n- Чем больше число комнат, тем больше жилая площадь.\n- В воскресенье и субботу меньше всего публикаций\n- Есть тренд на увеличение количества фотографий по годам.\n- В премиуме среднее количество комнат больше на всех этажах\n- У премиум площадь квартир больше на всех этажах\n- В центре медианная стоимость квартир выше\n- В центре медианная площадь квартир больше\n- В центре медианное количество комнат больше\n- В центре медианная высота потолков выше.\n- В центре медианное количество дней экспозиции больше.\n- Среднее и медиана в центре для цены выше почти в 2 раза, чем во всем датафрейме.\n- Общая площадь в центре больше, чем во всем датафрейме.\n- Высота потолков в центре больше, чем во всем датафрейме\n- В центре меньше балконов, чем во всем датафрейме.\n- В центре меньше эконома и больше премиум квартир.\n- Санкт–Петербург, Пушкин и деревня Кудрово имеют самую большую цену квадратного метра.\nАномалии и особенности в данных:\n- Минимальное значение цены 12 190 является аномальным.\n- В высоте потолков есть пропуски (39 процентов)\n- В высоте потолков много выбросов. Есть значение 100.\n- В количестве этажей есть пропуски (меньше 1 процента)\n- В жилой площади 8 процентов пропусков.\n- В площади кухни 10 процентов пропусков.\n- В числе балконов 49 процентов пропусков. Скорее всего пропуски это отсутствие балкона.\n- В расстоянии до ближайшего аэропорта 23 процента пропусков.\n- В расстоянии до центр города 23 процента пропусков.\n- В колонке с количеством парков рядом 23 процента пропусков.\n- В колонке с расстоянием до ближайшего парка 66 процентов пропусков.\n- В колонке с количеством прудов 23 процента пропусков, скорее всего это отсутствие парков.\n- В колонке с расстоянием до ближайшего пруда 62 процента пропусков.\n- В колонке с количеством дней экспозиции 13 процентов пропусков.\n- В колонке с признаком является ли квартира апартаментом 88 процентов пропусков. Скорее всего эти квартиры не являются апартаментами.\n- В колонке с названием населенного пункта 49 пропущенных значений (меньше 1 процента)\n- Пропуски в колонках с количеством парков рядом, количеством прудов рядом,\n- Пропуски в количестве этажей совпадают с пропусками в признаке является ли квартира апартаментом\n- В количестве этаже пропуски зависят от признака является ли квартира студией.\nРекомендации:\n- Добавить контроль ввода слишком больших и слишком маленьких значений для цены, высоты потолка.\n- Добавить контроль ввода для количества комнат, чтобы исключить ввод нулевых значений.\n- Выяснить почему пропуски в колонках с количеством парков рядом, количеством прудов рядом,\nрасстоянием до центра, расстоянием до аэропорта в одних и тех же строках."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#загрузка-библиотек",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#загрузка-библиотек",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Загрузка библиотек",
    "text": "Загрузка библиотек\n\n\nShow the code\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore\npd.set_option('display.max_columns', None)"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#описание-и-изучение-данных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#описание-и-изучение-данных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "1. Описание и изучение данных",
    "text": "1. Описание и изучение данных\n\n1.1 Описание данных\nПо каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных.\nНапример, расстояние до центра, аэропорта, ближайшего парка и водоёма.\n\nairports_nearest - расстояние до ближайшего аэропорта в метрах (м)\nbalcony - число балконов\nceiling_height - высота потолков (м)\ncityCenters_nearest - расстояние до центра города (м)\ndays_exposition - сколько дней было размещено объявление (от публикации до снятия)\nfirst_day_exposition - дата публикации\nfloor - этаж\nfloors_total - всего этажей в доме\nis_apartment - апартаменты (булев тип)\nkitchen_area - площадь кухни в квадратных метрах (м²)\nlast_price - цена на момент снятия с публикации\nliving_area - жилая площадь в квадратных метрах(м²)\nlocality_name - название населённого пункта\nopen_plan - свободная планировка (булев тип)\nparks_around3000 - число парков в радиусе 3 км\nparks_nearest - расстояние до ближайшего парка (м)\nponds_around3000 - число водоёмов в радиусе 3 км\nponds_nearest - расстояние до ближайшего водоёма (м)\nrooms - число комнат\nstudio - квартира-студия (булев тип)\ntotal_area - площадь квартиры в квадратных метрах (м²)\ntotal_images - число фотографий квартиры в объявлении\n\n\n\n1.2 Изучение данных\n\n1.2.1 Изучение переменных\nОставим тип float, так как у нас пропуски в данных и мы не можем преобразовать нужные столбцы в int\n\n\nShow the code\ndtype = {'is_apartment': 'category', 'studio': 'category', 'open_plan': 'category'}\ndf = pd.read_csv('https://code.s3.yandex.net/datasets/real_estate_data.csv', dtype=dtype, sep='\\t'\n                , parse_dates=['first_day_exposition'], date_format='%Y-%m-%dT%H:%M:%S')\ndf.rename(columns={'cityCenters_nearest': 'city_centers_nearest'}, inplace=True)\ndf.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n6029\n7\n4200000.0\n42.00\n2017-12-05\n2\n2.58\n5.0\n28.5\n5\nNaN\nFalse\nFalse\n5.00\nNaN\nСанкт-Петербург\n36416.0\n9534.0\n2.0\n446.0\n3.0\n459.0\n18.0\n\n\n21836\n7\n3950000.0\n45.00\n2015-06-10\n2\nNaN\n9.0\n28.0\n7\nNaN\nFalse\nFalse\n7.00\n0.0\nСанкт-Петербург\n27880.0\n12138.0\n1.0\n638.0\n1.0\n593.0\n437.0\n\n\n5698\n7\n450000.0\n42.00\n2017-07-31\n2\nNaN\n1.0\n23.0\n1\nNaN\nFalse\nFalse\n5.80\nNaN\nгородской посёлок Будогощь\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n233.0\n\n\n9402\n11\n4900000.0\n55.00\n2017-06-19\n2\nNaN\n14.0\n32.0\n14\nNaN\nFalse\nFalse\n8.50\n2.0\nСанкт-Петербург\n39931.0\n12834.0\n0.0\nNaN\n0.0\nNaN\n15.0\n\n\n2519\n6\n3511000.0\n39.41\n2018-08-07\n1\n2.65\n27.0\nNaN\n12\nNaN\nFalse\nFalse\n11.28\n1.0\nпосёлок Мурино\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n60.0\n\n\n\n\n\n\n\nИзучим каждую колонку отдельно\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df)\nnext(gen)\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n23 699\n22\n5\n---\n---\n\n\n\n\n\n\n\n\nНаблюдения:\n\nПолных дубликатов в датафрейме нет\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 2: first_day_exposition\n\n\n\n\n\nFirst date\n2014-11-27 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2019-05-03 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n23 699 (100%)\n\nDistinct\n1 491 (6%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n22 208 (94%)\n\nDays missing\n8%\n\n\n\n\n\n\n\n\n\n        \n        \n\n\nНаблюдения:\n\nВ колонке с датой пропущенных значений нет.\nНет пропущенных годов и месяцев.\n8 процентов дней пропущено\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 3: total_images\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n50\n\nAvg\n9.86\n\n10 (8%)\n\n\nMissing\n---\n\n95%\n20\n\nMode\n10\n\n9 (7%)\n\n\nDistinct\n38 (&lt;1%)\n\n75%\n14\n\nRange\n50\n\n20 (7%)\n\n\nDuplicates\n23 661 (99.8%)\n\nMedian\n9\n\niQR\n8\n\n8 (7%)\n\n\nZeros\n1 059 (4%)\n\n25%\n6\n\nstd\n5.68\n\n7 (6%)\n\n\nNegative\n---\n\n5%\n1\n\nkurt\n-0.34\n\n6 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.26\n\n11 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с количеством фотографий пропусков нет\n4 процента записей с нулями, это нормально, поскольку у части объявлений нет изображений.\nМаксимальное количество фотографий 50. Это многовато, нужно будет это проверить.\nМедианное значение 9, похоже на правду.\n7 процентов записей имеют 20 фотографий.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 4: last_price\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n763 000 000\n\nAvg\n6 541 548.77\n\n4 500 000 (1%)\n\n\nMissing\n---\n\n95%\n15 300 000\n\nMode\n4 500 000\n\n3 500 000 (1%)\n\n\nDistinct\n2 978 (13%)\n\n75%\n6 800 000\n\nRange\n762 987 810\n\n4 300 000 (1%)\n\n\nDuplicates\n20 721 (87%)\n\nMedian\n4 650 000\n\niQR\n3 400 000\n\n4 000 000 (1%)\n\n\nZeros\n---\n\n25%\n3 400 000\n\nstd\n10 887 013.27\n\n4 200 000 (1%)\n\n\nNegative\n---\n\n5%\n1 870 000\n\nkurt\n1277.68\n\n3 600 000 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12 190\n\nskew\n25.80\n\n3 300 000 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ цене есть выбросы.\nМинимальное значение цены 12 190 и максимальное значение 763 млн выглядят подозрительно.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 5: total_area\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n900\n\nAvg\n60.35\n\n45 (2%)\n\n\nMissing\n---\n\n95%\n116\n\nMode\n45\n\n42 (2%)\n\n\nDistinct\n2 182 (9%)\n\n75%\n69.9\n\nRange\n888\n\n60 (1%)\n\n\nDuplicates\n21 517 (91%)\n\nMedian\n52\n\niQR\n29.9\n\n31 (1%)\n\n\nZeros\n---\n\n25%\n40\n\nstd\n35.65\n\n44 (1%)\n\n\nNegative\n---\n\n5%\n31\n\nkurt\n47.52\n\n40 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12\n\nskew\n4.77\n\n43 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nМаксимальная площадь в 900 квадратов.\nТакже нужно проверить площадь 12 квадратов\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 6: rooms\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n19\n\nAvg\n2.07\n\n1 (34%)\n\n\nMissing\n---\n\n95%\n4\n\nMode\n1\n\n2 (34%)\n\n\nDistinct\n17 (&lt;1%)\n\n75%\n3\n\nRange\n19\n\n3 (25%)\n\n\nDuplicates\n23 682 (99.9%)\n\nMedian\n2\n\niQR\n2\n\n4 (5%)\n\n\nZeros\n197 (1%)\n\n25%\n1\n\nstd\n1.08\n\n5 (1%)\n\n\nNegative\n---\n\n5%\n1\n\nkurt\n8.69\n\n0 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.52\n\n6 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nЕсть квартиры с 0 комнат, возможно так обозначили студии.\nМаксимальное количество комнат 19 нужно изучить.\nТреть квартир с 1 комнатой и треть квартир с двумя комнатами. Четверть с 3 комнатами.\nКвартир с 4 и более команд около 6 процентов.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 7: ceiling_height\n\n\n\n\n\nValues\n14 504 (61%)\n\nMax\n100\n\nAvg\n2.77\n\n2.5 (24%)\n\n\nMissing\n9 195 (39%)\n\n95%\n3.3\n\nMode\n2.5\n\n2.6 (11%)\n\n\nDistinct\n183 (1%)\n\n75%\n2.8\n\nRange\n99\n\n2.7 (11%)\n\n\nDuplicates\n23 515 (99.2%)\n\nMedian\n2.65\n\niQR\n0.28\n\n3 (8%)\n\n\nZeros\n---\n\n25%\n2.52\n\nstd\n1.26\n\n2.8 (7%)\n\n\nNegative\n---\n\n5%\n2.5\n\nkurt\n2627.14\n\n2.55 (7%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n41.71\n\n2.75 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ высоте потолков пропуски (39 процентов)\nЯвный выброс 100 в высоте потолков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 8: floors_total\n\n\n\n\n\nValues\n23 613 (99.6%)\n\nMax\n60\n\nAvg\n10.67\n\n5 (25%)\n\n\nMissing\n86 (&lt;1%)\n\n95%\n25\n\nMode\n5\n\n9 (16%)\n\n\nDistinct\n36 (&lt;1%)\n\n75%\n16\n\nRange\n59\n\n16 (6%)\n\n\nDuplicates\n23 662 (99.8%)\n\nMedian\n9\n\niQR\n11\n\n12 (6%)\n\n\nZeros\n---\n\n25%\n5\n\nstd\n6.6\n\n4 (5%)\n\n\nNegative\n---\n\n5%\n4\n\nkurt\n0.04\n\n10 (5%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n0.94\n\n25 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ количестве этажей есть пропуски (меньше 1 процента)\nМаксимальное количество этаже 60 нужно проверить.\nБольше всего пятиэтажек (25 процентов)\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 9: living_area\n\n\n\n\n\nValues\n21 796 (92%)\n\nMax\n409.7\n\nAvg\n34.46\n\n18 (4%)\n\n\nMissing\n1 903 (8%)\n\n95%\n69\n\nMode\n18\n\n17 (3%)\n\n\nDistinct\n1 782 (8%)\n\n75%\n42.3\n\nRange\n407.7\n\n30 (3%)\n\n\nDuplicates\n21 916 (92%)\n\nMedian\n30\n\niQR\n23.7\n\n16 (2%)\n\n\nZeros\n---\n\n25%\n18.6\n\nstd\n22.03\n\n20 (2%)\n\n\nNegative\n---\n\n5%\n15.2\n\nkurt\n31.36\n\n28 (2%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n2\n\nskew\n3.91\n\n31 (2%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ жилой площади 8 процентов пропусков.\nНужно проверить минимальную и максимальную жилую площади.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 10: floor\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n33\n\nAvg\n5.89\n\n2 (14%)\n\n\nMissing\n---\n\n95%\n16\n\nMode\n2\n\n3 (13%)\n\n\nDistinct\n33 (&lt;1%)\n\n75%\n8\n\nRange\n32\n\n1 (12%)\n\n\nDuplicates\n23 666 (99.9%)\n\nMedian\n4\n\niQR\n6\n\n4 (12%)\n\n\nZeros\n---\n\n25%\n2\n\nstd\n4.89\n\n5 (11%)\n\n\nNegative\n---\n\n5%\n1\n\nkurt\n2.33\n\n6 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n1.55\n\n7 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nБольше всего квартир с 1 по 5 этаж. Это логично, учитывая, что у нас больше всего пятиэтажек.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 11: kitchen_area\n\n\n\n\n\nValues\n21 421 (90%)\n\nMax\n112\n\nAvg\n10.57\n\n6 (6%)\n\n\nMissing\n2 278 (10%)\n\n95%\n20\n\nMode\n6\n\n10 (6%)\n\n\nDistinct\n971 (4%)\n\n75%\n12\n\nRange\n110.7\n\n8 (5%)\n\n\nDuplicates\n22 727 (96%)\n\nMedian\n9.1\n\niQR\n5\n\n9 (5%)\n\n\nZeros\n---\n\n25%\n7\n\nstd\n5.91\n\n7 (5%)\n\n\nNegative\n---\n\n5%\n5.5\n\nkurt\n33.76\n\n11 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1.3\n\nskew\n4.21\n\n12 (3%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ площади кухни 10 процентов пропусков.\n\nНужно проверить опять же максимальные и минимальные кухонные площади.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 12: balcony\n\n\n\n\n\nValues\n12 180 (51%)\n\nMax\n5\n\nAvg\n1.15\n\n1 (34%)\n\n\nMissing\n11 519 (49%)\n\n95%\n2\n\nMode\n1\n\n0 (31%)\n\n\nDistinct\n6 (&lt;1%)\n\n75%\n2\n\nRange\n5\n\n2 (30%)\n\n\nDuplicates\n23 692 (99.9%)\n\nMedian\n1\n\niQR\n2\n\n5 (2%)\n\n\nZeros\n3 758 (16%)\n\n25%\n0\n\nstd\n1.07\n\n4 (2%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n2.51\n\n3 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.24\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ числе балконов 49 процентов пропусков. Скорее всего пропуски это отсутствие балкона.\n\nТреть квартир без балконов, также по трети квартир с 1 и 2 балконами.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 13: airports_nearest\n\n\n\n\n\nValues\n18 157 (77%)\n\nMax\n84 869\n\nAvg\n28 793.67\n\n37 434 &lt;1%\n\n\nMissing\n5 542 (23%)\n\n95%\n51 340\n\nMode\n37 434\n\n21 928 &lt;1%\n\n\nDistinct\n8 275 (35%)\n\n75%\n37 273\n\nRange\n84 869\n\n44 870 &lt;1%\n\n\nDuplicates\n15 423 (65%)\n\nMedian\n26 726\n\niQR\n18 688\n\n39 946 &lt;1%\n\n\nZeros\n1 (&lt;1%)\n\n25%\n18 585\n\nstd\n12 630.88\n\n18 732 &lt;1%\n\n\nNegative\n---\n\n5%\n11 557.4\n\nkurt\n-0.29\n\n37 407 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.54\n\n39 140 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ расстоянии до ближайшего аэропорта 23 процента пропусков.\n1 нулевое значение\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 14: city_centers_nearest\n\n\n\n\n\nValues\n18 180 (77%)\n\nMax\n65 968\n\nAvg\n14 191.28\n\n8 460 &lt;1%\n\n\nMissing\n5 519 (23%)\n\n95%\n31 671.6\n\nMode\n8 460\n\n20 802 &lt;1%\n\n\nDistinct\n7 642 (32%)\n\n75%\n16 293\n\nRange\n65 787\n\n10 720 &lt;1%\n\n\nDuplicates\n16 056 (68%)\n\nMedian\n13 098.5\n\niQR\n7 055\n\n20 444 &lt;1%\n\n\nZeros\n---\n\n25%\n9 238\n\nstd\n8 608.39\n\n8 434 &lt;1%\n\n\nNegative\n---\n\n5%\n3 541\n\nkurt\n4.36\n\n8 370 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n181\n\nskew\n1.67\n\n10 364 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ расстоянии до центр города 23 процента пропусков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 15: parks_around3000\n\n\n\n\n\nValues\n18 181 (77%)\n\nMax\n3\n\nAvg\n0.61\n\n0 (56%)\n\n\nMissing\n5 518 (23%)\n\n95%\n2\n\nMode\n0\n\n1 (31%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n1\n\nRange\n3\n\n2 (10%)\n\n\nDuplicates\n23 694 (99.9%)\n\nMedian\n0\n\niQR\n1\n\n3 (4%)\n\n\nZeros\n10 106 (43%)\n\n25%\n0\n\nstd\n0.8\n\n\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n0.87\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.23\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с количеством парков рядом 23 процента пропусков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 16: parks_nearest\n\n\n\n\n\nValues\n8 079 (34%)\n\nMax\n3 190\n\nAvg\n490.8\n\n441 &lt;1%\n\n\nMissing\n15 620 (66%)\n\n95%\n968\n\nMode\n441\n\n173 &lt;1%\n\n\nDistinct\n995 (4%)\n\n75%\n612\n\nRange\n3 189\n\n392 &lt;1%\n\n\nDuplicates\n22 703 (96%)\n\nMedian\n455\n\niQR\n324\n\n456 &lt;1%\n\n\nZeros\n---\n\n25%\n288\n\nstd\n342.32\n\n471 &lt;1%\n\n\nNegative\n---\n\n5%\n95.9\n\nkurt\n12.22\n\n2 102 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.72\n\n541 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с расстоянием до ближайшего парка 66 процентов пропусков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 17: ponds_around3000\n\n\n\n\n\nValues\n18 181 (77%)\n\nMax\n3\n\nAvg\n0.77\n\n0 (50%)\n\n\nMissing\n5 518 (23%)\n\n95%\n3\n\nMode\n0\n\n1 (31%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n1\n\nRange\n3\n\n2 (10%)\n\n\nDuplicates\n23 694 (99.9%)\n\nMedian\n1\n\niQR\n1\n\n3 (8%)\n\n\nZeros\n9 071 (38%)\n\n25%\n0\n\nstd\n0.94\n\n\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n0.17\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.07\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с количеством прудов 23 процента пропусков, скорее всего это отсутствие парков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 18: ponds_nearest\n\n\n\n\n\nValues\n9 110 (38%)\n\nMax\n1 344\n\nAvg\n517.98\n\n427 &lt;1%\n\n\nMissing\n14 589 (62%)\n\n95%\n976.55\n\nMode\n427\n\n454 &lt;1%\n\n\nDistinct\n1 096 (5%)\n\n75%\n729\n\nRange\n1 331\n\n153 &lt;1%\n\n\nDuplicates\n22 602 (95%)\n\nMedian\n502\n\niQR\n435\n\n433 &lt;1%\n\n\nZeros\n---\n\n25%\n294\n\nstd\n277.72\n\n474 &lt;1%\n\n\nNegative\n---\n\n5%\n93\n\nkurt\n-0.73\n\n564 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n13\n\nskew\n0.22\n\n303 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с расстоянием до ближайшего пруда 62 процента пропусков.\n\n  Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 19: days_exposition\n\n\n\n\n\nValues\n20 518 (87%)\n\nMax\n1 580\n\nAvg\n180.89\n\n45.0 (4%)\n\n\nMissing\n3 181 (13%)\n\n95%\n647\n\nMode\n45.0\n\n60 (3%)\n\n\nDistinct\n1 141 (5%)\n\n75%\n232\n\nRange\n1 579\n\n7 (1%)\n\n\nDuplicates\n22 557 (95%)\n\nMedian\n95\n\niQR\n187\n\n30 (1%)\n\n\nZeros\n---\n\n25%\n45.0\n\nstd\n219.73\n\n90.0 &lt;1%\n\n\nNegative\n---\n\n5%\n9\n\nkurt\n6.28\n\n4 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.31\n\n3.0 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ среднем объявление находится в продаже 180 дней, но из за выбросов оно не совсем точно описывает ситуацию.\nЛучше использовать медиану. Она составляет 95 дней.\nЧаще всего объявления находятся в продаже 45 дней.\nВ колонке с количеством дней экспозиции 13 процентов пропусков.\nМаксимальное значение в 1580 дней похоже на выброс.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 20: is_apartment\n\n\n\n\n\nValues\n2 775 (12%)\n\nFalse (98%)\n\n\nMissing\n20 924 (88%)\n\nTrue (2%)\n\n\nDistinct\n2 (&lt;1%)\n\n\n\n\nDuplicated origin\n23 696 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с признаком является ли квартира апартаментом 88 процентов пропусков. Скорее всего эти квартиры не являются апартаментами.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 21: studio\n\n\n\n\n\nValues\n23 699 (100%)\n\nFalse (99%)\n\n\nMissing\n---\n\nTrue &lt;1%\n\n\nDistinct\n2 (&lt;1%)\n\n\n\n\nDuplicated origin\n23 697 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nСтудий меньше 1 процента.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 22: open_plan\n\n\n\n\n\nValues\n23 699 (100%)\n\nFalse (100%)\n\n\nMissing\n---\n\nTrue &lt;1%\n\n\nDistinct\n2 (&lt;1%)\n\n\n\n\nDuplicated origin\n23 697 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nПочти все квартиры с открытой планировкой.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 23: locality_name\n\n\n\n\n\nValues\n23 650 (99.8%)\n\nСанкт-Петербург (66%)\n\n\nMissing\n49 (&lt;1%)\n\nпосёлок Мурино (2%)\n\n\nDistinct\n364 (2%)\n\nпосёлок Шушары (2%)\n\n\nDuplicated origin\n23 334 (98%)\n\nВсеволожск (2%)\n\n\nDupl (modify - origin)\n---\n\nПушкин (2%)\n\n\nEmpty\n---\n\nКолпино (1%)\n\n\nRAM (Mb)\n2\n\nпосёлок Парголово (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с названием населенного пункта 49 пропущенных значений (меньше 1 процента)\n\n\n\n1.2.2 Изучение дубликатов\nПосмотрим на дубли во всем датафрейме\n\n\nShow the code\npagri_data_tools.check_duplicated(df)\n\n\n'no duplicates'\n\n\nПолных дубликатов у нас нет.\nПосмотрим сколько у нас дублей в каждой колонке\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df)\n\n\n\n\n\n\n\nTable 24: Duplicates\n\n\n\n\n\ntotal_images\n23661 (99.84%)\n\n\nlast_price\n20721 (87.43%)\n\n\ntotal_area\n21517 (90.79%)\n\n\nfirst_day_exposition\n22208 (93.71%)\n\n\nrooms\n23682 (99.93%)\n\n\nceiling_height\n23515 (99.22%)\n\n\nfloors_total\n23662 (99.84%)\n\n\nliving_area\n21916 (92.48%)\n\n\nfloor\n23666 (99.86%)\n\n\nis_apartment\n23696 (99.99%)\n\n\nstudio\n23697 (99.99%)\n\n\nopen_plan\n23697 (99.99%)\n\n\nkitchen_area\n22727 (95.90%)\n\n\nbalcony\n23692 (99.97%)\n\n\nlocality_name\n23334 (98.46%)\n\n\nairports_nearest\n15423 (65.08%)\n\n\ncity_centers_nearest\n16056 (67.75%)\n\n\nparks_around3000\n23694 (99.98%)\n\n\nparks_nearest\n22703 (95.80%)\n\n\nponds_around3000\n23694 (99.98%)\n\n\nponds_nearest\n22602 (95.37%)\n\n\ndays_exposition\n22557 (95.18%)\n\n\n\n\n\n\n\n\nУ нас нет столбцов, в которых данные должны быть уникальны, поэтому проверять на дубли нечего.\n\n\n1.2.3 Изучение пропусков\nПосмотрим на столбцы, в которых есть пропуски.\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df)\n\n\n\n\n\n\n\nTable 25: Missings\n\n\n\n\n\nceiling_height\n9195 (38.80%)\n\n\nfloors_total\n86 (0.36%)\n\n\nliving_area\n1903 (8.03%)\n\n\nis_apartment\n20924 (88.29%)\n\n\nkitchen_area\n2278 (9.61%)\n\n\nbalcony\n11519 (48.61%)\n\n\nlocality_name\n49 (0.21%)\n\n\nairports_nearest\n5542 (23.38%)\n\n\ncity_centers_nearest\n5519 (23.29%)\n\n\nparks_around3000\n5518 (23.28%)\n\n\nparks_nearest\n15620 (65.91%)\n\n\nponds_around3000\n5518 (23.28%)\n\n\nponds_nearest\n14589 (61.56%)\n\n\ndays_exposition\n3181 (13.42%)\n\n\n\n\n\n\n\n\nУ нас есть пропуски в площадях. Посмотрим как они распределены.\nПосмотрим есть ли пропуски сразу во всех площадях.\n\n\nShow the code\ndf_na_in_both_columns = pagri_data_tools.check_na_in_both_columns(df, ['total_area', 'living_area', 'kitchen_area'])\ndf_na_in_both_columns.head()\n\n\n0 (0.00%) rows with missings simultaneously in ['total_area', 'living_area', 'kitchen_area']\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n\n\n\n\n\nПропусков одновременно во всех столбцах с площадями нет.\nПосмотрим на строки датафрейма, где пропуски во всех площадях.\n\n\nShow the code\nseries_missed['living_area'][['total_area', 'living_area', 'kitchen_area']].sample(10)\n\n\n\n\n\n\n\n\n\ntotal_area\nliving_area\nkitchen_area\n\n\n\n\n22379\n118.0\nNaN\nNaN\n\n\n20294\n44.6\nNaN\nNaN\n\n\n7768\n31.0\nNaN\nNaN\n\n\n16551\n39.0\nNaN\nNaN\n\n\n20332\n62.0\nNaN\nNaN\n\n\n30\n32.8\nNaN\nNaN\n\n\n9103\n99.1\nNaN\nNaN\n\n\n15716\n71.0\nNaN\n14.0\n\n\n18398\n45.0\nNaN\nNaN\n\n\n2385\n39.0\nNaN\nNaN\n\n\n\n\n\n\n\nУ нас нет пропусков в общей площади. Поэтому мы сможем заменить значения пропусков в площади кухни и жилой площади.\nМожно заметить, что количество пропусков в колонке с количеством парков рядом, количеством прудов рядом совпадает, расстоянием до центра, расстоянием до аэропорта примерно равны. Выдвигаем гипотезу, что пропуски в одних и тех же строках в обоих столбцах.\nПосмотрим сколько пропусков в обоих колонках вместе\n Вернуться к выводам\n\n\nShow the code\ndf_na_in_both_columns = pagri_data_tools.check_na_in_both_columns(df, ['airports_nearest', 'city_centers_nearest', 'parks_around3000', 'ponds_around3000'])\ndf_na_in_both_columns.head()\n\n\n5518 (23.28%) rows with missings simultaneously in ['airports_nearest', 'city_centers_nearest', 'parks_around3000', 'ponds_around3000']\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n5\n10\n2890000.0\n30.40\n2018-09-10\n1\nNaN\n12.0\n14.40\n5\nNaN\nFalse\nFalse\n9.10\nNaN\nгородской посёлок Янино-1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n55.0\n\n\n8\n20\n2900000.0\n33.16\n2018-05-23\n1\nNaN\n27.0\n15.43\n26\nNaN\nFalse\nFalse\n8.81\nNaN\nпосёлок Мурино\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n189.0\n\n\n12\n10\n3890000.0\n54.00\n2016-06-30\n2\nNaN\n5.0\n30.00\n5\nNaN\nFalse\nFalse\n9.00\n0.0\nСертолово\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n90.0\n\n\n22\n20\n5000000.0\n58.00\n2017-04-24\n2\n2.75\n25.0\n30.00\n15\nNaN\nFalse\nFalse\n11.00\n2.0\nдеревня Кудрово\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n60.0\n\n\n30\n12\n2200000.0\n32.80\n2018-02-19\n1\nNaN\n9.0\nNaN\n2\nNaN\nFalse\nFalse\nNaN\nNaN\nКоммунар\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n63.0\n\n\n\n\n\n\n\nГипотеза подтвердилась: - Пропуски в одних и тех же строках в колонках с количеством парков рядом, количеством прудов рядом совпадает, расстоянием до центра, расстоянием до аэропорта примерно равны\nПосмотрим как распределены пропуски по категориям в строках, где пропуски одновременно в этих столбцах.\n\n\nShow the code\ngen = pagri_data_tools.analyze_filtered_df_by_category(df, df_na_in_both_columns, 'df with na')\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 26: Value in \"df with na\" by category \"is_apartment\"\n\n\n\n\n\nis_apartment\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n2725\n621\n22.8%\n11.3%\n11.5%\n-0.2%\n\n\nTrue\n50\n7\n14.0%\n0.1%\n0.2%\n-0.1%\n\n\nnan\n20924\n4890\n23.4%\n88.6%\n88.3%\n0.3%\n\n\n\n\n\n\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 27: Value in \"df with na\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n5461\n23.2%\n99.0%\n99.4%\n-0.4%\n\n\nTrue\n149\n57\n38.3%\n1.0%\n0.6%\n0.4%\n\n\n\n\n\n\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 28: Value in \"df with na\" by category \"open_plan\"\n\n\n\n\n\nopen_plan\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23632\n5488\n23.2%\n99.5%\n99.7%\n-0.3%\n\n\nTrue\n67\n30\n44.8%\n0.5%\n0.3%\n0.3%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nЯвных зависимостей от категорий не обнаружено\n\nИзучим пропуски по категориям\n Вернуться к выводам\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"floors_total\", \"is_apartment\")\n\n\n\n\n\n\n\nTable 29: Share in \"floors_total\" by category \"is_apartment\"\n\n\n\n\n\nis_apartment\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n2725\n0\n0.0%\n0.0%\n11.5%\n-11.5%\n\n\nTrue\n50\n0\n0.0%\n0.0%\n0.2%\n-0.2%\n\n\nnan\n20924\n86\n0.4%\n100.0%\n88.3%\n11.7%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nПропуски в количестве этажей совпадают с пропусками в признаке является ли квартира апартаментом.\n\n Вернуться к выводам\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"floors_total\", \"studio\")\n\n\n\n\n\n\n\nTable 30: Share in \"floors_total\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n83\n0.4%\n96.5%\n99.4%\n-2.9%\n\n\nTrue\n149\n3\n2.0%\n3.5%\n0.6%\n2.9%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ количестве этаже пропуски зависят от признака является ли квартира студией.\n\nПочти все пропуски в квартирах, которые не являются студиями, даже учитывая общее количество пропорций.\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"kitchen_area\", \"studio\")\n\n\n\n\n\n\n\nTable 31: Share in \"kitchen_area\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n2129\n9.0%\n93.5%\n99.4%\n-5.9%\n\n\nTrue\n149\n149\n100.0%\n6.5%\n0.6%\n5.9%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ студиях в поле площадь кухни одни пропуски.\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"kitchen_area\", \"open_plan\")\n\n\n\n\n\n\n\nTable 32: Share in \"kitchen_area\" by category \"open_plan\"\n\n\n\n\n\nopen_plan\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23632\n2211\n9.4%\n97.1%\n99.7%\n-2.7%\n\n\nTrue\n67\n67\n100.0%\n2.9%\n0.3%\n2.7%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ студиях в поле площадь кухни одни пропуски.\n\n\n\n1.2.4 Изучение выбросов\nСначала изучим потенциальные выбросы, которые мы выявили при изучении колонок.\nИзучим выброс с ценой 12190.0\n\n\nShow the code\ndf[df.last_price == 12190]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n8793\n7\n12190.0\n109.0\n2019-03-20\n2\n2.75\n25.0\n32.0\n25\nNaN\nFalse\nFalse\n40.5\nNaN\nСанкт-Петербург\n36421.0\n9176.0\n1.0\n805.0\n0.0\nNaN\n8.0\n\n\n\n\n\n\n\nНаблюдения:\n- Ничего особенно не обнаружено.\n- Скорее всего ошиблись не поставили нули.\nПосмотрим на выбросы с площадью квартиры.\n\n\nShow the code\ndf[df.total_area &gt; 500]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n3117\n19\n140000000.0\n631.0\n2019-03-30\n7\nNaN\n5.0\nNaN\n5\nNaN\nFalse\nFalse\n60.0\nNaN\nСанкт-Петербург\n25707.0\n4972.0\n0.0\nNaN\n2.0\n210.0\nNaN\n\n\n4237\n1\n50000000.0\n517.0\n2017-10-14\n7\nNaN\n4.0\n332.0\n3\nNaN\nFalse\nFalse\n22.0\nNaN\nСанкт-Петербург\n22835.0\n1847.0\n2.0\n477.0\n2.0\n540.0\nNaN\n\n\n5358\n20\n65000000.0\n590.0\n2019-02-14\n15\n3.50\n6.0\n409.0\n3\nNaN\nFalse\nFalse\n100.0\nNaN\nСанкт-Петербург\n24447.0\n4666.0\n1.0\n767.0\n0.0\nNaN\n14.0\n\n\n8018\n20\n84000000.0\n507.0\n2015-12-17\n5\n4.45\n7.0\n301.5\n7\nTrue\nFalse\nFalse\n45.5\n1.0\nСанкт-Петербург\nNaN\n5735.0\n2.0\n110.0\n0.0\nNaN\n1078.0\n\n\n12859\n20\n140000000.0\n631.2\n2019-04-09\n7\n3.90\n4.0\n322.3\n4\nNaN\nFalse\nFalse\n19.5\n1.0\nСанкт-Петербург\n25707.0\n4972.0\n0.0\nNaN\n2.0\n210.0\nNaN\n\n\n15651\n20\n300000000.0\n618.0\n2017-12-18\n7\n3.40\n7.0\n258.0\n5\nNaN\nFalse\nFalse\n70.0\nNaN\nСанкт-Петербург\n32440.0\n5297.0\n0.0\nNaN\n2.0\n198.0\n111.0\n\n\n19540\n8\n420000000.0\n900.0\n2017-12-06\n12\n2.80\n25.0\n409.7\n25\nNaN\nFalse\nFalse\n112.0\nNaN\nСанкт-Петербург\n30706.0\n7877.0\n0.0\nNaN\n2.0\n318.0\n106.0\n\n\n\n\n\n\n\nНаблюдения:\n- Не похоже на выбросы. Цена большая, количество комнат большое. Скорее всего просто большие дорогие квартиры.\n\n\nShow the code\ndf[df.total_area &lt; 15]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n17961\n3\n1400000.0\n13.0\n2017-12-03\n1\n2.60\n9.0\nNaN\n1\nNaN\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n14350.0\n15945.0\n0.0\nNaN\n1.0\n185.0\n410.0\n\n\n19546\n3\n1850000.0\n13.0\n2019-03-11\n1\n3.40\n5.0\nNaN\n2\nFalse\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n24915.0\n5483.0\n1.0\n644.0\n0.0\nNaN\n24.0\n\n\n19558\n2\n1686000.0\n13.2\n2018-12-17\n1\nNaN\n5.0\nNaN\n1\nNaN\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n19891.0\n4165.0\n1.0\n361.0\n1.0\n155.0\n19.0\n\n\n19642\n5\n1190000.0\n14.0\n2018-07-29\n1\nNaN\n5.0\n11.0\n1\nNaN\nFalse\nFalse\n2.0\nNaN\nСанкт-Петербург\n9898.0\n11122.0\n0.0\nNaN\n0.0\nNaN\n4.0\n\n\n19807\n0\n3800000.0\n13.0\n2018-07-04\n1\nNaN\n5.0\n10.0\n3\nNaN\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n21302.0\n1242.0\n1.0\n592.0\n3.0\n27.0\n9.0\n\n\n19904\n4\n2400000.0\n12.0\n2017-07-19\n1\n2.55\n5.0\n10.0\n2\nNaN\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n21314.0\n964.0\n1.0\n886.0\n2.0\n45.0\n200.0\n\n\n\n\n\n\n\nНаблюдения:\n- Не похоже на выбросы. Скорее всего это мелко нарезанные студии. Тем более этаж низкий.\nИзучим выброс в высоте потолка.\n\n\nShow the code\ndf[df.ceiling_height &gt; 10].ceiling_height.value_counts()\n\n\nceiling_height\n27.0     8\n25.0     7\n32.0     2\n24.0     1\n26.0     1\n14.0     1\n20.0     1\n22.6     1\n27.5     1\n10.3     1\n100.0    1\nName: count, dtype: int64\n\n\n\n\nShow the code\ndf[df.ceiling_height &gt; 30]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n3148\n14\n2900000.0\n75.0\n2018-11-12\n3\n32.0\n3.0\n53.0\n2\nNaN\nFalse\nFalse\n8.0\nNaN\nВолхов\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n22336\n19\n9999000.0\n92.4\n2019-04-05\n2\n32.0\n6.0\n55.5\n5\nFalse\nFalse\nFalse\n16.5\n4.0\nСанкт-Петербург\n18838.0\n3506.0\n0.0\nNaN\n3.0\n511.0\nNaN\n\n\n22869\n0\n15000000.0\n25.0\n2018-07-25\n1\n100.0\n5.0\n14.0\n5\nTrue\nFalse\nFalse\n11.0\n5.0\nСанкт-Петербург\n34963.0\n8283.0\n1.0\n223.0\n3.0\n30.0\n19.0\n\n\n\n\n\n\n\nНаблюдения:\n- Значения от 20 до 32 скорее всего поставили не там запятую.\n- А вот значения 10 и 100 странные.\nИзучим выбросы в количестве этажей\n\n\nShow the code\ndf[df.floors_total &gt; 35]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n397\n15\n5990000.0\n54.0\n2018-03-22\n2\nNaN\n36.0\n21.4\n28\nNaN\nFalse\nFalse\n18.70\n1.0\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\n11.0\n\n\n2253\n12\n3800000.0\n45.5\n2018-06-28\n2\n2.88\n60.0\n27.4\n4\nNaN\nFalse\nFalse\n7.40\nNaN\nКронштадт\n67763.0\n49488.0\n2.0\n342.0\n3.0\n614.0\n166.0\n\n\n5807\n17\n8150000.0\n80.0\n2019-01-09\n2\n27.00\n36.0\n41.0\n13\nNaN\nFalse\nFalse\n12.00\n5.0\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\n38.0\n\n\n11079\n16\n9200000.0\n75.0\n2019-02-22\n2\n2.70\n36.0\n40.0\n29\nNaN\nFalse\nFalse\n12.00\n2.0\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\nNaN\n\n\n16731\n9\n3978000.0\n40.0\n2018-09-24\n1\n2.65\n52.0\n10.5\n18\nNaN\nFalse\nFalse\n14.00\nNaN\nСанкт-Петербург\n20728.0\n12978.0\n1.0\n793.0\n0.0\nNaN\n45.0\n\n\n16934\n5\n4100000.0\n40.0\n2017-10-17\n1\n1.75\n37.0\n17.4\n5\nNaN\nFalse\nFalse\n8.34\nNaN\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\n71.0\n\n\n\n\n\n\n\nНаблюдения:\n- Так как в Санкт-Петербург есть здания такой высоты, то нет оснований считать это выбросами.\n\n\n1.2.5 Изучение отрицательных значений\nИзучаем отрицательные значения\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df)\n\n\nThere are no negative values\n\n\nУ нас нет отрицательных значений.\n\n\n1.2.6 Изучение нулевых значений\nИзучаем нулевые значения\n\n\nShow the code\nseries_zeros = pagri_data_tools.find_columns_with_zeros_values(df)\n\n\n\n\n\n\n\nTable 33: Zeros\n\n\n\n\n\ntotal_images\n1059 (4.47%)\n\n\nrooms\n197 (0.83%)\n\n\nbalcony\n3758 (15.86%)\n\n\nairports_nearest\n1 (0.00%)\n\n\nparks_around3000\n10106 (42.64%)\n\n\nponds_around3000\n9071 (38.28%)\n\n\n\n\n\n\n\n\nВсе кроме количества комнат и расстояния до ближайшего аэропорта может быть нулями, поэтому удалим их из текущего изучения.\n\n\nShow the code\nseries_zeros = series_zeros.loc[['rooms']]\n\n\nПосмотрим отдельно на нулевое значение в расстоянии до аэропорта.\n\n\nShow the code\ndf[df.airports_nearest == 0]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n21085\n0\n7000000.0\n34.7\n2018-09-23\n1\n2.7\n9.0\n19.8\n3\nNaN\n...\n6.0\n2.0\nСанкт-Петербург\n0.0\n22801.0\n0.0\nNaN\n0.0\nNaN\n60.0\n\n\n\n\n1 rows × 22 columns\n\n\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_zeros, \"value_counts\", \"rooms\")\n\n\nValue counts in rooms (0.83%)\n\n\n\n\n\n\n\nTable 34: rooms\n\n\n\n\n\n \ncount\n\n\nrooms\n \n\n\n\n\n0\n197\n\n\n\n\n\n\n\n\nВыдвинем гипотезу, что 0 комнат у студий и однокомнатных.\nПроверим гипотезу по площади.\nПредположим, что площадь студий и однокомнатных квартир составляет не более 40 м2.\nПосмотрим на выборку из датафрейма\n\n\nShow the code\nseries_zeros['rooms'][['last_price', 'total_area', 'living_area', 'kitchen_area', 'studio', 'open_plan']].query('total_area &gt; 40')\n\n\n\n\n\n\n\n\n\nlast_price\ntotal_area\nliving_area\nkitchen_area\nstudio\nopen_plan\n\n\n\n\n3458\n7400000.0\n73.60\n50.0\nNaN\nTrue\nFalse\n\n\n7237\n2999000.0\n42.63\n25.7\nNaN\nFalse\nTrue\n\n\n10008\n5050000.0\n44.20\n32.2\nNaN\nTrue\nFalse\n\n\n13613\n8100000.0\n58.40\n33.0\nNaN\nTrue\nFalse\n\n\n15319\n5970000.0\n43.30\n28.2\nNaN\nTrue\nFalse\n\n\n16130\n5000000.0\n42.10\n30.0\nNaN\nTrue\nFalse\n\n\n19392\n71000000.0\n371.00\nNaN\nNaN\nFalse\nTrue\n\n\n20082\n16300000.0\n98.40\n60.5\nNaN\nTrue\nFalse\n\n\n21227\n8200000.0\n71.00\n68.0\nNaN\nTrue\nFalse\n\n\n\n\n\n\n\nНаблюдения:\n\nВидим, что почти все квартиры с 0 комнат имеют площадь до 40 кв.\n2 квартиры имеют открытую планировку\n\nМожно будет заменить 0 на 1.\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_zeros, \"by_category\", \"rooms\", 'studio')\n\n\n\n\n\n\n\nTable 35: Share in \"rooms\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n59\n0.3%\n29.9%\n99.4%\n-69.4%\n\n\nTrue\n149\n138\n92.6%\n70.1%\n0.6%\n69.4%\n\n\n\n\n\n\n\n\nНаблюдения:\n- Большая часть квартир с нулем комнат являются студиями.\n\n\n\n1.3 Промежуточный вывод\n\n8 процентов дней пропущено\nМинимальное значение цены 12 190 и максимальное значение 763 млн выглядят подозрительно.\nМаксимальная площадь в 900 квадратов.\nВ высоте потолков пропуски (39 процентов)\nВ высоте потолков много выбросов. Есть значение 100.\nВ количестве этажей есть пропуски (меньше 1 процента)\nБольше всего пятиэтажек (25 процентов)\nВ жилой площади 8 процентов пропусков.\nВ площади кухни 10 процентов пропусков.\n\nВ числе балконов 49 процентов пропусков. Скорее всего пропуски это отсутствие балкона.\n\nТреть квартир без балконов, также по трети квартир с 1 и 2 балконами.\nВ расстоянии до ближайшего аэропорта 23 процента пропусков.\nВ расстоянии до центр города 23 процента пропусков.\nВ колонке с количеством парков рядом 23 процента пропусков.\n\nВ колонке с расстоянием до ближайшего парка 66 процентов пропусков.\n\nВ колонке с количеством прудов 23 процента пропусков, скорее всего это отсутствие парков.\n\nВ колонке с расстоянием до ближайшего пруда 62 процента пропусков.\nВ среднем объявление находится в продаже 180 дней, но из за выбросов оно не совсем точно описывает ситуацию.\nВ колонке с количеством дней экспозиции 13 процентов пропусков.\nВ колонке с признаком является ли квартира апартаментом 88 процентов пропусков. Скорее всего эти квартиры не являются апартаментами.\n\nВ колонке с названием населенного пункта 49 пропущенных значений (меньше 1 процента)\nПропуски в одних и тех же строках в колонках с количеством парков рядом, количеством прудов рядом совпадает, расстоянием до центра, расстоянием до аэропорта примерно равны\nПропуски в количестве этажей совпадают с пропусками в признаке является ли квартира апартаментом.\nВ количестве этаже пропуски зависят от признака является ли квартира студией.\n\nПочти все пропуски в квартирах, которые не являются студиями, даже учитывая общее количество пропорций.\nВ студиях в поле площадь кухни одни пропуски."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#предобработка-данных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#предобработка-данных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "2. Предобработка данных",
    "text": "2. Предобработка данных\n\n2.1 Выбор нужных столбцов для дальнейшей работы\nСохраним исходный датафрейм в переменную df_origin, чтобы была возможность вернуться к нему\n\n\nShow the code\ndf_origin = df.copy()\n\n\n\n\n2.2 Обработка выбросов\nПосле изучения данных отрицательные значения не обнаружены, но есть колонки с нулевыми значениями, где их быть не должно.\nПосмотрим где у нас нулевые значения\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\ntotal_images\n1059 (4.5%)\n\n\nrooms\n197 (0.8%)\n\n\nbalcony\n3758 (15.9%)\n\n\nairports_nearest\n1 (0.0%)\n\n\nparks_around3000\n10106 (42.6%)\n\n\nponds_around3000\n9071 (38.3%)\n\n\n\n\n\n\n\nНам нужно обработать нули в количестве комнат и в расстоянии до аэропорта.\n\n\nShow the code\ndf[df.airports_nearest == 0]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n21085\n0\n7000000.0\n34.7\n2018-09-23\n1\n2.7\n9.0\n19.8\n3\nNaN\n...\n6.0\n2.0\nСанкт-Петербург\n0.0\n22801.0\n0.0\nNaN\n0.0\nNaN\n60.0\n\n\n\n\n1 rows × 22 columns\n\n\n\nТак как это всего одна запись и точно восстановить расстояние невозможно, то лучше удалить ее.\n\n\nShow the code\ndf.shape[0]\n\n\n23699\n\n\n\n\nShow the code\ndf = df[df.airports_nearest != 0]\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23698\n\n\nОбработаем нулевые значения в количестве комнат.\nТак как мы выяснили, что 0 комнат указано у студий и в открытой планировке, либо у квартир с площадью до 40 кв.,\nто заменим 0 на 1.\n\n\nShow the code\ntt = df.copy()\n\n\n\n\nShow the code\ntt.rooms = tt.rooms.apply(lambda x: 1 if x == 0 else x)\n\n\n\n\nShow the code\ndf.loc[:, 'rooms'] = df.rooms.apply(lambda x: 1 if x == 0 else x)\n\n\nУбедимся, что у нас не осталось нулевых и отрицательных значений где их быть не должно.\n\n\nShow the code\npagri_data_tools.check_negative_value_in_df(df)\n\n\n\n\n\n\n\n\n\nnegative\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\ntotal_images\n1058 (4.5%)\n\n\nbalcony\n3758 (15.9%)\n\n\nparks_around3000\n10105 (42.6%)\n\n\nponds_around3000\n9070 (38.3%)\n\n\n\n\n\n\n\nУ нас в цене есть одна запись со значением 12190. Скорее всего не поставили нули, но сложно определить сколько именно нулей не поставили.\nТак как это всего 1 запись, то удалим ее.\n\n\nShow the code\ndf.shape[0]\n\n\n23698\n\n\n\n\nShow the code\ndf = df[df.last_price != 12190]\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23697\n\n\nОбработаем выбросы в высоте потолков.\nБудем считать, что высота потолков больше 5 метров является маловероятным.\nПосмотрим сколько у нас записей с высотой потолка больше 5 метров.\n\n\nShow the code\npagri_data_tools.count_share(df.ceiling_height &gt; 5)\n\n\n'36 (0.2%)'\n\n\nТак как их очень мало и мы не можем обработать эти выбросы, то удалим их.\n\n\nShow the code\ndf.shape[0]\n\n\n23697\n\n\n\n\nShow the code\ndf[df.ceiling_height &gt; 5].shape[0]\n\n\n36\n\n\n\n\nShow the code\ndf = df[~(df.ceiling_height &gt; 5)]\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23661\n\n\n\n\n2.3 Обработка пропусков\nПосмотрим где у нас пропуски.\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\nceiling_height\n9195 (38.9%)\n\n\nfloors_total\n86 (0.4%)\n\n\nliving_area\n1901 (8.0%)\n\n\nis_apartment\n20899 (88.3%)\n\n\nkitchen_area\n2269 (9.6%)\n\n\nbalcony\n11507 (48.6%)\n\n\nlocality_name\n49 (0.2%)\n\n\nairports_nearest\n5532 (23.4%)\n\n\ncity_centers_nearest\n5509 (23.3%)\n\n\nparks_around3000\n5508 (23.3%)\n\n\nparks_nearest\n15598 (65.9%)\n\n\nponds_around3000\n5508 (23.3%)\n\n\nponds_nearest\n14566 (61.6%)\n\n\ndays_exposition\n3173 (13.4%)\n\n\n\n\n\n\n\nМы выяснили, что у нас пропуски в столбцах ‘airports_nearest’, ‘center’, ‘around 3000’, ‘around 3000’\nв одних и тех же строчках.\nТак как количество пропусков большое, то заменять их нельзя.\nПоэтому оставим их как есть.\nПропуски в высоте потолков мы обрабатывать не можем, так как их сильно много.\nПропуски в количестве этажей удалим, так как их мало.\n\n\nShow the code\ndf.shape[0]\n\n\n23661\n\n\n\n\nShow the code\ndf = df.dropna(subset=['floors_total'])\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23575\n\n\nПропуски в жилой площади и в площади кухни обработаем с помощью коэффициентов отношения площадей.\nПри этом рассчитывать будем с учетом количества комнат, чтобы было точнее.\n\n\nShow the code\ndf[['total_area', 'living_area', 'rooms', 'kitchen_area', 'balcony']].sample(5)\n\n\n\n\n\n\n\n\n\ntotal_area\nliving_area\nrooms\nkitchen_area\nbalcony\n\n\n\n\n12965\n59.5\n31.71\n2\n10.2\nNaN\n\n\n12325\n66.0\n42.40\n3\n10.0\n1.0\n\n\n11638\n65.5\nNaN\n3\nNaN\nNaN\n\n\n5362\n45.0\n28.00\n2\n7.2\n1.0\n\n\n9673\n44.0\nNaN\n2\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23575\n\n\n\n\nShow the code\nkitchen_ratio = df.groupby('rooms')['kitchen_area'].transform(\n    lambda x: x.median() / df.loc[x.index, 'total_area'].median() \n    if len(x) &gt;= 30 \n    else df['kitchen_area'].median() / df['total_area'].median()\n)\n\nliving_ratio = df.groupby('rooms')['living_area'].transform(\n    lambda x: x.median() / df.loc[x.index, 'total_area'].median()\n    if len(x) &gt;= 30 \n    else df['living_area'].median() / df['total_area'].median()\n)\n\ndf['kitchen_area'] = df['kitchen_area'].fillna(df['total_area'] * kitchen_ratio)\ndf['living_area'] = df['living_area'].fillna(df['total_area'] * living_ratio)\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23575\n\n\nПризнак является ли квартира апартаментом имеет много пропусков.\nОпределить является ли квартира апартаментом мы не можем, поэтому заменим на значение “не указано”.\n\n\nShow the code\ndf['is_apartment'] = df.is_apartment.astype(str).map({'True': 'да', 'False': 'нет'}).fillna(\"не указано\").astype('category')\n\n\nПропуски в названии населенного пункта мы заменить не можем, и их очень мало, поэтому удалим их.\n\n\nShow the code\ndf = df.dropna(subset=['locality_name'])\n\n\n\n\nShow the code\ndf.shape[0] \n\n\n23527\n\n\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\nceiling_height\n9084 (38.6%)\n\n\nbalcony\n11463 (48.7%)\n\n\nairports_nearest\n5514 (23.4%)\n\n\ncity_centers_nearest\n5491 (23.3%)\n\n\nparks_around3000\n5490 (23.3%)\n\n\nparks_nearest\n15513 (65.9%)\n\n\nponds_around3000\n5490 (23.3%)\n\n\nponds_nearest\n14506 (61.7%)\n\n\ndays_exposition\n3163 (13.4%)\n\n\n\n\n\n\n\nОстальные пропуски оставим как есть, чтобы не исказить данные.\n\n\n2.4 Приведение данных к удобной форме\nИзменим значения в столбцах на более удобные\n\n\nShow the code\ndf.studio = df.studio.astype(str).map({'True': 'да', 'False': 'нет'}).astype('category')\n\n\n\n\nShow the code\ndf.open_plan = df.open_plan.astype(str).map({'True': 'да', 'False': 'нет'}).astype('category')\n\n\nИзменим типы данных на более подходящие.\nУбедимся, что у нас нет дробных чисел в цене.\n\n\nShow the code\n(df.last_price != df.last_price.astype(int)).sum()\n\n\nnp.int64(0)\n\n\nПриведем цену к целому типу.\n\n\nShow the code\ndf.last_price = df.last_price.astype(int)\n\n\n\n\n2.5 Промежуточный вывод\n\nМы выяснили, что 0 комнат указано у студий, либо в открытой планировке, либо у квартир с площадью до 40 кв.,\nпоэтому нули в количестве комнат заменили на 1.\nВ цене была одна запись со значением 12190. Скорее всего не поставили нули, но сложно определить сколько именно нулей не поставили.\nТак как это всего 1 запись, то удалили ее.\nУдалили 36 записей (0.2%) с высотой потолка больше 5 метров. Так как таких записей мало, а замена их может исказить анализ.\n\nВ высоте потолка пропусков слишком много, поэтому их не стали трогать.\n\nВ количестве этажей пропуски удалили, так как определить реальный этаж невозможно, а пропусков мало.\n\nПропуски в жилой площади и в площади кухни обработали с помощью коэффициентов отношения площадей.\nПри этом расчеты провели с учетом количества комнат, чтобы было точнее.\n\nПризнак является ли квартира апартаментом имеет много пропусков.\nОпределить является ли квартира апартаментом мы не можем, поэтому заменили на значение “не указано”.\nУдалили пропуски в названии населенных пунктов, так как их мало."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#обогащение-данных-и-создание-новых-переменных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#обогащение-данных-и-создание-новых-переменных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "3. Обогащение данных и создание новых переменных",
    "text": "3. Обогащение данных и создание новых переменных\n\n3.1 Создание новых числовых переменных\nСоздадим переменную соотношение жилой и общей площади\n\n\nShow the code\ndf['living_total_ratio'] = round(df['living_area'] / df['total_area'],2)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'living_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 36: living_total_ratio\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n1\n\nAvg\n0.56\n\n0.58 (6%)\n\n\nMissing\n---\n\n95%\n0.72\n\nMode\n0.58\n\n0.62 (5%)\n\n\nDistinct\n91 (&lt;1%)\n\n75%\n0.63\n\nRange\n0.98\n\n0.48 (5%)\n\n\nDuplicates\n23 436 (99.6%)\n\nMedian\n0.57\n\niQR\n0.14\n\n0.56 (4%)\n\n\nZeros\n---\n\n25%\n0.49\n\nstd\n0.1\n\n0.55 (4%)\n\n\nNegative\n---\n\n5%\n0.4\n\nkurt\n0.32\n\n0.6 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.02\n\nskew\n-0.14\n\n0.64 (3%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим переменную отношения площади кухни к общей.\n\n\nShow the code\ndf['kitchen_total_ratio'] = round(df['kitchen_area'] / df['total_area'],2)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'kitchen_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 37: kitchen_total_ratio\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n0.79\n\nAvg\n0.19\n\n0.16 (9%)\n\n\nMissing\n---\n\n95%\n0.31\n\nMode\n0.16\n\n0.13 (7%)\n\n\nDistinct\n66 (&lt;1%)\n\n75%\n0.24\n\nRange\n0.76\n\n0.25 (7%)\n\n\nDuplicates\n23 461 (99.7%)\n\nMedian\n0.17\n\niQR\n0.11\n\n0.14 (6%)\n\n\nZeros\n---\n\n25%\n0.13\n\nstd\n0.07\n\n0.12 (6%)\n\n\nNegative\n---\n\n5%\n0.1\n\nkurt\n2.81\n\n0.15 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.03\n\nskew\n1.18\n\n0.11 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим переменную цена квадратного метра\n\n\nShow the code\ndf['price_per_sqm'] = (df['last_price'] / df['total_area']).astype(int)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'kitchen_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 38: kitchen_total_ratio\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n0.79\n\nAvg\n0.19\n\n0.16 (9%)\n\n\nMissing\n---\n\n95%\n0.31\n\nMode\n0.16\n\n0.13 (7%)\n\n\nDistinct\n66 (&lt;1%)\n\n75%\n0.24\n\nRange\n0.76\n\n0.25 (7%)\n\n\nDuplicates\n23 461 (99.7%)\n\nMedian\n0.17\n\niQR\n0.11\n\n0.14 (6%)\n\n\nZeros\n---\n\n25%\n0.13\n\nstd\n0.07\n\n0.12 (6%)\n\n\nNegative\n---\n\n5%\n0.1\n\nkurt\n2.81\n\n0.15 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.03\n\nskew\n1.18\n\n0.11 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим новую переменную - расстояние до центра километрах.\n\n\nShow the code\ndf['city_centers_nearest_km'] = round(df.city_centers_nearest / 1000)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'city_centers_nearest_km')\n\n\n\n        \n            \n\n\n\n\nTable 39: city_centers_nearest_km\n\n\n\n\n\nValues\n18 036 (77%)\n\nMax\n66\n\nAvg\n14.19\n\n12 (9%)\n\n\nMissing\n5 491 (23%)\n\n95%\n32\n\nMode\n12\n\n15 (9%)\n\n\nDistinct\n61 (&lt;1%)\n\n75%\n16\n\nRange\n66\n\n13 (8%)\n\n\nDuplicates\n23 465 (99.7%)\n\nMedian\n13\n\niQR\n7\n\n14 (7%)\n\n\nZeros\n27 (&lt;1%)\n\n25%\n9\n\nstd\n8.62\n\n16 (7%)\n\n\nNegative\n---\n\n5%\n4\n\nkurt\n4.34\n\n11 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.67\n\n5 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\n3.2 Категоризация данных\n\n\nShow the code\ndf.head(1)\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\nliving_total_ratio\nkitchen_total_ratio\nprice_per_sqm\ncity_centers_nearest_km\n\n\n\n\n0\n20\n13000000\n108.0\n2019-03-07\n3\n2.7\n16.0\n51.0\n8\nне указано\n...\n16028.0\n1.0\n482.0\n2.0\n755.0\nNaN\n0.47\n0.23\n120370\n16.0\n\n\n\n\n1 rows × 26 columns\n\n\n\nСоздадим новую категориальную переменную из этажа.\nСделаем 3 значения - первый, последний и другой\n\n\nShow the code\ndf['floor_position'] = df.apply(lambda x: 'первый' if x['floor'] == 1 else 'последний' if x['floor'] == x['floors_total'] else 'другой', axis=1).astype('category')\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'floor_position')\n\n\n\n        \n            \n\n\n\n\nTable 40: floor_position\n\n\n\n\n\nValues\n23 527 (100%)\n\nдругой (74%)\n\n\nMissing\n---\n\nпоследний (14%)\n\n\nDistinct\n3 (&lt;1%)\n\nпервый (12%)\n\n\nDuplicated origin\n23 524 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим новую категориальную переменную из цены\n\n\nShow the code\npagri_data_tools.quantiles_columns(df.last_price)\n\n\n\n\n\n\n\nTable 41: Quantiles\n\n\n\n\n\nMax\n763 000 000\n\n\n5\n1 860 000\n\n\n25\n3 400 000\n\n\n50\n4 646 000\n\n\n75\n6 790 000\n\n\n95\n15 253 200.0\n\n\nMin\n430 000\n\n\n\n\n\n\n\n\n\n\nShow the code\nlabels = ['эконом', 'комфорт', 'премиум']\nbins = [-np.inf, 4_000_000, 10_000_000, np.inf]\n\n\n\n\nShow the code\ndf['price_segment'] = pagri_data_tools.create_category_column(df.last_price, labels=labels, bins=bins).astype('category')\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'price_segment')\n\n\n\n        \n            \n\n\n\n\nTable 42: price_segment\n\n\n\n\n\nValues\n23 527 (100%)\n\nкомфорт (50%)\n\n\nMissing\n---\n\nэконом (38%)\n\n\nDistinct\n3 (&lt;1%)\n\nпремиум (11%)\n\n\nDuplicated origin\n23 524 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим переменные день недели, месяц и год публикации объявления.\n\n\nShow the code\nweekday_dict = {\n    'Monday': 'Понедельник',\n    'Tuesday': 'Вторник',\n    'Wednesday': 'Среда',\n    'Thursday': 'Четверг',\n    'Friday': 'Пятница',\n    'Saturday': 'Суббота',\n    'Sunday': 'Воскресенье'\n}\nmonth_dict = {\n    1: 'Январь',\n    2: 'Февраль',\n    3: 'Март',\n    4: 'Апрель',\n    5: 'Май',\n    6: 'Июнь',\n    7: 'Июль',\n    8: 'Август',\n    9: 'Сентябрь',\n    10: 'Октябрь',\n    11: 'Ноябрь',\n    12: 'Декабрь'\n}\n\n\n\n\nShow the code\ndf['publication_weekday'] = df['first_day_exposition'].dt.day_name().map(weekday_dict).astype('category')\ndf['publication_month'] = df['first_day_exposition'].dt.month.map(month_dict).astype('category')\ndf['publication_year'] = df['first_day_exposition'].dt.year.astype(str).astype('category')\n# Задаем порядок для weekdays\nweekday_order = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']\ndf['publication_weekday'] = df['publication_weekday'].cat.reorder_categories(weekday_order, ordered=True)\n\n# Задаем порядок для months\nmonth_order = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']\ndf['publication_month'] = df['publication_month'].cat.reorder_categories(month_order, ordered=True)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'publication_weekday')\n\n\n\n        \n            \n\n\n\n\nTable 43: publication_weekday\n\n\n\n\n\nValues\n23 527 (100%)\n\nЧетверг (18%)\n\n\nMissing\n---\n\nВторник (18%)\n\n\nDistinct\n7 (&lt;1%)\n\nПятница (17%)\n\n\nDuplicated origin\n23 520 (99.9%)\n\nСреда (17%)\n\n\nDupl (modify - origin)\n---\n\nПонедельник (15%)\n\n\nEmpty\n---\n\nСуббота (8%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nВоскресенье (7%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'publication_month')\n\n\n\n        \n            \n\n\n\n\nTable 44: publication_month\n\n\n\n\n\nValues\n23 527 (100%)\n\nФевраль (11%)\n\n\nMissing\n---\n\nМарт (11%)\n\n\nDistinct\n12 (&lt;1%)\n\nНоябрь (10%)\n\n\nDuplicated origin\n23 515 (99.9%)\n\nАпрель (10%)\n\n\nDupl (modify - origin)\n---\n\nОктябрь (9%)\n\n\nEmpty\n---\n\nСентябрь (8%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nИюнь (7%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'publication_year')\n\n\n\n        \n            \n\n\n\n\nTable 45: publication_year\n\n\n\n\n\nValues\n23 527 (100%)\n\n2018 (36%)\n\n\nMissing\n---\n\n2017 (35%)\n\n\nDistinct\n6 (&lt;1%)\n\n2019 (12%)\n\n\nDuplicated origin\n23 521 (99.9%)\n\n2016 (12%)\n\n\nDupl (modify - origin)\n---\n\n2015 (5%)\n\n\nEmpty\n---\n\n2014 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим новую категориальную переменную месяц-год\n\n\nShow the code\n# Словарь для замены месяцев\nmonths_translation = {\n    'Jan': 'Янв',\n    'Feb': 'Фев',\n    'Mar': 'Мар',\n    'Apr': 'Апр',\n    'May': 'Май',\n    'Jun': 'Июн',\n    'Jul': 'Июл',\n    'Aug': 'Авг',\n    'Sep': 'Сен',\n    'Oct': 'Окт',\n    'Nov': 'Ноя',\n    'Dec': 'Дек'\n}\n# Получаем отдельно месяц и год\nmonths = df['first_day_exposition'].dt.strftime('%b').astype('category').cat.reorder_categories(list(months_translation.keys()), ordered=True)\nyears = df['first_day_exposition'].dt.strftime('%y')\nmonths_years = pd.concat([months, years], axis=1)\nmonths_years.columns = ['month', 'year']\n# Создаем список уникальных (год, месяц) и сортируем\nunique_months = months_years.drop_duplicates().sort_values(by=['year', 'month'])\n\n# Создаем список для порядка\nmonth_year_order = []\n\n# Формируем month_year_order на основе уникальных (год, месяц)\nfor _, row in unique_months.iterrows():\n    year = row['year']\n    month = row['month']\n    month_year_order.append(f\"{months_translation[month]}'{str(year)[-2:]}\")\n\n# Заменяем месяцы и соединяем с годом\ndf['publication_month_year'] = months.astype(str).map(months_translation) + \"'\" + years\ndf['publication_month_year'] = df['publication_month_year'].astype('category')\ndf['publication_month_year'] = df['publication_month_year'].cat.reorder_categories(month_year_order, ordered=True)\ndf['publication_month_year']\n\n\n0        Мар'19\n1        Дек'18\n2        Авг'15\n3        Июл'15\n4        Июн'18\n          ...  \n23694    Мар'17\n23695    Янв'18\n23696    Фев'18\n23697    Мар'17\n23698    Июл'17\nName: publication_month_year, Length: 23527, dtype: category\nCategories (55, object): ['Ноя'14' &lt; 'Дек'14' &lt; 'Янв'15' &lt; 'Фев'15' ... 'Фев'19' &lt; 'Мар'19' &lt; 'Апр'19' &lt; 'Май'19']\n\n\nСоздадим новую категориальную переменную из расстояния до центра.\nЧтобы определить границы зон, построим график зависимости цены от расстояния до центра.\n\n\nShow the code\nconfig = dict(\n    df = df[df['locality_name'] == 'Санкт-Петербург']\n    , x = 'city_centers_nearest_km'  \n    , x_axis_label = 'Расстояние до центра, км'\n    , y = 'last_price'\n    , y_axis_label = 'Цена'\n    , title = 'Цена в зависимости от расстояния до центра'\n    , func = 'median'\n    , width = 700\n    , height = 400\n)\npagri_data_tools.line(config)\n\n\n                                                \n\n\nМожно заметить, что на 5 км от центра падение цены замедляется.\nВыберем 5 км как границу для центра.\nИ выберем 20 км как зону окраины\n\n\nShow the code\nlabels = ['Центр', 'Средняя удаленность', 'Окраина']\nbins = [-np.inf, 5, 20, np.inf]\n\n\n\n\nShow the code\ndf.head()\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nliving_total_ratio\nkitchen_total_ratio\nprice_per_sqm\ncity_centers_nearest_km\nfloor_position\nprice_segment\npublication_weekday\npublication_month\npublication_year\npublication_month_year\n\n\n\n\n0\n20\n13000000\n108.0\n2019-03-07\n3\n2.70\n16.0\n51.000000\n8\nне указано\n...\n0.47\n0.23\n120370\n16.0\nдругой\nпремиум\nЧетверг\nМарт\n2019\nМар'19\n\n\n1\n7\n3350000\n40.4\n2018-12-04\n1\nNaN\n11.0\n18.600000\n1\nне указано\n...\n0.46\n0.27\n82920\n19.0\nпервый\nэконом\nВторник\nДекабрь\n2018\nДек'18\n\n\n2\n10\n5196000\n56.0\n2015-08-20\n2\nNaN\n5.0\n34.300000\n4\nне указано\n...\n0.61\n0.15\n92785\n14.0\nдругой\nкомфорт\nЧетверг\nАвгуст\n2015\nАвг'15\n\n\n3\n0\n64900000\n159.0\n2015-07-24\n3\nNaN\n14.0\n98.215511\n9\nне указано\n...\n0.62\n0.13\n408176\n7.0\nдругой\nпремиум\nПятница\nИюль\n2015\nИюл'15\n\n\n4\n2\n10000000\n100.0\n2018-06-19\n2\n3.03\n14.0\n32.000000\n13\nне указано\n...\n0.32\n0.41\n100000\n8.0\nдругой\nкомфорт\nВторник\nИюнь\n2018\nИюн'18\n\n\n\n\n5 rows × 32 columns\n\n\n\n\n\nShow the code\ndf['location_zone'] = pagri_data_tools.create_category_column(df.city_centers_nearest_km, labels=labels, bins=bins, fillnavalue=\"не указано\")\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'location_zone')\n\n\n\n        \n            \n\n\n\n\nTable 46: location_zone\n\n\n\n\n\nValues\n23 527 (100%)\n\nСредняя удаленность (55%)\n\n\nMissing\n---\n\nне указано (23%)\n\n\nDistinct\n4 (&lt;1%)\n\nОкраина (11%)\n\n\nDuplicated origin\n23 523 (99.9%)\n\nЦентр (11%)\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\n3.3 Промежуточный вывод\n\nСоздали переменную соотношение жилой и общей площади\nСоздали переменную отношения площади кухни к общей.\nСоздали переменную цена квадратного метра\nСоздали новую переменную - расстояние до центра километрах.\nСоздадим новую категориальную переменную позиция этажа. Сделали 3 значения - первый, последний и другой\nИз цены создали новую категориальную переменную - сегмент цены. Сделали 3 значения - эконом, комфорт, премиум.\n\nСоздали переменные день недели, месяц, год и месяц-год публикации объявления.\nСоздали новую категориальную переменную из расстояния до центра. Сделали значения - центр, окраина, средняя удаленность"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#визуализация-взаимосвязей-переменных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#визуализация-взаимосвязей-переменных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "4. Визуализация взаимосвязей переменных",
    "text": "4. Визуализация взаимосвязей переменных\n\n4.1 Исследование корреляционных связей\nПостроим матрицу корреляции.\n\n\nShow the code\ndf.select_dtypes(include=['category']).columns\n\n\nIndex(['is_apartment', 'studio', 'open_plan', 'floor_position',\n       'price_segment', 'publication_weekday', 'publication_month',\n       'publication_year', 'publication_month_year', 'location_zone'],\n      dtype='object')\n\n\n\n\nShow the code\ntitles_for_axis= dict(\n        \n        total_images = 'число фотографий',\n        last_price = 'цена',\n        total_area = 'общая площадь',\n        rooms = 'число комнат',\n        ceiling_height = 'высота потолков',\n        floors_total = 'всего этажей',\n        living_area = 'жилая площадь',\n        floor = 'этаж',\n        kitchen_area = 'площадь кухни',\n        balcony = 'число балконов',\n        airports_nearest = 'расстояние до аэропорта, м',\n        city_centers_nearest = 'расстояние до центра, м',\n        parks_around3000 = 'число парков',\n        parks_nearest = 'расстояние до парка, м',\n        ponds_around3000 = 'число водоёмов',\n        ponds_nearest = 'расстояние водоёма, м',\n        days_exposition = 'число дней размещения',\n        city_centers_nearest_km = 'расстояние до центра, км',\n        living_total_ratio = 'жилая/общая площадь',\n        kitchen_total_ratio = 'кухня/общая площадь',\n        price_per_sqm = 'цена кв метра',\n        is_apartment = 'является ли апартаментом',\n        studio = 'является ли студией',\n        open_plan = 'открытая ли планировка',\n        floor_position = 'позиция этажа',\n        price_segment = 'секмент цены',\n        publication_weekday = 'день  недели публикации',\n        publication_month = 'месяц публикации',\n        publication_year = 'год публикации',\n        publication_month_year = 'месяц и год публикации',\n        location_zone = 'локация'\n)\n\n\n Вернуться к выводам\n\n\nShow the code\ngen = pagri_data_tools.heatmap_corr_gen(df, part_size=10, titles_for_axis=titles_for_axis)\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nСильная положительная корреляция между жилой площадью и общей площадью\nСильная положительная корреляция между числом комнат и общей площадью\nСильная положительная корреляция между числом комнат и жилой площадью\nУмеренная положительная корреляция между площадью кухни и общей площадью\nУмеренная положительная корреляция между ценой и общей площадью\nУмеренная положительная корреляция между ценой и жилой площадью\nУмеренная положительная корреляция между ценой и площадью кухни\nУмеренная положительная корреляция между ценой и жилой площадью\n\n\n\nShow the code\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nСильная отрицательная корреляция между отношением площади кухни к общей площади и отношением жилой площади к общей площади\nУмеренная положительная корреляция между числом комнат и отношением жилой площади к общей площади\n\nПостроим модель случайного леса для определения цены и посмотрим какие переменные сильнее всего влияют на решения модели.\n Вернуться к выводам\n\n\nShow the code\ntitle = 'График важности признаков для предсказания цены'\npagri_data_tools.plot_feature_importances_regression(df.drop('price_per_sqm', axis=1), target='last_price', titles_for_axis=titles_for_axis, title=title)\n\n\n                                                \n\n\nНаблюдения:\n\nОбщая площадь является самым значимым признаком для предсказания цены квартиры.\n\nЧисло дней экспозиции находится на втором месте.\n\n\n4.2 Изучение зависимостей между числовыми переменными\nИзучим зависимости между числовыми переменными, используя графики рассеяния.\n Вернуться к выводам\n\n\nShow the code\n\npairs = {('last_price', 'total_area'): {'last_price': [np.int64(430000), np.int64(763000000)], 'total_area': [np.float64(12.0), np.float64(900.0)]}, ('last_price', 'living_area'): {'last_price': [np.int64(430000), np.int64(763000000)], 'living_area': [np.float64(2.0), np.float64(427.55)]}, ('last_price', 'kitchen_area'): {'last_price': [np.int64(430000), np.int64(763000000)], 'kitchen_area': [np.float64(1.3), np.float64(122.57)]}, ('last_price', 'floors_total'): {'last_price': [np.int64(430000), np.int64(763000000)], 'floors_total': [np.float64(1.0), np.float64(60.0)]}, ('last_price', 'city_centers_nearest'): {'last_price': [np.int64(430000), np.int64(763000000)], 'city_centers_nearest': [np.float64(181.0), np.float64(65968.0)]}, ('last_price', 'parks_nearest'): {'last_price': [np.int64(430000), np.int64(763000000)], 'parks_nearest': [np.float64(1.0), np.float64(3190.0)]}, ('total_area', 'rooms'): {'total_area': [np.float64(12.0), np.float64(900.0)], 'rooms': [np.int64(1), np.int64(19)]}, ('total_area', 'city_centers_nearest'): {'total_area': [np.float64(12.0), np.float64(900.0)], 'city_centers_nearest': [np.float64(181.0), np.float64(65968.0)]}, ('rooms', 'living_area'): {'rooms': [np.int64(1), np.int64(19)], 'living_area': [np.float64(2.0), np.float64(427.55)]}}\npagri_data_tools.pairplot_pairs(df, pairs, titles_for_axis=titles_for_axis, horizontal_spacing=0.12, rows=3, cols=3, density_mode='count') #.show(config=dict(displayModeBar=False, dpi=200), renderer=\"png\")\n\n\n                                                \n\n\nНаблюдения:\n\nС ростом цены растет общая площадь, жилая площадь и площадь кухни.\nЕсть небольшая зависимость между ценой и количеством этажей. Чем больше цена, тем меньше этажей.\nЭто скорее всего связано с тем, что старые дома имеют меньше этажей и загородные дома имеют также меньше этажей.\nМожно заметить, что чем ближе к центру или парку, тем дороже стоит квартира.\nЧем больше число комнат, тем больше общая площадь, что логично.\n\nЧем ближе к центру, тем меньше общая площадь. Скорее всего это связано с тем, что в центре больше студий.\n\nЧем больше число комнат, тем больше жилая площадь, что логично.\n\n\n\n4.3 Изучение зависимостей между категориальными переменными\nИзучим распределение долей в категориальных переменных.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric\n    total_images = ['Число фотографий', 'число фотографий', 0],\n    last_price = ['Цена', 'цена', 2],\n    total_area = ['Общая площадь', 'общая площадь', 2],\n    rooms = ['Число комнат', 'число комнат', 0],\n    ceiling_height = ['Высота потолков', 'высота потолков', 2],\n    floors_total = ['Всего этажей', 'количество этажей', 0],\n    living_area = ['Жилая площадь', 'жилая площадь', 2],\n    floor = ['Этаж', 'этаж', 1],\n    kitchen_area = ['Площадь кухни', 'площадь кухни', 2],\n    balcony = ['Число балконов', 'число балконов', 0],\n    airports_nearest = ['Расстояние до аэропорта, м', 'расстояние до аэропорта', 0],\n    city_centers_nearest = ['Расстояние до центра, м', 'расстояние до центра', 0],\n    parks_around3000 = ['Число парков', 'число парков', 0],\n    parks_nearest = ['Расстояние до парка, м', 'расстояние до парка', 0],\n    ponds_around3000 = ['Число водоёмов', 'число водоёмов', 0],\n    ponds_nearest = ['Расстояние до водоёма, м', 'расстояние до водоёма', 0],\n    days_exposition = ['Число дней размещения', 'число дней размещения', 0],\n    city_centers_nearest_km = ['Расстояние до центра, км', 'расстояние до центра', 0],\n    living_total_ratio = ['Жилая/общая площадь', 'жилая/общая площадь', 2],\n    kitchen_total_ratio = ['Кухня/общая площадь', 'кухня/общая площадь', 2],\n    price_per_sqm = ['Цена кв метра', 'цена кв метра', 2],\n    # categorical\n    is_apartment = ['Является ли апартаментом', 'является ли апартаментом', 0],\n    studio = ['Является ли студией', 'является ли студией', 0],\n    open_plan = ['Открытая ли планировка', 'планировки', 0],\n    floor_position = ['Позиция этажа', 'позиции этажа', 1],\n    price_segment = ['Сегмент цены', 'сегмента цены', 1],\n    publication_weekday = ['День недели публикации', 'дня недели публикации', 1],\n    publication_month = ['Месяц публикации', 'месяца публикации', 1],\n    publication_year = ['Год публикации', 'года публикации', 1],\n    publication_month_year = ['Месяц и год публикации', 'месяца и года публикации', 1],\n    location_zone = ['Локация', 'локации', 2]\n)\n\n\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'floor_position'\n    , column_for_legend = 'price_segment'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ этажах кроме первого и последнего комфорта больше всего.\n\nПосмотрим на распределение количества элементов между группами\n\n\nShow the code\npagri_data_tools.categorical_heatmap_matrix(df, 'floor_position', 'price_segment', titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего квартир комфорт класса с этажом не первым и не последним.\n\n Вернуться к выводам\n\n\nShow the code\npagri_data_tools.categorical_heatmap_matrix(df, 'publication_weekday', 'price_segment', titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ воскресенье и субботу меньше всего публикаций\n\n\n\nShow the code\npagri_data_tools.categorical_heatmap_matrix(df, 'location_zone', 'price_segment', titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего объявлений со средней удаленностью от центра.\n\n\n\n4.4 Анализ временных зависимостей\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'publication_year'\n    , y = 'total_images'\n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True\n    , sort = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nЕсть тренд на увеличение количества фотографий по годам.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'publication_month_year'\n    , y = 'last_price'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True     \n    , sort = False                                           \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианная цена квартиры не сильно изменяется со временем\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'publication_month_year'\n    , y = 'total_area'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True   \n    , sort = False                                             \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианная площадь квартир не сильно меняется со временем\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'publication_month_year'\n    , y = 'price_per_sqm'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True     \n    , sort = False                                           \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианная стоимость квадратного метра практически не меняется со временем\n\n\n\n4.5 Изучение зависимостей между числовыми и категориальными переменными\nПосмотрим на взаимосвязи между числовыми и категориальными переменными.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'floor_position'\n    , y = 'rooms'  \n    , category = 'price_segment' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ премиуме среднее количество комнат больше на всех этажах\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'floor_position'\n    , y = 'living_area'  \n    , category = 'price_segment' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ премиум площадь квартир больше на всех этажах\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'last_price'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианная стоимость квартир выше\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'total_area'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианная площадь квартир больше\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'rooms'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианное количество комнат больше\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'ceiling_height'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианная высота потолков выше.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'floors_total'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСамые высокие дома находятся на средней удаленности от центра\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'days_exposition'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианное количество дней экспозиции больше.\n\n\n\n4.6 Анализ срезов данных\nИзучим объявления в центре и сравним их с объявлениями в целом.\n\n\nShow the code\ndf[df.location_zone == 'Центр'].head()\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_total_ratio\nprice_per_sqm\ncity_centers_nearest_km\nfloor_position\nprice_segment\npublication_weekday\npublication_month\npublication_year\npublication_month_year\nlocation_zone\n\n\n\n\n24\n8\n6500000\n97.2\n2015-10-31\n2\nNaN\n3.0\n46.5\n1\nне указано\n...\n0.20\n66872\n2.0\nпервый\nкомфорт\nСуббота\nОктябрь\n2015\nОкт'15\nЦентр\n\n\n35\n6\n15500000\n149.0\n2017-06-26\n5\nNaN\n5.0\n104.0\n4\nне указано\n...\n0.11\n104026\n4.0\nдругой\nпремиум\nПонедельник\nИюнь\n2017\nИюн'17\nЦентр\n\n\n61\n18\n7990000\n74.0\n2017-08-24\n2\nNaN\n4.0\n43.0\n4\nне указано\n...\n0.27\n107972\n4.0\nпоследний\nкомфорт\nЧетверг\nАвгуст\n2017\nАвг'17\nЦентр\n\n\n63\n2\n20000000\n118.0\n2018-09-11\n3\n3.0\n9.0\n68.0\n7\nне указано\n...\n0.14\n169491\n5.0\nдругой\nпремиум\nВторник\nСентябрь\n2018\nСен'18\nЦентр\n\n\n99\n32\n9600000\n90.0\n2017-09-26\n4\nNaN\n5.0\n67.0\n2\nне указано\n...\n0.09\n106666\n3.0\nдругой\nкомфорт\nВторник\nСентябрь\n2017\nСен'17\nЦентр\n\n\n\n\n5 rows × 33 columns\n\n\n\n\n\nShow the code\ndf_sliced = df[df.location_zone == 'Центр']\ngen_slice = pagri_data_tools.info_gen(df_sliced)\ngen = pagri_data_tools.info_gen(df)\n\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'last_price')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'last_price')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 47: last_price\n\n\n\n\n\nValues\n2 475 (100%)\n\nMax\n763 000 000\n\nAvg\n14 750 097.08\n\n8 500 000 (1%)\n\n\nMissing\n---\n\n95%\n35 619 999.0\n\nMode\n---\n\n7 500 000 (1%)\n\n\nDistinct\n834 (34%)\n\n75%\n14 200 000\n\nRange\n761 400 000\n\n8 000 000 (1%)\n\n\nDuplicates\n1 641 (66%)\n\nMedian\n9 500 000\n\niQR\n7 250 000\n\n12 000 000 (1%)\n\n\nZeros\n---\n\n25%\n6 950 000\n\nstd\n26 020 216.07\n\n9 500 000 (1%)\n\n\nNegative\n---\n\n5%\n4 700 000\n\nkurt\n322.93\n\n9 000 000 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1 600 000\n\nskew\n14.31\n\n10 000 000 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 48: last_price\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n763 000 000\n\nAvg\n6 525 185.56\n\n4 500 000 (1%)\n\n\nMissing\n---\n\n95%\n15 253 200.0\n\nMode\n4 500 000\n\n3 500 000 (1%)\n\n\nDistinct\n2 920 (12%)\n\n75%\n6 790 000\n\nRange\n762 570 000\n\n4 000 000 (1%)\n\n\nDuplicates\n20 607 (88%)\n\nMedian\n4 646 000\n\niQR\n3 390 000\n\n4 300 000 (1%)\n\n\nZeros\n---\n\n25%\n3 400 000\n\nstd\n10 836 761.82\n\n4 200 000 (1%)\n\n\nNegative\n---\n\n5%\n1 860 000\n\nkurt\n1309.24\n\n3 600 000 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n430 000\n\nskew\n26.19\n\n3 300 000 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nСреднее и медиана в центре для цены выше почти в 2 раза, чем во всем датафрейме.\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'total_area')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'total_area')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 49: total_area\n\n\n\n\n\nValues\n2 475 (100%)\n\nMax\n631.2\n\nAvg\n95.49\n\n60 (1%)\n\n\nMissing\n---\n\n95%\n197.93\n\nMode\n60\n\n70 (1%)\n\n\nDistinct\n947 (38%)\n\n75%\n112\n\nRange\n619.2\n\n50 (1%)\n\n\nDuplicates\n1 528 (62%)\n\nMedian\n82\n\niQR\n51.95\n\n80 (1%)\n\n\nZeros\n---\n\n25%\n60.05\n\nstd\n58.86\n\n72 &lt;1%\n\n\nNegative\n---\n\n5%\n38.07\n\nkurt\n16.81\n\n110 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12\n\nskew\n3.09\n\n85 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 50: total_area\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n900\n\nAvg\n60.29\n\n45 (2%)\n\n\nMissing\n---\n\n95%\n116\n\nMode\n45\n\n42 (2%)\n\n\nDistinct\n2 155 (9%)\n\n75%\n69.7\n\nRange\n888\n\n31 (1%)\n\n\nDuplicates\n21 372 (91%)\n\nMedian\n52\n\niQR\n29.7\n\n60 (1%)\n\n\nZeros\n---\n\n25%\n40\n\nstd\n35.53\n\n44 (1%)\n\n\nNegative\n---\n\n5%\n31\n\nkurt\n48.04\n\n40 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12\n\nskew\n4.78\n\n43 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nОбщая площадь в центре больше, чем во всем датафрейме.\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'ceiling_height')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'ceiling_height')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 51: ceiling_height\n\n\n\n\n\nValues\n1 639 (66%)\n\nMax\n4.9\n\nAvg\n3.14\n\n3 (19%)\n\n\nMissing\n836 (34%)\n\n95%\n3.8\n\nMode\n3\n\n3.2 (9%)\n\n\nDistinct\n130 (5%)\n\n75%\n3.34\n\nRange\n2.5\n\n3.5 (6%)\n\n\nDuplicates\n2 344 (95%)\n\nMedian\n3.1\n\niQR\n0.43\n\n2.7 (5%)\n\n\nZeros\n---\n\n25%\n2.91\n\nstd\n0.35\n\n3.1 (5%)\n\n\nNegative\n---\n\n5%\n2.7\n\nkurt\n1.32\n\n3.3 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n2.4\n\nskew\n0.83\n\n2.8 (4%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 52: ceiling_height\n\n\n\n\n\nValues\n14 443 (61%)\n\nMax\n5\n\nAvg\n2.72\n\n2.5 (24%)\n\n\nMissing\n9 084 (39%)\n\n95%\n3.27\n\nMode\n2.5\n\n2.6 (11%)\n\n\nDistinct\n164 (1%)\n\n75%\n2.8\n\nRange\n4\n\n2.7 (11%)\n\n\nDuplicates\n23 362 (99.3%)\n\nMedian\n2.65\n\niQR\n0.29\n\n3 (8%)\n\n\nZeros\n---\n\n25%\n2.51\n\nstd\n0.27\n\n2.8 (7%)\n\n\nNegative\n---\n\n5%\n2.5\n\nkurt\n6.65\n\n2.55 (7%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.07\n\n2.75 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВысота потолков в центре больше, чем во всем датафрейме\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'balcony')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'balcony')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 53: balcony\n\n\n\n\n\nValues\n931 (38%)\n\nMax\n5\n\nAvg\n0.7\n\n0 (57%)\n\n\nMissing\n1 544 (62%)\n\n95%\n2\n\nMode\n0\n\n1 (24%)\n\n\nDistinct\n6 (&lt;1%)\n\n75%\n1\n\nRange\n5\n\n2 (15%)\n\n\nDuplicates\n2 468 (99.7%)\n\nMedian\n0\n\niQR\n1\n\n4 (2%)\n\n\nZeros\n531 (21%)\n\n25%\n0\n\nstd\n1.0\n\n5 (1%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n3.78\n\n3 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.79\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 54: balcony\n\n\n\n\n\nValues\n12 064 (51%)\n\nMax\n5\n\nAvg\n1.16\n\n1 (35%)\n\n\nMissing\n11 463 (49%)\n\n95%\n2\n\nMode\n1\n\n0 (30%)\n\n\nDistinct\n6 (&lt;1%)\n\n75%\n2\n\nRange\n5\n\n2 (30%)\n\n\nDuplicates\n23 520 (99.9%)\n\nMedian\n1\n\niQR\n2\n\n5 (2%)\n\n\nZeros\n3 677 (16%)\n\n25%\n0\n\nstd\n1.07\n\n4 (2%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n2.51\n\n3 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.24\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ центре меньше балконов, чем во всем датафрейме.\n\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'parks_around3000')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'parks_around3000')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 55: parks_around3000\n\n\n\n\n\nValues\n2 475 (100%)\n\nMax\n3\n\nAvg\n1.03\n\n1 (36%)\n\n\nMissing\n---\n\n95%\n3\n\nMode\n1\n\n0 (35%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n2\n\nRange\n3\n\n2 (18%)\n\n\nDuplicates\n2 471 (99.8%)\n\nMedian\n1\n\niQR\n2\n\n3 (10%)\n\n\nZeros\n873 (35%)\n\n25%\n0\n\nstd\n0.97\n\n\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n-0.64\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.61\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 56: parks_around3000\n\n\n\n\n\nValues\n18 037 (77%)\n\nMax\n3\n\nAvg\n0.61\n\n0 (56%)\n\n\nMissing\n5 490 (23%)\n\n95%\n2\n\nMode\n0\n\n1 (31%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n1\n\nRange\n3\n\n2 (10%)\n\n\nDuplicates\n23 522 (99.9%)\n\nMedian\n0\n\niQR\n1\n\n3 (4%)\n\n\nZeros\n10 027 (43%)\n\n25%\n0\n\nstd\n0.8\n\n\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n0.87\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.23\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ центре больше парков.\n\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'days_exposition')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'days_exposition')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 57: days_exposition\n\n\n\n\n\nValues\n2 063 (83%)\n\nMax\n1 572\n\nAvg\n263.26\n\n90.0 (3%)\n\n\nMissing\n412 (17%)\n\n95%\n885.8\n\nMode\n90.0\n\n60 (3%)\n\n\nDistinct\n697 (28%)\n\n75%\n369.5\n\nRange\n1 569\n\n30 &lt;1%\n\n\nDuplicates\n1 777 (72%)\n\nMedian\n150\n\niQR\n308.5\n\n4 &lt;1%\n\n\nZeros\n---\n\n25%\n61\n\nstd\n286.65\n\n61 &lt;1%\n\n\nNegative\n---\n\n5%\n12.0\n\nkurt\n2.68\n\n89.0 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n3.0\n\nskew\n1.69\n\n9 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 58: days_exposition\n\n\n\n\n\nValues\n20 364 (87%)\n\nMax\n1 580\n\nAvg\n180.74\n\n45.0 (4%)\n\n\nMissing\n3 163 (13%)\n\n95%\n647.85\n\nMode\n45.0\n\n60 (3%)\n\n\nDistinct\n1 139 (5%)\n\n75%\n231\n\nRange\n1 579\n\n7 (1%)\n\n\nDuplicates\n22 387 (95%)\n\nMedian\n95\n\niQR\n186\n\n30 (1%)\n\n\nZeros\n---\n\n25%\n45.0\n\nstd\n219.76\n\n90.0 &lt;1%\n\n\nNegative\n---\n\n5%\n9\n\nkurt\n6.28\n\n4 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.31\n\n3.0 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ центре объявления дольше находятся в экспозиции.\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'price_segment')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'price_segment')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 59: price_segment\n\n\n\n\n\nValues\n2 475 (100%)\n\nкомфорт (52%)\n\n\nMissing\n---\n\nпремиум (45%)\n\n\nDistinct\n3 (&lt;1%)\n\nэконом (3%)\n\n\nDuplicated origin\n2 472 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 60: price_segment\n\n\n\n\n\nValues\n23 527 (100%)\n\nкомфорт (50%)\n\n\nMissing\n---\n\nэконом (38%)\n\n\nDistinct\n3 (&lt;1%)\n\nпремиум (11%)\n\n\nDuplicated origin\n23 524 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ центре меньше эконома и больше премиум квартир.\n\nПосмотрим на цену квадратного метра в 10 населенных пунктах с наибольшим количеством объявлений.\n\n\nShow the code\nselected_cities = df.groupby('locality_name').size().rename('count').sort_values(ascending=False).to_frame().head(10)\nselected_cities\n\n\n\n\n\n\n\n\n\ncount\n\n\nlocality_name\n\n\n\n\n\nСанкт-Петербург\n15625\n\n\nпосёлок Мурино\n518\n\n\nпосёлок Шушары\n439\n\n\nВсеволожск\n398\n\n\nПушкин\n369\n\n\nКолпино\n338\n\n\nпосёлок Парголово\n327\n\n\nГатчина\n306\n\n\nдеревня Кудрово\n299\n\n\nВыборг\n237\n\n\n\n\n\n\n\n\n\nShow the code\nselected_cities = selected_cities.index\n\n\nПосмотрим на среднюю цену квадратного метра в этих населённых пунктах.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df[df.locality_name.isin(selected_cities)]\n    , x = 'locality_name'\n    , x_axis_label = 'Название населённого пункта'\n    , y = 'price_per_sqm'\n    , y_axis_label = 'Цена квадратного метра'\n    , title = 'Цена кв метра в зависимости от населенного пункта'\n    , func = 'mean'\n    , width = None\n    , height = None\n    , orientation = 'v'\n)\npagri_data_tools.bar(config)\n\n\n                                                \n\n\nНаблюдения:\n\nСанкт–Петербург, Пушкин и деревня Кудрово имеют самую большую цену квадратного метра.\n\n\n\n4.7 Промежуточный вывод\n\nСильная положительная корреляция между жилой площадью и общей площадью\nСильная положительная корреляция между числом комнат и общей площадью\nСильная положительная корреляция между числом комнат и жилой площадью\nСильная отрицательная корреляция между отношением площади кухни к общей площади и отношением жилой площади к общей площади\nУмеренная положительная корреляция между площадью кухни и общей площадью\nУмеренная положительная корреляция между ценой и общей площадью\nУмеренная положительная корреляция между ценой и жилой площадью\nУмеренная положительная корреляция между ценой и площадью кухни\nУмеренная положительная корреляция между ценой и жилой площадью\nОбщая площадь является самым значимым признаком для предсказания цены квартиры. Число дней экспозиции находится на втором месте.\nС ростом цены растет общая площадь, жилая площадь и площадь кухни.\nЕсть небольшая зависимость между ценой и количеством этажей. Чем больше цена, тем меньше этажей.\nЭто скорее всего связано с тем, что старые дома имеют меньше этажей и загородные дома имеют также меньше этажей.\nМожно заметить, что чем ближе к центру или парку, тем дороже стоит квартира.\nЧем больше число комнат, тем больше общая площадь.\n\nЧем больше число комнат, тем больше жилая площадь.\n\nВ воскресенье и субботу меньше всего публикаций\nБольше всего объявлений со средней удаленностью от центра.\nЕсть тренд на увеличение количества фотографий по годам.\nМедианная цена квартиры не сильно изменяется со временем\nМедианная площадь квартир не сильно меняется со временем\nМедианная стоимость квадратного метра практически не меняется со временем\nВ премиуме среднее количество комнат больше на всех этажах\nУ премиум площадь квартир больше на всех этажах\nВ центре медианная стоимость квартир выше\nВ центре медианная площадь квартир больше\nВ центре медианное количество комнат больше\nВ центре медианная высота потолков выше.\nСамые высокие дома находятся на средней удаленности от центра\nВ центре медианное количество дней экспозиции больше.\nСреднее и медиана в центре для цены выше почти в 2 раза, чем во всем датафрейме.\nОбщая площадь в центре больше, чем во всем датафрейме.\nВысота потолков в центре больше, чем во всем датафрейме\nВ центре меньше балконов, чем во всем датафрейме.\nВ центре объявления дольше находятся в экспозиции.\nВ центре меньше эконома и больше премиум квартир.\n\nСанкт–Петербург, Пушкин и деревня Кудрово имеют самую большую цену квадратного метра."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#формулирование-и-провера-гипотез",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#формулирование-и-провера-гипотез",
    "title": "Исследование объявлений о продаже квартир",
    "section": "5. Формулирование и провера гипотез",
    "text": "5. Формулирование и провера гипотез\n\n5.1 Формулирование гипотез\nНа основе проведенного анализа данных сформулируем следующие гипотезы:\nГипотеза 1: Нет зависимости между количеством публикаций и днем недели.\nГипотеза 2: Удаленность от центра не влияет на количество публикаций.\nГипотеза 3: Площадь квартир не зависит от времени.\nГипотеза 4: Площадь квартиры не зависит от ценового сегмента.\nГипотеза 5: Количество дней экспозиции не зависит от удаленности от центра.\n\n\n5.2 Проверка гипотез\nПроверим сформулированные гипотезы.\n\n\nShow the code\ntitles_for_axis = dict(\n    total_area = ['Общая площадь', 'общей площади'],\n    price_per_sqm = ['Цена кв метра', 'цены кв метра'],\n    days_exposition = ['Число дней размещения', 'числа дней размещения'],\n)\n\n\nГипотеза 1: Нет зависимости между количеством публикаций и днем недели.\nH0: День недели не влияет на количество объявлений\nH1: День недели влияет на количество объявлений\n\n\nShow the code\ndaily_counts = df['publication_weekday'].value_counts().sort_index()\ndaily_counts\n\n\npublication_weekday\nПонедельник    3591\nВторник        4157\nСреда          3940\nЧетверг        4270\nПятница        3970\nСуббота        1918\nВоскресенье    1681\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.chisquare(daily_counts)\n\n\nХи-квадрат Пирсона\nalpha =  0.05\np-value =  0.0\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что день недели не влияет на количество объявлений, была отклонена. Это указывает на то, что существует статистически значимое влияние дня недели на количество объявлений.\n\nГипотеза 2: Удаленность от центра не влияет на количество публикаций.\nH0: Удаленность от центра не влияет на количество объявлений\nH1: Удаленность от центра влияет на количество объявлений\n\n\nShow the code\nzone_counts = df['location_zone'].value_counts().sort_index()\nzone_counts\n\n\nlocation_zone\nЦентр                   2475\nСредняя удаленность    12998\nОкраина                 2563\nне указано              5491\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.chisquare(zone_counts)\n\n\nХи-квадрат Пирсона\nalpha =  0.05\np-value =  0.0\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что удаленность от центра не влияет на количество объявлений, была отклонена. Это указывает на то, что удаленность от центра оказывает статистически значимое влияние на количество объявлений.\n\nГипотеза 3: Площадь квартир не зависит от времени.\nH0: Площадь квартир не зависит от времени.\nH1: Площадь квартир зависит от времени.\nПосмотрим на распределение площади квартир.\n\n\nShow the code\npagri_data_tools.histogram(df.total_area, titles_for_axis)\n\n\n                                                \n\n\nТак как у нас не нормальное распределение, то используем непараметрический критерий Краскела-Уоллиса.\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.kruskal_df(df[['publication_month_year', 'total_area']])\n\n\nWarning: Sample size is less than 30 for one or more samples. Results may be unreliable.\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  4.573162293436599e-35\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n- Из за малого размера одной из групп нет оснований доверять результату теста.\nГипотеза 4: Площадь квартиры не зависит от ценового сегмента.\nH0: Площадь квартиры не зависит от ценового сегмента.\nH1: Площадь квартиры зависит от ценового сегмента.\nТак как у нас не нормальное распределение, то используем непараметрический критерий Краскела-Уоллиса.\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.kruskal_df(df[['price_segment', 'total_area']])\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  0.0\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n- На уровне значимости 0.05 нулевая гипотеза о том, что площадь квартиры не зависит от ценового сегмента, была отклонена. Это указывает на то, что существует статистически значимое зависимость между площадью квартиры и ценовым сегментом.\nГипотеза 5: Количество дней экспозиции не зависит от удаленности от центра.\nH0: Количество дней экспозиции не зависит от удаленности от центра.\nH1: Количество дней экспозиции зависит от удаленности от центра.\nПосмотрим на распределение количества дней экспозиции.\n\n\nShow the code\npagri_data_tools.histogram(df.days_exposition, titles_for_axis)\n\n\n                                                \n\n\nТак как у нас не нормальное распределение, то используем непараметрический критерий Краскела-Уоллиса.\nУровень значимости alpha выберем 0.05\nТак как у нас есть пропуски, то для проведения теста их удалим.\nБудем полагать, что пропуски носят случайный характер и не повлияют на результат теста.\n\n\nShow the code\npagri_data_tools.kruskal_df(df[['location_zone', 'days_exposition']].dropna())\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  2.135280354786305e-54\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n- На уровне значимости 0.05 нулевая гипотеза о том, что количество дней экспозиции не зависит от удаленности от центра, была отклонена. Это указывает на то, что существует статистически значимая зависимость между количеством дней экспозиции и удаленностью от центра.\n\n\n5.3 Промежуточный вывод\n\nНа уровне значимости 0.05 гипотеза, что есть зависимость между количеством публикаций и днем недели подтвердилась.\n\nНа уровне значимости 0.05 гипотеза, что удаленность от центра влияет на количество публикаций, подтвердилась.\n\nНа уровне значимости 0.05 гипотеза, что площадь квартир не зависит от времени, не подтвердилась.\nНужно учесть, что в одной из групп меньше 30 элементов. Есть основания не доверять результатам.\nНа уровне значимости 0.05 гипотеза, что площадь квартиры зависит от ценового сегмента, подтвердилась.\n\nНа уровне значимости 0.05 гипотеза, что количество дней экспозиции зависит от удаленности от центра, подтвердилась."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#общий-вывод",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#общий-вывод",
    "title": "Исследование объявлений о продаже квартир",
    "section": "6. Общий вывод",
    "text": "6. Общий вывод\nВыводы:\n- Сильная положительная корреляция между жилой площадью и общей площадью\n- Сильная положительная корреляция между числом комнат и общей площадью\n- Сильная положительная корреляция между числом комнат и жилой площадью\n- Сильная отрицательная корреляция между отношением площади кухни к общей площади и отношением жилой площади к общей площади\n- Умеренная положительная корреляция между площадью кухни и общей площадью\n- Умеренная положительная корреляция между ценой и общей площадью\n- Умеренная положительная корреляция между ценой и жилой площадью\n- Умеренная положительная корреляция между ценой и площадью кухни\n- Умеренная положительная корреляция между ценой и жилой площадью\n- Общая площадь является самым значимым признаком для предсказания цены квартиры. Число дней экспозиции находится на втором месте.\n- Есть небольшая зависимость между ценой и количеством этажей. Чем больше цена, тем меньше этажей.\nЭто скорее всего связано с тем, что старые дома имеют меньше этажей и загородные дома имеют также меньше этажей.\n- Можно заметить, что чем ближе к центру или парку, тем дороже стоит квартира.\n- В среднем объявление находится в продаже 180 дней.\n- Чем больше число комнат, тем больше общая площадь.\n- Чем больше число комнат, тем больше жилая площадь.\n- В воскресенье и субботу меньше всего публикаций\n- Больше всего объявлений со средней удаленностью от центра.\n- Есть тренд на увеличение количества фотографий по годам.\n- Медианная цена квартиры не сильно изменяется со временем\n- Медианная площадь квартир не сильно меняется со временем\n- Медианная стоимость квадратного метра практически не меняется со временем\n- В премиуме среднее количество комнат больше на всех этажах\n- У премиум площадь квартир больше на всех этажах\n- В центре медианная стоимость квартир выше\n- В центре медианная площадь квартир больше\n- В центре медианное количество комнат больше\n- В центре медианная высота потолков выше.\n- Самые высокие дома находятся на средней удаленности от центра\n- В центре медианное количество дней экспозиции больше.\n- Среднее и медиана в центре для цены выше почти в 2 раза, чем во всем датафрейме.\n- Общая площадь в центре больше, чем во всем датафрейме.\n- Высота потолков в центре больше, чем во всем датафрейме\n- В центре меньше балконов, чем во всем датафрейме.\n- В центре объявления дольше находятся в экспозиции.\n- В центре меньше эконома и больше премиум квартир.\n- Санкт–Петербург, Пушкин и деревня Кудрово имеют самую большую цену квадратного метра.\nАномалии и особенности в данных:\n- Минимальное значение цены 12 190 является аномальным.\n- В высоте потолков есть пропуски (39 процентов)\n- В высоте потолков много выбросов. Есть значение 100.\n- В количестве этажей есть пропуски (меньше 1 процента)\n- В жилой площади 8 процентов пропусков.\n- В площади кухни 10 процентов пропусков.\n- В числе балконов 49 процентов пропусков. Скорее всего пропуски это отсутствие балкона.\n- В расстоянии до ближайшего аэропорта 23 процента пропусков.\n- В расстоянии до центр города 23 процента пропусков.\n- В колонке с количеством парков рядом 23 процента пропусков.\n- В колонке с расстоянием до ближайшего парка 66 процентов пропусков.\n- В колонке с количеством прудов 23 процента пропусков, скорее всего это отсутствие парков.\n- В колонке с расстоянием до ближайшего пруда 62 процента пропусков.\n- В колонке с количеством дней экспозиции 13 процентов пропусков.\n- В колонке с признаком является ли квартира апартаментом 88 процентов пропусков. Скорее всего эти квартиры не являются апартаментами.\n- В колонке с названием населенного пункта 49 пропущенных значений (меньше 1 процента)\n- Пропуски в колонках с количеством парков рядом, количеством прудов рядом,\nрасстоянием до центра, расстоянием до аэропорта совпадают.\n- Пропуски в количестве этажей совпадают с пропусками в признаке является ли квартира апартаментом.\n- В количестве этаже пропуски зависят от признака является ли квартира студией.\n- Почти все пропуски в квартирах, которые не являются студиями, даже учитывая общее количество пропорций.\n- В студиях в поле площадь кухни одни пропуски.\nРезультаты предобработки данных:\n- Мы выяснили, что 0 комнат указано у студий, либо в открытой планировке, либо у квартир с площадью до 40 кв.,\nпоэтому нули в количестве комнат заменили на 1.\n- В цене была одна запись со значением 12190. Скорее всего не поставили нули, но сложно определить сколько именно нулей не поставили.\nТак как это всего 1 запись, то удалили ее. - Удалили 36 записей (0.2%) с высотой потолка больше 5 метров. Так как таких записей мало, а замена их может исказить анализ.\n- В количестве этажей пропуски удалили, так как определить реальный этаж невозможно, а пропусков мало.\n- Пропуски в жилой площади и в площади кухни обработали с помощью коэффициентов отношения площадей.\nПри этом расчеты провели с учетом количества комнат, чтобы было точнее.\nРезультаты проверки гипотез:\n- Гипотеза 1: Нет зависимости между количеством публикаций и днем недели.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\n- Гипотеза 2: Удаленность от центра не влияет на количество публикаций.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\n- Гипотеза 3: Площадь квартир не зависит от времени.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\n- Гипотеза 4: Площадь квартиры не зависит от ценового сегмента.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\n- Гипотеза 5: Количество дней экспозиции не зависит от удаленности от центра.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\nРекомендации:\n- Добавить контроль ввода слишком больших и слишком маленьких значений для цены, высоты потолка.\n- Добавить контроль ввода для количества комнат, чтобы исключить ввод нулевых значений.\n- Выяснить почему пропуски в колонках с количеством парков рядом, количеством прудов рядом,\nрасстоянием до центра, расстоянием до аэропорта в одних и тех же строках."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pavel Grigoryev projects",
    "section": "",
    "text": "Таблица users (информация о пользователях):\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\nИсследование надёжности заёмщиков\n\n\n\n\n\n\nИсследование влияния семейного положения и количества детей клиента на факт погашения кредита в срок для кредитного отдела банка.\n\n\n\n\n\n\n\n\n\n\n\n\nИсследование объявлений о продаже квартир\n\n\n\n\n\n\nИсследование факторов, влияющих на ценообразование на рынке недвижимости в Санкт-Петербурге.\n\n\n\n\n\n\n\n\n\n\n\n\nОпределение перспективного тарифа для телеком-компании\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html",
    "href": "projects/creditworthiness-research/creditworthiness_research.html",
    "title": "Исследование надёжности заёмщиков",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nЗаказчик - кредитный отдел банка.\nНужно разобраться, влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок.\nВходные данные от банка - статистика о платёжеспособности клиентов.\nРезультаты исследования будут учтены при построении модели кредитного скоринга - специальной системы, которая оценивает способность потенциального заёмщика вернуть кредит банку.\nЦель:\nСоставить рекомендации для кредитного отдела банка, которые будут учтены при построении модели кредитного скоринга.\nОпределить влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок.\nИсточники данных:\nСтатистика о платёжеспособности клиентов.\nГлавные выводы:\nАномалии и особенности в данных:\nРекомендации:"
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#загрузка-библиотек",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#загрузка-библиотек",
    "title": "Исследование надёжности заёмщиков",
    "section": "Загрузка библиотек ",
    "text": "Загрузка библиотек \n\n\nShow the code\n\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools\npd.set_option('display.max_columns', None)"
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#описание-и-изучение-данных",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#описание-и-изучение-данных",
    "title": "Исследование надёжности заёмщиков",
    "section": "1. Описание и изучение данных",
    "text": "1. Описание и изучение данных\n\n1.1 Описание данных\nВернуться к выводам\n\nchildren - количество детей в семье\ndays_employed - общий трудовой стаж в днях\ndob_years - возраст клиента в годах\neducation - уровень образования клиента\neducation_id - идентификатор уровня образования\nfamily_status - семейное положение\nfamily_status_id - идентификатор семейного положения\ngender - пол клиента\nincome_type - тип занятости\ndebt - имел ли задолженность по возврату кредитов\ntotal_income - ежемесячный доход\npurpose - цель получения кредита\n\n\n\n1.2 Изучение данных\n\n1.2.1 Изучение переменных\nВернуться к выводам\n\n\nShow the code\n\ndtype = {'education': 'category', 'education_id': 'category', 'family_status': 'category', 'family_status_id': 'category', 'gender': 'category', 'income_type': 'category', 'debt': 'category'}\ndf = pd.read_csv('https://code.s3.yandex.net/datasets/data.csv', dtype=dtype)\ndf.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\ndob_years\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n4042\n1\n-2885.142188\n50\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\n0\n80236.028323\nприобретение автомобиля\n\n\n19177\n2\n-1803.080913\n36\nСреднее\n1\nженат / замужем\n0\nF\nсотрудник\n0\n163292.220004\nстроительство собственной недвижимости\n\n\n7372\n1\n-305.540665\n27\nСРЕДНЕЕ\n1\nгражданский брак\n1\nF\nсотрудник\n0\n69799.488812\nремонт жилью\n\n\n16245\n1\n-1593.946336\n50\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\n1\n107486.332934\nна покупку подержанного автомобиля\n\n\n11563\n0\n-1025.402943\n64\nвысшее\n0\nженат / замужем\n0\nM\nгосслужащий\n0\n706401.475790\nпрофильное образование\n\n\n\n\n\n\n\nИзменим название колонки dob_years на более понятное age\n\n\nShow the code\n\ndf = df.rename(columns={'dob_years': 'age'})\n\n\nИзменим значения в столбце debt на ‘есть’, ‘нет’\n\n\nShow the code\n\ndf.debt = df.debt.apply(lambda x: 'есть' if x == '1' else 'нет').astype('category')\n\n\nИзучим отдельно каждую колонку\n\n\nShow the code\n\ngen = pagri_data_tools.info_gen(df)\n\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n21 525\n12\n4\n54 (&lt;1%)\n0 (0%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\n\nЕсли заменить все пробелы на 1, привести к нижнему регистру, то дополнительно появляется 31 дубликат.\nНужно детальнее изучить дубликаты.\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 2: children\n\n\n\n\n\nValues\n21 525 (100%)\n\nMax\n20\n\nAvg\n0.54\n\n0 (66%)\n\n\nMissing\n---\n\n95%\n2\n\nMode\n0\n\n1 (22%)\n\n\nDistinct\n8 (&lt;1%)\n\n75%\n1\n\nRange\n21\n\n2 (10%)\n\n\nDuplicates\n21 517 (99.9%)\n\nMedian\n0\n\niQR\n1\n\n3 (2%)\n\n\nZeros\n14 149 (66%)\n\n25%\n0\n\nstd\n1.38\n\n20 &lt;1%\n\n\nNegative\n47 (&lt;1%)\n\n5%\n0\n\nkurt\n136.46\n\n-1 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n-1\n\nskew\n10.08\n\n4 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ столбце с количеством детей нет пропущенных значений.\n\nУникальных всего 8 значений. Это нормально. Количество детей не может сильно варьироваться.\nНаличие нулей нормально, это люди без детей, таких 66 %.\n\nЕсть отрицательные значения. 47 штук. Меньше 1 процента. Это явно ошибка. В реальных данных таких не должно быть.\nНужно выяснить почему появились отрицательное количество детей.\n\nМаксимальное количество детей 20. Это скорее всего ошибка.\n66 процентов имеют 0 детей, 22 процента имеют 1 ребенка, 10 % имеют 2 детей и меньше 5 % имеют более 2 детей.\n\nРаспределение детей соответствует реальности, больше всего людей без детей.\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 3: days_employed\n\n\n\n\n\nValues\n19 351 (90%)\n\nMax\n401 755.4\n\nAvg\n63 046.5\n\n-8 437.67 &lt;1%\n\n\nMissing\n2 174 (10%)\n\n95%\n380 718.0\n\nMode\n---\n\n-3 507.82 &lt;1%\n\n\nDistinct\n19 351 (90%)\n\n75%\n-291.1\n\nRange\n420 144.35\n\n354 500.42 &lt;1%\n\n\nDuplicates\n2 173 (10%)\n\nMedian\n-1 203.37\n\niQR\n2 456.33\n\n-769.72 &lt;1%\n\n\nZeros\n---\n\n25%\n-2 747.42\n\nstd\n140 827.31\n\n-3 963.59 &lt;1%\n\n\nNegative\n15 906 (74%)\n\n5%\n-6 622.97\n\nkurt\n0.91\n\n337 451.39 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n-18 388.95\n\nskew\n1.70\n\n356 425.15 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке общий трудовой стаж есть 10 % пропущенных значений.\n\n90 % уникальных значений, это нормально, так как стаж в днях.\n\n74 % отрицательных значений. Так быть не должно.\nНужно выяснить как считаются дни стажа и разобраться откуда появляются отрицательные значения.\n\nМаксимальное количество дней стажа больше 400 тысяч дней, это больше 1000 лет. Явно это выброс.\n\nДанные совершенно некорректные, нужно разбираться что является причиной.\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 4: age\n\n\n\n\n\nValues\n21 525 (100%)\n\nMax\n75\n\nAvg\n43.29\n\n35 (3%)\n\n\nMissing\n---\n\n95%\n64\n\nMode\n35\n\n40 (3%)\n\n\nDistinct\n58 (&lt;1%)\n\n75%\n53\n\nRange\n75\n\n41 (3%)\n\n\nDuplicates\n21 467 (99.7%)\n\nMedian\n42\n\niQR\n20\n\n34 (3%)\n\n\nZeros\n101 (&lt;1%)\n\n25%\n33\n\nstd\n12.57\n\n38 (3%)\n\n\nNegative\n---\n\n5%\n25\n\nkurt\n-0.48\n\n42 (3%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.01\n\n33 (3%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке возраста нет пропущенных значений.\n\n58 уникальных значений (&lt;1%), похоже на правду.\n\n101 нулевое значение. Это явно ошибки.\n\nМаксимальный возраст 75 лет. Вполне реально.\n\nМедиана 42 года, первый квартиль 33 года, можно сделать вывод, что у нас в основном люди старше 30 лет.\n\nБольше всего людей около 40 лет.\n\nТолько 5 процентов людей моложе 25 лет.\n\nРаспределение похоже на нормальное. Так и должно быть.\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 5: total_income\n\n\n\n\n\nValues\n19 351 (90%)\n\nMax\n2 265 604.03\n\nAvg\n167 422.3\n\n253 875.64 &lt;1%\n\n\nMissing\n2 174 (10%)\n\n95%\n340 590.1\n\nMode\n---\n\n157 691.85 &lt;1%\n\n\nDistinct\n19 351 (90%)\n\n75%\n203 435.07\n\nRange\n2 244 936.76\n\n70 113.9 &lt;1%\n\n\nDuplicates\n2 173 (10%)\n\nMedian\n145 017.94\n\niQR\n100 381.91\n\n116 196.52 &lt;1%\n\n\nZeros\n---\n\n25%\n103 053.15\n\nstd\n102 971.57\n\n157 205.83 &lt;1%\n\n\nNegative\n---\n\n5%\n63 322.85\n\nkurt\n40.73\n\n114 842.85 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n20 667.26\n\nskew\n3.94\n\n282 354.55 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ столбце дохода 10 процентов пропущенных значений.\n\nЕсть дубликаты, но это нормально.\n\nМаксимальный доход больше 2 млн, нужно проверить это, кажется что это нереально.\n\nМинимальная зарплата 20 тысяч, это похоже на истину.\n\nРаспределение зарплат соответствует реальности.\n\nМеньше 5 % людей имеют зарплату меньше 63 тысяч.\nМожно сделать вывод, что большинство имеет высокий доход.\nПри этом 25 % имеют доход больше 200 тысяч.\n\nСлишком много знаков после запятой, нужно разобраться в чем дело\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 6: education\n\n\n\n\n\nValues\n21 525 (100%)\n\nсреднее (64%)\n\n\nMissing\n---\n\nвысшее (22%)\n\n\nDistinct\n15 (&lt;1%)\n\nСРЕДНЕЕ (4%)\n\n\nDuplicated origin\n21 510 (99.9%)\n\nСреднее (3%)\n\n\nDupl (modify - origin)\n2 (&lt;1%)\n\nнеоконченное высшее (3%)\n\n\nEmpty\n---\n\nВЫСШЕЕ (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nВысшее (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке образование пропусков нет.\n\nУникальных значений 15\nПрисутствуют явные дубли из за разных регистров слов.\n\nБольше всего людей со средним образованием 71 %\nВысшее образование у 24 %\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 7: education_id\n\n\n\n\n\nValues\n21 525 (100%)\n\n1 (71%)\n\n\nMissing\n---\n\n0 (24%)\n\n\nDistinct\n5 (&lt;1%)\n\n2 (3%)\n\n\nDuplicated origin\n21 520 (99.9%)\n\n3 (1%)\n\n\nDupl (modify - origin)\n---\n\n4 &lt;1%\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с id образования нет дублей, которые есть в колонке образования\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 8: family_status\n\n\n\n\n\nValues\n21 525 (100%)\n\nженат / замужем (58%)\n\n\nMissing\n---\n\nгражданский брак (19%)\n\n\nDistinct\n5 (&lt;1%)\n\nНе женат / не замужем (13%)\n\n\nDuplicated origin\n21 520 (99.9%)\n\nв разводе (6%)\n\n\nDupl (modify - origin)\n---\n\nвдовец / вдова (4%)\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке семейного статуса пропусков нет\nПроблем не обнаружено\n58 % либо женаты, либо замужем\n19 % в гражданском браке\nМожно сделать вывод что большинство в браке.\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 9: family_status_id\n\n\n\n\n\nValues\n21 525 (100%)\n\n0 (58%)\n\n\nMissing\n---\n\n1 (19%)\n\n\nDistinct\n5 (&lt;1%)\n\n4 (13%)\n\n\nDuplicated origin\n21 520 (99.9%)\n\n3 (6%)\n\n\nDupl (modify - origin)\n---\n\n2 (4%)\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nКолонке семейный статус id проблем не обнаружено, значения совпадают со столбцом семейный статус\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 10: gender\n\n\n\n\n\nValues\n21 525 (100%)\n\nF (66%)\n\n\nMissing\n---\n\nM (34%)\n\n\nDistinct\n3 (&lt;1%)\n\nXNA &lt;1%\n\n\nDuplicated origin\n21 522 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ возрасте пропусков нет\n3 уникальных значения\nЗначение XNA меньше чем у 1 %, возможно не указали пол\n66 % женщины, можно сделать вывод, что большинство женщины\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 11: income_type\n\n\n\n\n\nValues\n21 525 (100%)\n\nсотрудник (52%)\n\n\nMissing\n---\n\nкомпаньон (24%)\n\n\nDistinct\n8 (&lt;1%)\n\nпенсионер (18%)\n\n\nDuplicated origin\n21 517 (99.9%)\n\nгосслужащий (7%)\n\n\nDupl (modify - origin)\n---\n\nбезработный &lt;1%\n\n\nEmpty\n---\n\nпредприниматель &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nв декрете &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ столбце тип занятости 8 уникальных значений.\n\nБольше всего сотрудников (52 %)\n24 % компаньоны\n18 % пенсионеры\nМеньше 1 % безработных.\nМожно сделать вывод, что большинство либо пенсионеры, либо имеют занятость\nТакже меньше 1 % предприниматели.\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 12: debt\n\n\n\n\n\nValues\n21 525 (100%)\n\nнет (92%)\n\n\nMissing\n---\n\nесть (8%)\n\n\nDistinct\n2 (&lt;1%)\n\n\n\n\nDuplicated origin\n21 523 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке наличия долга 2 значения.\n\nПропусков нет\n92 % людей не имеют долга\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 13: purpose\n\n\n\n\n\nValues\n21 525 (100%)\n\nсвадьба (4%)\n\n\nMissing\n---\n\nна проведение свадьбы (4%)\n\n\nDistinct\n38 (&lt;1%)\n\nсыграть свадьбу (4%)\n\n\nDuplicated origin\n21 487 (99.8%)\n\nоперации с недвижимостью (3%)\n\n\nDupl (modify - origin)\n---\n\nпокупка коммерческой недвижимости (3%)\n\n\nEmpty\n---\n\nпокупка жилья для сдачи (3%)\n\n\nRAM (Mb)\n3\n\nоперации с жильем (3%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке цель кредита пропусков нет\n\n38 уникальных значений, немного, но все таки есть похожие цели, нужно будет объединить в одно значение\nЯрко выраженной цели кредита нет, но сложно точно определить, нужно объединить сначала похожие цели.\n\nДля дальнейшего анализа срауз приведем колонку education к нижнему регистру и удалим лишние пробелы\n\n\nShow the code\n\ndf.education = pagri_data_tools.normalize_string_series(df.education)\ndf.education.value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\neducation\n\n\n\n\n\nсреднее\n15233\n\n\nвысшее\n5260\n\n\nнеоконченное высшее\n744\n\n\nначальное\n282\n\n\nученая степень\n6\n\n\n\n\n\n\n\nПроверим на ошибки целостности\nЕсли у нас есть столбцы, в которых значения должны совпадать попарно, то проверяем на это.\n\n\nShow the code\n\npagri_data_tools.get_non_matching_rows(df, 'education', 'education_id')\n\n\nНет строк для которых значения в col1 имеют разные значения в col2\n\n\nНет проблем с целостностью в образовании, несмотря на дубли в образовании.\n\n\nShow the code\n\npagri_data_tools.get_non_matching_rows(df, 'family_status', 'family_status_id')\n\n\nНет строк для которых значения в col1 имеют разные значения в col2\n\n\nВ семейном статусе также нет проблем с целостностью.\n\n\n1.2.2 Изучение дубликатов\nВернуться к выводам\nПроверим на дубли\nПосмотрим на дубли во всем датафрейме\n\n\nShow the code\n\ndupl_df = pagri_data_tools.check_duplicated(df)\n\n\nDuplicated is 71 (0.3%) rows\n\n\nУ нас 54 полных дубля в таблице. Посмотрим на них.\n\n\nShow the code\n\ndupl_df.sample(10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncount\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n\n0\n366085.971246\n58\nсреднее\n1\nженат / замужем\n0\nF\nпенсионер\nнет\n62509.116756\nпокупка своего жилья\n1\n\n\n-4471.908675\n49\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n145681.166753\nпокупка жилья для сдачи\n1\n\n\n-2161.728644\n45\nсреднее\n1\nженат / замужем\n0\nM\nкомпаньон\nнет\n174976.559244\nпокупка жилой недвижимости\n1\n\n\n1\nNaN\n45\nвысшее\n0\nженат / замужем\n0\nM\nсотрудник\nнет\nNaN\nна покупку подержанного автомобиля\n1\n\n\n0\n-202.034936\n62\nсреднее\n1\nвдовец / вдова\n2\nF\nсотрудник\nнет\n116093.542265\nстроительство жилой недвижимости\n1\n\n\n-10461.809545\n51\nсреднее\n1\nженат / замужем\n0\nF\nгосслужащий\nнет\n99292.152980\nпокупка коммерческой недвижимости\n1\n\n\n1\n-4878.408137\n39\nвысшее\n0\nгражданский брак\n1\nF\nсотрудник\nнет\n159931.847818\nсвой автомобиль\n1\n\n\n0\n-4777.041799\n51\nвысшее\n0\nженат / замужем\n0\nF\nсотрудник\nнет\n580657.906000\nсделка с подержанным автомобилем\n1\n\n\n-3564.541990\n32\nвысшее\n0\nгражданский брак\n1\nM\nсотрудник\nнет\n318667.904844\nсыграть свадьбу\n1\n\n\n2\n-221.799963\n30\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\n107204.889031\nремонт жилью\n1\n\n\n\n\n\n\n\nНаблюдения:\n\nТак как у нас нет уникального идентификатора клиентов, то дубли это нормально\nТакже у нас в строках с дублями есть пропуски в некоторых столбцах, если бы не было пропусков,\nто возможно дублей было бы меньше, так как было бы больше детализации\n\nПосмотрим сколько у нас дублей в каждой колонке\n\n\nShow the code\n\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df)\n\n\n\n\n\n\n\nTable 14: Duplicates\n\n\n\n\n\nchildren\n21517 (99.96%)\n\n\ndays_employed\n2173 (10.10%)\n\n\nage\n21467 (99.73%)\n\n\neducation\n21520 (99.98%)\n\n\neducation_id\n21520 (99.98%)\n\n\nfamily_status\n21520 (99.98%)\n\n\nfamily_status_id\n21520 (99.98%)\n\n\ngender\n21522 (99.99%)\n\n\nincome_type\n21517 (99.96%)\n\n\ndebt\n21523 (99.99%)\n\n\ntotal_income\n2173 (10.10%)\n\n\npurpose\n21487 (99.82%)\n\n\n\n\n\n\n\n\nПосмотрим на дубликаты между парами колонок\n\n\nShow the code\n\ngen = pagri_data_tools.check_duplicated_combinations_gen(df)\nnext(gen)\n\n\nGroup by 2 columns\n\n\n\n\n\n\n\nTable 15: Duplicates\n\n\n\n\n\n \nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\nchildren\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndays_employed\n2166\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\n21236\n2118\n\n\n\n\n\n\n\n\n\n\n\n\neducation\n21496\n2170\n21300\n\n\n\n\n\n\n\n\n\n\n\neducation_id\n21496\n2170\n21300\n21520\n\n\n\n\n\n\n\n\n\n\nfamily_status\n21488\n2169\n21253\n21502\n21502\n\n\n\n\n\n\n\n\n\nfamily_status_id\n21488\n2169\n21253\n21502\n21502\n21520\n\n\n\n\n\n\n\n\ngender\n21508\n2172\n21410\n21514\n21514\n21514\n21514\n\n\n\n\n\n\n\nincome_type\n21489\n2169\n21304\n21501\n21501\n21499\n21499\n21510\n\n\n\n\n\n\ndebt\n21510\n2172\n21412\n21516\n21516\n21515\n21515\n21520\n21512\n\n\n\n\n\ntotal_income\n2166\n2173\n2118\n2170\n2170\n2169\n2169\n2172\n2169\n2172\n\n\n\n\npurpose\n21279\n2136\n19504\n21368\n21368\n21347\n21347\n21448\n21367\n21449\n2136\n\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ нас большинство колонок имеют попранные дубликаты, это скорее всего вызвано пропусками\nЕсли бы не было пропусков в колонках стажа и дохода, то дублей было бы меньше\n\n\n\n1.2.3 Изучение пропусков\nВернуться к выводам\nПроверяем на пропуски\n\n\nShow the code\n\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df)\n\n\n\n\n\n\n\nTable 16: Missings\n\n\n\n\n\ndays_employed\n2174 (10.10%)\n\n\ntotal_income\n2174 (10.10%)\n\n\n\n\n\n\n\n\nУ нас пропуски в колонке со стажем и в колокне с доходом.\nПосмотрим на строки датафрейма с пропусками.\n\n\nShow the code\n\ndays_employed_missed = series_missed['days_employed']\ntotal_income_missed = series_missed['total_income']\n\n\nКоличество пропусков совпадает с точностью до строки.\nВыдвигаем гипотезу, что пропуски в обоих колонках в одних и тех же строках.\nПроверим эту гипотезу\nПосмотрим на стаж\n\n\nShow the code\n\ndays_employed_missed.sample(10)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n11702\n1\nNaN\n44\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nсделка с подержанным автомобилем\n\n\n21294\n0\nNaN\n45\nвысшее\n0\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nвысшее образование\n\n\n8886\n1\nNaN\n37\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nпокупка недвижимости\n\n\n15933\n0\nNaN\n22\nсреднее\n1\nгражданский брак\n1\nM\nсотрудник\nнет\nNaN\nна проведение свадьбы\n\n\n10756\n0\nNaN\n52\nсреднее\n1\nженат / замужем\n0\nF\nпенсионер\nнет\nNaN\nобразование\n\n\n5681\n0\nNaN\n42\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nавтомобиль\n\n\n20040\n0\nNaN\n63\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\nNaN\nстроительство жилой недвижимости\n\n\n1941\n0\nNaN\n48\nсреднее\n1\nгражданский брак\n1\nM\nсотрудник\nесть\nNaN\nна покупку своего автомобиля\n\n\n16904\n1\nNaN\n32\nвысшее\n0\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nна покупку подержанного автомобиля\n\n\n2304\n0\nNaN\n43\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nесть\nNaN\nобразование\n\n\n\n\n\n\n\nНаблюдения:\n\n10 случайно взятых строк подтверждают гипотезу\n\nПосмотрим на доход\n\n\nShow the code\n\ntotal_income_missed.sample(10)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n14469\n1\nNaN\n36\nсреднее\n1\nженат / замужем\n0\nM\nкомпаньон\nнет\nNaN\nоперации с коммерческой недвижимостью\n\n\n7514\n1\nNaN\n54\nсреднее\n1\nженат / замужем\n0\nF\nпенсионер\nнет\nNaN\nпокупка жилья для семьи\n\n\n619\n1\nNaN\n37\nсреднее\n1\nгражданский брак\n1\nF\nкомпаньон\nесть\nNaN\nсвадьба\n\n\n10462\n0\nNaN\n62\nсреднее\n1\nженат / замужем\n0\nF\nпенсионер\nнет\nNaN\nпокупка коммерческой недвижимости\n\n\n11968\n0\nNaN\n52\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nоперации с жильем\n\n\n11850\n0\nNaN\n61\nсреднее\n1\nНе женат / не замужем\n4\nF\nпенсионер\nнет\nNaN\nпокупка жилья\n\n\n11683\n0\nNaN\n46\nсреднее\n1\nгражданский брак\n1\nF\nкомпаньон\nнет\nNaN\nжилье\n\n\n19384\n0\nNaN\n29\nсреднее\n1\nНе женат / не замужем\n4\nM\nсотрудник\nнет\nNaN\nоперации с недвижимостью\n\n\n19578\n1\nNaN\n47\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nзаняться образованием\n\n\n21000\n2\nNaN\n35\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\nNaN\nпокупка жилья\n\n\n\n\n\n\n\nНаблюдения:\n\n10 случайно взятых строк подтверждают гипотезу\n\nПосмотрим сколько пропусков в обоих колонках вместе\n\n\nShow the code\n\ndf_missed_employed_income = pagri_data_tools.check_na_in_both_columns(df, ['days_employed', 'total_income'])\n\n\n2174 (10.10%) rows with missings simultaneously in ['days_employed', 'total_income']\n\n\nНаблюдения:\n\nВидим, что совместно пропуски в таком количестве строк как и по отдельности.\nГипотеза подтвердилась. У нас пропуски в строке стаж связаны с пропусками в строке доход.\nВозможно это вызвано тем, что при расчете дохода используется стаж, либо существует другое влияние одного на другое.\n\n\n\n1.2.4 Изучение выбросов\nВернуться к выводам\nСначала изучим потенциальные выбросы, которые мы выявили при изучении колонок.\nУ нас в количестве детей есть значение 20.\nИзучим его подробнее.\n\n\nShow the code\n\noutliers_series = pd.Series([df[df.children == 20]], index=['children'])\ngen = pagri_data_tools.analyze_by_category_gen(df, outliers_series)\nnext(gen)\n\n\nValue counts (0.35%)\n\n\n\n\n\n\n\nTable 17: children\n\n\n\n\n\n \ncount\n\n\nchildren\n \n\n\n\n\n20\n76\n\n\n\n\n\n\n\n\nПосмотрим на строки датафрейма, где количество детей равно 20\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n12534\n20\n-579.038062\n48\nсреднее\n1\nгражданский брак\n1\nF\nсотрудник\nесть\n125518.059419\nна проведение свадьбы\n\n\n18756\n20\n-2334.690116\n51\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n224637.817562\nавтомобиль\n\n\n3302\n20\nNaN\n35\nсреднее\n1\nНе женат / не замужем\n4\nF\nгосслужащий\nнет\nNaN\nпрофильное образование\n\n\n13256\n20\n-542.697631\n46\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n84405.034582\nоперации с недвижимостью\n\n\n18890\n20\n-904.259293\n37\nсреднее\n1\nженат / замужем\n0\nF\nкомпаньон\nесть\n212811.568585\nна покупку подержанного автомобиля\n\n\n17093\n20\n-1481.602776\n42\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n73069.574569\nполучение дополнительного образования\n\n\n9889\n20\n-2232.776113\n34\nсреднее\n1\nНе женат / не замужем\n4\nM\nсотрудник\nнет\n53971.576721\nпокупка жилья\n\n\n21325\n20\n-601.174883\n37\nсреднее\n1\nженат / замужем\n0\nF\nкомпаньон\nнет\n102986.065978\nпрофильное образование\n\n\n17509\n20\n-461.939717\n31\nсреднее\n1\nНе женат / не замужем\n4\nF\nсотрудник\nнет\n90937.893204\nжилье\n\n\n7027\n20\n-690.181658\n54\nсреднее\n1\nгражданский брак\n1\nF\nкомпаньон\nнет\n100206.266595\nна проведение свадьбы\n\n\n\n\n\n\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 18: Value in \"children\" by category \"family_status\"\n\n\n\n\n\nfamily_status\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nНе женат / не замужем\n2813\n9\n0.3%\n11.8%\n13.1%\n-1.2%\n\n\nв разводе\n1195\n2\n0.2%\n2.6%\n5.6%\n-2.9%\n\n\nвдовец / вдова\n960\n4\n0.4%\n5.3%\n4.5%\n0.8%\n\n\nгражданский брак\n4177\n12\n0.3%\n15.8%\n19.4%\n-3.6%\n\n\nженат / замужем\n12380\n49\n0.4%\n64.5%\n57.5%\n7.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nЗначительная часть людей с 20 детьми находятся в браке.\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 19: Value in \"children\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nв декрете\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nгосслужащий\n1459\n2\n0.1%\n2.6%\n6.8%\n-4.1%\n\n\nкомпаньон\n5085\n22\n0.4%\n28.9%\n23.6%\n5.3%\n\n\nпенсионер\n3856\n9\n0.2%\n11.8%\n17.9%\n-6.1%\n\n\nпредприниматель\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nсотрудник\n11119\n43\n0.4%\n56.6%\n51.7%\n4.9%\n\n\nстудент\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nБольшая часть сотрудники\nПенсионеры имеют меньшую долю с 20 детьми чем в основном количестве.\n\nУ нас в доходе странные максимальные значения нужно их изучить\n\n\nShow the code\n\noutliers_series = pd.Series([df[df.total_income &gt; 1000000]], index=['total_income'])\ngen = pagri_data_tools.analyze_by_category_gen(df, outliers_series)\nnext(gen)\n\n\nValue counts (0.12%)\n\n\n\n\n\n\n\nTable 20: total_income\n\n\n\n\n\n \ncount\n\n\ntotal_income\n \n\n\n\n\n1089120.307967\n1\n\n\n1172459.831538\n1\n\n\n1223042.479856\n1\n\n\n2200852.210259\n1\n\n\n1091627.585474\n1\n\n\n1092608.202547\n1\n\n\n1551152.893832\n1\n\n\n1427934.463152\n1\n\n\n1027742.279317\n1\n\n\n1597613.490467\n1\n\n\n\n\n\n\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n12412\n0\n-1477.438114\n44\nвысшее\n0\nженат / замужем\n0\nM\nкомпаньон\nнет\n2.265604e+06\nремонт жилью\n\n\n4129\n0\n-7992.968249\n52\nвысшее\n0\nженат / замужем\n0\nF\nкомпаньон\nнет\n1.004476e+06\nоперации с коммерческой недвижимостью\n\n\n18347\n0\n-5536.801152\n35\nвысшее\n0\nгражданский брак\n1\nF\nкомпаньон\nнет\n1.027742e+06\nоперации с жильем\n\n\n15268\n1\n-10207.448165\n64\nвысшее\n0\nв разводе\n3\nM\nкомпаньон\nнет\n1.350246e+06\nжилье\n\n\n20809\n0\n-4719.273476\n61\nсреднее\n1\nНе женат / не замужем\n4\nF\nсотрудник\nнет\n1.715018e+06\nпокупка жилья для семьи\n\n\n18766\n2\n-1019.604773\n43\nвысшее\n0\nженат / замужем\n0\nM\nкомпаньон\nнет\n1.092608e+06\nстроительство недвижимости\n\n\n7447\n0\n-8626.777234\n39\nсреднее\n1\nв разводе\n3\nF\nсотрудник\nнет\n1.240165e+06\nпокупка недвижимости\n\n\n19338\n3\n-1733.364682\n34\nвысшее\n0\nженат / замужем\n0\nM\nсотрудник\nнет\n1.091628e+06\nоперации с жильем\n\n\n2224\n1\n-4614.851849\n42\nвысшее\n0\nженат / замужем\n0\nM\nсотрудник\nнет\n1.278623e+06\nпокупка жилья\n\n\n13090\n1\n-3531.320534\n54\nвысшее\n0\nв разводе\n3\nF\nкомпаньон\nнет\n1.128836e+06\nоперации с недвижимостью\n\n\n\n\n\n\n\nНаблюдения:\n\nНичего особенного не заметно, возможно это не выбросы.\n\nПосмотрим на выбросы через квантили\n\n\nShow the code\n\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df)\n\n\n\n\n\n\n\nTable 21: Outliers\n\n\n\n\n\nchildren\n503 (2.34%)\n\n\ndays_employed\n1936 (8.99%)\n\n\nage\n1877 (8.72%)\n\n\ntotal_income\n1936 (8.99%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nинтересно что количество выбросов, кроме колонки количество детей, примерно одинаковое\n\nИзучим выбросы в разрезе категорий\n\n\nShow the code\n\ngen = pagri_data_tools.analyze_by_category_gen(df, series_outliers)\nnext(gen)\n\n\nValue counts (2.34%)\n\n\n\n\n\n\n\nTable 22: children\n\n\n\n\n\n \ncount\n\n\nchildren\n \n\n\n\n\n3\n330\n\n\n20\n76\n\n\n-1\n47\n\n\n4\n41\n\n\n5\n9\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВидим, что клиенты с количеством больше 2 попали в выбросы, что логично\nТакже -1 попало в выброс, что тоже верно\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n5315\n20\n-2047.754733\n24\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n100415.236833\nпокупка коммерческой недвижимости\n\n\n5362\n20\n355898.021316\n69\nсреднее\n1\nженат / замужем\n0\nM\nпенсионер\nнет\n138579.082863\nавтомобили\n\n\n13683\n3\n-412.704203\n37\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\n250758.702480\nпокупка жилой недвижимости\n\n\n20533\n3\n-3486.098717\n33\nвысшее\n0\nженат / замужем\n0\nF\nгосслужащий\nнет\n181661.163824\nоперации с коммерческой недвижимостью\n\n\n3445\n3\n-3316.247950\n38\nсреднее\n1\nженат / замужем\n0\nM\nкомпаньон\nнет\n243288.609169\nсделка с подержанным автомобилем\n\n\n1985\n3\n-823.339980\n33\nсреднее\n1\nженат / замужем\n0\nF\nгосслужащий\nнет\n57541.895996\nстроительство жилой недвижимости\n\n\n6219\n3\n-321.640557\n37\nвысшее\n0\nгражданский брак\n1\nF\nкомпаньон\nнет\n172214.363998\nнедвижимость\n\n\n20756\n3\n-2903.921654\n48\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n63511.921815\nоперации с недвижимостью\n\n\n16809\n3\n360587.743062\n42\nсреднее\n1\nгражданский брак\n1\nF\nпенсионер\nесть\n66187.816041\nна проведение свадьбы\n\n\n12916\n3\nNaN\n36\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\nNaN\nзаняться высшим образованием\n\n\n\n\n\n\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 23: Value in \"children\" by category \"family_status\"\n\n\n\n\n\nfamily_status\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nНе женат / не замужем\n2813\n24\n0.9%\n4.8%\n13.1%\n-8.3%\n\n\nв разводе\n1195\n18\n1.5%\n3.6%\n5.6%\n-2.0%\n\n\nвдовец / вдова\n960\n15\n1.6%\n3.0%\n4.5%\n-1.5%\n\n\nгражданский брак\n4177\n83\n2.0%\n16.5%\n19.4%\n-2.9%\n\n\nженат / замужем\n12380\n363\n2.9%\n72.2%\n57.5%\n14.7%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nженат / замужем содержит значительно больше выбросов, даже учитывая что в общем количестве их тоже больше\n\n\n\nShow the code\n\n%%capture\nnext(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 24: Value in \"children\" by category \"gender\"\n\n\n\n\n\ngender\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nF\n14236\n313\n2.2%\n62.2%\n66.1%\n-3.9%\n\n\nM\n7288\n190\n2.6%\n37.8%\n33.9%\n3.9%\n\n\nXNA\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ мужчин немного побольше выбросов, учитывая размер группы мужчин\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 25: Value in \"children\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nв декрете\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nгосслужащий\n1459\n50\n3.4%\n9.9%\n6.8%\n3.2%\n\n\nкомпаньон\n5085\n114\n2.2%\n22.7%\n23.6%\n-1.0%\n\n\nпенсионер\n3856\n24\n0.6%\n4.8%\n17.9%\n-13.1%\n\n\nпредприниматель\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nсотрудник\n11119\n315\n2.8%\n62.6%\n51.7%\n11.0%\n\n\nстудент\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nБольше всего выбросов у сотрудников, даже больше чем пропорция сотрудников в общем количестве\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 26: Value in \"days_employed\" by category \"gender\"\n\n\n\n\n\ngender\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nF\n14236\n1544\n10.8%\n79.8%\n66.1%\n13.6%\n\n\nM\n7288\n392\n5.4%\n20.2%\n33.9%\n-13.6%\n\n\nXNA\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ женщин выбросов в стаже намного больше чем у мужчин, даже учитывая что женщин больше всего\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 27: Value in \"days_employed\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n1\n50.0%\n0.1%\n0.0%\n0.0%\n\n\nв декрете\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nгосслужащий\n1459\n183\n12.5%\n9.5%\n6.8%\n2.7%\n\n\nкомпаньон\n5085\n173\n3.4%\n8.9%\n23.6%\n-14.7%\n\n\nпенсионер\n3856\n967\n25.1%\n49.9%\n17.9%\n32.0%\n\n\nпредприниматель\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nсотрудник\n11119\n612\n5.5%\n31.6%\n51.7%\n-20.0%\n\n\nстудент\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ пенсионеров значительно больше выбросов в стаже\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 28: Value in \"days_employed\" by category \"debt\"\n\n\n\n\n\ndebt\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nнет\n19784\n1838\n9.3%\n94.9%\n91.9%\n3.0%\n\n\nесть\n1741\n98\n5.6%\n5.1%\n8.1%\n-3.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ должников выбросов в стаже меньше, учитывая пропорции.\n\n\n\nShow the code\n\nnext(gen)\n\n\nValue counts (8.72%)\n\n\n\n\n\n\n\nTable 29: age\n\n\n\n\n\n \ncount\n\n\nage\n \n\n\n\n\n24\n264\n\n\n23\n254\n\n\n65\n194\n\n\n66\n183\n\n\n22\n183\n\n\n67\n167\n\n\n21\n111\n\n\n0\n101\n\n\n68\n99\n\n\n69\n85\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ выбросы попали самые молодые и самые старые по возрасту, что логично, также попал 0\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 30: Value in \"age\" by category \"family_status\"\n\n\n\n\n\nfamily_status\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nНе женат / не замужем\n2813\n465\n16.5%\n24.8%\n13.1%\n11.7%\n\n\nв разводе\n1195\n75\n6.3%\n4.0%\n5.6%\n-1.6%\n\n\nвдовец / вдова\n960\n176\n18.3%\n9.4%\n4.5%\n4.9%\n\n\nгражданский брак\n4177\n385\n9.2%\n20.5%\n19.4%\n1.1%\n\n\nженат / замужем\n12380\n776\n6.3%\n41.3%\n57.5%\n-16.2%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nНе женат / не замужем выделяется по выбросам, учитывая пропорцию в общем количестве\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 31: Value in \"age\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nв декрете\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nгосслужащий\n1459\n69\n4.7%\n3.7%\n6.8%\n-3.1%\n\n\nкомпаньон\n5085\n333\n6.5%\n17.7%\n23.6%\n-5.9%\n\n\nпенсионер\n3856\n792\n20.5%\n42.2%\n17.9%\n24.3%\n\n\nпредприниматель\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nсотрудник\n11119\n682\n6.1%\n36.3%\n51.7%\n-15.3%\n\n\nстудент\n1\n1\n100.0%\n0.1%\n0.0%\n0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ пенсионеров больше выбросов по возрасту, что логично\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen);next(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 32: Value in \"total_income\" by category \"family_status\"\n\n\n\n\n\nfamily_status\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nНе женат / не замужем\n2813\n217\n7.7%\n11.2%\n13.1%\n-1.9%\n\n\nв разводе\n1195\n96\n8.0%\n5.0%\n5.6%\n-0.6%\n\n\nвдовец / вдова\n960\n95\n9.9%\n4.9%\n4.5%\n0.4%\n\n\nгражданский брак\n4177\n336\n8.0%\n17.4%\n19.4%\n-2.0%\n\n\nженат / замужем\n12380\n1192\n9.6%\n61.6%\n57.5%\n4.1%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ женатых больше выбросов по доходу\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 33: Value in \"total_income\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n1\n50.0%\n0.1%\n0.0%\n0.0%\n\n\nв декрете\n1\n1\n100.0%\n0.1%\n0.0%\n0.0%\n\n\nгосслужащий\n1459\n140\n9.6%\n7.2%\n6.8%\n0.5%\n\n\nкомпаньон\n5085\n488\n9.6%\n25.2%\n23.6%\n1.6%\n\n\nпенсионер\n3856\n500\n13.0%\n25.8%\n17.9%\n7.9%\n\n\nпредприниматель\n2\n1\n50.0%\n0.1%\n0.0%\n0.0%\n\n\nсотрудник\n11119\n805\n7.2%\n41.6%\n51.7%\n-10.1%\n\n\nстудент\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ пенсионеров больше выбросов по доходу\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 34: Value in \"total_income\" by category \"debt\"\n\n\n\n\n\ndebt\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nнет\n19784\n1811\n9.2%\n93.5%\n91.9%\n1.6%\n\n\nесть\n1741\n125\n7.2%\n6.5%\n8.1%\n-1.6%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nБез задолженности немного больше выбросов по доходу.\n\n\n\n\n1.3 Промежуточный вывод\nВернуться к выводам\n\nВ датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\nТак как у нас нет уникального идентификатора клиентов, то эти дубли не выглядят ошибкой.\nТакже у нас в строках с дублями есть пропуски в некоторых столбцах, если бы не было пропусков,\nто возможно дублей было бы меньше, так как было бы больше детализации\nВ столбце с количеством детей есть отрицательные значения. 47 штук. Меньше 1 процента. Также есть клиенты с 20 детьми. Что странно.\nТакое количество детей в основном у людей в браке и сотрудников. У пенсионеров явно доля с 20 детьми меньше, чем доле пенсионеров в общем количестве людей.\nВозможно 20 детей связано с тем, что во время ввода данных указали лишний ноль.\nРекомендация, сделать проверку на отрицательные значения и на 20 детей, чтобы на стадии ввода не допускать ошибок.\n\n66 процентов имеют 0 детей, 22 процента имеют 1 ребенка, 10 % имеют 2 детей и меньше 5 % имеют более 2 детей.\n\nВ колонке общий трудовой стаж есть 10 % пропущенных значений.\n\n74 % отрицательных значений. Так быть не должно.\n\nМаксимальное количество дней стажа больше 400 тысяч дней, это больше 1000 лет. Явно это выброс.\n\nСтолбец со стажем выглядит некорректно. Нужно выяснить методику расчета и разобраться в чем проблема.\n\nВ колонке возраста 101 нулевое значение. Это явно ошибки.\n\nМедиана 42 года, первый квартиль 33 года, можно сделать вывод, что у нас в основном люди старше 30 лет.\n\nБольше всего людей около 40 лет.\n\nТолько 5 процентов людей моложе 25 лет.\n\nКолонка дохода имеет слишком много знаков после запятой. Нужно выяснить причину.\n\nДоход больше 1 млн может быть правдой. Тем более такой доход в большинстве у мужчин с высшим образованием, у компаньонов или сотрудников.\nНет оснований считать это выбросом. Максимальный доход 2 млн. Также может быть реальным.\nМеньше 5 % людей имеют зарплату меньше 63 тысяч.\nМожно сделать вывод, что большинство имеет высокий доход.\nПри этом 25 % имеют доход больше 200 тысяч.\n\nВ колонке с образованием присутствуют одни и те же значения с разными регистрами. Нужно выяснить почему так происходит при загрузке.\nПри этом в колонке с id образования все в порядке.\n\nБольше всего людей со средним образованием 71 %. Высшее образование у 24 %.\n58 % женаты либо замужем. 19 % в гражданском браке. Можно сделать вывод что большинство в браке.\n\nВ колонке пола присутствует значение XNA меньше чем у 1 %, возможно не указали пол.\n66 % женщины, можно сделать вывод, что большинство женщины\nВ столбце занятость больше всего сотрудников (52 %). Меньше 1 % безработных. Предпринимателей также 1 %. Можно сделать вывод, что большинство либо пенсионеры, либо имеют занятость.\n92 % не имеют долга\nВ колонке цель кредита 38 уникальных значений, немного, но все таки есть похожие цели, нужно будет объединить в одно значение.\nУ нас пропуски в колонке со стажем и в колокне с доходом.\n\nГипотеза, что пропуски в обоих колонках расположены в одних и тех же строках подтвердилась.\nВозможно это вызвано тем, что при расчете дохода используется стаж, либо существует другое влияние одного на другое.\n\nКатегория семейного статуса ‘женат / замужем’ содержит значительно больше выбросов по количеству детей, даже учитывая что в общем количестве их тоже больше\nУ мужчин немного побольше выбросов по количеству детей, учитывая размер группы мужчин.\nБольше всего выбросов по количеству детей у категории занятости ‘сотрудник’\nУ женщин выбросов в стаже намного больше чем у мужчин, даже учитывая что женщин больше всего\nУ пенсионеров значительно больше выбросов в стаже\nКатегория семейного статуса ‘Не женат / не замужем’ выделяется по выбросам, учитывая пропорцию в общем количестве.\nУ пенсионеров больше выбросов по возрасту, что логично\nКатегория семейного статуса ‘Не женат / не замужем’ имеет больше выбросов по доходу\nУ пенсионеров больше выбросов по доходу\nУ людей без задолженности немного больше выбросов по доходу."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#предобработка-данных",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#предобработка-данных",
    "title": "Исследование надёжности заёмщиков",
    "section": "2. Предобработка данных",
    "text": "2. Предобработка данных\n\n2.1 Выбор нужных столбцов для дальнейшей работы и нормализация таблицы\nВернуться к выводам\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n-8437.673028\n42\nвысшее\n0\nженат / замужем\n0\nF\nсотрудник\nнет\n253875.639453\nпокупка жилья\n\n\n\n\n\n\n\nДля дальнейшего анализа нам не нужно 2 колонки с образованием и с семейным статусом.\nУдалим колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nТакже колонка days_employed имеет совершенно некорректные данные, нужно разбираться откуда такие данные.\nВ данный момент мы ничего не можем с этим сделать и любые действия могут исказить результат. Поэтому не будем брать эту колонку.\nСохраним исходный датафрейм в переменную df_origin, чтобы была возможность вернуться к нему\n\n\nShow the code\n\ndf_origin = df.copy()\n\n\n\n\nShow the code\n\ndf = df.drop(['education_id', 'family_status_id', 'days_employed'], axis=1)\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253875.639453\nпокупка жилья\n\n\n\n\n\n\n\n\n\n2.2 Обработка выбросов\nВернуться к выводам\nПосмотрим где у нас отрицательные значения\n\n\nShow the code\n\npagri_data_tools.check_negative_value_in_df(df)\n\n\n\n\n\n\n\n\n\nnegative\n\n\n\n\nchildren\n47 (0.2%)\n\n\n\n\n\n\n\nУ нас 0.2% отрицательных значений, лучше всего будет их просто удалить.\n\n\nShow the code\n\ndf.shape[0]\n\n\n21525\n\n\n\n\nShow the code\n\ndf = df[df.children &gt;= 0]\ndf.shape[0]\n\n\n21478\n\n\nПосмотрим где у нас нулевые значения\n\n\nShow the code\n\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\nchildren\n14149 (65.9%)\n\n\nage\n101 (0.5%)\n\n\n\n\n\n\n\nВ количестве детей 0 это нормально. С этим ничего делать не будем.\nВ возрасте 0.5% нулевых значений. Лучше будет их удалить.\n\n\nShow the code\n\ndf.shape[0]\n\n\n21478\n\n\n\n\nShow the code\n\ndf = df[df.age != 0]\ndf.shape[0]\n\n\n21377\n\n\nУбедимся, что у нас нет нулевых и отрицательных значений там, где их быть не должно\n\n\nShow the code\n\npagri_data_tools.check_negative_value_in_df(df)\n\n\n\n\n\n\n\n\n\nnegative\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\nchildren\n14080 (65.9%)\n\n\n\n\n\n\n\nПосле изучения данных мы выяснили, что у нас есть странное значение в количестве детей, которое может быть выбросом.\n\n\nShow the code\n\ncnt = (df.children == 20).sum()\ncnt\n\n\nnp.int64(75)\n\n\n\n\nShow the code\n\ncnt * 100 / df.shape[0]\n\n\nnp.float64(0.35084436543949105)\n\n\nУ нас таких данных меньше пол процента, удалим их, так как нет уверенности, что это не выбросы.\nЕсли их оставить, то они могут внести больше искажений, чем их удалить.\n\n\nShow the code\n\ndf.shape[0]\n\n\n21377\n\n\n\n\nShow the code\n\ndf = df[df.children != 20]\ndf.shape[0]\n\n\n21302\n\n\n\n\n2.3 Обработка пропусков\nВернуться к выводам\nПосмотрим, где у нас пропуски\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ntotal_income\n2152 (10.1%)\n\n\n\n\n\n\n\nУ нас 10 процентов пропусков в доходе.\nУдалять нельзя. Попробуем заменить.\nВ доходе мы можем заполнить пропуски учитывая категории.\nВыберем категории следующие - образование, семейный статус, пол, занятость.\nВыбраны эти категории, так как они могут оказывать влияние на доход.\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253875.639453\nпокупка жилья\n\n\n\n\n\n\n\nПосмотрим размеры групп, если заменять внутри этих групп\n\n\nShow the code\n\ncategory_columns = ['education', 'family_status', 'gender', 'income_type']\nvalue_column = 'total_income'\npagri_data_tools.check_group_count(df, category_columns, value_column)\n\n\n67.53% groups have missing values\n63.46%  groups with missings have more than 30 elements\n85.58%  groups with missings have more than 10 elements\n90.38%  groups with missings have more than 5 elements\n2.88%  groups have only missings\n3 missings in groups with only missings\n\n\nНаблюдения:\n\n86 % групп с пропусками имеют 10 и более элементов. По таким группам можем заполнить пропуски медианой\n3 % групп имеют только пропуски, таких 3 пропусков всего, их мы такими группами заполнить не сможем.\n\nЗаполним пропуски в группах от 10 элементов\n\n\nShow the code\n\ndf.loc[:,value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ntotal_income\n18 (0.1%)\n\n\n\n\n\n\n\nОставшиеся пропуски попробуем заполнить без учета семейного статуса\n\n\nShow the code\n\ncategory_columns = ['education', 'gender', 'income_type']\nvalue_column = 'total_income'\npagri_data_tools.check_group_count(df, category_columns, value_column)\n\n\n23.26% groups have missing values\n60.00%  groups with missings have more than 30 elements\n80.00%  groups with missings have more than 10 elements\n80.00%  groups with missings have more than 5 elements\n10.00%  groups have only missings\n1 missings in groups with only missings\n\n\n\n\nShow the code\n\ndf[value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ntotal_income\n3 (0.0%)\n\n\n\n\n\n\n\nОставшиеся заменим по образованию и типу занятости\n\n\nShow the code\n\ncategory_columns = ['education', 'income_type']\nvalue_column = 'total_income'\npagri_data_tools.check_group_count(df, category_columns, value_column)\n\n\n8.33% groups have missing values\n0.00%  groups with missings have more than 30 elements\n0.00%  groups with missings have more than 10 elements\n50.00%  groups with missings have more than 5 elements\n0.00%  groups have only missings\n0 missings in groups with only missings\n\n\n\n\nShow the code\n\ndf[value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ntotal_income\n3 (0.0%)\n\n\n\n\n\n\n\nОставшиеся заменим медианой по образованию\n\n\nShow the code\n\ncategory_columns = ['education']\nvalue_column = 'total_income'\npagri_data_tools.check_group_count(df, category_columns, value_column)\n\n\n40.00% groups have missing values\n100.00%  groups with missings have more than 30 elements\n100.00%  groups with missings have more than 10 elements\n100.00%  groups with missings have more than 5 elements\n0.00%  groups have only missings\n0 missings in groups with only missings\n\n\n\n\nShow the code\n\ndf[value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\n\n\n\n\n\nПропусков не осталось, можно продолжать анализ.\n\n\n2.4 Обработка дубликатов\nВернуться к выводам\nПосмотрим снова на дубли после обработки пропусков\n\n\nShow the code\n\npagri_data_tools.check_duplicated_value_in_df(df)\n\n\n\n\n\n\n\nTable 35: Duplicates\n\n\n\n\n\nchildren\n21296 (99.97%)\n\n\nage\n21245 (99.73%)\n\n\neducation\n21297 (99.98%)\n\n\nfamily_status\n21297 (99.98%)\n\n\ngender\n21299 (99.99%)\n\n\nincome_type\n21294 (99.96%)\n\n\ndebt\n21300 (99.99%)\n\n\ntotal_income\n2103 (9.87%)\n\n\npurpose\n21264 (99.82%)\n\n\n\n\n\n\n\n\nУ нас нет столбцов, где дублей не должно быть и нет комбинаций столбцов, в которых не должно быть дублей.\nПоэтому нет оснований обрабатывать дубли. Оставим как есть.\n\n\n2.5 Приведение данных к удобной форме\nВернуться к выводам\nОкруглим значения в поле дохода до целого.\nЦелая часть выглядит реальной. А с дробной частью нужно разбираться почему столько знаков.\n\n\nShow the code\n\ndf['total_income'] = df.total_income.round().astype('int32')\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nпокупка жилья\n\n\n\n\n\n\n\nПосмотрим сколько у нас людей с полом XNA осталось\n\n\nShow the code\n\n(df.gender == 'XNA').sum()\n\n\nnp.int64(1)\n\n\nПосмотрим кто это\n\n\nShow the code\n\ndf[df.gender == 'XNA']\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n10701\n0\n24\nнеоконченное высшее\nгражданский брак\nXNA\nкомпаньон\nнет\n203905\nпокупка недвижимости\n\n\n\n\n\n\n\nВсего 1 человек. И мы не можем идентифицировать его пол.\nУдалим, чтобы не мешало анализировать графики.\n\n\nShow the code\n\ndf.drop(df[df.gender == 'XNA'].index, inplace=True)\ndf['gender'] = df['gender'].cat.remove_unused_categories()\ndf.gender.value_counts(dropna=False).to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\ngender\n\n\n\n\n\nF\n14083\n\n\nM\n7218\n\n\n\n\n\n\n\n\n\nShow the code\n\ndf.shape[0]\n\n\n21301\n\n\n\n\n2.6 Категоризация данных\nВернуться к выводам\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nпокупка жилья\n\n\n\n\n\n\n\nСделаем дополнительную колонку, в которой будет указано есть дети или нет\n\n\nShow the code\n\ndf['has_child'] = df.children.apply(lambda x: 'есть' if x &gt; 0 else 'нет').astype('category')\ndf['has_child'].value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\nhas_child\n\n\n\n\n\nнет\n14079\n\n\nесть\n7222\n\n\n\n\n\n\n\nСоздадим дополнительную категориальную переменную из возраста, для удобства анализа.\nСделаем следующие группы - до 30 лет - от 30 до 40 лет - от 40 до 50 лет - от 50 до 60 лет - старше 60 лет\n\n\nShow the code\n\nlabels = ['до 30', '30-40', '40-50', '50-60', 'старше 60']\nbins = [-np.inf, 30, 40, 50, 60, np.inf]\n\n\n\n\nShow the code\n\ndf['age_cat'] = pagri_data_tools.create_category_column(df.age, labels=labels, bins=bins)\ndf['age_cat'].value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\nage_cat\n\n\n\n\n\n30-40\n5704\n\n\n40-50\n5241\n\n\n50-60\n4520\n\n\nдо 30\n3704\n\n\nстарше 60\n2132\n\n\n\n\n\n\n\nСоздадим категориальную переменную по доходу\n\n\nShow the code\n\npagri_data_tools.quantiles_columns(df.total_income)\n\n\n\n\n\n\n\nTable 36: Quantiles\n\n\n\n\n\nMax\n2 265 604\n\n\n5\n64 748\n\n\n25\n107 702\n\n\n50\n145 005\n\n\n75\n197 380\n\n\n95\n331 729\n\n\nMin\n20 667\n\n\n\n\n\n\n\n\nСделаем следующие категории - до 50 тыс - от 50 до 100 тыс - от 100 до 200 тыс - от 200 до 500 тыс - от 500 тыс и выше\n\n\nShow the code\n\nlabels = ['до 50 тыс', '50-100 тыс', '100-200 тыс', '200-500 тыс', 'больше 500 тыс']\nbins = [-np.inf, 50_000, 100_000, 200_000, 500_000, np.inf]\n\n\n\n\nShow the code\n\ndf['total_income_cat'] = pagri_data_tools.create_category_column(df.total_income, labels=labels, bins=bins)\ndf['total_income_cat'].value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\ntotal_income_cat\n\n\n\n\n\n100-200 тыс\n11778\n\n\n200-500 тыс\n4876\n\n\n50-100 тыс\n4056\n\n\nдо 50 тыс\n369\n\n\nбольше 500 тыс\n222\n\n\n\n\n\n\n\nСделаем категории из колонки целей кредита используя лемматизацию\n\n\nShow the code\n\ncategorization_dict = {\n    'недвижимость': ['жилье', 'недвижимость']\n    , 'образование': ['образование']\n    , 'автомобиль': ['автомобиль', 'машина']\n    , 'свадьба': ['свадьба']\n}\n\n\n\n\nShow the code\n\ndf['purpose_new'] = pagri_data_tools.categorize_column_by_lemmatize(df.purpose, categorization_dict, use_cache=True)\ndf['purpose_new'].value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\npurpose_new\n\n\n\n\n\nнедвижимость\n10732\n\n\nавтомобиль\n4267\n\n\nобразование\n3979\n\n\nсвадьба\n2323\n\n\n\n\n\n\n\nУдалим старую цель кредита\n\n\nShow the code\n\ndf = df.drop('purpose', axis=1).rename(columns={'purpose_new': 'purpose'})\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\nhas_child\nage_cat\ntotal_income_cat\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nесть\n40-50\n200-500 тыс\nнедвижимость\n\n\n\n\n\n\n\n\n\n2.7 Промежуточный вывод\nВернуться к выводам\n\nУдалили колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nКолонка со стажем имеет совершенно некорректные данные. Чтобы не внести искажение в анализ, удалим эту колонку.\nУдалили отрицательные значения в колонке с количеством детей, которые составляли 0,2% от общего количества записей в данных.\nУдалили нулевые значения в колонке с возрастом, которые составляли 0,5% от общего количества записей в данных.\nУдалили записи, где количество детей равно 20, которые составляли 0,35% от общего количества записей в данных.\nЗаполнили пропуски в столбце с доходом медианным значением, учитывая категории образование, семейный статус, пол, занятость.\nОкруглили значения дохода до целого.\nУдалили 1 запись, где пол равен XNA\nСоздали дополнительную бинарную колонку, указывающую на наличие детей (1 - есть дети, 0 - нет детей).\nСделали дополнительную колонку с возрастными категориями.\n\nСделали дополнительную колонку с категориями дохода.\n\nТематизировали колонку с целью кредита, чтобы получить категории целей кредита."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#анализ-корреляций-между-переменными",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#анализ-корреляций-между-переменными",
    "title": "Исследование надёжности заёмщиков",
    "section": "3. Анализ корреляций между переменными",
    "text": "3. Анализ корреляций между переменными\n\n3.1 Исследование корреляционных связей\nВернуться к выводам\nПосмотрим на корреляцию между колонками\n\n\nShow the code\n\ntitles_for_axis = dict(\n    children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\n\n\n\n\nShow the code\n\npagri_data_tools.heatmap_corr(df, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nКорреляции не обнаружено\n\nПосмотрим какие переменные сильнее других влияют на предсказание долга с помощью модели случайного леса\n Вернуться к выводам\n\n\nShow the code\n\ntitles_for_axis = dict(\n    debt = 'долга'\n    , children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\n\n\n\n\nShow the code\n\npagri_data_tools.plot_feature_importances_classifier(df, target='debt', titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВидим, что доход значительно превышает стаж и количество детей.\n\n\n\n3.2 Промежуточный вывод\nВернуться к выводам\n\nКорреляций между переменными не обнаружено.\nДоход является самым значимым признаком для предсказания задолженности."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#визуализация-взаимосвязей-переменных",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#визуализация-взаимосвязей-переменных",
    "title": "Исследование надёжности заёмщиков",
    "section": "4. Визуализация взаимосвязей переменных",
    "text": "4. Визуализация взаимосвязей переменных\n\n4.1 Изучение зависимостей между числовыми переменными\nВернуться к выводам\nПосмотрим на зависимости между числовыми переменными.\n\n\n\nShow the code\n\ntitles_for_axis = dict(\n    # numeric column\n    children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\n\n\n\n\nShow the code\n\npagri_data_tools.pairplot(df, titles_for_axis=titles_for_axis, horizontal_spacing=0.12, height=400, width=1200, rows=1, cols=3).show(config=dict(displayModeBar=False, dpi=200), renderer=\"png\")\n\n\n\n\n\n\n\n\n\nНаблюдения:\n\nМожно заметить, что чем меньше количество детей, тем больше значений с высоким доходом.\nТакже можно заметить, что чем моложе клиент, тем в среднем у него больше детей.\n\n\n\n4.2 Изучение зависимостей между категориальными переменными\nВернуться к выводам\n\n\nShow the code\n\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количество детей', 0]\n    , age = ['Возраст, лет', 'возраст', 1]\n    , total_income = ['Ежемесячный доход', 'ежемесячный доход', 1]\n     # category column\n    , education = ['Уровень образования', 'уровня образования']\n    , family_status = ['Семейное положение', 'семейного положения']\n    , gender = ['Пол', 'пола']\n    , income_type = ['Тип занятости', 'типа занятости']\n    , debt = ['Задолженность', 'задолженности']\n    , purpose = ['Цель получения кредита', 'цели получения кредита']\n    , has_child = ['Наличие детей', 'наличия детей']\n    , age_cat = ['Возрастная категория, лет', 'возрастной категории']\n    , total_income_cat = ['Категория дохода', 'категории дохода']\n)\n\n\nПосмотрим на распределение количества элементов между группами\n\n\nShow the code\n\ngen = pagri_data_tools.categorical_graph_analys_gen(df, titles_for_axis)\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nВ каждой категории семейного положения доля женщин больше.\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nСреди семейного статуса и занятости больше всего женатых сотрудников\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nНет явной зависимости семейного положения и задолженности.\nНе женатые и люди в гражданском браке чаще других имеют задолженность, но всего лишь на пару процентов долей.\n\nЖенатых без долго явно больше остальных.\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nЖенатых без детей больше всего\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nВозрастная группа 30-40 лет выделяется среди женатых\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nБольшая часть женатых имеет доход 100-200 тыс\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего кредит берут на цели, связанные с недвижимостью, кроме людей в гражданском браке\nЛюди в гражданском браке чаще берут кредит на свадьбу\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего женщин сотрудников\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nЖенщины чаще возвращают кредит. Это видно из пропорций.\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen)\n\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nЛюди старше 60 лет реже других имеют долги (вкладка сравнение задолженность).\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nДолги есть у людей с разным доходом\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения: - Кредиты, оформленные на цели, связанные с недвижимостью, реже других приводят к долгам.\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nМожно заметить, что категория возраста от 30 до 40 лет имеет больше зарплату\n\nПосмотрим на распределение количества людей по категориям на сэнки диаграмме\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\nhas_child\nage_cat\ntotal_income_cat\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nесть\n40-50\n200-500 тыс\nнедвижимость\n\n\n\n\n\n\n\n\n\n4.3 Изучение зависимостей между числовыми и категориальными переменными\nВернуться к выводам\n\n\nShow the code\n\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количество детей', 0]\n    , age = ['Возраст, лет', 'возраст', 1]\n    , total_income = ['Ежемесячный доход', 'ежемесячный доход', 1]\n     # category column\n    , education = ['Уровень образования', 'уровня образования']\n    , family_status = ['Семейное положение', 'семейного положения']\n    , gender = ['Пол', 'пола']\n    , income_type = ['Тип занятости', 'типа занятости']\n    , debt = ['Задолженность', 'задолженности']\n    , purpose = ['Цель получения кредита', 'цели получения кредита']\n    , has_child = ['Наличие детей', 'наличия детей']\n    , age_cat = ['Возрастная категория', 'возрастной категории']\n    , total_income_cat = ['Категория дохода', 'категории дохода']\n)\n\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'gender'\n    , x = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ мужчин средний доход выше\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'gender'\n    , x = 'total_income'\n    , category = 'education'\n    , width = 900\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nНа всех уровнях образования, кроме ученой степени, доход у мужчин выше.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'purpose'\n    , x = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nЦель получения кредита практически не зависит от среднего ежемесячного доход\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'family_status'\n    , y = 'children'\n    , category = 'gender'\n    , width = 820\n    , orientation = 'h'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ мужчин, которые в браке или были в браке, количество детей больше, чем у мужчин, женщин в той же категории\nУ женатых детей больше, что логично\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'family_status'\n    , y = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , orientation = 'h'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредний доход по семейному статусу примерно одинаковый, у вдовцов немного пониже\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'income_type'\n    , y = 'total_income'\n    # , category = 'family_status'\n    , width = 800\n    , func = 'median'\n    , orientation='h'\n    # , text = True\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианный доход предпринимателей больше, чем у других.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'children'\n    , y = 'debt'\n    , category = 'gender'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ должников в среднем больше детей. В частности, среди должников женщины имеют больше детей в среднем, чем мужчины, а среди не должников мужчины имеют больше детей в среднем, чем женщины\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'age'\n    , y = 'debt'\n    # , category = 'family_status'\n    , width = 850\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ должников средний возраст немного ниже\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'gender'\n    , y = 'age'\n    , category = 'income_type'\n    , width = 1000\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ разрезе семейного положения ситуация сохраняться, возраст немного меньше у должников\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'total_income'\n    , y = 'debt'\n    # , category = 'education'\n    , width = 800\n    , func = 'median'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианный доход у должников и не должников практически не отличается\n\n\n\nShow the code\n\n\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'age_cat'\n    , y = 'children'\n    , category = 'gender'\n    , width = 900\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСреднее количество детей у группы 30-40 лет больше.\nДо 40 лет детей больше у женщин, старше 40 лет детей больше у мужчин\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'age_cat'\n    , y = 'total_income'\n    , category = 'income_type'\n    , width = 1200\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nПредприниматели до 30 лет имеют значительно болье средний доход, но в этой группе всего один клиент.\nСтранно, что в группе 40-50 лет безработные имеют доход сравнимый с другими группами, а в других возрастных категориях - нет.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'children'\n    , x = 'total_income_cat'\n    , category = 'gender'\n    , width = 800\n    # , orientation='h'\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nС доходом до 100 тысяч детей больше у женщин, а с доходом выше 100 тысяч - у мужчин.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'gender'\n    , y = 'age'\n    , category = 'education'\n    , width = 800\n    , orientation='h'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ женщин средний возраст выше, кроме категории ученая степень\nУ мужчин с ученой степенью средний возраст выше, чем у женщин, но размер группы ‘ученая степень’ маленький, поэтому утверждать нельзя.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'age'\n    , y = 'income_type'\n    # , category = 'income_type'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредний возраст распределен логично, можно отметить, что госслужащие имеют средний возраст больше 40 лет\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'income_type'\n    , y = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , orientation = 'h'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредний доход предпринимателей значительно выше других, но как видно предприниматель только 1, поэтому это нерепрезентативно.\nВ декрете и студент имеют самый низкий доход, но размеры групп маленькие, поэтому также нет уверенности в выводе.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'debt'\n    , y = 'age'\n    , category = 'gender'\n    , orientation='h'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nДолжники имеют ниже средний возраст как мужчины так и женщины.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'age_cat'\n    , x = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nЛюди от 30 до 50 лет имеют самый высокий средний доход.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'total_income_cat'\n    , y = 'children'\n    , category = 'debt'\n    , width = 1200\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВо всех группах дохода, кроме ‘больше 500 тыс’ среднее количество детей у должников больше\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'total_income_cat'\n    , y = 'age'\n    , category = 'debt'\n    , width = 800\n    , showgrid_y = False\n    , orientation='h'\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВо всех группах дохода средний возраст должников ниже\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'total_income_cat'\n    , y = 'children'\n    , category = 'age_cat'\n    # , width = 1200\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВозрастная категория ‘30-40’ лет имеет больше детей во всех категориях дохода\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'has_child'\n    , y = 'age'\n    , category = 'family_status'\n    , width = 800\n    , showgrid_y = False\n    , orientation='h'\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nДля всех значений в семейном статусе, у людей без детей средний возраст выше.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'has_child'\n    , y = 'age'\n    # , category = 'age_cat'\n    , width = 800\n    , showgrid_y = False\n    , orientation='h'\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредний возраст у людей без детей выше примерно на 9 лет\n\n\n\n4.4 Промежуточный вывод\nВернуться к выводам\n\nМожно заметить, что чем меньше количество детей, тем больше значений с высоким доходом.\nСреди семейного статуса и занятости больше всего женатых сотрудников\nЖенатых без долго явно больше остальных.\nБольшая часть женатых имеет доход 100-200 тыс\nЖенщины чаще возвращают кредит.\nДолги есть у людей с разным доходом.\nНа всех уровнях образования, кроме ученой степени, доход у мужчин выше.\nЦель получения кредита практически не зависит от среднего ежемесячного дохода.\nУ мужчин, которые в браке или были в браке, количество детей больше, чем у женщин в той же категории\nСредний доход по семейному статусу примерно одинаковый, у вдовцов немного пониже\nУ должников в среднем больше детей\nУ должников среднее количество детей больше у женщин, а у не должников среднее количество детей больше у мужчин\nУ должников средний возраст немного ниже для всех категорий семейного положения.\nМедианный доход у должников и не должников практически не отличается\nСреднее количество детей у группы 30-40 лет больше.\nДо 40 лет детей больше у женщин, старше 40 лет детей больше у мужчин\nВ группе 40-50 лет безработные имеют доход сравнимый с другими группами, а в других возрастных категориях доход безработных значительно ниже.\nС доходом до 100 тысяч детей больше у женщин, а с доходом выше 100 тысяч - у мужчин.\nУ женщин средний возраст выше, кроме категории ученая степень\nДолжники имеют ниже средний возраст как мужчины так и женщины. Ситуация сохраняется во всех группах дохода.\nЛюди от 30 до 50 лет имеют самый высокий средний доход.\nВо всех группах дохода, кроме ‘больше 500 тыс’ среднее количество детей больше\nВозрастная категория ‘30-40’ лет имеет больше детей во всех категориях дохода\nБольше всего кредит берут на цели, связанные с недвижимостью, кроме людей в гражданском браке\nЛюди в гражданском браке чаще берут кредит на свадьбу"
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#формулирование-и-провера-гипотез",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#формулирование-и-провера-гипотез",
    "title": "Исследование надёжности заёмщиков",
    "section": "5. Формулирование и провера гипотез",
    "text": "5. Формулирование и провера гипотез\n\n5.1 Формулирование гипотез\nВернуться к выводам\nНа основе проведенного анализа данных сформулируем следующие гипотезы:\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок.\nГипотеза 2: У мужчин средний доход выше\nГипотеза 3: Цель получения кредита не зависит от еза 3: Цель получения кредита не зависит от среднего ежемесячного доход\nГипотеза 4: Средний доход по семейному статусу одинаковый, но у вдовцов отличается\nГипотеза 5: У должников в среднем больше детей\nГипотеза 6: У должников средний возраст ниже\nГипотеза 7: Медианный доход у должников и не должников не отличается\n\n\nShow the code\n\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количества детей']\n    , age = ['Возраст', 'возраста']\n    , total_income = ['Ежемесячный доход', 'ежемесячного дохода']\n)\n\n\n\n\n5.2 Проверка гипотез\nВернуться к выводам\nПроверим сформулированные гипотезы.\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок\nH0: Наличие детей не влияет на возврат кредита в срок.\nH1: Наличие детей влияет на возврат кредита в срок.\nТак как у нас обе переменных категориальные, то воспользуемся критерием хи-квадрат Пирсона.\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\npagri_data_tools.chi2_pearson(df.has_child, df.debt)\n\n\nХи-квадрат Пирсона\nalpha =  0.05\np-value =  1.724356890544321e-05\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что наличие детей не влияет на возврат кредита в срок, была отклонена.\nЭто указывает на то, что наличие детей оказывает статистически значимое влияние на возврат кредита в срок.\n\nГипотеза 2: У мужчин средний доход выше\nH0: У мужчин средний доход не выше, чем у женщин\nH1: У мужчин средний доход выше, чем у женщин\nпосмотрим на распределение\n\n\nShow the code\n\npagri_data_tools.histogram(df.total_income, titles_for_axis)\n\n\n                                                \n\n\nУ нас значительные выбросы в доходе нужно использовать непараметрический тест\nИспользуем критерий Манна-Уитни\nАльтернатива будет - больше\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\nmale = df[df.gender=='M']['total_income']\nfemale = df[df.gender=='F']['total_income']\n\n\n\n\nShow the code\n\npagri_data_tools.mannwhitneyu(male, female, alternative='l')\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  2.4375861413179528e-245\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что у мужчин средний доход не выше, чем у женщин, была отклонена. Это указывает на то, что доход мужчин статистически значимо выше, чем у женщин.\n\nГипотеза 3: Цель получения кредита не зависит от среднего ежемесячного доход\nH0: Средний ежемесячный доход не различается между группами цели получения кредита.\nH1: Средний ежемесячный доход различается между группами цели получения кредита.\nИспользуем критерий Краскела-Уоллиса\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\nhas_child\nage_cat\ntotal_income_cat\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nесть\n40-50\n200-500 тыс\nнедвижимость\n\n\n\n\n\n\n\n\n\nShow the code\n\npagri_data_tools.kruskal_df(df[['purpose', 'total_income']])\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  0.281811844807747\nНет оснований отвергнуть нулевую гипотезу, поскольку p-value больше или равно уровню значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 у нас нет оснований отвергнуть гипотезу, что средний ежемесячный доход не различается между группами цели получения кредита.\n\nГипотеза 4: Средний доход по семейному статусу одинаковый, но у вдовцов отличается\nH0: Средний ежемесячный доход не различается между группами по семейному статусу\nH1: Средний ежемесячный доход различается между группами по семейному статусу\nИспользуем критерий Краскела-Уоллиса\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\npagri_data_tools.kruskal_df(df[['family_status', 'total_income']])\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  6.410790246681138e-16\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nИспользуем тест Тьюки, чтобы определить различия между группами\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\npagri_data_tools.tukey_hsd_df(df[['family_status', 'total_income']])\n\n\n                  Multiple Comparison of Means - Tukey HSD, FWER=0.05                   \n========================================================================================\n        group1             group2        meandiff  p-adj     lower       upper    reject\n----------------------------------------------------------------------------------------\nНе женат / не замужем        в разводе   1164.3623 0.9971  -8164.6436  10493.3681  False\nНе женат / не замужем   вдовец / вдова -24417.8772    0.0 -34517.7163  -14318.038   True\nНе женат / не замужем гражданский брак  -2094.6023 0.9086  -8676.0921   4486.8875  False\nНе женат / не замужем  женат / замужем    -18.9288    1.0  -5656.3008   5618.4432  False\n            в разводе   вдовец / вдова -25582.2395    0.0 -37297.2146 -13867.2643   True\n            в разводе гражданский брак  -3258.9646 0.8541 -12121.8028   5603.8736  False\n            в разводе  женат / замужем  -1183.2911 0.9949  -9369.4902    7002.908  False\n       вдовец / вдова гражданский брак  22323.2749    0.0  12652.3751  31994.1746   True\n       вдовец / вдова  женат / замужем  24398.9483    0.0  15344.1012  33453.7955   True\n     гражданский брак  женат / замужем   2075.6735 0.7668  -2751.2835   6902.6304  False\n----------------------------------------------------------------------------------------\n\n\nВидим, что гипотеза отвергается в парах где есть вдова / вдовец\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средний ежемесячный доход не различается между группами по семейному статусу, была отклонена.\nЭто указывает на то, что семейный статус оказывает статистически значимое влияние на ежемесячный доход.\n\nГипотеза 5: У должников в среднем больше детей\nH0: У должников и не должников в среднем одинаковое количество детей.\nH1: У должников в среднем больше детей, чем у не должников.\nПосмотрим на распределение количества детей\n\n\nShow the code\n\npagri_data_tools.histogram(df.children, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nТак как у нас дискретное распределение, то будем использовать критерий Манна-Уитни\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\nhas_child\nage_cat\ntotal_income_cat\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nесть\n40-50\n200-500 тыс\nнедвижимость\n\n\n\n\n\n\n\n\n\nShow the code\n\nyes = df[df.debt=='есть']['children']\nno = df[df.debt=='нет']['children']\n\n\n\n\nShow the code\n\npagri_data_tools.mannwhitneyu(yes, no, alternative='l')\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  1.0747666746471685e-05\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n- На уровне значимости 0.05 нулевая гипотеза о том, что у должников и не должников в среднем одинаковое количество детей, была отклонена.\nЭто указывает на то, существует статистически значимое отличие в количестве детей между должниками и не должниками.\nГипотеза 6: У должников средний возраст ниже\nH0: У должников и не должников одинаковый средний возраст\nH1: У должников средний возраст ниже, чем у не должников.\nПосмотрим на распределение возраста\n\n\nShow the code\n\npagri_data_tools.histogram(df.age, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: У должников и не должников дисперсия не отличается\nH1: У должников и не должников дисперсия отличается\nИспользуем тест Левена\n\n\nShow the code\n\nyes = df[df.debt=='есть']['age']\nno = df[df.debt=='нет']['age']\n\n\n\n\nShow the code\n\npagri_data_tools.levene([yes, no])\n\n\nТест Левена на гомогенность дисперсии\nalpha =  0.05\np-value =  0.00014336895517146544\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\npagri_data_tools.ttest_ind(yes, no, equal_var=False, alternative='s')\n\n\nT-критерий Уэлча\np-value =  1.7456980757984063e-27\nalpha =  0.05\nbeta =  0.0\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nПостроим доверительный интервал\n\n\nShow the code\n\npagri_data_tools.confint_t_2samples(yes, no, equal_var=False, alternative='s')\n\n\n(-inf, np.float64(-2.7569637392575))\n\n\nРезультат:\n- На уровне значимости 0.05 нулевая гипотеза о том, что у должников и не должников одинаковый средний возраст, была отклонена.\nЭто указывает на то, существует статистически значимое различие в среднем возрасте должников и не должников.\n95 % доверительный интервал для разницы средних возрастов для должников и не должников равен (-inf, -2.74)\nГипотеза 7: Медианный доход у должников и не должников не отличается\nH0: Медианный доход у должников и не должников не отличается\nH1: Медианный доход у должников и не должников отличается\nИспользуем бутстреп для проверке гипотезы\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\nyes = df[df.debt=='есть']['total_income']\nno = df[df.debt=='нет']['total_income']\n\n\n\n\nShow the code\n\nfig = pagri_data_tools.bootstrap_diff_2sample(yes, no, stat_func=np.median)\n\n\nBootstrap resampling to estimate the difference\nalpha =  0.05\np-value =  0.0575972194489306\nci =  (np.float64(-2622.3749999999995), np.float64(235.07499999999993))\nНет оснований отвергнуть нулевую гипотезу, поскольку p-value больше или равно уровню значимости\n\n\n\n\nShow the code\n\nfig.show()\n\n\n                                                \n\n\nРезультат:\nНа уровне значимости 0.05 нет оснований отвергнуть гипотезу. что медианный доход у должников и не должников не отличается.\n95 % доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34)\n\n\n5.3 Промежуточный вывод\nВернуться к выводам\n\nНа уровне значимости 0.05 гипотеза, что у мужчин средний доход выше, чем у женщин подтвердилась\nНа уровне значимости 0.05 у нас нет оснований отвергнуть гипотезу, что цель получения кредита практически не зависит от среднего ежемесяченого доход\nНа уровне значимости 0.05 гипотеза, что средний доход по семейному статусу примерно одинаковый, но у вдовцов отличается подтвердилась.\nНа уровне значимости 0.05 гипотеза, что у должников в среднем больше детей подтвердилась.\nНа уровне значимости 0.05 гипотеза, что у должников средний возраст ниже подтвердилась.\n95 % доверительный интервал для разницы средних возрастов для должников и не должников равен (-inf, -2.74)\nНа уровне значимости 0.05 нет оснований отвергнуть гипотезу. что медианный доход у должников и не должников не отличается.\n95 % доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34)\nНа уровне значимости 0.05 гипотеза, что наличие детей не влияет на возврат кредита в срок не подтвердилась."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#общий-вывод",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#общий-вывод",
    "title": "Исследование надёжности заёмщиков",
    "section": "6. Общий вывод",
    "text": "6. Общий вывод\nВернуться к выводам\nВыводы:\n\nНет явной зависимости семейного положения и задолженности.\nУ должников в среднем больше детей. В частности, среди должников женщины имеют больше детей в среднем, чем мужчины, а среди не должников мужчины имеют больше детей в среднем, чем женщины.\nЖенщины чаще возвращают кредит, чем мужчины.\nДолги присутствуют у людей с разным доходом.\nЛюди старше 60 лет реже других имеют долги.\nКредиты, оформленные на цели, связанные с недвижимостью, реже других приводят к долгам.\nУ должников средний возраст немного ниже для всех категорий семейного положения.\nМедианный доход у должников и не должников практически не отличается.\nДолжники имеют ниже средний возраст как мужчины так и женщины. Ситуация сохраняется во всех группах дохода.\nБольше всего кредит берут на цели, связанные с недвижимостью, кроме людей в гражданском браке.\nЛюди в гражданском браке чаще берут кредит на свадьбу.\nДоход является самым значимым признаком для предсказания задолженности.\nЛюди от 30 до 50 лет имеют самый высокий средний доход.\nТолько 5 процентов клиентов моложе 25 лет. Основная часть клиентов старше 30 лет.\nМеньше 5 % клиентов имеют зарплату меньше 63 тысяч. При этом 25 % имеют доход больше 200 тысяч.\n58 % клиентов либо женаты, либо замужем. 19 % в гражданском браке. Можно сделать вывод что большинство в браке.\nБольшинство клиентов женщины (66 процентов).\n92 % клиентов не имеют долга.\nЧем меньше количество детей, тем больше значений с высоким доходом.\nБольшая часть женатых имеет доход 100-200 тыс.\nНа всех уровнях образования, кроме ученой степени, доход у мужчин выше.\nЦель получения кредита практически не зависит от среднего ежемесячного дохода.\nУ мужчин, которые в браке или были в браке, количество детей больше, чем у женщин в той же категории.\n\nАномалии и особенности в данных:\n\nВ датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\n\nВ столбце с количеством детей есть отрицательные значения. 47 штук. Меньше 1 процента от всего датафрейма. Также есть клиенты с 20 детьми.\nКолонка общий трудовой стаж содержит 74 % отрицательных значений. А также максимальное количество дней стажа больше 400 тысяч дней, это больше 1000 лет.\nВ колонке возраста 101 нулевое значение.\nКолонка дохода имеет слишком много знаков после запятой.\nВ колонке с образованием присутствуют одни и те же значения с разными регистрами. При этом в колонке с id образования все в порядке.\n\nРезультаты предобработки данных:\n\nУдалили колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nКолонка со стажем имеет совершенно некорректные данные. Чтобы не внести искажение в анализ, удалим эту колонку.\nУдалили отрицательные значения в колонке с количеством детей, которые составляли 0,2% от общего количества записей в данных.\nУдалили нулевые значения в колонке с возрастом, которые составляли 0,5% от общего количества записей в данных.\nУдалили записи, где количество детей равно 20, которые составляли 0,35% от общего количества записей в данных.\nЗаполнили пропуски в столбце с доходом медианным значением, учитывая категории образование, семейный статус, пол, занятость.\nОкруглили значения дохода до целого.\nУдалили 1 запись, где пол равен XNA\nСоздали дополнительную бинарную колонку, указывающую на наличие детей (1 - есть дети, 0 - нет детей).\nСделали дополнительную колонку с возрастными категориями.\n\nСделали дополнительную колонку с категориями дохода.\n\nЛематизировали колонку с целью кредита, чтобы получить категории целей кредита.\n\nРезультаты проверки гипотез:\n\nГипотеза 1: У мужчин средний доход выше, чем у женщин\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась.\nГипотеза 2: Цель получения кредита практически не зависит от среднего ежемесячного дохода\nРезультат: На уровне значимости 0.05 у нас нет оснований отвергнуть гипотезу.\nГипотеза 3: Средний доход по семейному статусу примерно одинаковый, но у вдовцов отличается\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась.\nГипотеза 4: У должников в среднем больше детей\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась.\n\nГипотеза 5: У должников средний возраст ниже\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась. 95% доверительный интервал для разницы средних возрастов для должников и не должников равен (-inf, -2.74).\n\nГипотеза 6: Медианный доход у должников и не должников не отличается\nРезультат: На уровне значимости 0.05 нет оснований отвергнуть гипотезу. 95% доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34).\n\nГипотеза 7: Наличие детей не влияет на возврат кредита в срок\nРезультат: На уровне значимости 0.05 гипотеза не подтвердилась.\n\nРекомендации:\n\nДобавить контроль данных, чтобы не дублировались значения с разными регистрами в колонке с образованием.\nДобавить уникальный идентификатор клиента, чтобы избежать дублирования строк.\nДобавить проверку на отрицательные значения и на слишком большие значения в количестве детей при загрузке данных.\nВыяснить откуда возникают отрицательные значения в трудовом стаже и добавить контроль ввода невалидных данных.\nВыяснить причину нулевых значений в колонке возраста и добавить проверку на нулевые значения при загрузке данных.\nВыяснить причину большого количества знаков после запятой в колонке дохода."
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "",
    "text": "Загрузка библиотек \n  Описание и изучение данных\n  \n  Описание данных\n  Изучение данных\n  Промежуточный вывод\n  \n  Предобработка данных\n  \n  Обрезание неполных временных периодов\n  Выбор нужных столбцов для дальнейшего анализа\n  Обработка выбросов\n  Обработка пропусков\n  Обработка дубликатов\n  Приведение данных к удобной форме\n  Промежуточный вывод\n  \n  Обогащение данных и создание новых переменных\n  \n  Парсинг внешних источников\n  Создание новых числовых переменных\n  Категоризация данных\n  Расчет метрик\n  Объединение данных\n  Промежуточный вывод\n  \n  Визуализация взаимосвязей переменных\n  \n  Исследование корреляционных связей\n  Изучение зависимостей между числовыми переменными\n  Изучение зависимостей между категориальными переменными\n  Анализ временных зависимостей\n  Изучение зависимостей между числовыми и категориальными переменными\n  Анализ срезов данных\n  Когортный анализ\n  Промежуточный вывод\n  \n  Формулирование и провера гипотез\n  \n  Формулирование гипотез\n  Проверка гипотез\n  Промежуточный вывод\n  \n  Общий вывод\nАвтор:\nГригорьев Павел\nОписание проекта:\nКоммерческий департамент компании «Мегалайн», федерального оператора сотовой связи, стремится оптимизировать рекламный бюджет, выяснив, какой из тарифных планов - «Смарт» или «Ультра» - приносит больше дохода. Для этого необходимо провести предварительный анализ на основе данных 500 пользователей, включая информацию о тарифах, количестве звонков и сообщений за 2018 год. Нужно проанализировать поведение клиентов и сделать вывод - какой тариф лучше.\nЦель:\nПровести анализ данных 500 пользователей компании «Мегалайн» для определения более прибыльного тарифного плана («Смарт» или «Ультра») и оптимизации рекламного бюджета.\nИсточники данных:\nДанные о пользователях и тарифных планах предоставлены компанией «Мегалайн».\nУсловия проведения анализа днных:\nДля анализ будут использоваться данные с 1 января 2018 по 31 декабря 2018 года"
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#загрузка-библиотек",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#загрузка-библиотек",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "Загрузка библиотек ",
    "text": "Загрузка библиотек \n\n\nShow the code\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore\npd.set_option('display.max_columns', None)"
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#описание-и-изучение-данных",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#описание-и-изучение-данных",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "Описание и изучение данных",
    "text": "Описание и изучение данных\n\nОписание данных\nОписание тарифов\n\nТариф «Смарт»\n\nЕжемесячная плата: 550 рублей\nВключено 500 минут разговора, 50 сообщений и 15 Гб интернет-трафика\nСтоимость услуг сверх тарифного пакета: 1. минута разговора: 3 рубля («Мегалайн» всегда округляет вверх значения минут и мегабайтов. Если пользователь проговорил всего 1 секунду, в тарифе засчитывается целая минута); 2. сообщение: 3 рубля; 3. 1 Гб интернет-трафика: 200 рублей.\n\nТариф «Ультра»\n\nЕжемесячная плата: 1950 рублей\nВключено 3000 минут разговора, 1000 сообщений и 30 Гб интернет-трафика\nСтоимость услуг сверх тарифного пакета: 1. минута разговора: 1 рубль; 2. сообщение: 1 рубль; 3. 1 Гб интернет-трафика: 150 рублей.\n\n\nТаблица users (информация о пользователях):\n\nuser_id - уникальный идентификатор пользователя\nfirst_name - имя пользователя\nlast_name - фамилия пользователя\nage - возраст пользователя (годы)\nreg_date - дата подключения тарифа (день, месяц, год)\nchurn_date - дата прекращения пользования тарифом (если значение пропущено, то тариф ещё действовал на момент выгрузки данных)\ncity - город проживания пользователя\ntarif - название тарифного плана\n\nТаблица calls (информация о звонках):\n\nid - уникальный номер звонка\ncall_date - дата звонка\nduration - длительность звонка в минутах\nuser_id - идентификатор пользователя, сделавшего звонок\n\nТаблица messages (информация о сообщениях):\n\nid - уникальный номер сообщения\nmessage_date - дата сообщения\nuser_id - идентификатор пользователя, отправившего сообщение\n\nТаблица internet (информация об интернет-сессиях):\n\nid - уникальный номер сессии\nmb_used - объём потраченного за сессию интернет-трафика (в мегабайтах)\nsession_date - дата интернет-сессии\nuser_id - идентификатор пользователя\n\nТаблица tariffs (информация о тарифах):\n\ntariff_name - название тарифа\nrub_monthly_fee - ежемесячная абонентская плата в рублях\nminutes_included - количество минут разговора в месяц, включённых в абонентскую плату\nmessages_included - количество сообщений в месяц, включённых в абонентскую плату\nmb_per_month_included - объём интернет-трафика, включённого в абонентскую плату (в мегабайтах)\nrub_per_minute - стоимость минуты разговора сверх тарифного пакета (например, если в тарифе 100 минут разговора в месяц, то со 101 минуты будет взиматься плата)\nrub_per_message - стоимость отправки сообщения сверх тарифного пакета\nrub_per_gb - стоимость дополнительного гигабайта интернет-трафика сверх тарифного пакета (1 гигабайт = 1024 мегабайта)\n\n\n\nИзучение данных\n\nИзучение переменных\n\nТаблица users (информация о пользователях)\n\n\nShow the code\ndtype = {'city': 'category', 'tariff': 'category'}\ndf_users = pd.read_csv('https://code.s3.yandex.net/datasets/users.csv', dtype=dtype\n                       , parse_dates=['reg_date', 'churn_date'], date_format='%Y-%m-%d')\ndf_users.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nuser_id\nage\nchurn_date\ncity\nfirst_name\nlast_name\nreg_date\ntariff\n\n\n\n\n308\n1308\n52\nNaT\nМосква\nИнесса\nКорнилова\n2018-01-04\nsmart\n\n\n13\n1013\n36\nNaT\nИваново\nБорис\nАндреенко\n2018-11-14\nultra\n\n\n414\n1414\n70\nNaT\nВладимир\nАлександра\nЛобанова\n2018-05-05\nsmart\n\n\n32\n1032\n31\nNaT\nУльяновск\nИнна\nИгнатьева\n2018-01-04\nsmart\n\n\n460\n1460\n64\nNaT\nИжевск\nАрина\nАбашкина\n2018-04-06\nsmart\n\n\n\n\n\n\n\nИзучим каждый столбец отдельно.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_users)\nnext(gen)\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n500\n8\n0\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_users)\n\n\n\n\nShow the code\n\n    \n# Пример использования\ngen = info_gen()\n\n# Получаем значения по умолчанию\nprint(gen.next())  # Вывод: a 0\n\n# Меняем режим на 'else'\nprint(gen.next())  # Вывод: else 0\n\n# Меняем режим обратно на 'a'\nprint(gen.next())  # Вывод: a 1\n\n# Получаем еще одно значение\nprint(gen.next())  # Вывод: a 2\n\n# Достигнем конца генератора\nfor _ in range(7):  # Получим оставшиеся значения\n    print(gen.next())  # Вывод: a 3, a 4, a 5, a 6, a 7, a 8, a 9\n\n# Попробуем вызвать next после окончания генератора\nprint(gen.next())  # Вывод: None\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nGenerator has finished\nGenerator has finished\n\n\n\n\nShow the code\nnext(gen)\n\n\n0\n\n\n\n\nShow the code\nnext(gen)\n\n\n0\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 2: Статистика столбца \"churn_date\"\n\n\n\n\n\nFirst date\n2018-08-17 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-12-30 00:00:00\n\nMissing\n462 (92%)\n\nMonths missing\n0%\n\n\n\nValues\n38 (8%)\n\nDistinct\n33 (7%)\n\nWeeks missing\n30%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n466 (93%)\n\nDays missing\n76%\n\n\n\n\n\n\n\n\n\n        \n        \n\n\nНаблюдения:\n\nВ колонке с датой прекращения пользования тарифом 92 % пропусков. Значит 92 % пользователей ещё пользуются таррифом.\nЕсть пропущенные недели и дни, но в данном случае это нормально.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 3: Статистика столбца \"reg_date\"\n\n\n\n\n\nFirst date\n2018-01-01 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-12-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n500 (100%)\n\nDistinct\n270 (54%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n230 (46%)\n\nDays missing\n26%\n\n\n\n\n\n\n\n\n\n        \n        \n\n\nНаблюдения:\n\nВ колонке с датой подключения тарифа 26 % дней пропущено.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 4: Статистика и гистограмма столбца \"user_id\"\n\n\n\n\n\nValues\n500 (100%)\n\nMax\n1 499\n\nAvg\n1 249.5\n\n1 000 &lt;1%\n\n\nMissing\n---\n\n95%\n1 474.05\n\nMode\n---\n\n1 329 &lt;1%\n\n\nDistinct\n500 (100%)\n\n75%\n1 374.25\n\nRange\n499\n\n1 342 &lt;1%\n\n\nDuplicates\n---\n\nMedian\n1 249.5\n\niQR\n249.5\n\n1 341 &lt;1%\n\n\nZeros\n---\n\n25%\n1 124.75\n\nstd\n144.48\n\n1 340 &lt;1%\n\n\nNegative\n---\n\n5%\n1 024.95\n\nkurt\n-1.20\n\n1 339 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1 000\n\nskew\n0.00\n\n1 338 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n            \n                \n                        \n        \n        \n\n\nНаблюдения:\n\nВ таблице users 500 уникльных пользователей.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 5: Статистика и гистограмма столбца \"age\"\n\n\n\n\n\nValues\n500 (100%)\n\nMax\n75\n\nAvg\n46.59\n\n53 (3%)\n\n\nMissing\n---\n\n95%\n72.05\n\nMode\n---\n\n42 (3%)\n\n\nDistinct\n58 (12%)\n\n75%\n62\n\nRange\n57\n\n63 (3%)\n\n\nDuplicates\n442 (88%)\n\nMedian\n46\n\niQR\n30\n\n64 (3%)\n\n\nZeros\n---\n\n25%\n32\n\nstd\n16.67\n\n71 (3%)\n\n\nNegative\n---\n\n5%\n21\n\nkurt\n-1.20\n\n73 (2%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n18\n\nskew\n-0.00\n\n21 (2%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n            \n                \n                        \n        \n        \n\n\nНаблюдения:\n\nПользователи имеют возраст от 18 до 75 лет\nВ основном пользователи имеют возраст от 32 до 62 лет.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 6: Статистика и гистограмма столбца \"user_id\"\n\n\n\n\n\nValues\n500 (100%)\n\nMax\n1 499\n\nAvg\n1 249.5\n\n1 000 &lt;1%\n\n\nMissing\n---\n\n95%\n1 474.05\n\nMode\n---\n\n1 329 &lt;1%\n\n\nDistinct\n500 (100%)\n\n75%\n1 374.25\n\nRange\n499\n\n1 342 &lt;1%\n\n\nDuplicates\n---\n\nMedian\n1 249.5\n\niQR\n249.5\n\n1 341 &lt;1%\n\n\nZeros\n---\n\n25%\n1 124.75\n\nstd\n144.48\n\n1 340 &lt;1%\n\n\nNegative\n---\n\n5%\n1 024.95\n\nkurt\n-1.20\n\n1 339 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1 000\n\nskew\n0.00\n\n1 338 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n            \n                \n                        \n        \n        \n\n\nНаблюдения:\n\nВ таблице users 500 уникльных пользователей.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 7: Статистика и гистограмма столбца \"user_id\"\n\n\n\n\n\nValues\n500 (100%)\n\nMax\n1 499\n\nAvg\n1 249.5\n\n1 000 &lt;1%\n\n\nMissing\n---\n\n95%\n1 474.05\n\nMode\n---\n\n1 329 &lt;1%\n\n\nDistinct\n500 (100%)\n\n75%\n1 374.25\n\nRange\n499\n\n1 342 &lt;1%\n\n\nDuplicates\n---\n\nMedian\n1 249.5\n\niQR\n249.5\n\n1 341 &lt;1%\n\n\nZeros\n---\n\n25%\n1 124.75\n\nstd\n144.48\n\n1 340 &lt;1%\n\n\nNegative\n---\n\n5%\n1 024.95\n\nkurt\n-1.20\n\n1 339 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1 000\n\nskew\n0.00\n\n1 338 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n            \n                \n                        \n        \n        \n\n\nНаблюдения:\n\nВ таблице users 500 уникльных пользователей.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 8: Статистика и гистограмма столбца \"user_id\"\n\n\n\n\n\nValues\n500 (100%)\n\nMax\n1 499\n\nAvg\n1 249.5\n\n1 000 &lt;1%\n\n\nMissing\n---\n\n95%\n1 474.05\n\nMode\n---\n\n1 329 &lt;1%\n\n\nDistinct\n500 (100%)\n\n75%\n1 374.25\n\nRange\n499\n\n1 342 &lt;1%\n\n\nDuplicates\n---\n\nMedian\n1 249.5\n\niQR\n249.5\n\n1 341 &lt;1%\n\n\nZeros\n---\n\n25%\n1 124.75\n\nstd\n144.48\n\n1 340 &lt;1%\n\n\nNegative\n---\n\n5%\n1 024.95\n\nkurt\n-1.20\n\n1 339 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1 000\n\nskew\n0.00\n\n1 338 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n            \n                \n                        \n        \n        \n\n\nНаблюдения:\n\nВ таблице users 500 уникльных пользователей.\n\n\n\nТаблица calls (информация о звонках)\n\n\nShow the code\ndf_calls = pd.read_csv('https://code.s3.yandex.net/datasets/calls.csv'\n                       , parse_dates=['call_date'], date_format='%Y-%m-%d')\ndf_calls.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nid\ncall_date\nduration\nuser_id\n\n\n\n\n73455\n1185_249\n2018-10-19\n14.37\n1185\n\n\n12917\n1033_168\n2018-08-17\n12.56\n1033\n\n\n74950\n1186_772\n2018-04-27\n0.00\n1186\n\n\n189799\n1467_66\n2018-12-15\n0.00\n1467\n\n\n165787\n1409_412\n2018-11-04\n2.69\n1409\n\n\n\n\n\n\n\nИзучим каждый столбец отдельно.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_calls)\nnext(gen)\n\n\n\n\n\n\n\nTable 9: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n202 607\n4\n16\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 10: Статистика столбца \"call_date\"\n\n\n\n\n\nFirst date\n2018-01-01 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-12-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n202 607 (100%)\n\nDistinct\n365 (&lt;1%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n2\n\nDuplicates\n202 242 (99.8%)\n\nDays missing\n0%\n\n\n\n\n\n\n\n\n\n        \n        \n\n\nНаблюдения:\n\nПропусков и нулевых значений нет.\nПрисутствуют данные за каждый день.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 11: Статистика и гистограмма столбца \"duration\"\n\n\n\n\n\nValues\n202 607 (100%)\n\nMax\n38\n\nAvg\n6.76\n\n0 (20%)\n\n\nMissing\n---\n\n95%\n17.52\n\nMode\n0\n\n4.49 &lt;1%\n\n\nDistinct\n2 871 (1%)\n\n75%\n10.7\n\nRange\n38\n\n5.5 &lt;1%\n\n\nDuplicates\n199 736 (99%)\n\nMedian\n6\n\niQR\n9.4\n\n6.15 &lt;1%\n\n\nZeros\n39 613 (20%)\n\n25%\n1.3\n\nstd\n5.84\n\n6.38 &lt;1%\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n-0.11\n\n4.92 &lt;1%\n\n\nRAM (Mb)\n2\n\nMin\n0\n\nskew\n0.69\n\n5.05 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n            \n                \n                        \n        \n        \n\n\nНаблюдения:\n\nВ колонке с длительностью звонка 20 процентов нулей.\nМаксимальная длительность звонка 38 минут.\nДлительность звонка варьируется от 0 до 38 минут.\nВ основном длительность звонка находится в диапазоне от 1.3 до 10.7 минут.\nЧаще всего звонок составляет 0 минут.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 12: Статистика и гистограмма столбца \"user_id\"\n\n\n\n\n\nValues\n202 607 (100%)\n\nMax\n1 499\n\nAvg\n1 253.94\n\n1 377 &lt;1%\n\n\nMissing\n---\n\n95%\n1 472\n\nMode\n1 377\n\n1 168 &lt;1%\n\n\nDistinct\n492 (&lt;1%)\n\n75%\n1 379\n\nRange\n499\n\n1 375 &lt;1%\n\n\nDuplicates\n202 115 (99.8%)\n\nMedian\n1 260\n\niQR\n253\n\n1 453 &lt;1%\n\n\nZeros\n---\n\n25%\n1 126\n\nstd\n144.72\n\n1 196 &lt;1%\n\n\nNegative\n---\n\n5%\n1 027\n\nkurt\n-1.24\n\n1 021 &lt;1%\n\n\nRAM (Mb)\n2\n\nMin\n1 000\n\nskew\n-0.05\n\n1 363 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n            \n                \n                        \n        \n        \n\n\nНаблюдения:\n\nВ таблице users 492 уникальных пользователя.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 13: Статистика и топ-10 значений столбца \"id\"\n\n\n\n\n\nValues\n202 607 (100%)\n\n1000_0 &lt;1%\n\n\nMissing\n---\n\n1344_881 &lt;1%\n\n\nDistinct\n202 607 (100%)\n\n1344_883 &lt;1%\n\n\nDuplicated origin\n---\n\n1344_884 &lt;1%\n\n\nDupl (modify - origin)\n---\n\n1344_885 &lt;1%\n\n\nEmpty\n---\n\n1344_886 &lt;1%\n\n\nRAM (Mb)\n11\n\n1344_887 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n                  \n        \n        \n\n\nНаблюдения:\n\nВсе id звонков уникальны. Так и должно быть.\n\n\n\nТаблица messages (информация о сообщениях)\n\n\nShow the code\ndf_users = pd.read_csv('https://code.s3.yandex.net/datasets/messages.csv', nrows=5)\ndf_users.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nid\nmb_used\nsession_date\nuser_id\n\n\n\n\n0\n0\n1000_0\n112.95\n2018-11-25\n1000\n\n\n3\n3\n1000_3\n550.27\n2018-08-22\n1000\n\n\n2\n2\n1000_2\n1197.26\n2018-06-25\n1000\n\n\n1\n1\n1000_1\n1052.81\n2018-09-07\n1000\n\n\n4\n4\n1000_4\n302.56\n2018-09-24\n1000\n\n\n\n\n\n\n\nИзучим каждый столбец отдельно.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_users)\nnext(gen)\n\n\n\n\n\n\n\nTable 14: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n202 607\n4\n16\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 15: Статистика столбца \"call_date\"\n\n\n\n\n\nFirst date\n2018-01-01 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-12-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n202 607 (100%)\n\nDistinct\n365 (&lt;1%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n2\n\nDuplicates\n202 242 (99.8%)\n\nDays missing\n0%\n\n\n\n\n\n\n\n\n\n        \n        \n\n\n\nДля дальнейшего анализа срауз приведем колонку education к нижнему регистру и удалим лишние пробелы\n\nНужно проверить, что после нормализации категориальный тип остался прежний\n\n\nShow the code\ndf.education = pagri_prep.normalize_string_series(df.education)\ndf.education.value_counts()\n\n\nсреднее                15233\nвысшее                  5260\nнеоконченное высшее      744\nначальное                282\nученая степень             6\nName: education, dtype: int64\n\n\n\n\nShow the code\ndf.education.dtype\n\n\n\nсделать предположения, почему могло так произойти, выдвигаем гипотезы\n\n\nпридумать способы проверки выдвинутых гипотез и записать\n\n\nесли у нас по оси x время, то проанализировать сезонность\n\n\nподумать а так и должно было получиться, основываясь на понимании физики параметра\n\n\nзафиксировать возможные рекомендации\n\n\nДля гистограмм, нужно понять почему именно такое распределение метрики.\nСовпадет это с логикой этой метрики.\n\n\nТакже когда строим гистограммы и вайолин плот, то не просто фиксируем, что есть тяжелые хвосты, разброс между квартилями такой-то.\nА думаем почему так, пытаемся связать это с физикой параметра. Должно быть физическое объяснение всех аномалий.\nЕсли объяснения нет, то возможно это инсайт.\n\n\nВажно убедиться, что у нас есть данные на все источники, которые заявлены. Например, мы изучаем источники трафика и у нас они в разных таблицах.\nНужно убедиться, что во всех таблицах есть все источники, и проверить нет ли аномалий, возможно какой-то сильно выбивается или какого-то вообще где-то нет.\n\n\nИ очень важно сверить, что периоды в разных таблицах (если у нас больше одной таблицы) совпадают.\n\n\nВажно проверить соответствуют ли временной период данных тому, который заявлен в задании,\nопределиться что будем делать с неполными периодами.\n\n\nВообще, когда у нас несколько таблиц и там есть категориальные переменные или время, то\nмы должны взять уникальные значения категориальных переменных из каждой таблицы (одниаковые переменные) и сравнить.\nКоличество уникальных должно совпадать, иначе нужно разбираться\nИ с верменем как минимум мин и макс даты должны совпадать до дня, а лушше до минуты часа\n\n\nОчень важно, если у нас есть стартовая дата чего-то и конечная, то обязательно нужно проверить,\nнет ли у нас записей, где конечная дата меньше стартовой.\n\n\nВажная проверка, если у нас есть категории и даты, то сгруппировать по категориями и вывести количество занчений, минимальную и максимальную дату\nТаким образом мы сразу поймем распределение в категории и\nувидем какие временные интервалы у каждой категории\nЕсли у нас все категории должны быть в один день, то мы поймем нет ли багов\n\n\nВообще очень важно смотреть не только на аномалии в значениях, но и аномалии в категориальных переменных.\nА тут аномалией будет отстутствие какого-то значения, хотя в описании или поставновке задачи оно есть.\nТакже совпадение количества значений категориальных переменных в разных таблицах.\n\n\nВнимательно посмотреть на столбцы, если есть столбцы, в которых могут быть потенциальные анамали, то проверить их.\nНапример, есть столбец возрасти стаж работы, проверить, что возраст больше стажа.\nИ подобные случаи.\n\n\nПроверка на нарушения уникальности\nУбедить, что столбцы, значения в которых не должны повторяться и должны быть уникальными, такие в действительности.\nСмотрим на результат функции my_info\n\n\nПроверка на ошибки целостности\nЕсли у нас есть столбцы, в которых значения должны совпдаать попарно, то проверяем на это\nget_non_matching_rows\n\n\n\nShow the code\npagri_data_tools.get_non_matching_rows()\n\n\n\nПроверка условий\nПроверьте, что данные в датафрейме удовлетворяют определенным условиям, таким как “возраст &gt; 18” или “страна == ‘Россия’”\n\n\n\n\nИзучение дубликатов\nВАЖНО\nв временный файл записываем наблюдения по дубликатам, выбросам, нулевым, отрицательным значениям и пропусах,\nкоторые нужны для обработки. Чтобы потом не бегать по отчету.\nЗаписываем наблюдения, которые нужны для обработки, нарпимер, у нас есть записи с 0 комнат и мы их\nизучили в разрезе площади и увидели что все они скорее всего студии и однокомнатыне.\nЭто нужно записать, чтобы в обработке заменить 0 на 1.\nВообще основная задача этого этапа изучения данных не только обнаружить дубли, аномалии, пропуски,\nно и сформулировать гипотезы, которые помогут нам в обработке.\nПоэтому думаем не только что видим, а думаем сразу как будем обрабатывать и как можно проверить гипотезы.\nВ дальшейших разделах изучения данных схема такая - смотрим каждый столбец - изучаем его аномалии по категориям - в процессе изучения по категориям стараемся определить закономерности, которые помогут обработать аномалии - для каждого столбца думаем как можно обработать аномалии, какие другие столбцы могут помочь определить закономерности.\n- если определили числовой столбец, который может помочь, то сразу выдвигаем и проверяем гипотезу.\n- и все записываем во временный файл, чтобы потом обрабатывать столбцы\n\nНе забываем про ИИ.\nПишем список столбцов (именно что они значат, то есть образование, пол и прочее), говорим, что есть дубли.\nИ просим предложить причины этих дублей. Если видим важное, то используем для рекомендаций, выводов и замены дублей в предобработке.\n\n\nПроверяем на дубли\n\n\nВажно помнить, что если у нас есть id и название товара, то названия товара все равно нужно проверить на дубли, &gt; возможно у нас 2 ай ди с одним названием.\nТакже важно в каждой отдельной колонке проверить дубли и если их много, то посмотреть на соседние колонки, что там происходит\nДубликаты часто носят скрытый характер. &gt; То есть это могут быть поля, которые записаны по разному, но относятся к одному и тому же.\n&gt; Поэтому важно, если у нас категориальный признак, изучить нет ли повторящихся категорий, которые записаны немного по разному.\n&gt; Так как это создает шум, мы по сути имеем две разные категории, но на самом деле это одна. Нужно собрать их в одну.\nИ очень важно, если мы не подтвердили, что это действительно дубликат (например у нас нет ай ди клиента и мы не смогли выяснить один и тот же ли это человек), &gt; то нужно аккуратно удалять их. Но и оставлять много дублей плохо, так как они вносят шумы и искажения.\nПомним, что наличие дубликата не говорит точно, что это дубль, возможно у нас нет ещё колонок, котоыре бы детализировали и разделили эти дубли. &gt; Поэтому тут могут быть рекомендации, чтобы добавли в фрейм доп колонки, которые помогут убрать дубли (либо сам ищешь ещё поля)\n\n\nКогда смотрим на дубли, то нужно ответить на вопрос так и должно быть, это нормально, что дубли в этих колонках.\nНапример у нас дубли во всех строках таблицы, нам нужно понять это может быть или этого не может быть, и нужно разбираться.\nАналогично когда смотрим колонки по 2, 3 и так далее, то самое главное, ответить на вопрос дубли могут быть в этих колонках.\nТакже когда разбиваем по категориям, задаем себе вопрос так могли распреедлеиться дубли.\n\n\ncheck_duplicated\ncheck_duplicated_combinations_gen\nВ первую функцию можно передавать весь датафрейм и можно выбирать нужные столбцы для проверки на дубли и передавать их.\n\n\nЕсли мы нашли колонки в которых дубликатов не должно быть, то нужно изучить эти дубликаты по категориальным переменным в нашем датафрейме\npagri_data_tools.analyze_anomaly_by_category\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_zeros, \"by_category\", \"rooms\", 'studio')\n\n\nНаблюдения:\n\nОсобых перекосов в сторону определенного значения в категории не наблюдается\n\n\nИдем по порядку с помощью next(gen)\nесли в выводе нет ничего интересного, то выше помещаем ячейку с таким содержимым %%capture\nnext(gen)\nснова выполняем next(gen), если снова ничего интересного то, к ячейке выше добавляем next(gen) будет так\n%%capture\nnext(gen);next(gen)\nи так далее, пока не появится важная ячейка\nдалее оставляем эту важную ячейку и снова повторяем с первого пункта,\nв итоге между ячейками с нужным выводом будут ячейки с запрещенным выводом и можно будет прогонять ноутбук весь целиком и выводы будут в нужнфх местах\n\n\nПосмотрим на дубли во всем датафрейме\n\n\n\nShow the code\npagri_data_tools.check_duplicated(df)\n\n\n\nПосмотрим сколько у нас дублей в каждой колонке\n\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df)\n\n\n\nДумаем какие столбцы должны быть уникальными и где дублей не должно быть.\nИ их уже изучаем на дубли.\n\n\nМожно посмотреть на строки датафрейма в колонках с дублями\nЭто делаем, если есть время, так как этот шаг редко даст результат, так как на глаз сложно определить закономерности.\nСуть этого шага посмотреть на строки датафрейма в разных колонках с дублями и выдвинуть гипотезы с закономеностями в этих дублях по очереди берем колонки и смотрим на датафреймы (записано рядом, чтобы показать, что не одну колонку только беерем)\n\n\n\nShow the code\ncol1_duplicated = series_duplicated['col1']\ncol2_duplicated = series_duplicated['col2']\n\n\n\n\nShow the code\ncol1_duplicated.head()\ncol2_duplicated.head()\n\n\nВажно подумать не только о одиночных столбцах, которые долны иметь уникальные значения.\nНо обязательно подумать какие комбинации столбцов должны быть уникальными.\nЕсли есть такие комбинации, то фильтруем датафрейм по этим столбцам и используем\n\n\nShow the code\nfiltered_df = df[['col1', 'col2']]\npagri_data_tools.check_duplicated(filtered_df)\n\n\n\nЕсли у нас есть столбцы в которых значения должны быть уникальными, то помещаем их в отдельный датафрейим и изучаем дальше.\n\n\nкогда изучаем по категориям, то смотрим на diff_sum_pct, тут логика такая -\nнам нужно сравнить количество строк с пропусками в каждой категории, учитывая размер этой категории.\nТо есть если у нас категории например дорогие квартиры и дешевые (категориальная переменная нарпимер категория стоимости)\nи в них соотношение пропусков 1000 к 500, а общее соотношение групп 700 на 800, то явно отличается количество.\nПоэтому мы смотрим на отличия, и если они существенны, то делаем вывод, что категория влияет на пропуски.\nИначе пишем, что влияние не обнаружено.\n\n\n\nShow the code\ngen = pagri_data_tools.check_duplicated_combinations_gen()\n\n\n\nсмотрим по категориям\n\n\nВАЖНО - убедиться, что нет в ноутбуке _gen_ (делаем ctrl+F и вбиваем _gen_)\nставим _gen_ в том месте где хотим чтобы появились ячейки после работы в prep_dash\n\nСтрочку с созданием gen оставляем без is_dash, это для отчета,\nИ ниже пишем строчку с is_dash для создания dash app и потом ее удаляем\nКод появится после работы в dash\n\n\nShow the code\n_gen_ \n\n\nВАЖНО\nдобавить в приложение dash возможность писать код на питоне для работы с текущим датафреймом.\nЭто нужно чтобы изучить аномалии. То есть мы запускаем dash app.\nДалее у нас для каждой колонки будут выводиться разбивки по категориям\nНо дополнительно нужно будет проверять разные гипотезы, чтобы потом на основе этого обрабатывать данные. Для этого нужно иметь возможность выполнять код и видеть результат.\nи чтобы можно было нужный код (который хотим поместить в отчет) сохранить также как next(gen)\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\ngen = pagri_data_tools.analyze_by_category_gen(df, series_duplicated, is_dash=True)\npagri_dash.prep_dash(gen, \"/colab/pagri-projects/quarto/projects/housing-ads-investigation/housing_ads_investigation.ipynb\")\n\n\n\nВажно на дубли проверить и отдельные строки и целиком таблицу и подумать какие группы столбцов могут дать дубли и на это тоже проверить.\n\n\nЕсли в дублях у нас есть ай ди клиента, то тут понятно, если нет ай ди, то пишем рекомендацию, чтобы данные приходили с ай ди,\nчтобы можно было понять это один человек или нет\n\n\nЕсли у нас id пользователя встречается не одни раз в таблице и есть другие поля которые должны быть всегда одни и те же,\nнапримем пол и прочее, то нужно проверить у всех ли пользователей все значения одинаковые в этом столбце.\nЭто может быть не только ай ди, любое уникальное поле, которое повторяется и для каждого этого поля есть другое\nполе, которое не должно меняться, нужно проверять а действительно ли это поле не меняется.\n\n\n\nИзучение пропусков\n\nНе забываем про ИИ.\nПишем название столбца (именно что они значат, то есть образование, пол и прочее), говорим, что есть пропуски.\nИ просим предложить причины этих пропусков. Если видим важное, то используем для рекомендаций, выводов и замены пропусков в предобработке.\n\n\nПроверяем на пропуски\n\n\nКогда смотрим на пропуски, то нужно ответить на вопрос так и должно быть, это нормально, что пропуски в этих колонках.\nКогда смотрим на пропуски по категориям, то думаем есть ли закономерность, не случайно ли распределение по категориям\n\n\nКогда мы встречаем пропуски, прежде всего, нужно ответить на вопрос, существует ли закономерность в появлении пропусков.\nИными словами, не случайно ли их возникновение в наборе данных.\nСлучайно, значит нет закономерности с соседними столбцами, то есть пропуски есть для разных значений.\nА могут быть неслучайные, то есть существует явная закономерностЬ, что пропуски есть только у сторок с общими занчениями в другом столбце.\nЧтобы это проверить, нужно взять столбец с пропусками, отфильтровать только пропуски (взять их) и\nпосмотреть как эти пропуски распределены по другой переменной.\n\n\nПервое что нужно сделать, когда мы видим пропуск или выброс, это проверить является ли оно случайным. &gt; То есть посмотреть не относятся ли все выбросы к одной категории. Если это так, то это уже не случайно и мы нашли аномалию, которую можно изучать.\n&gt; Если у нас случайны разброс пропусков в категориях, то значит тут есть случайность.\n&gt; Например, у нас возраст 0, и мы видим, что больше всего это у женщин. Следовательно получаем гипотезу, что женщины не хотят сообщать свой возраст.\nВ пропусках мы можем определить какие категории, платформы и прочее не собираются данные. Смотрим пропуски, далее смотрим у каких категорий их больше, &gt; и получаем вывод, что нужно обратить внимание на эти категории или системы, почему там пропуски\n\n\nfind_columns_with_missing_values\ncheck_na_in_both_columns\nanalyze_by_category_gen\n\n\n\nShow the code\nseries_missed = pagri_prep.find_columns_with_missing_values(df)\n\n\n\n\n\n\n\nTable 16: Missings\n\n\n\n\n\ndays_employed\n2174 (10.10%)\n\n\ntotal_income\n2174 (10.10%)\n\n\n\n\n\n\n\n\n\nМожно посмотреть на строки датафрейма в колонках с пропусками\nЭто делаем, если есть время, так как этот шаг редко даст результат, так как на глаз сложно определить закономерности.\nСуть этого шага посмотреть на строки датафрейма в разных колонках с пропусками и выдвинуть гипотезы с закономеностями в этих пропусках по очереди берем колонки и смотрим на датафреймы (записано рядом, чтобы показать, что не одну колонку только беерем)\n\n\n\nShow the code\ncol1_missed = series_missed['col1']\ncol2_missed = series_missed['col2']\ncol1_missed.head()\ncol2_missed.head()\n\n\n\nДумаем какие столбцы связаны, и их лучше изучить вместе на пропуски.\nСмотрим на количество и процент пропусков в разных колонках и если они равны, то можно выдвинуть гипотезу, что пропуски совпадают То есть у нас может появиться гипотеза, что пропуски в нескольких столбцах связаны между собой.\nВот мы береме эти столбцы и смотрим сколько прпоусков в обеих колонках вместе, если это совпадает с пропусками в каждой колонке,\nто гипотеза подтвердилась.\n\n\nПример\nМожно заметить, что количество пропусков в колонке с количеством парков рядом и количеством прудов рядом совпадает.\nВыдвигаем гипотезу, что пропуски в одних и тех же строках в обоих столбцах.\n\n\nПроверим эту гипотезу, для этого посмотрим сколько пропусков в обоих колонках вместе\n\n\n\nShow the code\ndf_na_in_both_columns = pagri_data_tools.check_na_in_both_columns(df, ['parks_around3000', 'ponds_around3000'])\ndf_na_in_both_columns.sample(10)\n\n\nСмотрим на строки не только всего датафрейма, но и только на выбранные строки.\n\n\nShow the code\nseries_missed['living_area'][['total_area', 'living_area', 'kitchen_area']].sample(10)\n\n\nГипотеза подтвердилась: - Пропуски в одних и тех же строках в колонках с количеством парков рядом, количеством прудов рядом совпадает,\nрастоянием до центра, растоянием до аэропорта примерно равны\nПосмотрим как распределены пропуски по категориям в строках, где прпоуски одновременно в этих столбцах.\n\n\nShow the code\ngen = pagri_data_tools.analys_filtered_df_by_category(df, df_na_in_both_columns, 'df with na')\n\n\nЕсли хотим показать только часть из gen, то подставляем нужные категории в эту функцию\n\n\nShow the code\npagri_data_tools.analyze_share_by_category(df, df_na_in_both_columns, 'df with na', 'is_apartment')\n\n\n\nИзучаем пропуски по категориям\n\n\nВАЖНО - убедиться, что нет в ноутбуке _gen_ (делаем ctrl+F и вбиваем _gen_)\nставим _gen_ в том месте где хотим чтобы появились ячейки после работы в prep_dash\n\nСтрочку с созданием gen оставляем без is_dash, это для отчета,\nИ ниже пишем строчку с is_dash для создания dash app и потом ее удаляем\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\ngen = pagri_data_tools.analyze_by_category_gen(df, series_missed, is_dash=True)\npagri_dash.prep_dash(gen, \"/colab/pagri-projects/quarto/projects/housing-ads-investigation/housing_ads_investigation.ipynb\")\n\n\n\nкогда изучаем по категориям, то смотрим на diff_sum_pct, тут логика такая -\nнам нужно сравнить количество строк с пропусками в каждой категории, учитывая размер этой категории.\nТо есть если у нас категории например дорогие квартиры и дешевые (категориальная переменная нарпимер категория стоимости)\nи в них соотношение пропусков 1000 к 500, а общее соотношение групп 700 на 800, то явно отличается количество.\nПоэтому мы смотрим на отличия, и если они существенны, то делаем вывод, что категория влияет на пропуски.\nИначе пишем, что влияние не обнаружено.\n\n\nСмотрим на все поля\nin_category_pct говорит о том сколько в этом значении категории изучаемых значений\nin_column_pct говорит о том сколько процентов изучаемого значения данного значения категории в общем\ntotal_count_pct помогает анализировать in_column_pct, так как мы видим сколько занимает это значение в общем\n\n\n\nИзучение выбросов\nВАЖНО\nкогда изучаем выбросы, нулевые и отрицательные значения, то нужно сразу проверять гипотезы.\nТо есть если у нас нарпимер 0 команат, то мы выдвигаем гипотезу, что это студии и однокомнатыне и если у нас есть площадь или\nдругой паарметр по которому мы можем проверить гипотезу, то проверяем.\nТакже с другими параметрами.\nИменно тут в изучении данных мы должны выдвигать гипотезы и проверять их.\nИ результаты писать в отчет и во верменный файл, чтобы потом в обработке данных использовать эти выводы гиптоез для замены пропусков.\nНе забываем изучать по категориям сильно низкие и сильно высокие знения.\nНапример, если у нас цены на квартиры, то нужно посмотреть по категории населенный пункт.\nТак как мы сможем понять в этом населенном пункте могут быть такие занчения или нет.\nАналогично и не с населенными пунктами.\nНаша задача - определить какая категориальная переменная характеризует переменную с выбросами.\nИ посмотреть в ее разрезе, что поможет нам понять, что это за выбросы.\n\nНе забываем про ИИ.\nПишем название столбца (именно что они значат, то есть образование, пол и прочее), говорим, что есть выбросы.\nОбязательно приводим значения выбросов, самые характерные, чтобы дать ИИ болше информации. И просим предложить причины этих выбросов. Если видим важное, то используем для рекомендаций, выводов и замены выбросов в предобработке.\n\n\nКогда смотрим на выбросы, то нужно ответить на вопрос так и должно быть, это нормально, что выбросы в этих колонках.\n\n\nВыбросы это не только просто сильно большое или сильно маленькое значение.\nВыбросы нужно также смотреть по мультипараметрам, с помощью моделей и искать аномалии.\nВыброс это то, что отделяется от других, что выбивается из общей картины. Следовательно это что-то особенное.\nТажке выбросы говорят не только о плюсах, но и о минусах. Выбросы могут сказать, что у нас что-то сломалось. &gt; Что-то не записывается, или работает с багами. Все это можно увдитеь по выбрасам и аномалиям.\nОбязательно посмотреть выбросы в разрезе категорий, так как мы сможем сделать выводы об их источнике.\nЕсли мы работаем со строгой отчетностью, то тут любой выброс это уже инсайт и нужно идти разбираться откуда это взялось.\n\n\nЕсли мы во время изучения данных выявили потенциальные выбросы, то нужно их отдельно изучить.\nДля этого создаем датафрейм с нужными значениями и помещаем его в Series,\nиндекс это название колонки, в которой мы изучаем выброс.\nДалее отдаем этот Series в функцию analyze_by_category_gen.\n\n\nСначала изучим потенциальные выбросы, которые мы выявили при изучении колонок.\nУ нас в количестве детей есть значение 20.\nИзучим его подробнее.\n\n\nВажно при изучении колонок записывать выбросы отдельно и потом коппировать сюда.\nА тут нужно изучить эти значения отдельно.\n\n\nкогда изучаем по категориям, то смотрим на diff_sum_pct, тут логика такая -\nнам нужно сравнить количество строк с пропусками в каждой категории, учитывая размер этой категории.\nТо есть если у нас категории например дорогие квартиры и дешевые (категориальная переменная нарпимер категория стоимости)\nи в них соотношение пропусков 1000 к 500, а общее соотношение групп 700 на 800, то явно отличается количество.\nПоэтому мы смотрим на отличия, и если они существенны, то делаем вывод, что категория влияет на пропуски.\nИначе пишем, что влияние не обнаружено.\n\nСтрочку с созданием gen оставляем без is_dash, это для отчета,\nИ ниже пишем строчку с is_dash для создания dash app и потом ее удаляем\n\nВАЖНО - убедиться, что нет в ноутбуке _gen_ (делаем ctrl+F и вбиваем _gen_)\nставим _gen_ в том месте где хотим чтобы появились ячейки после работы в prep_dash\n\nЕсли выбросов мало (меньше 10), то лучше просто показать датафрейм с этими выбросами и написать наблюдения.\n\n\nShow the code\nseries_outliers = pd.Series([df[df.children == 20]], index=['children'])\n\n\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\ngen = pagri_data_tools.analyze_by_category_gen(df, series_outliers, is_dash=True)\npagri_dash.prep_dash(gen, \"/colab/pagri-projects/quarto/projects/housing-ads-investigation/housing_ads_investigation.ipynb\")\n\n\n\nСмотрим на выбросы используя Z-score\ndetect_outliers_Zscore\n\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_Zscore()\n# сначала смотрим на значения с большим количеством выбросов\nseries_outliers['col'].col.value_counts().to_frame('outliers')\n# затем уже изучаем определенные датафреймы в series_outliers\nseries_outliers['col'].head()\n\n\nСтрочку с созданием gen оставляем без is_dash, это для отчета,\nИ ниже пишем строчку с is_dash для создания dash app и потом ее удаляем\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\ngen = pagri_data_tools.analyze_by_category_gen(df, series_outliers, is_dash=True)\npagri_dash.prep_dash(gen, \"/colab/pagri-projects/quarto/projects/housing-ads-investigation/housing_ads_investigation.ipynb\")\n\n\n\nСмотрим на выбросы используя квантили\ndetect_outliers_quantile\n\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df)\n\n\nСтрочку с созданием gen оставляем без is_dash, это для отчета,\nИ ниже пишем строчку с is_dash для создания dash app и потом ее удаляем\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\ngen = pagri_data_tools.analyze_by_category_gen(df, series_outliers, is_dash=True)\npagri_dash.prep_dash(gen, \"/colab/pagri-projects/quarto/projects/housing-ads-investigation/housing_ads_investigation.ipynb\")\n\n\n\nПосмотрим на строки датафрейма с выбросами\n\n\n\nShow the code\ncol1_outliers = series_outliers['col1']\ncol2_outliers = series_outliers['col2']\n\n\n\n\nShow the code\ncol1_outliers.head()\ncol2_outliers.head()\n\n\n\nИзучить выбросы по категориями\nanalyze_by_category_gen\n\n\nСмотрим на все поля\nin_category_pct говорит о том сколько в этом значении категории изучаемых значений\nin_column_pct говорит о том сколько процентов изучаемого значения данного значения категории в общем\ntotal_count_pct помогает анализировать in_column_pct, так как мы видим сколько занимает это значение в общем\n\nСтрочку с созданием gen оставляем без is_dash, это для отчета,\nИ ниже пишем строчку с is_dash для создания dash app и потом ее удаляем\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\ngen = pagri_data_tools.analyze_by_category_gen(df, series_outliers, is_dash=True)\npagri_dash.prep_dash(gen, \"/colab/pagri-projects/quarto/projects/housing-ads-investigation/housing_ads_investigation.ipynb\")\n\n\nЕсли переменная распределенна нормально, то выбросы можно определить как точки за пределами плюс минус 3 стандартных отклонения.\nНаписать функцию для определения выбросов через 3 стандартных отклонения.\n\n\nИзучение отрицательных значений\n\nНе забываем про ИИ.\nПишем название столбца (именно что они значат, то есть образование, пол и прочее), говорим, что есть отрицательные значения там где их быть не должно.\nОбязательно приводим значения, самые характерные, чтобы дать ИИ болше информации. И просим предложить причины этих отрицательных значений. Если видим важное, то используем для рекомендаций, выводов и замены отрицательных значений в предобработке.\n\n\nОчень важно, если у нас есть столбец, в котором не должно быть отрицательных значений, то нам нужно отдельно изучить положительные и отрицательные значения.\nИ те и те посмотреть по категориям.\nИ на основе этого изучения мы моежм заметить причины отрицательных значений.\nНапример, в колонке стажа у нас очень много отрицательных значений и есть положительные значения.\nМы отдельно посмотрели отрицательные значения и они в основном принадлежат работающим людям.\nА положительные пренадлежат пенсионерам.\nВажно и полоительные и отрицательные значения посмотреть их макс и мин.\nВот мы для стажа посмотрели макси и мин и видим, что отрицательные значения похожи на реальные значения в годах.\nА вот положительные слишком большие, и далее мы поняли, что это данные в часах.\nВ итоге у нас уже много предположений, которые помогут выяснить откуда появляются странные данные в этом столбце.\nК тому же мы можем попробовать заменить отрицательные значения, если у нас есть уверенность на основе анализа.\n\n\nИзучаем отрицательные значения\n\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df)\n\n\n\nОпределяем в каких колонках не должно быть орицательных значений.\nКолонки в которых допустимы отрицательные значения удаляем из series_negative\n\n\nИзучим отрицательные значения в разрезе категорий\n\n\nСмотрим на все поля\nin_category_pct говорит о том сколько в этом значении категории изучаемых значений\nin_column_pct говорит о том сколько процентов изучаемого значения данного значения категории в общем\ntotal_count_pct помогает анализировать in_column_pct, так как мы видим сколько занимает это значение в общем\n\n\nкогда изучаем по категориям, то смотрим на diff_sum_pct, тут логика такая -\nнам нужно сравнить количество строк с пропусками в каждой категории, учитывая размер этой категории.\nТо есть если у нас категории например дорогие квартиры и дешевые (категориальная переменная нарпимер категория стоимости)\nи в них соотношение пропусков 1000 к 500, а общее соотношение групп 700 на 800, то явно отличается количество.\nПоэтому мы смотрим на отличия, и если они существенны, то делаем вывод, что категория влияет на пропуски.\nИначе пишем, что влияние не обнаружено.\n\n\nВАЖНО - убедиться, что нет в ноутбуке _gen_ (делаем ctrl+F и вбиваем _gen_)\nставим _gen_ в том месте где хотим чтобы появились ячейки после работы в prep_dash\n\nСтрочку с созданием gen оставляем без is_dash, это для отчета,\nИ ниже пишем строчку с is_dash для создания dash app и потом ее удаляем\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\ngen = pagri_data_tools.analyze_by_category_gen(df, series_negative, is_dash=True)\npagri_dash.prep_dash(gen, \"/colab/pagri-projects/quarto/projects/housing-ads-investigation/housing_ads_investigation.ipynb\")\n\n\n\n\nИзучение нулевых значений\nПомним, что важно выдвигать гипотезы и потом их проверять.\nНапример так\nВыдвинем гипотезу, что 0 комнат у студий и однокомнатных.\nПроверим гипотезу по полощади.\n\nНе забываем про ИИ.\nПишем название столбца (именно что они значат, то есть образование, пол и прочее), говорим, что есть нули там, гед их быть не должно.\nИ просим предложить причины этих нулей. Если видим важное, то используем для рекомендаций, выводов и замены нулей в предобработке.\n\n\nИзучаем нулевые значения\n\n\n\nShow the code\nseries_zeros = pagri_data_tools.find_columns_with_zeros_values(df)\n\n\n\nОпределяем в каких колонках не должно быть нулевых значений.\nКолонки в которых допустимы нулевые значения удаляем из series_negative\n\n\n\nShow the code\nseries_zeros = series_zeros.drop('children')\nseries_zeros = series_zeros.loc[['rooms', 'airports_nearest']]\nseries_zeros\n\n\ndob_years           children  days_employed  dob_years educ...\ndtype: object\n\n\n\nИзучим нулевые значения в разрезе категорий\n\n\nкогда изучаем по категориям, то смотрим на diff_sum_pct, тут логика такая -\nнам нужно сравнить количество строк с пропусками в каждой категории, учитывая размер этой категории.\nТо есть если у нас категории например дорогие квартиры и дешевые (категориальная переменная нарпимер категория стоимости)\nи в них соотношение пропусков 1000 к 500, а общее соотношение групп 700 на 800, то явно отличается количество.\nПоэтому мы смотрим на отличия, и если они существенны, то делаем вывод, что категория влияет на пропуски.\nИначе пишем, что влияние не обнаружено.\n\n\nСмотрим на все поля\nin_category_pct говорит о том сколько в этом значении категории изучаемых значений\nin_column_pct говорит о том сколько процентов изучаемого значения данного значения категории в общем\ntotal_count_pct помогает анализировать in_column_pct, так как мы видим сколько занимает это значение в общем\n\n\nВАЖНО - убедиться, что нет в ноутбуке _gen_ (делаем ctrl+F и вбиваем _gen_)\nставим _gen_ в том месте где хотим чтобы появились ячейки после работы в prep_dash\n\nСтрочку с созданием gen оставляем без is_dash, это для отчета,\nИ ниже пишем строчку с is_dash для создания dash app и потом ее удаляем\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\ngen = pagri_data_tools.analyze_by_category_gen(df, series_zeros, is_dash=True)\npagri_dash.prep_dash(gen, \"/colab/pagri-projects/quarto/projects/housing-ads-investigation/housing_ads_investigation.ipynb\")\n\n\n\nПосле изучения данных у нас могут возникнуть вопросы по определенным значениям, это возможно не выбросы,\nмы просто хотим подробнее их изучить.\nДля этого создаем датафрейм с нужными значениями и помещаем его в Series,\nиндекс это название колонки, в которой мы изучаем выброс.\nДалее отдаем этот Series в функцию analyze_by_category_gen.\nНужно сделать специальную функцию для этого, чтобы не использовать analyze_by_category_gen\n\n\n\nShow the code\ncheck_series = pd.Series([df[df.col_for_check == value_for_check]], index=['col_for_check'])\ngen = pagri_data_tools.analyze_by_category_gen(df, check_series)\nnext(gen)\n\n\n\nТакже мы можем изучить любые столбцы (или часть столбцов) по категориям.\nТо есть мы изучаем как распределены элементы по категориям\n\n\n\nShow the code\ncheck_series = pd.Series([df[df.col_for_check == value_for_check]], index=['col_for_check'])\ngen = pagri_data_tools.analyze_by_category_gen(df, check_series)\nnext(gen)\n\n\n\nСделать функцию определения выбросов на основе машинного обучения\n\n\nДополнительные моменты, которые стоит проверить и изучить\n\n\nПроверить на сложные выбросы, типа у нас есть статус и возраст и мы видим что студент имеет возраст 60 лет, это реально, но уже подозрительно. &gt; Вот таких моментов может быть много, но нужно додуматься, чтобы найти такие комбинации, но это важно делать.\nважно проверить на корректность данные, то есть смотрим по отдельности каждый столбец и изучаем мин, макс, и другие параметры, и &gt; думаем, это физически реально. И особенно, когда у нас несколько связаных параметров, нет ли между ними противоречия.\n&gt; Например, у нас есть дата показа рекламы и есть дата создания рекламы, естественно создание должно быть раньше, это нужно проверить.\nПроверяем данные ошибки &gt; Ошибки которые не являются дублями, пропусками или выбросами.\n&gt; Это сложно сделать, хотя бы заметить явные ошибки\nПроверить на ошибки согласованности &gt; Например, у нас пользователь с одним ай ди имеет разные имена. &gt; display(df.groupby('name')['age'].nunique())\nвообще нужно придумать разные проверки для колонок, особенно связанных. И провести эту проверку.\n\n\n\n\nПромежуточный вывод\n\nИз наблюдений собираем важные выводы\n\nТут помещаем все наблюдения про диапазоны столбцов, основные диапазон и медианы с модами.\nЧтобы в конце скопировать отсюда и составить уже общий вывод.\n\nПринимаем решение, как именно мы будем проводить обработку, почему именно так, *зафиксировать рекомендации.\nТо есть отвечаем на вопрос, что будем делать с выбросами, что будем делать с null.\nБудет идеально если тут зафиксировать рекомендации\n\nПромежуточный вывод\n\n\n\n\nchildren Присутствует 47 отрицательных значений с “-1”, а также аномалия в виде 20 детей …\ndays_employed Большая часть данных стобца со знаком “-”. Однако, эти данные представляют из себя 84% всей выборки. … будут заменены на .. исходя из определенного критерия, который будет описан далее. &gt; - Причины пропущенных значений в столбцах days_employed и income: &gt; - Во-первых, это может быть из-за неправильной выгрузки данных. Оставим это предположение до того момента, пока не убедимся в неверности других предположений.Наиболее вероятно &gt; - Во-вторых, одной из гипотез было предположение об отсутствии трудового опыта у данной части выборки. Однако, если распределение по возрасту в данной группе равномерное по всем возрастам выборки. Также большая доля этой части выборки трудоустроена. Гипотеза не подтверждена &gt; - В-третьих, возможно, что эта часть выборки не имеет официального трудоустройства. Данная гипотеза вызывает сомнение в связи с тем, что при наличии достаточно большого стажа работы у представителей выборки у ее представителей нет официального трудового стажа. К тому же 18.9% данной выборки являются госслужащими. Гипотез не подтверждена\nage .. 0 возраст у 101 человека.\neducation & education_id Необходимо будет привести данную категорийнуй переменную к общему виду. Избавиться от разного регистра. Но можно не тратить на это время и использовать следующий столбец education_id. Это позволит использовать меньше памяти и не повлияет на качество анализа.\n…"
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#предобработка-данных",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#предобработка-данных",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "Предобработка данных",
    "text": "Предобработка данных\nВАЖНО\nпомним, что когда мы удаляем записи\ndf = df[df.column &gt; 0] то удаляются na\nпоэтому нужно делать так\ndf = df[~(df.column &lt;= 0)]\nСразу записываем в файл что заменили и что удалили для промежуточного вывода.\nдля некоторых пропущенных значений можно предположить логичную замену. Например, если человек не указал число балконов - скорее всего, их нет.\nТакие пропуски правильно заменить на 0. Для других типов данных нет подходящего значения на замену.\nВ этом случае правильно оставить эти значения пустыми. Отсутствие значения - тоже важный сигнал, который не нужно прятать;\n\nВажно, когда удаляем строки, то делаем сброс индекса\n\n\n\nShow the code\n.reset_index(drop=True)\n\n\n\nНе забываем про ИИ\nКогда мы проводим предобработку данных, то первый вопрос мы себе задать следующий Какава вероятнсоть, что это является истиной? Если вероятнсоть ниже 60 прцоентов, то это делать не стоти и может лучше оставить как есть или не трогать этот столбец.\nНапример, у нас дубли или отрицательные значеия и мы выдвинули гипотезу, что это просто неправильный знак и хотим взять модель числа.\nНо если мы подумаем, а высокая ли вероятность, что число просто с неверным знаком, то вероятнсот этого низкая.\nПоэтому это делать не нужно.\nДругое дело у нас датафрейме 1 прцоент полных дублей и при этом у нас есть достаточно точные колонки типа зарплаты с точностью до рублей или стаж в днях.\nВот тут мы можем с высокой вероятностью утверждать, что это дубли, так как мало вероятно что будет две записи настолько точно совпадать.\nПоэтому сначала думаем насколько вероятна та гипотеза, которую мы выдвинули и хотим по ней изменить наши данные.\nТут лучше придерживаться правила не навреди.\n\n\nКогда удаляем значения из категориальных столбцов pandas, и в этом столбце нет больше таких занчений, которые удалил.\nТо нужно удалить это значение из категории\n\n\n\nShow the code\ndf.drop(df[df.gender == 'XNA'].index, inplace=True)\ndf['gender'] = df['gender'].cat.remove_unused_categories()\ndf.value_counts(dropna=False)\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n\nОбрезание неполных временных периодов\n\nЕсли у нас датасет за год, например, и первый или последний месяц неполные, то их лучше выбрасить, если мы будем\nрасчитывать месячные метрики.\nНо сначала конечно нужно проанализировать столбцы без обрезания, чтобы убедиться, что там нет ничего необычного.\n\n\n\nВыбор нужных столбцов для дальнейшего анализа\n\nСохраним исходный датафрейм в переменную df_origin, чтобы была возможность вернуться к нему\n\n\n\nShow the code\ndf_origin = df.copy()\n\n\n\nУдаляем ненужные столбцы\n\n\n\nShow the code\ndf = df.drop(['col1', 'col2'], axis=1)\ndf.head(1)\n\n\n\nДумаем, какие колонки нам нужны, выбираем только их для дальнейшей работы. &gt; Остальные убираем в другой датасет.\nВажно после изученя данных сначала убрать не нужные столбцы, а потом уже заниматься преобразованием (удалением пропусков и выбросов). &gt; Думаем прежде чем удалять строки, так как возможно лучше удалить столбец и строки удалять будет не нужно.\nПишем почему выбираем определенные столбцы\n\n\n\nОбработка выбросов\n\nНе забываем про нулевые значения и отрицательный.\nВ столбцах, где их быть не должно, они являются выбросами.\n\n\nС обработкай нулевых и отрицательных значений нужно быть внимательным.\nНужно сначала хорошо подумать, откуда могло это появиться,\nтут поможет анализ этих значений в предыдущей главе.\nДумаем откуад появилось отрицательное или нулевое занчение,\nи если у нас есть гипотезы, которые похожи на правду (мы думаем что вероятность их истины больше 60%),\nто мы обрабатываем их исходя из гипотезы.\nНапример, -1 часто бывает как отсутсвие чего-то, то есть мы в зависимости от контекста можем заменить его на 0.\n\n\nВажно каждый раз, когда мы удаляем что-то из датафрейма, то убедиться, что мы удалили столько строк, сколько и хотели.\nДля этого выводим размер датафрейма до удаления.\nСмотрим сколько строк мы хотим удалить.\nДалее не сохраняя в датафрейм удаляем строки и смотрим верный ли итоговый размер.\nЕсли все верно, то удаляем уже с сохранением.\n\n\nНе забываем, что выбросы мы также можем заменять на медианные значения.\n\n\nПосмотрим где у нас отрицательные значения\n\n\n\nShow the code\npagri_data_tools.check_negative_value_in_df(df)\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n21525\n\n\n\n\nShow the code\ndf = df[df.children &gt;= 0]\ndf.shape[0]\n\n\n21478\n\n\n\nПосмотрим где у нас нулевые значения\n\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\nОбрабатываем нулевые и отрицательные значения, затем снова проверяем\n\n\n\nShow the code\npagri_data_tools.check_negative_value_in_df(df)\n\n\n\n\n\n\n\n\n\nnegative\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\n\n\n\n\n\n\nТакже нужно обработать выбросы, которые мы обнаружили при изучении данных.\nЭто могут быть любые колонки со значениями, которые не моут быть в реальности.\n\n\nНужно сначала обработать выбросы, а потом уже обрабатываться пропуски.\nТак как мы заоплняем пропуски, учитывая значения в колонке, которые возможно мы потом удалим.\n\n\nПомним про нулевые и отрицательные значения\nНулевые значения, отрицательные значения являются выбросами, если они не могут быть у этой колонки.\nОчень важно понимать, когда выброс можно отбросить и он реально выброс и когда нельзя. &gt; Опираемся на физику параметра, думаем это значение физически возможно.\nТакже выброс может казаться выбрасом, но для бизнеса это не выброс. &gt; Например у нас суммы покупок и одна покупка сильно выделяется, а там просто человек купил супе дорогой каньяк, например.\nКогда хотим обрезать выбросы, то думаем, какой порог может быть физически реальным и по нему режем, а не просто так берем какой-то перцентиль. &gt; Всегда нужно думать с точки зрения физического возможного значения параметра и по нему резать (подумать а какое значение может быть максимально реальным и по нему обрезать)\nЕсли мы имеем дело со строгой отчестностью, то выбросы убирать нельзя, нужно разобраться откуда они.\nЕсли мы не можем с увереностью сказать, что это выброс, то нам не стоит его выкидывать, но работать как то нужно с ними, &gt; тогда, логарифмируем (лучше использовать натуральный логарифм) эту колонку и работаем с такими значениями (тогда выбросы сожмуться).\n\n\nПосле удаления выбрасов, можно снова выполнить пункт про изучение выбрасов, так как выбросы могут появиться новые,\nесли у нас например выбросы были слишком нереальные значения, когда мы от них избавимся, будет лучше видно другое\n\n\n\nОбработка пропусков\nЕсли мы не можем заполнить прпоуски в категориальной переменной, то даем им название.\n\n\nShow the code\ndf['is_apartment'] = df['is_apartment'].fillna('не указано')\n\n\n\nВажно помнить, что пропус может быть вызван тем, что во измежании дублирования строк, при созаднии сводной таблицы,\nзанчения не повторяются, а если потом эту таблицу куда то отправить, то там эти пропуски могут стать null\nПоэтому сначала смотрим последовательно на значения и думаем, не может ли это быть таким случаем.\nЭто могут быть даты, которые идут подряд и меду ними пропуски.\nИли список названий четко по порядоку и между ними пропуски, это может быть вызвано как раз последствием создания сводной таблицы.\nВ пандас это видно, когда мы группируем строки, у нас в индексе дубли не пишуться, но пандас занчет, что там есть занчения,\nно после импорта куда-то там могут не продублироваться значения и возникнут пропуски.\n\n\nПрежде чем обрабатывать пропуски, нужно подумать а можем ли мы их заменить исходя из имеющихся столбцов.\nНапример, у нас есть столбец с пропусками возраст, и есть стаж,\nмы можем возраст заменить так стаж + 18 + 5\nАналогично другие ситуации нужно сообразить как можно заменить пропуски.\nИ только если нет идей, тогда уже заменяем на медиану, например, по группам.\n\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\nЕсли решии заменять прпоуски значениями, учитывая категории, то нужно убедиться, что размер этих категорий достаточный.\n\n\nПосмотрим размеры групп, если заменять внутри этих групп\n\n\n\nShow the code\ncategory_columns = ['education', 'family_status', 'gender', 'income_type']\nvalue_column = 'total_income'\npagri_data_tools.check_group_count(df, category_columns, value_column)\n\n\n\nЗаполним пропуски в группах от 10 элементов\n\n\n\nShow the code\ndf[value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\nПроверим сколько у нас осталось пропусков\n\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\nЕсли пропуски остались, то убираем какую-нибудь категорию и повторяем.\n\n\nчто-то изменили - &gt; посмотрели не изменилось ли количество дублей\ncheck_duplicated\n\n\n\nShow the code\npagri_data_tools.check_duplicated()\n\n\n\nУвидели пропуск - подумайте, нормально ли это. Сколько вообще пропусков может быть в этом столбце?\nК примеру, в списке с электронными адресами пользователей, согласных на рассылку, будет много пропусков. Далеко не все предоставляют email.\n\n\nМожно использвоать такой подход\n\n\nесли количество пропусков меньше 5 процентов, то удаляем (лучше меньше 1 процента)\nесли количество пропусков от 5 до 20 процентов, то подбираем чем заменить, удалять не стоит\nесли больше 20 процентов, то не трогаем, так как исказим\n\n\nНо оставляя пропуски, нам нужно помнить, что мы не можем по этим полям считать корреляцию с другими,\nтак как пропуски испортят расчет коэффициента корреляции. Аналогично другие метрики могут считаться некорректно.\nПоэтому, если мы будем считать показатели по столбцу с пропусками, то их нужно либо убирать, либо этот столбец не использовать для расчетов.\n\n\nДля категориальных переменных оставлять пропуски нельзя, так как мы скорее всего будем группировать по ним и смотреть разные разрезы.\nПоэтому в худшем случае, если не можем ничем заменить, и нет уверености, что пропуск можно заполнить пустой строкой (если значения физически нет),\nто создаем категорию например other из пропусков.\n\n\nЕсли у нас пропуски в категориальной переменной и есть разные периоды или просто данные разбиты на части (то есть эта категориальная переменная повторяется),\nто мы можем взять ещё какую-нибудь переменную, у которой нет пропусков, где пропуски у первой переменной и далее посмотреть другие периоды\nТаким образом у нас будет предыдущий период, где будет занчение второй переменной и первой и если в нескольких периодах они одинаковые, то мы можем\nзаполнить и пропуски этим значением.\nЕщё раз схема такая - берем 2 поля одно с пропусками, другое без, получаем новую таблицу, в этой таблице оставляем только униклаьные значения в поле без пропусков,\nпо этому полю будем джойнить. Далее в основнйо таблице дропаем описание и создаем новое описание из таблицы справочника.\nfill_missing_values_using_helper_column\n\n\n\nShow the code\npagri_data_tools.fill_missing_values_using_helper_column()\n\n\n\nЗаполняем пропуски учитвая категории\nfill_na_with_function_by_categories\n\n\nВажно следить, чтобы категории, по которым будем заполнять пропуски были обработаны.\nЕсли у нас в категориальной переменной есть значение с большой буквы и с маленькой, то это одна категория,\nно замена будет идити по двум, чтобы такого не было, нужно сначала обработать категориальную переменную.\n\n\nТакже важно, чтобы в группах по которым мы будем считать значение для заополения было достаточно значений\nдля выбранной функции.\nНапример, если мы решили брать среднее, а в группе у нас 5 значений, то среди них может быть выброс и наше среднее будет некорректно.\nЛучше в такой ситуации брать группу побольше для этих микрогрупп.\nВ идеале группы должны быть от 30 элементов.\n\n\nМожно посмотреть какой процент группах без значений\n\n\n\nShow the code\ntemp = df.groupby(['education', 'family_status', 'gender', 'income_type'])['total_income'].sum()\n(temp == 0).sum() * 100 / temp.size\n\n\n\n\nShow the code\npagri_data_tools.fill_na_with_function_by_categories()\n\n\n\nСделать функцию заполнения пропусков с помощью машинного обучения\n\n\nПосле удаления пропусков и выбросов желательно проверить какой прцоент строк мы удалили.\n\n\n\nОбработка дубликатов\n\nВсе значения в колонках во всех таблицах нужно привести к нижнему регистру и по возможности к одному языку,\nдля перевода к одному языку можно использовать словарь, с помощью которого изменить неправильный язык\nЭто нужно, чтобы когда будем соединять таблицы, у нас условие соеденения правильно сравнивало равные значения.\n\n\nМожно посмотреть снвоа на дубликаты после обработки пропусков.\n\n\ncheck_duplicated\nfind_columns_with_duplicates\ncheck_duplicated_combinations_gen\nget_duplicates_value_proportion_by_category\nВ первую функцию можно передавать весь датафрейм и можно выбирать нужные столбцы для проверки на дубли и передавать их.\n\n\n\nShow the code\npagri_data_tools.check_duplicated()\n\n\n\n\nShow the code\npagri_data_tools.check_duplicated_value_in_df(df)\n\n\n\n\nShow the code\npagri_data_tools.find_columns_with_duplicates()\n\n\n\nЗаполним пропуски в группах от 10 элементов\n\n\n\nShow the code\ndf[value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ntotal_income\n63 (0.3%)\n\n\n\n\n\n\n\n\nЕсли есть дубли, и мы считаем, что это не дубли, а просто разделились данные,\nто объединеняем записи, которые имеют одинаковые значения ключевых признаков.\nmerge_duplicates\n\n\n\nShow the code\npagri_data_tools.merge_duplicates()\n\n\n\nЕсли мы не уверены, что дубль является дублем и не хотим удалять, то можно использовать\nмаркировку дублей, можно добавить новую колонку, которая будет содержать информацию о том,\nявляется ли строка дубликатом или нет.\ndf['is_duplicate'] = df.duplicated()\n\n\n\nShow the code\ndf['is_duplicate'] = df.duplicated()\n\n\n\nПодумать, а можем ли мы обогатить данные, что разделит дубли.\nТо есть возможно в наших данных нет какого-то столбца, и тогда дубли уже не будут дублями.\n\n\nЕсли уверены, что это дубли, то удаляем их\ndf.drop_duplicates()\n\n\n\nShow the code\ndf.drop_duplicates()\n\n\n\n\nПриведение данных к удобной форме\n\nИзменяем значения в столбцах на более удобные\n\n\n\nShow the code\ndf.debt = df.debt.apply(lambda x: 'есть' if x == '1' else 'нет').astype('category')\n\n\n\n\nShow the code\ndf.is_apartment.astype(str).map({'True': 'да', 'False': 'нет'}).astype('category')\n\n\n\nЕсли у нас в столбце, например, стаж данные в днях, то это нужно преобразовать в года.\nТакже если у нас в других столбцах данные в формате, который нужно изменить для лучшего анализа, то делаем это.\n\n\nОкруглим значения в поле дохода до целого.\nЦелая часть выглядит реальной. А с дробной частью нужно разбираться почему стоько знаков.\n\n\n\nShow the code\ndf.total_income = df.total_income.round().astype('int32')\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\n0\n253876\nпокупка жилья\n\n\n\n\n\n\n\n\nПосмотрим сколько у нас людей с полом XNA осталось\n\n\n\nShow the code\n(df.gender == 'XNA').sum()\n\n\n1\n\n\n\nПосмотрим кто это\n\n\n\nShow the code\ndf[df.gender == 'XNA']\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n10701\n0\n24\nнеоконченное высшее\nгражданский брак\nXNA\nкомпаньон\n0\n203905\nпокупка недвижимости\n\n\n\n\n\n\n\n\nВсего 1 человек. И мы не можем идентифицировать его пол.\nУдалим, чтобы не мешало анализировать графики.\n\n\n\nShow the code\ndf.shape[0]\n\n\n21402\n\n\n\n\nShow the code\ndf.drop(df[df.gender == 'XNA'].index, inplace=True)\ndf['gender'] = df['gender'].cat.remove_unused_categories()\ndf.value_counts(dropna=False)\n\n\n21401\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n\n\nПромежуточный вывод\n\nпишем как обработали данные, например\n\n\nУдалили колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nКолонка со стажем имеет совершенно некорректные данные. Чтобы не внести искажение в анализ, удалим эту колонку.\nУдалили отрицательные значения в колонке с количеством детей, которые составляли 0,2% от общего количества записей в данных."
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#обогащение-данных-и-создание-новых-переменных",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#обогащение-данных-и-создание-новых-переменных",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "Обогащение данных и создание новых переменных",
    "text": "Обогащение данных и создание новых переменных\n\nПарсинг внешних источников\nописываем процесс парсинга\nописываем источники и переменные\n\n\nСоздание новых числовых переменных\nСразу пишем в файл какие новые переменные создали для промежуточного вывода.\nЧисловые переменные создаем не только для дальнейшего их анализа.\nСоздание числовой переменной может помочь создать новую категориальную переменную.\nНапример есть у нас расстояние до центра в метрах.\nМы создаем новую числовую переменную расстояние в км.\nДалее строим график зависимости расстояния и цены.\nИ определеяем где цена резко меняется и получаем границу для создания новой категориальной переменной, в которой будет центр и остальное.\nСоздадим переменную соотношение жилой и общей площади\n\n\nShow the code\ndf['living_total_ratio'] = round(df['living_area'] / df['total_area'],2)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'living_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 17: living_total_ratio\n\n\n\n\n\nValues\n21 796 (92%)\n\nMax\n1\n\nAvg\n0.56\n\n0.56 (4%)\n\n\nMissing\n1 903 (8%)\n\n95%\n0.73\n\nMode\n0.56\n\n0.55 (4%)\n\n\nDistinct\n91 (&lt;1%)\n\n75%\n0.64\n\nRange\n0.98\n\n0.6 (4%)\n\n\nDuplicates\n23 607 (99.6%)\n\nMedian\n0.57\n\niQR\n0.14\n\n0.62 (4%)\n\n\nZeros\n---\n\n25%\n0.5\n\nstd\n0.11\n\n0.58 (4%)\n\n\nNegative\n---\n\n5%\n0.39\n\nkurt\n0.23\n\n0.57 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.02\n\nskew\n-0.14\n\n0.59 (4%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\nКатегоризация данных\nВАЖНО\nследим, чтобы не осталось пропусков в категориальной переменной\nвсе пропуски нужно заменить на что-то типа - не указано\n\n\nShow the code\ndf.columns.isna()sum()\n\n\nЕсли есть пропуски, то добавляем\n\n\nShow the code\n.fillna(\"не указано\").astype('category')\n\n\nНе забываем новые каеториальные переменные делать .astype('category')\n\n\nShow the code\n.astype('category')\n\n\nВАЖНО\nсоздали новую переменную, сразу же изучили ее использу info_gen\nзадаем вопросы и пишем важные наблюдения\n\n\nShow the code\npagri_data_tools.info_column(df, 'price_segment')\n\n\nЕсли мы при загрузке данных не смогли изменить типы данных из-за пропусков, то теперь меняем типы данных.\nУ нас могут быть категориальные переменные не только для изучения данных на графиках под другим углом,\nно категориальные переменные можно использовать для изучения среза данных.\nТаким образом думаем какие срезы в датафрейме дадут нам важную информацию. И создаем категориальную переменную для них.\nНапример, у нас в данных есть растояние до центра, мы можем создать новую категориальную переменную и поместить туда катгории растояния до центра.\nИ затем изучить отдельные срезы в данных, например квартиры только в центре.\nДумаем какие категориальные переменные сделать для срезов.\nМогут быть операции разность, сумма отношение с другими переменными, которые дадут новую переменную.\nСмотрим на имеющиеся переменные и думаем какие из этих операций можно применить.\n\nВажно, когда создали новые переменные, особенно числовые, то нужно их изучить через my_info (взять df только с нужными столбцами)\nПосмотреть на гистограммы и стат параметры.\n\n\nЕсли у нас есть категориальная переменная, в которйо больше 3 значений, то нужно подумать а не можем ли мы из нее сделать\nновую категориальную переменную с 2-3 значениями, но тут важно, чтобы это несло смысл. Тут нам может помочь ИИ. И сообразительнсоть. Часто сразу не заментны возможные категории, котоыре несут смысл.\nТут исходим из смысла, наша задача созадть перменную, которая добавит нашему исследованию новый смысл, даст как бы новый разрез, и это улучшит\nкачество наших выводов.\nНапример, у нас столбец семейный стату, и там 6-7 статусов, мы можем собрать их в 2 семейный статус и не семейный статус.\nТут отлично помогает ИИ. Пишешь ему название переменной, униальные значения в ней,\nи просишь придумать возможную новую категориальнуюд переменную из 2-3 значений.\n\n\nВообще при категоризации ИИ очень хорошо помогает, он может дать идеи возможных категорий на оснвое имеющихся значений.\nПоэтому можно все столбцы прогонять через ИИ и смотреть что он предлагает, если есть то , что даст новый разрез нашим данным, то созадем категорийю.\n\n\nВажно, когда мы создаем категории, то всегда смотреть value_counts.\nИ делаем так, чтобы в каждой группе было достаточно элементов, хотя бы больше 30, а лучше больше 100.\nИначе выводы будут некоректные.\nВ идеале, чтобы количество элементов в каждой группе было от 1000. Лучше изменить диапазон и забрать часть данных от другой категории.\n\n\nВажно, когда создаем категориальную переменную, то даем ей тип category\nЧтобы она появилась на графиках (так как идет фильтрация на числовые и категориальные)\nи чтобы места меньше занимала\n\n\nПридумываем какие колонки можно дополнительно сделать из имеющихся.\nНапример у нас есть колонка длительность звонков, и 0 это пропущенный звонок,\nмы можем сделать колонку is_missed, в которой будет true или false\n\n\nСтараемся сделать категориальную колонку с да нет для всех возможных колонок.\nНапример, у нас колонка количество детей и есть 0, 1, 2, 3, 4, 5 мы созадем колнку\nесть дети или нет. 2 значения\nЭто очень полезно, так как мы можем посмотреть это на графиках и проверить гипотезы\nстат тестами.\n\n\nСмотрим на колонки и думаем можно ли из нее сделать колонку с 2 значениями,\nнапример есть и нет что-то\n\n\nОчень важно, когда мы создаем новые колонки, в которых используем несколько дургих, то нужно проверить распределение этой новой переменной, особенно выбросы.\nНапример, у нас начальная и конечная дата сессии и мы считаем длительность сессии. Вот тут нужно посмотреть какая минимальная длительность\nи какая максимальная. Ну и естественно проверить есть ли длительность 0 и меньше нуля.\nТаким образом мы можем найти инсайты уже после создания новых колонок, хотя в изначальных данных этих инсайдов не было видно.\n\n\nОбычная категоризация данных\n\n\nКатегоризация помогает избежать проблемы с разреженными данными, когда у нас есть слишком много групп с небольшим количеством элементов.\nЭто может привести к некорректным выводам и ошибкам в анализе. Категоризация нужна, чтобы образовать группы, в которых достаточно значений для использования статистических методов.\nИ вообще, если в группе 1-10 элементов, например у нас возраст пользователей и 5 человек с возрастом 22, 3 человека с возрастом 23 и так далее.\nМы не можем разбивать по таким группам, так как их размер небльшой и выводы будут некорректные, поэтому нам нужно собрать их в группы,\nчтобы у нас были группы с достаточным размером.\n\n\nЕсли у нас категориальная переменная имеет много значений, то мы не можем номрально с ней работать. &gt; Так как мы не можем построить графики по ним, так как их много и они не числовые. Не можем сравнить их все.\n&gt; Поэтому нам нужно сократить категории.\nНужно посмотреть на данные и подумать можем ли мы разделить их по сегментам рынка или по другим категориям, которые нам помогут.\nМы можем категоризировать на основе и числовых и категориальных столбцов. То есть мы можем из категориальной переменной сделать &gt; другую категориальную, уменьшив или увеличив разбиение.\nдобавление категорий обогощает данные, при чем категории могут формироваться не из одной колонки, а из серии, то есть чтобы попасть &gt; в определенную категорию значения столбцов должно быть такое то, а не только один столбец определяет категорию.\nкатегории могут быть да нет, то есть состоять из двух значений, например, у нас есть данные о рекламе и столбец где она показвалась, &gt; и у нас много много разных устройств. Мы можем разбить на да нет, то есть показвалась реклама по телеку или нет\n\n\nМы можем разбить данные на категории двумя способами\n\n\nразбивать на равные части &gt; подходит, когда &gt; &gt; - диапазон значений является равномерным и имеет линейную структуру &gt; - мы понимаем на какие интервалы хотим разбить данные &gt; - мы хотим разделить диапазон значений на равные части для удобства анализа.\nразбить на основе квантилей &gt; подходит, если &gt; &gt; - диапазон значений имеет неравномерную структуру &gt; - мы не можем понять какие интервалы выбрать &gt; - хотим выделить группы с конкретными характеристиками (например, группы с низким доходом, средним доходом и высоким доходом)\n\n\nВыбираем нужные способ и используем\ncreate_category_column\n\n\nЧтобы посмотреть распределение по квантилям используем pagri_data_tools.quantiles_columns()\n\n\n\nShow the code\ndf['floor_cat'] = df.apply(lambda x: 'первый' if x['floor'] == 1 else 'последний' if x['floor'] == x['floors_total'] else 'другой', axis=1).value_counts()\n\n\n\n\nShow the code\npagri_data_tools.quantiles_columns()\n\n\n\n\nShow the code\npagri_data_tools.create_category_column()\n\n\n\nСделаем следующие группы\n\n\nдо 30 лет\nот 30 до 40 лет\nот 40 до 50 лет\nот 50 до 60 лет\nстарше 60 лет\n\n\n\nShow the code\nlabels = ['до 30', '30-40', '40-50', '50-60', 'старше 60']\nbins = [-np.inf, 30, 40, 50, 60, np.inf]\n\n\n\n\nShow the code\ndf['age_cat'] = pagri_data_tools.create_category_column(df.age, labels=labels, bins=bins)\ndf['age_cat'].value_counts(dropna=False)\n\n\n30-40        5704\n40-50        5241\n50-60        4520\nдо 30        3804\nстарше 60    2132\nName: age_cat, dtype: int64\n\n\nСоздаем новые переменные из времени\n\n\nShow the code\nweekday_dict = {\n    'Monday': 'Понедельник',\n    'Tuesday': 'Вторник',\n    'Wednesday': 'Среда',\n    'Thursday': 'Четверг',\n    'Friday': 'Пятница',\n    'Saturday': 'Суббота',\n    'Sunday': 'Воскресенье'\n}\nmonth_dict = {\n    1: 'Январь',\n    2: 'Февраль',\n    3: 'Март',\n    4: 'Апрель',\n    5: 'Май',\n    6: 'Июнь',\n    7: 'Июль',\n    8: 'Август',\n    9: 'Сентябрь',\n    10: 'Октябрь',\n    11: 'Ноябрь',\n    12: 'Декабрь'\n}\n\n\n\n\nShow the code\ndf['publication_weekday'] = df['first_day_exposition'].dt.day_name().map(weekday_dict).astype('category')\ndf['publication_month'] = df['first_day_exposition'].dt.month.map(month_dict).astype('category')\ndf['publication_year'] = df['first_day_exposition'].dt.year.astype(str).astype('category')\n# Задаем порядок для weekdays\nweekday_order = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']\ndf['publication_weekday'] = df['publication_weekday'].cat.reorder_categories(weekday_order, ordered=True)\n\n# Задаем порядок для months\nmonth_order = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']\ndf['publication_month'] = df['publication_month'].cat.reorder_categories(month_order, ordered=True)\n\n\n\n\nShow the code\ndf.columns.isna()sum()\n\n\nЧтобы получить формат янв'09\n\n\nShow the code\n# Словарь для замены месяцев\nmonths_translation = {\n    'Jan': 'Янв',\n    'Feb': 'Фев',\n    'Mar': 'Мар',\n    'Apr': 'Апр',\n    'May': 'Май',\n    'Jun': 'Июн',\n    'Jul': 'Июл',\n    'Aug': 'Авг',\n    'Sep': 'Сен',\n    'Oct': 'Окт',\n    'Nov': 'Ноя',\n    'Dec': 'Дек'\n}\n# Получаем отдельно месяц и год\nmonths = df['first_day_exposition'].dt.strftime('%b').astype('category').cat.reorder_categories(list(months_translation.keys()), ordered=True)\nyears = df['first_day_exposition'].dt.strftime('%y')\nmonths_years = pd.concat([months, years], axis=1)\nmonths_years.columns = ['month', 'year']\n# Создаем список уникальных (год, месяц) и сортируем\nunique_months = months_years.drop_duplicates().sort_values(by=['year', 'month'])\n\n# Создаем список для порядка\nmonth_year_order = []\n\n# Формируем month_year_order на основе уникальных (год, месяц)\nfor _, row in unique_months.iterrows():\n    year = row['year']\n    month = row['month']\n    month_year_order.append(f\"{months_translation[month]}'{str(year)[-2:]}\")\n\n# Заменяем месяцы и соединяем с годом\ndf['publication_month_year'] = months.astype(str).map(months_translation) + \"'\" + years\ndf['publication_month_year'] = df['publication_month_year'].astype('category')\ndf['publication_month_year'] = df['publication_month_year'].cat.reorder_categories(month_year_order, ordered=True)\ndf['publication_month_year']\n\n\n\n\nShow the code\ndf.columns.isna()sum()\n\n\nДля верменных переменных нужно делать не только отедльно месяц, год.\nНо и делать категориальную переменную обрезая время.\nТо есть мы созадем переменную\nЯнв’23\nНо нужно подумать, нужна ли нам будет именно временная переменная, или достаточно категории,\nесли будет нужна временная, то создаем обрезанную переменную datetime используя .dt.round()\n\nКатегоризация с использованием лемматизации\n\n\nЕсли у нас есть столбец и мы хотим его лематизировать, то используем функцию\nlemmatize_column\n\n\nЧтобы создать лемы для словаря категоризации, можно посмотреть имеющиеся предложения и использовать\nm = Mystem()\nm.lemmatize('образованием')\n\n\n\nShow the code\nm = Mystem()\nm.lemmatize('образованием')\n\n\n\n\nShow the code\npagri_data_tools.lemmatize_column()\n\n\n\n\nShow the code\ncategorization_dict = {\n    'недвижимость': ['жилье', 'недвижимость']\n    , 'образование': ['образование']\n    , 'автомобиль': ['автомобиль', 'машина']\n    , 'свадьба': ['свадьба'] \n}\n\n\n\n\nShow the code\ndf['purpose_new'] = pagri_data_tools.categorize_column_by_lemmatize(df.purpose, categorization_dict, use_cache=True)\ndf['purpose_new'].value_counts(dropna=False)\n\n\nнедвижимость    10779\nавтомобиль       4288\nобразование      3997\nсвадьба          2337\nName: purpose_new, dtype: int64\n\n\n\nЕсли нужно, уддалим старую колонку\n\n\n\nShow the code\ndf = df.drop('purpose', axis=1).rename(columns={'purpose_new': 'purpose'})\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\ndob_years\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\ndob_cat\ntotal_income_cat\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\n0\n253876\nНедвижимость\n40-50\n200-500 тыс\n\n\n\n\n\n\n\n\nС помощью лематизации мы можем сократить количество категорий.\n\n\nНапример мы можем выделить группы:\n\n\nоперации с автомобилем (ключевое слово - автомобиль)\nоперации с недвижимостью (ключевые слова: жилье, недвижимость)\nпроведение свадьбы (ключевое слово: свадьба)\nполучение образования (ключевое слово: образование)\n\n\nИспользуем функцию\ncategorize_column_by_lemmatize\n\n\n\nShow the code\npagri_data_tools.categorize_column_by_lemmatize()\n\n\nИз времени также можно сделать категориальный переменные, например, создать переменную для времени заправки, если больше 1 минуты, то долгая заправка, иначе короткая и так далее.\nВАЖНО подумать какие переменные мы можем создать не только категориальные, но и числовые и временные.\nНапример, обрезание времени, чтобы получить дату по часам и прочее,\n\nЕсли мы хотим преобразовать категории в числа, то мы можем использовать\n\n\nlable encoding &gt; Заменяем быквы числами. Хорошо работает, когда у нас порядковые категориальные переменные.\n&gt; Не забываем про порядок, если у нас алфавитный порядок наших категорий соотвествует числовому, то ок,\n&gt; если нет, то нам нужно самим определить порядок чисел, чтобы они соответствовали категориям в нужном порядке.\none hot encoding &gt; Если у нас категориальная переменная не упорядочиваемая, то лучше использовать one hot encoding, чтобы разница между числами не вносила шум,\n&gt; так как черный и белый и красный цвет закодированные 1, 2, 3 вносят смысл количества, но они не имеют этого свойства.\ntarget encoding &gt; замена категориальной переменной на каую-то статистику по одной из категорий внутри этой переменной.\n&gt; Например у нас категориальная переменная это наличие задержки. Значение задержан / незадержан. Мы кодируем их как 0 и 1. Далее мы берем и считаем по каждой группе (для задержан и для незадержан)\n&gt; статистику, например, среднее и получаем столбец, где вместо каждой буквы будет ее среднее.\n&gt; Тут важно делать регуляризацию. Так как маленькие группы могут иметь сильно зашумленные статистики, так как если у нас\n&gt; группа из 5 значений, то среди них может быть легко экстремальное одно и оно сбивает статистику, поэтому добавляем штраф всем статистикам.\n&gt; Регуляризация это что-то похожее на сглаживание.\n&gt; Как это делается &gt; &gt; - берем считаем среднее по таргету (целевой переменной, то есть той, по которой мы счтаем статистику) всей таблице (то есть не делим на категории) &gt; - Далее используем следующую формулу для сглаженного значения среднего по конкретной группе:\n&gt; (среднее по группе _ количество элементов в группе + среднее по таргету без учета категорий _ размер регуляризирующей группы) / (количество элементов в категории + размер регуляризирующей группы)\n&gt; Количество элементов в регуляризационнной группе выбирает эмперически. То есть это количество элементов, которым мы сглаживаем.\n&gt; Смысл в том, что мы берем сколько-то элементов с занчением для всех категорий и сглаживаем им наши отдельные категории. &gt; - Размер регуляризирующей группы обычно выбирают с помощью grid search, то есть берут цикл для размера этой группы и считают результат модели для каждого размера,\n&gt; и потом выбирают тот размер, для которого результат лучше. &gt; &gt; target_encoding_linear\n&gt; target_encoding_bayes\n\n\n\nShow the code\npagri_data_tools.target_encoding_linear()\npagri_data_tools.target_encoding_bayes()\n\n\n\nИспользование кластеризации для категоризации\n\n\nМожно понизить размерность до 3\nи построить 3 д график\nПо этому графику посмотреть есть ли у нас возможные кластеры\nЕсли есть, то выделить их\nПричем для понижения размерности можно брать все столбцы, а можно только часть.\n\n\n\nРасчет метрик\n\nМетрики продукта\n\nтут будут расчеты продуктовых метрик\n\n\n\nЭкономические метрики\n\nтут будут расчеты экономических метрик\n\n\nЕсли расчет метрик является важным аспектом вашего исследования и требует подробного описания, то создание отдельной главы будет лучшим решением.\nЕсли в этом разделе будет немного расчетов, то можно сделать расчеты метрик разделом предобработки данных\n\n\nРасчитываем разные метрики на основе имеющихся данных и тех, которыми смогли обогатить данные\n\n\nВажно следить за количеством недель в году, если мы создаем столбец месяца.\nПроверять чтобы у нас не появлялась неделя дополнительная, из за того, что мы захватили предыдущий год\n\n\n\n\nОбъединение данных\n\nПроверка соответствия:\nЕсли у нас в разных таблицах есть значения, которые дожны быть одинакоые,\nто нужно проверить, что значения в одном столбце соответствуют значениям в другом столбце.\n\n\n\nShow the code\ndf['column_name1'].equals(df['column_name2'])\n\n\n\nОбоготить данные можно следующими способами\n\n\nвзять поле нашей таблицы и найти дополнительные данные в интернете или ещё где-то и потом связать с нашей колонкой по этому полю &gt; Самое просто это дата, если у нас есть дата, то мы можем много разной доп информации внести в наши данные связывая по дате.\n&gt; Также, например, у нас есть какие-то коды чего-то, мы ищем информацию по этим кодам и находим табличку с доп инфой по этим кодам и можем обоготить ими\n&gt; нашу таблицу. Например, у нас города или страны, мы можем по ним также внести доп инфу из какого-то источника, которая нам поможет.\n&gt; Вообще любое поле нашей таблицы это потенцильная нить для обогощения. Главное понять с чем полезным мы можем соеденить\n&gt; через конкретное поле, чтобы получить больше полезной информации для анализа, по сути для детализации наших зависимостей или для поиска\n&gt; новых зависимостей и инсайтов в них.\n&gt; Процесс следующий - мы берем каждую колонку нашего дата сета и думаем, с чем через нее мы можем связать и если придумываем, то идешь ищем эту информацию и\n&gt; в итоге соединяем.\nМожно пойти от обратного. Сначал подумтаь какие данные нам могут помочь и поискать их в интернете например, а потом уже думать как их соеденить с нашими &gt; данными. Оба способа лучше делать одновременно.\n\n\nКаждый раз, когда мы работаем с дата сетом, мы должны понять что является сущностью этого дата сета.\nНапример событие, человек и прочее.\nДалее нам нужно поянть а можем ли мы его идентифицировать по текущим данным (не всегда есть уникальный ай ди).\nЕсли не можем, то нужно думта как обогатить данные, чтобы четко идентифицировать сущности\n\n\nЧто нужно обязательно првоерить после соединения\n\n\nесли мы соединяем по полю, которое уникально в обеих таблицах &gt; - количество строк в левом датафрейме равно количеству строк в итоговом &gt; - параметры каждого дата сета не изменились (если мы соединили правильно, то итоговые суммы по столбцам не должны измениться) &gt; - используем df.sum(numeric_only=True) для каждой таблицы до соединения и для общей таблицы и сравниваем значения &gt; - можно использвоать df.describe также до и после объединения и сравнивать параметры\nесли у нас в одной из колонок для соединения не уникальные значения (то есть для одной строки в левой таблице будет несколько в итоговй) &gt; - Сначала группируем таблицы, чтобы поле для соединения в обеих таблицах было уникальное &gt; и применяем предыдущий шаг с количеством строк в левой и итоговой и суммой значений в левой и итоговой одинаковой &gt; - Если нам нужно соеденить без группировки (но это редко может быть, поэтому нужно подумать точно ли не моежм сгруппировать)\n&gt; тогда нет выбора и остаются только следующие варианты\n&gt; - если в левой таблице уникальные записи в колонке, по которйо соединяем\n&gt; - тогда считаем сколько было записей в левой таблице в колонке для соединения и сравниваем с количеством уникальных записей в итоговой\n&gt; они должны совпадать, но тут важно в итоговой брать уникальные записи - есил и в левой и правой нет уникальных - тут считаем сколько уникальных в левой до и сколько уникальных в итоговой, должно совпадать\n\n\nЕсли у нас что-то не сходится после соединения таблиц, то нужно внимально изучить это.\nТут может быть инсайт (кто-то не правильно вносит информацию, какие-то значения неверные или кто-то что-то хотел спрятать, не указать и прчоее).\nКогда видим нестыковки после соединения таблиц, то должна загораться красная лампочка. Это потенциальный инсайт, баг, который мы можем найти и сообщить, чтобы его починили.\n\n\nпомним, что метод соединения inner стоит по умолчанию в merge\n\n\nВ колонках, по которым будем соеднить, проверяем, нет ли пропусков, пропуски нужно заменить нулями.\nИначе будет либо ошибка, либо пропуски сджойнятся с пропусками\n\n\nПроблема справочников\nПри объединение таблиц важно помнить про то, что в разных таблицах не только названия столбцов может быть разное,\nно и одно значение может быть записано по разному в разных таблицах, например, названия профессий, названия городов,\nимя в одной таблице на русском, а в другой на английском, номер телефона с черточкой или плюсом и без черточки или плюса.\nПоэтому не забываем привести все значения таблиц к нижнему регистру, чтобы не было проблем разными регистрами для одного слова\n\n\nПроблема временных зон\nВ одной таблице может быть выгрузка по местному времени, а в другом по московскому\n\n\nПроблема курсов валют\nРазыне системы могут брать курс за разные промежутки вермени, например, одна система берет курс в гугле (раз в час обновляется),\nа другая система берет курс в ЦБ (обновляется раз в сутки)\nИ поэтому итоговые резултаты могут не состыковаться, поэтому, когда видим курсы валют, то нужно убедиться. что они взяты из одного испточника\nи за один промежуток времени\n\n\nКогда мы работаем с данными, нам важно четко идентифицировать клиентов, событие или другую сущность, с которой мы работаем.\nИначе у нас будет шум, так как мы одного и того же клиента учтем более одного раза.\n\n\nКак можно обоготить данные, чтобы лучше идентифицировать сущности\n\n\nДобавить для клиента email, телефон, устройство, 4 цифры карты и другое, что может помочь его идентифицировать &gt; Это важно так как у клиента могут быть разные телефоны, устройства, карты, но все это вместе поможет его идентифицировать точнее\nДобавить для события локацию, погоду, связанные событие, праздники, что поможет нам идентифицировать событие\n\n\n\nПромежуточный вывод"
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#визуализация-взаимосвязей-переменных",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#визуализация-взаимосвязей-переменных",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "Визуализация взаимосвязей переменных",
    "text": "Визуализация взаимосвязей переменных\n\nИсследование корреляционных связей\nСледим за правильным порядком переменных полученных из времени\nЧтобы подготовить title_for_axis, пишем ии так\nзапомни - total_images = [‘Число фотографий’, ‘числа фотографий’, 0], - тут первый элемент списка это общая форма и с большой буквы, второй элемент это форма первого элемента при ответе на вопрос Чего и третий элеент списка это род элемента (0 - средний род, 1 - мужской род, 2 женский род) понятно?\nи далее даем список нужных названий колонок в таком виде\nДля корреляций достаточно просто указать название без рода и склонения\n\n\nShow the code\n\ntitles_for_axis= dict(\n        total_images = 'числа фотографий',\n        last_price = 'цена',\n        total_area = 'общая площадь',\n        rooms = 'число комнат',\n        ceiling_height = 'высота потолков',\n        floors_total = 'всего этажей',\n        living_area = 'жилая площадь',\n        floor = 'этаж'\n)\n\n\nВАЖНО\nпроверить, что все категориальные переменные по прежнему имеют категориальный тип, чтобы при анализе они не поетрялись\n\n\nShow the code\ndf.dtypes\n\n\n\nТоп n значений одного столбца по значениям в другом Сделать функцию, чтобы в столбцах, где бльше 20 уникльных значений посмотреть топ n значений по другой колонке.\nНапример, топ 10 покупателей по сумме покупок и прочее.\nИдея в том, что если в столбце до 20 уникальных значений, то мы проанализируем комбинации с другими стобцами на графиках.\nА вот если у нас столбец не числовой и в нем больше 20 уникальных значений, то на графике мы не сможем понять топ n.\n\n\nИзучаем топ n значений в категориальных столбцах датафрейма, где значений больше порогового, по значению в столбце value_column.\nТут можно делать разные топы, использовать разные функции.\nЗадача изучить то, что мы не сможем изучить на графиках из-за болшого количества занчений в категориальной переменной,\nпоэтому мы берем топ n значений.\n\n\n\nShow the code\ngen = pagri_data_tools.top_n_values_gen()\nnext(gen)\n\n\n\nЧтобы сравнить метрики между собой мы можем - использовать корреляционный анализ (Пирсена, Спирмена, Кенделла)\n\n\nheatmap_corr(df)\n\n( r = 1 ): Полная положительная линейная зависимость.\n( 0.7 &lt; r &lt; 1 ): Сильная положительная линейная зависимость.\n( 0.3 &lt; r ): Умеренная положительная линейная зависимость.\nЕсли числовых переменных не много и они входят на один график, то просто строим график\n\n\nShow the code\npagri_data_tools.pagri_data_tools.heatmap_corr(df)\n\n\nЕсли переменных много и нужно разделить на части, то используем эту функцию\n\n\nShow the code\ngen = pagri_data_tools.heatmap_corr_gen(df, part_size=10, titles_for_axis=titles_for_axis)\nnext(gen)\n\n\n\nИспользование регрессии и случайного леса для определения влияния переменных\n\n\nКоэффициенты регрессии позволяют оценить влияние каждой переменной на целевую переменную, учитывая влияние других переменных,\nв то время как важные компоненты в случайном лесе позволяют оценить важность каждой переменной для предсказания целевой переменной.\n\n\nИспользуем регрессиию\n\n\nЧтобы построить регрессию и посмотреть стат значимость и коэффициенты удобно использовать модуль statsmodel\n\n\nVIF означает Variance Inflation Factor (Фактор инфляции дисперсии). Это статистическая метрика,\nиспользуемая для обнаружения мультиколлинеарности (сильной корреляции) между предикторами (фичами) в линейной регрессии.\n\n\nОбычно, VIF интерпретируется следующим образом:\n\nVIF &lt; 5: слабая мультиколлинеарность\n5 ≤ VIF &lt; 10: умеренная мультиколлинеарность\nVIF ≥ 10: сильная мультиколлинеарность\n\n\n\nСмотрим R2 (коэффициент детерминации) - использовать коэффициенты у регресси Мы строим регрессию и смотрим, у каких метрик больше коэффициенты. Таким образом мы поймем какие метрики сильнее зависят с целевой.\nВажно, чтобы независимые переменные некоррелировали по отдельности и вместе (мультиколлиниарность).\nПо отдельности смотрим матрицу корреляции.\nЧтобы определить коррелириуют ли вместе, береме независимые переменные,\nи перебираем их выбирая одну из них целевой и смотрим R2.\nЕсли R2 большой, то значит эта метрика (которая целевая на этом шаге) хорошо описывается другими и ее можно выбросить. Также не забываем поправки на гетероскедостичность (HC0, HC1, HC2, HC3) в статпакетах.\nНам нужно ответить на следующие вопросы - Влияет ли метрика на целевую? Оцениваем коэффициенты в уравнении регресси у каждой метрики.\n- Как влияет метрика на целевую? Смотрим R2 (коэффициент детерминации). И определяем какая часть целевой переменной определяется независимыми метриками.\n- Коэффициенты при метриках в уравнении статистически значим? При какаом уровне значимости? Смотрим в стат пакете p value для каждого коэффициента, что нам говорит значим ли этот коэффициент.\nТо есть мы не просто смотрим его абсолютное значение, а учитываем p value.\n- Дайте содержательную интерпретацию коэффицентам? При увеличении метрики k на 1, целевая метрика увеличивается на \\(b_{k} * 1\\) То есть нужно перевести коэффициенты в реальное сравнение, насколько увелчисться целевая метрика при изменении определенной метрики на 1 - Найдите 95 процентный доверительный интервал. В стат пакете смотрим значение и оно говорит, что если мы многократно повторим ноши вычисления с новыми данными, то 95 процентов наших\nполученных коэффицентов будут лежать в этом диапазоне.\n\n\nСтроим модель и изучаем результат\nlinear_regression_with_vif\n\n\n\nShow the code\npagri_data_tools.linear_regression_with_vif()\n\n\n\nИспльзовать коэффициенты у классификацию\nСтроим случайный лес какие метрики сильнее всего влияют на решения модели.\nplot_feature_importances_classifier\nplot_feature_importances_regression\n\n\nТут нужно подумать как использовать категориальные переменные тоже\nНужно их перевести в one hot encoding или подобное, чтобы также проверить силу их влияния на целевую перменную\n\n\n\nShow the code\ntitles_for_axis = dict(\n    debt = 'долга'\n    , children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\ntitle = 'График важности признаков для предсказания цены'\npagri_data_tools.plot_feature_importances_classifier(df, target='debt', titles_for_axis=titles_for_axis, title=title)\npagri_data_tools.plot_feature_importances_regression()\n\n\n\nНа основе полученных данных формулируем гипотезы, которые будем проверять в блоке проверки гипотез\n\n\nиспользуем быблиотеку shap, чтобы определить метрики, которые лучше других помогают предсказывать целевую перемменную\n\nДобавить в dash app возможность сохранять код для ячейки с фильтром (срезом данных).\nТо есть у нас есть фильтр, мы хотим посмотреть срез данных и фильтруем данные.\nИ если увидели что-то важное, то мы сохраняем код для создания графика с этими x, y, category и фильтром.\nТо есть в коде сначала будет фильтрация датафрейма и потом создание графика в 2 строки.\nважно мы не пишем все наблюдения, а только те, которые могут быть важны для анализа, то есть мы смотрим, задаем вопросы данным и\nи если ответ важен, то мы записываем наблюдения)\nВАЖНО\nКогда мы видим таблицу или график, то мы придумываем вопросы к результату.\nВсе возможные вопросы (как, почему, зачем, сколько, как долго, быстро ли, медленно ли, важно ли это, из-за чего это и прочие вопрсоы) И отвечая на эти вопросы мы получаем наблюдения и выводы И чтобы задавать правильные вопросы, мы должны сначала подумать о физике параметров, которые мы видим.\nЕсли у нас много значений в переменной, то мы агрегируем данные и можем построить бары.\nНо если мы агрегируем данные по переменной, в которой много значений и нам это нужно.\nТо мы не сможем построить бары, и тогда мы строим гистограмму. То есть мы берем, например, для каждой заправки считаем среднее время заправки и так как у нас много заправок,\nно мы хотим визуализировать среднее время по ним, и не агрегировать по другому параметру, то мы можем испльзовать гистограмму.\nВ данном случае гистограмма своего рода агрегация в бины, то есть мы получаем как бы новую переменную из бинов, в каждом бине будет агрегированы данные.\nЭто работает, когда нам нужно просто посмотреть колечество, так как в бинах будет количество. Таким образом мы получаем сколько у нас заправок имеют определенное среднее вермя заправки.\n\nПро размер графиков\nСтандартный размер графиков width=600, height=400\nДля более сложных графиков, когда требуется больше места для отображения данных, можно использовать размеры width=800, height=600 или width=1000, height=800\n\n\nСравнивать количество элементов нужно в абсолютных и относительных величинах.\nКогда мы сравниваем только в абсолютных величинах, мы не учитываем размеры групп.\nВ одной группе может быть элементов больше чем в другой и тогда сравнение будет не совсем точным.\nЕсли у нас 2 категориальные переменные, то мы можем сравнивать отностельные величины\nпо одной переменной, а можем по другой.\nЭто как сравнивать суммарный возраст в группах, это не дает полной картины и мы сравниваем средний возраст,\nчтобы размер группы не влиял.\n\n\nВАЖНО Анализ графиков и выводы для них должны полностью перекрывать постановку задачи и цель.\nЭто значит, что если цель проанализировать зависимость наличия долга, то мы в идеале должны проанализировать\nвлиянеие каждой переменной на наличие долга (числовой и категориальной)\nКончено нужно проанализировать все возможные зависимости.\nНо все зависимости с переменной в постновке задачи мы обязаны проверить и дать выводы. И о наличии и об отсутствие.\nВажные выводы делаем не только о наличие интересных моментов, но и об отсутствие.\n\n\nСначала раздел графиков\nНа основе графиков формируются гипотезы (например, у нас у мужчин зп больше) И после раздела графиков идет раздел проверки гипотез. Тут мы првоеряем разные гипотезы новые и те, что увидели на графиках.\nЭто правильная последовательность сначала изучили графики и потом на основе их сформировали гипоетзы Перед разделом про графики идет раздел с корреляцией и поиском главных компонет случайного леса.\nМы выбиарем переменную, для которой мы далее хотим посмотреть разыне зависимости и указываем ее целевой для сучайного леса\nИ смотрим какие фичи сильнее влияют.\nИ теперь можем построить графики с целевой перменно и этими главными фичами и в выводе можно указать про то что это важные компоненты случаного леса\n\n\nНа основе полученных данных формулируем гипотезы, которые будем проверять в блоке проверки гипотез\n\n\n\nИзучение зависимостей между числовыми переменными\n\nИзучаем scatter plots\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'    \n)\n\n\n\n\nShow the code\npairs = {('total_images', 'last_price'): None, ('total_images', 'floors_total'): {'total_images': [-2.15, 22.45], 'floors_total': [0.51, 28.54]}, ('total_images', 'kitchen_area'): {'total_images': [-1.04, 28.44], 'kitchen_area': [-0.6, 59.26]}, ('total_images', 'parks_nearest'): {'total_images': [np.int64(0), np.int64(50)], 'parks_nearest': [np.float64(1.0), np.float64(3190.0)]}, ('total_images', 'ponds_around3000'): {'total_images': [np.int64(0), np.int64(50)], 'ponds_around3000': [np.float64(0.0), np.float64(3.0)]}, ('total_images', 'living_total_ratio'): {'total_images': [np.int64(0), np.int64(50)], 'living_total_ratio': [np.float64(0.02), np.float64(1.0)]}, ('total_images', 'kitchen_total_ratio'): {'total_images': [np.int64(0), np.int64(50)], 'kitchen_total_ratio': [np.float64(0.03), np.float64(0.79)]}, ('total_images', 'price_per_sqm'): {'total_images': [np.int64(0), np.int64(50)], 'price_per_sqm': [np.int64(7962), np.int64(1907500)]}, ('last_price', 'living_area'): {'last_price': [np.int64(430000), np.int64(763000000)], 'living_area': [np.float64(2.0), np.float64(427.55)]}}\npagri_data_tools.pairplot_pairs(df, pairs, coloring=True, horizontal_spacing=0.12, rows=3, cols=3).show(config=dict(displayModeBar=False, dpi=200), renderer=\"png\")\n# если нужно интерактивый график, то\npagri_data_tools.pairplot_pairs(df, pairs, coloring=True, horizontal_spacing=0.12, rows=3, cols=3)\n\n\nЧтобы в dash app выбрать нужные пары для scatterplot\nставим _gen_ в месте где хотим чтобы появились ячейки с кодом для постройки графиков\nдалее используем pagri_dash.scatterplot_analysis_dash\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\npagri_dash.scatterplot_analysis_dash(df, \"path/to/notebook/for/save\")\n\n\n\n\nИзучение зависимостей между категориальными переменными\n\nЧтобы автоматически генерировались подписи осей и заголовок графика для категориальных, временных и числовых с категориальными зависимостейь , нужно заполшнить такой словарь.\nПервый элемент списка - это подпись оси\nВторой элемент списка - это как это название будет отображаться в заголовке графика\nДля числовых столбцов также указывается род, чтобы правильно выбрать (Середнее, средний, средняя) (0 - средний род, 1 - мужской род, 2 - женский род)\n\n\n\nShow the code\nf'Среднее / Медианное / Суммарное {numeric} в зависимости от {category} и {category}'  \n\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column (0 - средний род, 1 - мужской род, 2 - женский род) (Середнее образовние, средний доход, средняя температура) )\n    children = ['Количество детей', 'количество детей', 0]\n    , age = ['Возраст, лет', 'возраст', 1]\n    , total_income = ['Ежемесячный доход', 'ежемесячный доход', 1]    \n     # category column\n    , education = ['Уровень образования', 'уровня образования']\n    , family_status = ['Семейное положение', 'семейного положения']\n    , gender = ['Пол', 'пола']\n    , income_type = ['Тип занятости', 'типа занятости']\n    , debt = ['Задолженность (1 - имеется, 0 - нет)', 'задолженности']\n    , purpose = ['Цель получения кредита', 'цели получения кредита']\n    , dob_cat = ['Возрастная категория, лет', 'возрастной категории']\n    , total_income_cat = ['Категория дохода', 'категории дохода']\n)\n\n\nВажно когда мы смотрем очередной график, то задавать не только вопросы к данным, но и думать как можно отфильтровать\nданные, чтобы сделать дополнительные полезные выводы.\nТо есть мы фильтруем данные и потом эти графики поместим в раздел с анализом срезов.\nЧтобы в dash app выбрать нужные пары для scatterplot\nставим _gen_ в месте где хотим чтобы появились ячейки с кодом для постройки графиков\nдалее используем pagri_dash.scatterplot_analysis_dash\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/colab/pagri_private_modules')\nimport pagri_dash\npagri_dash.category_analysis_dash(df, \"path/to/notebook/for/save\")\n\n\n\nСтроим матрицу тепловой карты для категориальных переменных и изучаем зависимости\n\nЧтобы в dash app выбрать нужные пары для scatterplot\nставим _gen_ в месте где хотим чтобы появились ячейки с кодом для постройки графиков\nдалее используем pagri_dash.scatterplot_analysis_dash\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/home/pagri/git_repos/pagri_private_modules')\nimport pagri_dash\npagri_dash.categorical_heatmap_matrix_dash(df, \"/home/pagri/git_repos/pagri-projects/quarto/projects/housing-ads-investigation/temp.ipynb\")\n\n\n\nПосмотрим на распределение количества элементов между группами\n\n\nНужно подумать как отобразить не только процент от всего количества, но и пороцент в группе\nТо есть у нас есть значение в ячейке, сумма всех, сумма по категории на оси x и сумма по категории на оси Y\nВот нужно как-то отобразить процент от суммы, процент от одной категории и от другой категории\n\n\n\nShow the code\n12 (0.5% of total, 20% of row, 15% of col) \n\n\n\nМожно сделать кнопки, чтобы можно было подсветку делать внури колонок и строк\n\n\nМожно сделать кнопки (процент от общего) (процент от тут указывается название оси x) (аналогично для второй оси)\n\n\n\nShow the code\npagri_data_tools.categorical_graph_analys_gen()\n\n\n\nСтроим treemap\ntreemap\ntreemap_dash\napp = treemap_dash(df)\nif __name__ == '__main__':\n   app.run_server(debug=True)\n\n\n\nShow the code\npagri_data_tools.treemap()\n\n\n\n\nShow the code\napp = pagri_data_tools.treemap_dash(df)\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\n\nСтроим parallel_categories\nparallel_categories\nparallel_categories_dash\napp = treemap_dash(df)\nif __name__ == '__main__':\n   app.run_server(debug=True)\n\n\n\nShow the code\npagri_data_tools.parallel_categories()\n\n\n\n\nShow the code\napp = pagri_data_tools.parallel_categories_dash(df)\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\n\nСтроим Sankey\nsankey\nsankey_dash\napp = treemap_dash(df)\nif __name__ == '__main__':\n   app.run_server(debug=True)\n\n\n\nShow the code\npagri_data_tools.sankey()\n\n\n\n\nShow the code\napp = pagri_data_tools.sankey_dash(df)\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\n\n\nАнализ временных зависимостей\nКогда мы хотим изучить верменную зависимость, то нам нуно создать новые переменные с обрезанными (trunc or round) значениям, чтобы можно было сгруппировать используя groupby or pivot_table\nпо этой обрезанной переменной и применить функцию агрегации и построить график, например, среднее время заправки на азс по часам.\nВот когда мы работаем с временем, нам нужно думать какие переменные создать, обрезая текущее время.\n\nСтроим когортный анализ, если есть возможность\n\n\nЕсли у нас есть даты, то мы можем посмотреть не просто абсолютные значения на каждую дату какой-то метрики,\nа посмотреть относительные значения относительно предыдущего значения.\nДля этого нужно составить таблицу, в которой будет изменение в процентах относительно предыдущего значения.\nИ затем визуализировать для каждой даты динамику этого показателя\n\n\n\nИзучение зависимостей между числовыми и категориальными переменными\nдобавить слайдер как доп переменную и анимация будет сразу\n\n\nShow the code\ndf = px.data.gapminder()\n\nfig = px.bar(df, x=\"continent\", y=\"pop\", color=\"continent\",\n  animation_frame=\"year\", animation_group=\"country\", range_y=[0,4000000000], width=900, height=500)\nfig.show()\n\n\nВажно когда мы смотрем очередной график, то задавать не только вопросы к данным, но и думать как можно отфильтровать\nданные, чтобы сделать дополнительные полезные выводы.\nТо есть мы фильтруем данные и потом эти графики поместим в раздел с анализом срезов.\n\nМожно добавить кнопку среднее и количество\nЧтобы можно было посмотртеть распределение по количеству, когда смотрить среднее.\n\n\n\nShow the code\n_gen_ \n\n\nДобавить в hover количество элементов в группе,\nчтобы понимать размер группы.\nДобавить возможность перескакивать комбинации.\nЕсли много колонок, то комбинаций очень много и часть может быть просто не нужна для анализа.\nИзучаем следующим образом\n- смотрим на график и определяем есть ли взаимодейсвие (то есть отличаются ли значения в разных группах, это будет видно как разная высота баров) - если разницы в барах нет, или она минимальная, то сразу можно пропускать - если разница есть, то думаем важна ли для нас ээта комбинация столбцов - если нет, то пропускаем - если да, то пишем наблюдения и сохраняем\nНе забываем смотреть 1_cat чтобы изучить отдельную категорию.\nТо есть график появлился, смотрим на обе категории и на числовую переменную и думаем, нужно ли нам по отдельности изучить\nкаждую категориальную переменную c числовой. Если уже изучили, то не изучаем. Нужно подумать как сохранять уже изученые комбинации, чтобы не повторяться (может в dash app добавить всплывающее окно, для графиков, для которых уже был вывод, что уже было)\nНужно сделать в dash app чтобы было 4 графика - каждая категория с числвой (2 графика) - и по 2 категории вместе с числовой для разной последовательности категорий (то есть сначала одна легенда, потом другая)\nТак будет удобно и в браузере есть место для 4 графиков.\n\n\nShow the code\nimport sys\nsys.path.append('/home/pagri/git_repos/pagri_private_modules')\nimport pagri_dash\npagri_dash.numeric_category_analysis_dash(df, \"/home/pagri/git_repos/pagri-projects/quarto/projects/housing-ads-investigation/temp.ipynb\")\n\n\n\n\nАнализ срезов данных\nСрезы нужно обязательно сравнить со всем датафреймом.\nТо есть мы например, изучили центр города и нужно сделать выводы основываясь на сравнении центра и всего города.\nНужно создать 2 генератора и параллельно идти, чтобы сначала выводился срез, а потом уже целый датафрейм.\nТут наша задача не изучать выбросы, дубли и прочее.\nТут задача найти отличия среза от всего датафрейма.\nВозможно лучше прйти все колонки так попарно, а потом выбрать только те, которые имеют отличия.\nИ построить только их.\nСрезы нужны не только чтобы изучить отдельно часть данных, важно сравнивать срез со всем датафреймом.\nНужно подумать какие срезы будет полезно сравнить со всем датафреймом.\nИ провести сравнительный анализ. И поместить в отчет то, что имеет отличия и важно для выводов.\nсделать приложение dash чтобы можно было выбирать колонки для анализа,\nчтобы можно было фильтровать по всем категориальным переменным,\nчтобы были слайдеры для фильтрации по числовым переменным, чтобы можно было выбирать типы графиков и строить разные графики.\nЭто не генератор, а это для ad-hoc анализа.\nТо есть мы подумали что интересно будет изучить этот срез и эти переменные и изучили.\nА потом можно подумать как это автоматиировать, чтобы в цикле строились нужные графики.\nАнализ срезов состоит из анализа срезов из одного значения, то есть мы выбираем конкретное значени и по нему фильтруем.\nи анализа срезов из нескольких переменных, когда мы выбираем несколько значений для среза или даже несколько переменных и в них выбираем определенные значения.\nАнализ срезов по одному значению мы просто фильтруем по нему и смотрим результат функции info_gen или ‘info_column’\nА анализ срезво по нескольким значениям или переменным будет результатом анализа графиков в dash app.\nТо есть мы в процессе анализа фильтруем данные и после работы в dahs app мы фильтрованные графики помещаюем в этот раздел.\nЧтобы разделить срезы и полный анализ.\nНужно подумать как лучше изучать срезы.\nВ данном разделе лучше изучить срезы отдельных значений, то есть отдельный город, отдельный пол и прочее.\nТо есть мы фильтруем по одному значению и его изучаем в функцией info\nА изучение срезов данных, которые состоят из набора значений (например изучить цену в топ 10 городах), это уже будет сделано\nв анализе графиков.\nТут мы изучаем подготовленный набор данных в разрезе разных категориальных переменных.\nЗадача посмотреть на отдельные срезы и найти закономерности в данных.\nНапример у нас есть данные о продажах квартир, мы создали новые категориальные перменные, обогатили данные\nИ теперь хотим посмотреть какое распределение цены только в центре, или какая площадь квартир возле парков и прочее.\nТо есть мы тут изучаем отдельно переменные в разрезе категорий, то есть строим срезы.\nВАжно, что тут мы изучаем отедльные переменные, срезы в зависимостях переменных будем строить в разаделе визуализации.\nОпределить цель. Прежде чем начинать анализ срезов, важно четко определить, какие вопросы вы хотите ответить или какие гипотезы хотите проверить. Это может включать: - Сравнение различных групп (например, по возрасту, полу, региону). - Изучение влияния определенных факторов на целевую переменную. - Выявление аномалий или неожиданных паттернов в данных.\nВыбор переменных для срезов. Выберите переменные, по которым вы хотите сделать срезы. Это могут быть как категориальные, так и количественные переменные. Примеры: - Категориальные переменные: пол, категория товара, регион, уровень образования. - Количественные переменные: возраст, доход, количество покупок (то есть мы можем просто взять срез с зарплатой до 100 тысяч и прочее, не обязательно иметь категорию для создания срезов, причем у нас может быть категория доходов, но срез мы можем взять в другом диапазоне).\nВажно когда мы выбрали параметры по которым хотим сделать срез, то далее нужно выбрать условие по которому мы будем создавать срез.\nСрез это фильтрация или группировка, то есть должна быть либо функция аггрегации или значения по которым мы будем фильтровть.\nНапример мы для среза выбрали параметр города. Теперь нам нужно отобрать города для среза.\nМы выбираем параметр количество объявлений (все зависит от цели, можно было выбрать и количество населения, значение других параметров, все что поможет нам создать топ) И далее по нему фильтруем или аггрегируем.\nСрезы данных можно создавать различными способами. Вот несколько подходов: - Фильтрация данных: Используйте условия для выбора подмножеств данных.\nНапример, выберите только тех клиентов, которые находятся в определенном регионе или имеют доход выше определенного порога.\n- Группировка данных: Используйте функции группировки (например, groupby в pandas для Python) для агрегирования данных по выбранным переменным.\nЭто позволяет вам получить сводные статистики по группам. - Кросс-табуляция: Для категориальных переменных создайте кросс-таблицы, чтобы увидеть взаимосвязи между переменными.\nАнализ срезов. После создания срезов данных проведите анализ: - Статистический анализ: Рассчитайте основные статистики (среднее, медиана, стандартное отклонение) для каждой группы или среза. Это поможет вам понять, как различаются группы по ключевым показателям. - Визуализация: Постройте графики для визуального представления данных. Это могут быть:\nГистограммы для распределения количественных переменных.\nСтолбчатые графики для сравнения категориальных переменных.\nЯщики с усами (boxplots) для визуализации разброса и выявления аномалий.\n- Сравнительный анализ: Сравните срезы между собой. Например, как различается средний доход мужчин и женщин или как меняется поведение клиентов в зависимости от региона.\nЕсли мы для среза выбрали одно значение (например конкретный город), то мы просто посмотреть результат функцииinfo и проанализировать его\nНо если мы выбрали для среза набор значений, то нам нужно уже построить графики для сравнения стат параметров или других аггреигующих параметров\nдля каждого занчения в срезе. То есть нам нужно выбрать параметры по которым мы будем сравнивать значения в срезе.\nФильруем датасет по определенному значению и далее либо изучаем по отедльным столбцам, либо по всем испоьзуя генератор\nТо есть мы изучаем срез по одному значению\nСозадем 2 генератора (или больше, если хотим сравнить несколько срезов), для среза и всего датафрейма и идем изучаем их вместе.\nНужно сделать отдельный генератор, чтобы в нем не было информации про пропуски, нули и прочее,\nИ организовать так, чтобы было удобно сравнивать.\nТакже гистограммы нужно сделать на одном графике, чтобы накладывлись друг на друга и сделать прозрачность.\nЭто очень удобно и если гистограммы будут накладываться друг на друга, то можно будет увидеть сразу отличия средних и мод на графике.\nВ идеале сделать, чтобы были не столбцы, а типа каги, то есть линия со ступеньками, так удобнее сравнивать гистограммы.\nОЧЕНЬ ВАЖНО\n- в наблюдения пишем обязательно диапазон значений столбца.\nРынок жилья представлен объектами общей площадью от 12 до 900 кв.м. - пишем медианное занчение и по гистограмме и по квантилям определяем оснвоной диапазон.\nВ основном это жилье от 30 до 100 кв.м. с пиком в сегменте 30-75 кв.м\nЭто все нужно, чтобы потом сформулировать вот такой вывод (в оснвоном выводе отчета), то есть мы для разных столбцов пишем диапазоны,\nосновной дипазаон, медианы, моды, а потом уже собираем это в 1 или несколько выводов,\nНапример.\nРынок жилья представлен объектами общей площадью от 12 до 900 кв.м. В основном это жилье от 30 до 100 кв.м. с пиком в сегменте 30-75 кв.м. В жилой площади квартиры преобладает диапазон 15-50 кв.м. Размер площади кухни-от 5 до 15 кв.м., с пиком 9 кв.м. Это стандартные небольшие квартиры эконом-класса. Подавляющее большинство квартир- 1-3 комнатные, с высотой потолка 2,6-2,7 м., но встречаются редкие варианты до 19 комнат и высотой потолка до 20 кв.м. (либо ошибка, либо свободная планировка с возможностью многоуровневости).\nВ итоге мы сраним диапазоны, моды, медианы в срезе и во всем датафйреме.\nБыло бы идеально определить отличия в срезе и в общей картине, не просто сухими цифрами,\nа собрать все наблюдения вместе и расписать это в подобном виде-\nРынок недвижимости центральной части города представлен несколько более широким по площади диапазоном : основная масса- это жилье от 30 до 150 кв.м с пиком в сегменте 45-80 кв.м. При этом жилая площадь занимает большую долю, чем среднестатистическая квартира: в центре СПб большое количество домов старой застройки, в которой пространство “сдвинуто” в пользу жилой площади. Особенностью этой части города является то, что большинство квартир, предлагаемых на продажу,- 2-3 комнатные: здесь в общей массе достаточно низкая доля 1-комнатного жилья и выше доля 4-комнатных квартир. Наибольшее количество предложений в абсолютном выражении (цена за объект) приходится на диапазон 5-15 млн.руб. с пиком 5-8 млн.руб.(маленькие квартиры эконом-класса), но есть и уникальные объекты стоимостью до 35 млн.руб. Стоимость квадратного метра недвижимости в основном варьируется от 70 до 150 тыс.руб. с пиком в 100 тыс.руб. Наряду с типовыми предложениями на продажу выставлено жилье со стоимостью 1 кв.м. до 266 тыс.руб за кв.м. В целом цены жилья центра города выше по цене, чем аналогичное в других районах.\n\n\nShow the code\ndf_sliced = df[df.location_zone == 'Центр']\ngen_slice = pagri_data_tools.info_gen(df_sliced)\ngen = pagri_data_tools.info_gen(df)\n\n\n\n\nShow the code\nnext(gen_slice)\nnext(gen)\n\n\nЕсли есть что-то важное и есть отличия, по которым можно сделать выводы, то строим отдельно в отчет\n\n\nShow the code\nprint('Центр города')\npagri_data_tools.info_column(df_sliced, 'last_price')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'last_price')\n\n\nНаблюдения:\n- пишем тут наблюдения\nВАЖНО\nСравниваем не только отдельные столбцы с общей картиной.\nНужно взять срез и посмотреть на корреляцию, зависимости между числовыми, категориальными и т.д.\nКак это делали для всего датафрейма, только в укороченной версии, то есть можно взять общей картины, что мы нашли интересного\n(то есть взять названия столбцов) и посмотреть на эти же графики, но уже в срезах.\nЕсли есть время, то можно и полностью прогнать все необходимые срезы по всем столбцам как для всего датафрейма.\nПолезно изучить топ определенного столбца.\nТо есть нам нужно выбрать параметр по которому мы отберем топ значений для категорий.\nЗатем выбрать параметр для которого мы будем считать топ значений (числовая переменная) И построить топ.\nНапример, топ цен квартир в 10 городах с максимальным количеством объявлений.\n\n\nShow the code\nselected_cities = df.groupby('locality_name').size().rename('count').sort_values(ascending=False).to_frame().head(10)\nselected_cities\n\n\n\n\nShow the code\nselected_cities = selected_cities.index\n\n\n\n\nShow the code\nconfig = dict(\n    df = df[df.locality_name.isin(selected_cities)]\n    , x = 'locality_name'\n    , x_axis_label = 'Название населённого пункта'\n    , y = 'price_per_sqm'\n    , y_axis_label = 'Цена квадратного метра'\n    , title = 'Цена кв метра в зависимости от населенного пункта'\n    , func = 'mean'\n    , width = None\n    , height = None\n    , orientation = 'v'\n)\npagri_data_tools.bar(config)\n\n\n\n\nКогортный анализ\n\nНе забывать про когортный анализ. Если у нас есть параметр, по которому мы можем наши данные разбить на когорты, то\nнужно разложить на когорты и посмотреть динамику по когортам.\nКогорты это например, пользователи пришедшие в одни день или месяц.\nЕсли мы объеденим пользователей в когорты и посмотрим динамику какого-то параметра по месяцам например, то увидим как изменяется.\nТут также нужно помнить, что если значение например за 3 месяц больше значения за 4 месяц, то это ничего не значит само по себе.\nТак как мы имеем дело с выборкой, то нам нужно проверить статистически значимая это разница.\nТут нам понядобятся стат тесты.\n\n\n\nПромежуточный вывод\nВАЖНО\nподумать для каждого раздела в визуализации (временные, числовые, категориальные и числовые с категориальными)\nкакие закономерности не проверил.\nубедиться, что все зависимости, которые были в задании изучили.\nЭто самый важный моменты, тут лучше остановится и тщательно подумать,\nтак как могут быть изучены не все зависимости.\nВАЖНО\nУбедиться, что сетки по осям стоят где нужно, часто для вертикальных или горизонатльных графиков лишняя сетка вдоль баров"
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#формулирование-и-провера-гипотез",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#формулирование-и-провера-гипотез",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "Формулирование и провера гипотез",
    "text": "Формулирование и провера гипотез\n\nФормулирование гипотез\nВАЖНО\nэто редко бывает, но нужно об этом помнить\nКогда мы хотим проверить какую-то гипотезу на основе среднего или другой статистики, то нужно подумать нет ли сильного разделения на группы\nпо какой-нибудь категориальной переменной.\nЕсли у нас есть такое разделение, то нужно использовать стратифицированную выборку.\nТо есть мы должны взять выборку из каждой группы пропорционально её размеру.\nСчитаем коэффициенты каждой группы (ее размер делим на количество всей выборки) и умнажаем их на количество нужных элементов.\nТо есть мы из каждой страты возьмем прпорциональное количество элементов.\nНарпимер, мы хотим сравнить средние значения дохода в двух компаниях.\nИ берем по 100 сотрудников из каждой. Без стратификации у нас редкие сотрудники могут не попасть.\nПоэтому мы берем категориальную переменную (например должность) и делим выборку на группы. И из каждой берем пропорциональное количество элементов.\nСмотрим выводы и из них формулируем гипотезы.\nИ далее думаем какие гипотезы можно ещё проверить, которых у нас нет в выводах.\n\nНа основе проведенного анализа данных сформулирем следующие гипотезы:\n\n\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок.\nГипотеза 2: У мужчин средний доход выше\nГипотеза 3: Цель получения кредита не зависит от среднего ежемесяченого доход\nГипотеза 4: Средний доход по семейному статусу одинаковый, но у вдовцов отличается\nГипотеза 5: У должников в среднем больше детей\nГипотеза 6: У должников средний возраст ниже\nГипотеза 7: Медианный доход у должников и не должников не отличается\n\n\nНе забываем что гипотезы можно проверять и между 2 категориальными переменными.\nПроверять есть ли между ними зависимости.\nТакже если мы на графиках определили, что есть между 2 категориальными перменными связь, то тут можем это проверить\n\n\n\nПроверка гипотез\nВАЖНО\nпринято в выводе писать положительный результат\nто есть пишем что гипотеза подтвердилась и указваем какая гипотеза.\nТо если мы опровергли нулевую гипотезу, то пишем альтернативную гипотезу и пишем что она подтвердилась.\nЕсли у нас нет оснований отвергнуть нулевую гипотезу, то пишем нулевую гипотезу и пишем что нет оснований ее отвергнуть.\nТо есть если мы отвергаем, то формулируем вывод как положительный, чтобы не было путаницы, а если нет оснований, то так и пишем.\n\nПроверим сформулированные гипотезы.\n\n\nГипотеза 1: Название гипотезы\n\n\nH0: The two categorical variables are independent.\nH1: The two categorical variables are not independent (i.e., there is a significant association between them).\n\nДалее нужно определить какой тест нам нужен\nЕсли у нас 2 категориальные переменные, то тут просто\nЕсли у нас категориальная и числовая, то сначала смотрим на распределение числовой переменной.\nЕсли сразу решаем использовать не параметрику, то манна уитни или крускал -уоллис.\nЕсли параметрика, то нужно проверить на равенство дисперсий в группах.\nИ далее если равны, то т тест / тест вэлча или anova / anova вэлча.\nЕсли использовали anova, welch anova, kruskal, то если есть отличия, то используем тест тьюки, чтобы определить какие группы отличаются.\n\nПримеры гипотез\n\n\nЕсть ли зависимость между наличием детей и возвратом кредита в срок?\n\n\nЭто будет часто возникать когда у нас категориальная целевая переменная и другие категориальные переменные.\nИ мы хотим проверить влияют ли категориальные переменные на целевую.\nНапример у нас есть поле наличие долга (есть или нет)\nВот тут мы можем провести тесты со всеми каетгориями на наличие зависимости с наличием долга.\nВ идеале мы на графиках должны найти гипотезы и тут их проверить.\nНо если у нас целевая переменная, то мы можем сравнить ее со всеми категориями\n\n\n\nShow the code\npagri_data_tools.chi2_pearson()\n\n\n\nФормируем словарь для подписей осей и названия гистограм\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количества детей']\n    , age = ['Возраст', 'возраста']\n    , total_income = ['Ежемесячный доход', 'ежемесячного дохода']    \n)\n\n\n\nНулевая гипотеза должна быть направлена на отсутствие эффекта, а альтернативная гипотеза должна быть направлена на наличие эффекта.\n\n\nФормулируем гипотезу через H0, H1\n\n\nH0: У мужчин средний доход не выше, чем у женщин\nH1: У мужчин средний доход выше, чем у женщин\n\n\nСмотрим распределение метрики\n\n\n\nShow the code\npagri_data_tools.histogram(df.total_income, titles_for_axis)\n\n\n\nДелаем вывод о распределении.\nВыбираем критерий для проверки гипотезы.\nОпределяем уровнь значимости.\n\n\nПроводим тест\nВАЖНО\ndf в ttest_ind_df и подобных можно испльзовать только для 2 стороннего случая\nДля одностороннего нужно придумать как определять какая группа первая по порядку пойдет в тест,\nв зависимости от постановки гипотезы, так как альтернатива опредляется исходя из порядка аргументов в функции теста\n\n\nЕсли используем ттест или анову, то сначала проводим тест на проверку дисперсии\n\n\nH0: У должников и не должников дисперсия не отличается\nH1: У должников и не должников дисперсия отличается\n\n\n\nShow the code\npagri_data_tools.levene_df\npagri_data_tools.levene\npagri_data_tools.bartlett_df\npagri_data_tools.bartlett\n\n\n\nВыбираем критерий\n\n\n\nShow the code\npagri_data_tools.chi2_pearson\npagri_data_tools.ttest_ind_df\npagri_data_tools.ttest_ind\npagri_data_tools.mannwhitneyu_df\npagri_data_tools.mannwhitneyu\npagri_data_tools.proportion_ztest_1sample\npagri_data_tools.proportions_ztest_2sample\npagri_data_tools.proportions_ztest_column_2sample\npagri_data_tools.proportions_chi2\npagri_data_tools.proportions_chi2_column\npagri_data_tools.anova_oneway_df\npagri_data_tools.anova_oneway\npagri_data_tools.tukey_hsd_df\npagri_data_tools.anova_oneway_welch_df\npagri_data_tools.kruskal_df\npagri_data_tools.kruskal\npagri_data_tools.bootstrap_diff_2sample # важно, сохраняем fig и в следующей ячейке делаем fig.shwo(), иначе на google colab работает некорректно\n\n\n\nПроводим тест\n\n\nЕсли отклоняем гипотезу, то строим доверитлеьный интервал\n\n\n\nShow the code\npagri_data_tools.confint_t_2samples\npagri_data_tools.confint_t_2samples_df\npagri_data_tools.confint_proportion_ztest_2sample\npagri_data_tools.confint_proportion_ztest_column_2sample\npagri_data_tools.confint_proportion_2sample_statsmodels\npagri_data_tools.confint_proportion_coluns_2sample_statsmodels\n\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количества детей']\n    , age = ['Возраст', 'возраста']\n    , total_income = ['Ежемесячный доход', 'ежемесячного дохода']    \n)\n\n\nПримеры для разных критериев\n2 категориальные переменные или 1 категориальная переменная и мы хотим сравнить количество в каждой группе.\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок\n\nH0: Наличие детей не влияет на возврат кредита в срок.\nH1: Наличие детей влияет на возврат кредита в срок.\n\n\nТак как у нас обе переменных категориальные, то воспользуемся критерием хи-квадрат Пирсона.\nУровень значимости alpha выберем 0.05\n\n\n\nShow the code\npagri_data_tools.chi2_pearson(df.has_child, df.debt)\n\n\nХи-квадрат Пирсона\nalpha =  0.05\np-value =  1.724356890544321e-05\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\nНа уровне значимости 0.05 нулевая гипотеза о том, что наличие детей не влияет на возврат кредита в срок, была отклонена. Это свидетельствует о том, что существует статистически значимое влияние наличия детей на возврат кредита в срок.\nЕсли мы хотим проверить отличается ли количество в одной категориальной переменной, то используем chisquare\nОн проверяет, насколько наблюдаемое распределение категориальной переменной отличается от ожидаемого равномерного распределения.\nГипотеза 1: Нет зависимости между количеством публикаций и днем недели.\nH0: День недели не влияет на количество объявлений\nH1: День недели влияет на количество объявлений\n\n\nShow the code\ndaily_counts = df['publication_weekday'].value_counts().sort_index()\ndaily_counts\n\n\npublication_weekday\nПонедельник    3591\nВторник        4157\nСреда          3940\nЧетверг        4270\nПятница        3970\nСуббота        1918\nВоскресенье    1681\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.chisquare(daily_counts)\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что день недели не влияет на количество объявлений, была отклонена. Это указывает на то, что существует статистически значимое влияние дня недели на количество объявлений.\n\nКатегориальная с 2 значениями и числовая переменная (т тест или тест манна уитни)\nГипотеза 2: У мужчин средний доход выше\nH0: У мужчин средний доход не выше, чем у женщин\nH1: У мужчин средний доход выше, чем у женщин\nпосмотрим на распределение\n\n\nShow the code\npagri_data_tools.histogram(df.total_income, titles_for_axis)\n\n\nЕсли распределение не нормальное или много выбросов или просто нет уверености, что параметрика будет хрошо работать, то используем\nтест манна уитни\nИспользуем критерий Манна-Уитни\nАльтернатива будет - больше\nУровень значимости alpha выберем 0.05\n\n\nShow the code\nmale = df[df.gender=='M']['total_income']\nfemale = df[df.gender=='F']['total_income']\n\n\n\n\nShow the code\nmy_module.mannwhitneyu(male, female, alternative='l')\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что у мужчин средний доход не выше, чем у женщин, была отклонена. Это указывает на то, что доход мужчин статистически значимо выше, чем у женщин.\n\nЕсли мы решили использовать т тест\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: У должников и не должников дисперсия не отличается\nH1: У должников и не должников дисперсия отличается\nИспользуем тест Левена\n\n\nShow the code\nyes = df[df.debt=='есть']['age']\nno = df[df.debt=='нет']['age']\n\n\n\n\nShow the code\nmy_module.levene([yes, no])\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\n\n\nShow the code\nmy_module.ttest_ind(yes, no, equal_var=False, alternative='s')\n\n\nПостроим доверительный интервал\n\n\nShow the code\nmy_module.confint_t_2samples(yes, no, equal_var=False, alternative='s')\n\n\nкатегориальная переменная, у которой больше 2 значений и числовая.\nПредположения ANOVA: - Данные должны быть нормально распределены. - Дисперсии в группах должны быть равны (гомоскедастичность). - Наблюдения должны быть независимыми.\nЕсли хоть одно из этого не выполняется, то лучше использовать kruskal\nГипотеза 4: Средний доход по семейному статусу одинаковый, но у вдовцов отличается\nH0: Средний ежемесячный доход не различается между группами по семейному статусу\nH1: Средний ежемесячный доход различается между группами по семейному статусу\nИспользуем критерий Краскела-Уоллиса\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.kruskal_df(df[['family_status', 'total_income']])\n\n\nИспользуем тест Тьюки, чтобы определить различия между группами\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.tukey_hsd_df(df[['family_status', 'total_income']])\n\n\nВидим, что гипотеза отвергается в парах где есть вдова / вдовец\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средний ежемесячный доход не различается между группами по семейному статусу, была отклонена.\nЭто указывает на то, что семейный статус оказывает статистически значимое влияние на ежемесячный доход.\n\nБутстреп\nВместо теста манна уитни, когда нет уверености в т тесте, можно использовать бутстреп\nГипотеза 7: Медианный доход у должников и не должников не отличается\nH0: Медианный доход у должников и не должников не отличается\nH1: Медианный доход у должников и не должников отличается\nИспользуем бутстреп для проверке гипотезы\nУровень значимости alpha выберем 0.05\n\n\nShow the code\nyes = df[df.debt=='есть']['total_income']\nno = df[df.debt=='нет']['total_income']\n\n\n\n\nShow the code\nfig = pagri_data_tools.bootstrap_diff_2sample(yes, no, stat_func=np.median)\n\n\n\n\nShow the code\nfig.show()\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что медианный доход у должников и не должников не отличается, была отклонена.\nЭто указывает на то, что существует статистически значимая разница между медианным доходом должников и не должников.\n95 % доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34)\n\n\nСделать опцию в бутстреп функции, чтобы строился только доверительный интервал\n\n\nТакже сделать функцию для доверилеьных интервалов для мана уитни через\nthe Hodges-Lehmann estimation, which provides a point estimate and a confidence interval for the difference in medians.\n\n\n\nShow the code\nimport pingouin as pg\n\n# Perform the Mann-Whitney U test and calculate the confidence interval\nmw_test = pg.mwu(x, y, tail='two-sided', confidence=0.95)\n\n# Print the results\nprint(mw_test)\n\n\n\n\nShow the code\nimport numpy as np\nfrom scipy import stats\n\n# Perform the Mann-Whitney U test\nu_stat, p_value = stats.mannwhitneyu(x, y, alternative='two-sided')\n\n# Calculate the Hodges-Lehmann estimation\nhl_est = np.median(np.array([x_i - y_j for x_i in x for y_j in y]))\n\n# Calculate the confidence interval\nci = stats.t.interval(0.95, len(x) + len(y) - 2, loc=hl_est, scale=stats.sem(np.array([x_i - y_j for x_i in x for y_j in y])))\n\n# Print the results\nprint('Hodges-Lehmann estimation:', hl_est)\nprint('Confidence interval:', ci)\n\n\n\nПодход следуюищй - мы до раздела проверка гипотез, когда изучаем данные (разделы пропусков, выбросов, дубликатов, зависиместей между перменными и графики),\nто мы делаем выводы и формируем наблюдеия.\nВот эти наблюдения и выводы нужно проверить в проверке гипотез.\nИ потом в основном выводе уже писать не просто, что у нас мужчин больше чем женьшин, а писать, что на уровен значисомти таком то у нас мужчина больше чем\nженщин с таким то доверительным интервалом.\nТаким образом выводы по вомзожности должны проходить через этап проверки гипотез, тогда эти выводы становятся более существенными.\n\n\nГипотезы появляются, когда мы задаем вопросы данным. Мы изучили данные, преобработали и теперь начинаем задавать вопросы.\nВыдвигаем гипотезу (заметили что-то необычное и хотим проверить), далее формулируем ее и далее проверяем.\nНе забываем формулировать гипотезы словами. Пишем что является гипотезой H0, а что гипотезой H1\nФормулируем все гипотезы, которые хотим проверить. Если будет 100 гипотез, то все 100 нужно сформулировать и потом проверить и сделать вывод.\nГипотезы могут быть и простыми вопросами без гипотез H0 и H1, такие гипотезы мы проверяем графиками или анализируя таблицу.\nВосновном, когда мы собиаремся применить стат аппарат для проверки гипотезы, то мы должны записать ее через H0 и H1.\n\n\nАлгоритм проверки статистических гипотез\n\n\nпостановка задачи &gt; - Сформулировать, что мы хотим узнать о выборках с точки зрения бизнес задачи (равны ли средние доходы в группах) &gt; - перевод бизнес-вопроса на язык статистики: средний доход в группах - проверка равенства средних значений\nформулировка гипотез &gt; - формулировка нулевой гипотезы - с т.зр. равенства стат прараметров оцениваемых выборок\n&gt; (Н0: Средние траты клиентов по группе А равны средним тратам клинентов по группе В) &gt; - формулировка альтернативной гипотезы - с точки зрения неравенства параметров\n&gt; (Н1: Средние траты клиентов по группе А не равны средним тратам клинентов по группе В)\nвыбор критерия alpha (почему 0.05 или 0.01) &gt; - цена ошибки первого рода (при большой цене ошибки - в мед исследованиях, потенциальном ущербе ) - значение может быть больше, например 0.1 &gt; - в ежедневных бизнес задачах, обычно - 0.05\nанализ распределения &gt; - визуальная оценка &gt; - следим за выбросами &gt; - проверка гипотез о типе распредеделения (например критерий Шапиро-Уилка) &gt; - если распределение не нормальное и размер выборки достаточный (больше 30-50 элементов)\n&gt; может быть использован t-test именно для проверки гипотезы о равенстве средних.\n&gt; Согласно ЦПТ (центральная предельная теорема) средние этих выборок будут распределены нормально. См. статью Зотова\nвыбор критерия &gt; - при оценке равенства средних T-test или Welch T-test (если есть сомнения, то лучше Уэлча) &gt; - при рвенстве дисперсий используем обычный т тест &gt; - если дисперсии в выборках разные, то используем т теста Уэлча\nполучение результата &gt; - расчет p-value\nинтерпретация p-value &gt; - сравнение p-value и alpha &gt; - если альфа &gt; p-value - отвергаем нулевую гипотезу &gt; - если альфа &lt; p-value - не можем отвергнуть нулевую гипотезу\n\n\nКакая у нас задача\n\n\nИсследовать взаимосвязь между 2 переменными &gt; - обе переменные наминативные &gt; - Хи-квадрат Пирсона (не чувствителен к гетероскедастичности) (нормальность не обязательна) &gt; - обе переменные количественные &gt; - Коэффициент корреляции Пирсона (параметрика) (чувствителен к выбросам) (только непрерывные переменные) &gt; - Коэффициент корреляции Спирмена (чувствителен к выбросам) / Кендалла (менее чувствителен к выбросам) (непараметрика) (непрерывные переменные и порядковые категориальные переменные) &gt; - одна переменная номинативная (принимает 2 занчения), вторая количественная &gt; - значения &gt; - Т-критерий Стьюдента (параметрика) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) &gt; - если дисперсии равны (тест левена, барлета) и количество в группах равно (тест на равенство пропорций), то используем обычный т тест (эта формула более точно даст результат для этого случая) &gt; - если дисперсии не равны (тест левена, барлета) или количество в группах не равно (тест на равенство пропорций), то используем тест Уэлча (эта формула использует больше неопределенности и лучше подходит для этого случая) &gt; - U-критерий Манна-Уитни (непараметрика) (нормальность не обязательна) (не чувствителен к гетероскедастичности) &gt; Если тестируемая фича полностью сдвигает выборку на некий коэффициент theta или масштабирует выборку на некий параметр theta (theta &gt; 0),\n&gt; то критерий Манна-Уитни применим &gt; - доли &gt; - Z тест для долей (параметрика) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) &gt; - Chi-square тест для долей (непараметрика) (нормальность не обязательна) (не чувствителен к гетероскедастичности)\nИсследовать взаимосвязь между несколькими переменными &gt; - Дисперсионный анализ (параметрика) (дисперсии в группах должны быть примерно равны) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) &gt; - Welch’s ANOVA (устройчив к разной дисперсии в группах) (требует более больших размеров групп для точных результатов) (желательно нормальность) (чувствителен к выбросам) (не чувствителен к гетероскедастичности) &gt; - Критерий Краскела-Уоллиса (непараметрика) (нормальность не обязательна) (не чувствителен к гетероскедастичности) &gt; - Тест Тьюки (если anova или Краскела-Уоллиса нашил различия) (дисперсии в группах должны быть примерно равны) (параметрика) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности)\nПроверить на равенство дисперсий в группах перед anova &gt; - Levene’s test (не требует нормальность) (менее чувствительный) &gt; - Bartlett’s test (требует нормальность) (более чувствительный)\n\n\nОтличная статья про доверительные интервалы для разных статистик\nhttps://habr.com/ru/articles/807051/\n\n\nBootstrapping\n\n\nВ бутстрепе, если мы хотим сравнить две выборки, то нельзя смотреть\nгде находится исходная разница средних в бутстрапированной выборке\nТак как мы берем бутстреп из наших выборок и впролне реально.что наша разность\nбудет близка к с реднему бутстропированной выборки\nПоэтому p value нужно определять по месту нуля в бутстропированной выборке\n\n\nПосмотрим p value для 0 (если различий нет, то разница должна быть 0) Для этого посчитаем cdf для + и - среднего, чтобы получить 2 значения cdf а теперь возьмем минимум и умножим на 2, так как альт гипотеза у нас.что просто не равно 0, значит и справа и слева\n\n\n\nShow the code\nEstimating the power of a non-parametric test using bootstrapping involves simulating the testing process multiple times to estimate the probability of rejecting the null hypothesis. Here's a general outline of the steps:\n\n**Specify the null and alternative hypotheses **: Define the null and alternative hypotheses for your test. For example, the null hypothesis might be that the two groups have the same distribution, and the alternative hypothesis might be that the two groups have different distributions.\n\nGenerate simulated data: Generate simulated data that reflects the null hypothesis. For example, you could generate two groups of random data from the same distribution.\n\nPerform the Mann-Whitney U test: Perform the Mann-Whitney U test on the simulated data to obtain a p-value.\n\nRepeat steps 2-3 many times: Repeat steps 2-3 many times (e.g., 1000 times) to generate a distribution of p-values under the null hypothesis.\n\nEstimate the power: Estimate the power of the test by calculating the proportion of times the p-value is below a certain significance level (e.g., 0.05) when the alternative hypothesis is true. To do this, you'll need to generate simulated data that reflects the alternative hypothesis and repeat steps 2-4.\n\n\n\n\nПромежуточный вывод\n\nНа уровне значимости 0.05 гипотеза, что есть зависимость между количеством публикаций и днем недели подтвердилась.\n\nНа уровне значимости 0.05 гипотеза, что удаленность от центра влияет на количество публикаций, подтвердилась."
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#общий-вывод",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#общий-вывод",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "Общий вывод",
    "text": "Общий вывод\nВАЖНО\nпроверить, что результат проверки гипотез учтен в выводах.\nТо есть если у нас был промежуточный вывод, но проверка гипотез опровергла этот вывод, то нужно изменить вывод на противоположный.\nПроходим собираем все промежуточные выводы, вставляем сюда и выбираем важные.\nВАЖНО\nиз промежуточных выводов в изучении данных собрать подобные выводы:\n- Рынок жилья представлен объектами общей площадью от 12 до 900 кв.м. В основном это жилье от 30 до 100 кв.м. с пиком в сегменте 30-75 кв.м. В жилой площади квартиры преобладает диапазон 15-50 кв.м. Размер площади кухни-от 5 до 15 кв.м., с пиком 9 кв.м. Это стандартные небольшие квартиры эконом-класса. Подавляющее большинство квартир- 1-3 комнатные, с высотой потолка 2,6-2,7 м., но встречаются редкие варианты до 19 комнат и высотой потолка до 20 кв.м. (либо ошибка, либо свободная планировка с возможностью многоуровневости). - Цены на квартиры в основном находятся в диапазоне 2.5-15 млн.руб. с пиком в области 3-5 млн.руб.(небольшие квартиры эконом-класса), но есть и уникальные объекты стоимостью до 763 млн.руб. Стоимость квадратного метра недвижимости варьируется от 50-130 тыс.руб. с пиком в 90-100 тыс.руб. Наряду с типовыми предложениями на продажу выставлено жилье премиум-класса со стоимостью 1 кв.м. до 1.9 млн.руб. - Общее время продажи жилой недвижимости-до 1618 дней. Половина квартир продается за период до 94 дней, а среднее значение по всему массиву данных -185 дней. При этом можно увидеть, что пик продаж приходится на 45-60 день с момента публикации. Исходя из расчета выбросов можно сказать, что продажи прошли аномально быстро, если сделки были оформлены в период до 16 дней и слишком долго, если до оформления сделки свыше 1134 дней.\nЭто важно, так как дает представление о данных в сжатой и удобной форме.\nА далее уже идут выводы о зависимостях.\nНе забываем ставить 2 пробела после Выводы и другие для quarto\nПосле каждой строки поставить либо перенос, либо 2 пробела для quarto\nтак как когда следующая строка начинается с дефиса и jupyter это понимает и делает новую строку,\nто quarto не сделает новую строку\nВыводы:\n\nДолги есть у людей с разным доходом.\n\nУ должников в среднем больше детей.\n\nУ должников среднее количество детей больше у женщин, а у не должников срднее количество детей больше у мужчин\n\nУ должников средний возраст немного ниже для всех категорий семейного положения.\n\nМедианный доход у должников и не должников практически не отличается\n\nДолжники имеют ниже средний возраст как мужчины так и женщины. Ситуация сохраняется во всех группах дохода.\n\nЦель получения кредита практически не зависит от среднего ежемесяченого дохода.\n\n92 % клиентов не имеют долга.\n\nЛюди от 30 до 50 лет имеют самый высокий средний доход.\n\nБольше всего кредит берут на цели, связанные с недвижимостью, кроме людей в гражданском браке\n\nЛюди в гражданском браке чаще берут кредит на свадьбу\n\nЖенщины чаще возвращают кредит.\n\nАнализ значимости признаков для модели случайного леса показал, что доход является самым значимым признаком для предсказания задолженности.\n\n58 % клиентов либо женаты, либо замужем. 19 % в гражданском браке. Можно сделать вывод что большинство в браке.\n\nБольшинство клиентов женщины (66 процентов).\n\nТолько 5 процентов клиентов моложе 25 лет. Основная часть клиентов старше 30 лет.\n\nЧем меньше количество детей, тем больше значений с высоким доходом.\n\nБолшая часть женатых имеет доход 100-200 тыс\n\nНа всех уровнях образоания, кроме ученой степени, доход у мужчин выше.\n\nУ мужчин, которые в браке или были в браке, количество детей больше, чем у женщин в той же категории.\n\nАномалии и особенности в данных:\n\nВ датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\n\nВ столбце с количеством детей есть отрицательные значения. 47 штук. Меньше 1 процента от всего датафрейма. Также есть клиенты с 20 детьми.\n\nКолонока общий трудовой стаж содержит 74 % отрицаетльных значений. А также максимальное количество дней стажа больше 400 тысяч дней, это больше 1000 лет.\n\nВ колонке возраста 101 нулевое значени.\n\nКолонка дохода имеет слишком много знаков после запятой.\n\nВ колонке с образованием присутствуют одни и те же знчения с разными регистрами. При этом в колонке с id образования все впрорядке.\n\nРезультаты предобработки данных:\n\nУдалили колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nКолонка со стажем имеет совершенно некорректные данные. Чтобы не внести искажение в анализ, удалим эту колонку.\n\nРезультаты проверки гипотез:\n\nГипотеза 1: У мужчин средний доход выше, чем у женщин\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась.\n\nГипотеза 2: Цель получения кредита практически не зависит от среднего ежемесячного дохода\nРезультат: На уровне значимости 0.05 у нас нет оснований отвергнуть гипотезу.\n\nГипотеза 3: Средний доход по семейному статусу примерно одинаковый, но у вдовцов отличается\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась.\n\nГипотеза 4: У должников в среднем больше детей\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась.\n\nГипотеза 5: У должников средний возраст ниже\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась. 95% доверительный интервал для разницы средних возрастов для должников и не должников равен (-inf, -2.74).\n\nГипотеза 6: Медианный доход у должников и не должников не отличается\nРезультат: На уровне значимости 0.05 нет оснований отвергнуть гипотезу. 95% доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34).\n\nГипотеза 7: Наличие детей не влияет на возврат кредита в срок\nРезультат: На уровне значимости 0.05 гипотеза не подтвердилась.\n\nРекомендации:\n\nДобавить контроль данных, чтобы не дублировались значения с разными регистрами в колонке с образованием.\nДобавить уникальный идентификатор клиента, чтобы избежать дублирования строк.\nДобавить проверку на отрицательные значения и на слишком болшьшие значения в количестве детей при загрузке данных.\nВыяснить откуда возникают отрицательные значения в трудовом стаже и добавить контроль ввода невалидных данных.\nВыяснить причину нулевых значений в колонке возраста и добавить проверку на нулевые значения при загрузке данных.\nВыяснить причину большого количества знаков после запятой в колонке дохода.\n\n\nЧто нужно сообщить в выводе\n\n\nинформацию о том, что удалось подтвердить гипотезы (тут пишем только те, которые удалось подтвердить)\nвсю информацию о датасете, которые важны. Дубликаты, которые несут практическую пользу и рекомендации по ним, пропуски также с рекомендациями &gt; и остальные моменты по данным и рекомендации. Тут важно указывать именно найденные аномалии, которые имеют практическую пользу, которые нужно исправить и прочее.\n&gt; Пишем, что были найдены выбросы, они были связаны возможно с тем то и тем то.\nи в конце обязательно call to action &gt; написать что необходимо сделать с этими результатами\n\n\nСоветы по оформлению общего выывод\n\n\nне нужно вставлять таблицы и графики в вывод. &gt; В выводе пишем словами самое важное и практически полезное, что мы получили, причем в порядке убывания важности.\n&gt; И когда мы пишем, что увидели то-то, то приводим гиперссылку на график или результат ячейки, где это получено.\n&gt; Так будет компактный вывод и при необходимости человек сможет быстро перейти и посмотреть график или таблицу\n\nУдалось подтвердить гипотезу о влиянии различных характеристик клиента на факт погашения кредита в срок. Каждый из рассмотренных параметров оказывает влияние на надёжность заёмщика. Рассмотренные факторы по-разному влияют на надёжность заёмщиков. Например, семейное положение оказалось более значимым фактором, чем уровень дохода.\n\nВ ходе анализа исходного набора данных было проведено (были устранены пропуски в двух колонках с числовыми значениями - ‘total_income’ и ‘days_employed’).\nПосле устранения явных и скрытых дупликатов и удаления оставшихся после обогащения пропусков объем датасета сократился на 0.05%\nБыли устранены выбросы в колонках ‘days_employed’ и ‘children’: в первом случае выбросы возникли в результате системной ошибки (данные были внесены в часах, а не в днях); во втором случае ошибка, вероятнее всего была допущена людьми, вносившими данные в систему\n…\n\nНеобходимо\n\n\nЗапросить в отделе по работе с клиентами информацию о возможности брать кредит без подтверждения дохода.\nСообщить коллегам, занимающимся выгрузкой о наличие дубликатов, если вопрос не разрешится, запросить индентификационный номер клиента к датасету.\nПрописать в задаче на поставку данных формат данных (пол только F и M, положительные значения). Приложить информацию о найденных аномалиях.\n\n\nСначала проверяем орфографические ошибки\n\n\nShow the code\npagri_data_tools.correct_notebook_text()\n\n\nЗатем создаем номера у глав и оглавление\n\nЧтобы добавить номера глав и ссылки для оглавления и сделать оглавлнеие\nоглавление добавиться в начало ноутбука\n\n\nСначала можно в режиме draft сделать пробный варант, проверить и потом уже запустить в режиме final\n\n\n\nShow the code\npagri_data_tools.make_headers_link_and_toc()\n\n\nДалее создаем ссыки на выводы и аномалии\n\nЧтобы было удобно искать где вставить якорь для ссылки, названия выводов и аномалий должно точно совпадать\nв итоговом списке аномалий и выводов и в тех местах (то есть в наблюдениях под ячейками), куда мы будем помещать ссылки\n\n\nЧтобы сделать ссылки на выводы и аномалии, нужно\nв тех местах, куда хотим переходить по ссылке вставить текст выводов или аномалий (берем прямо из основных выводов)\nвыводы должны начинаться с _conclusion_\nаномалии должны начинаться с _anomaly_\nПримеры:\n\nОкончательный текст выводов можно будет потом исправить в выводах всего отчета и поместить их в начало,\nважно, выводы не менять до момента, пока мы не создадим ссылки на них.\nЧтобы автомтика не нарушилась.\nЗатем можно будет исправить уже сам текст выводов и это не нарушит ссылки.\n\n\nShow the code\n_anomalies_ В столбце с количеством детей есть отрицательные значения. 47 штук. \n\n\n\nМожно в одной ячейке и выводы и аномалии, с обеих ссылок будет переходить сюда, но назад будет возвращаться только в одно место,\nв то, которое было первым в ячейке\n\nВАЖНО\nразобраться почему когда рядом ставишь 2 вывода или аномалии или 1 вывод плюс 1 аномалия (вместе 2), то появляется\n2 ссылки на оглавление\n\n\nShow the code\n_conclusion_ Только 5 процентов клиентов моложе 25 лет. Основная часть клиентов старше 30 лет.\n_anomalies_ В колонке возраста 101 нулевое значени.\n\n\nВАЖНО\nПроийти просмотреть чтобы не было 2 раза близко “к оглавлению”\nэто может быть из-за того что у нас ссылки на выводы рядом с названием главы или раздела\nИли просто могут быть 2 выводы рядом.\nСтавим переносы для булитов там, где их нет\n\n\nShow the code\nimport IPython\nnotebook_path = \"/\".join(\n        IPython.extract_module_locals()[1][\"__vsc_ipynb_file__\"].split(\"/\"))\npagri_data_tools.check_observes_new_line(notebook_path, mode='final')\n\n\n\nСодеражние выводов и аномалий появится в начале ноутбука\nтакже 2 режима draft и final\n\n\nПодумать как сделать удобнее создание выводов\nПока лучше сначала взять выводы из наблюдений и выбрать из них наиболее важные и интересные, не меняя их.\nДалее берем этот список и поиском находим ячейку с этим выводом и перед графиком помещаем\nconclusion и сам вывод\n\n\nЧтобы был нужный порядок в списке выводов и аномалий в начале отчета, нужно передвать словарь со списками выводов и аномалий.\nПеременная order принимает словарь, где ключи onclusions и anomalies, а значения это соответствующие списки\n\n\nПримеры списков\n\n\n\nShow the code\norder = dict(\n            conclusions =[ 'Женщины чаще возвращают кредит, чем мужчины.']\n            , anomalies = ['В датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.  ']\n)\n\n\n\n\nShow the code\npagri_data_tools.add_conclusions_and_anomalies()\n\n\nЕсли сильно нужно, создаем ссыки на гипотезы\n\nВ главе гипотез для каждой гипоетзы, куда будем переходить из оглавления, в начале перед гипотезой ставим hypothesis и пробел\n\n\n\nShow the code\n_hypotsis_ **Гипотеза 1: Название гипотезы**\n\n\n\nВыполняем следующую функцию и в начале отчета появится список гипотез с ссылками\nДалее нужно добавить результат гипотез вручную\n\n\n\nShow the code\npagri_data_tools.add_hypotheses_links_and_toc()\n\n\nФинальное размещение ноутбука на git hub с ссылкой на google colab\n\nКомитим на гит хаб финальную версию ноутбука.\nСоздаем на гит хаб readme файл проекта, в котором в начале идет ссылка на google colab\nДалее ее открываем и переходим на google colab\nВыполняем все ячейки, смотрим все ли правильно отобразилось.\nДалее в меню File выбираем сохранить копию на гит хаб.\nНе меняем имя, тогда все содержимое ноутбука сохраниться на гит хаб."
  }
]