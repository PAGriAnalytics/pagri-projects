[
  {
    "objectID": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html",
    "href": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html",
    "title": "Тестирование гипотез для увеличения выручки интернет-магазина",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nВместе с отделом маркетинга крупного интернет-магазина был подготовлен список гипотез для увеличения выручки. Необходимо приоритизировать гипотезы, запустить A/B-тест и проанализировать результаты.\nЦель:\nУвеличение выручки интернет-магазина путем тестирования и анализа гипотез для выявления наиболее эффективных стратегий.\nИсточники данных:\nДанные для анализа были собраны из внутренней системы интернет-магазина.\nГлавные выводы:\n- По фреймворку rice самые приоритетные гипотезы 7, 2, 0, 6.\n- По фреймворку ice самые приоритетные гипотезы 8, 0, 7, 6.\n- У группы B итоговая конверсия выше, чем у группы A. Разница в конверсии составляет 0.49% на сырых данных и 0.45% на фильтрованных данных. И разница статистически значима.\n- У групппы B итоговый средний чек выше, чем у группы A. Разница в среднем чеке составляет 1897 на сырых данных и 401 на фильтрованных данных. Но эта разница не является статистически значимой. Это говорит, что отличия могли быть получены случайно.\n- На сырых данных выручка группы B по итогу теста больше выручки группы A. Но прирост был получен за 1 день 19 августа.\n- На фильтрованных дынных выручка группы B растет равномерно без скачков быстрее группы А.\n- На сырых данных по итогу теста у группы B средний чек выше, чем у группы A, но разница получена в один день 19 августа. И при этом после 19 августа средний чек у группы B растет, а у группы A падает.\n- На фильтрованных данных у группы B средний чек выше, чем у группы A. У группы B было сильное падение среднего чека до 7 августа.\n- На сырых данных отношение среднего чека группы B к группе A по итогу теста больше 1, но это из-за скачка 19 августа. После этого значение снижается.\n- На фильтрованных данных отношение среднего чека группы B к группе A немного больше 1. Что говорит о том, что средний чек группы B больше среднего чека группы A.\n- На сырых данных конверсии к концу месяца стабилизировались и конверсия в группе B выше, чем в группе A.\n- На фильтрованных данных конверсии к концу месяца стабилизировались и конверсия в группе B выше, чем в группе A.\n- На сырых отношение конверсии группы B к группе A стабильно выше 1. Это говорит о том, что группа B имеет выше конверсию в сравнении с группой A.\n- На фильтрованных данных отношение конверсии группы B к группе A стабильно выше 1. Это говорит о том, что группа B имеет выше конверсию в сравнении с группой A.\n- Стоимость заказа варьируется от 50 до 1.29 млн рублей.\n- В основном заказы лежат в диапазоне от 1.22 тыс до 8.29 тыс. рублей.\n- В группе B заказов немного больше, чем в группе A (53% на 47%).\n- Количество пользователей в день лежит в диапазоне от 361 до 770 в день.\n- В основном в день было от 534 до 711 пользователей.\n- В группу B попало 2 крупных заказа. На сумму 1 294 500 и на сумму 202740. От 2019-08-19 и 2019-08-15 числа соответственно. Эти заказы совершили 2 клиента с id 1920142716 и 2108080724 соответственно.\n- В группе B больше выбросов в сумме заказа, чем в группе A.\n- Процент выбросов в выручке составляет чуть меньше 10%. Это приемлемое значение, которое показывает, что выбросов не сильно много.\n- Больше всего суммарных выбросов в стоимости заказа было 19 августа.\nАномалии и особенности в данных:\nРекомендации:"
  },
  {
    "objectID": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#загрузка-библиотек",
    "href": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#загрузка-библиотек",
    "title": "Тестирование гипотез для увеличения выручки интернет-магазина",
    "section": "Загрузка библиотек ",
    "text": "Загрузка библиотек \n\n\nShow the code\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore\npd.set_option('display.max_columns', None)\npd.options.display.float_format = '{:,.2f}'.format"
  },
  {
    "objectID": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#описание-и-изучение-данных",
    "href": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#описание-и-изучение-данных",
    "title": "Тестирование гипотез для увеличения выручки интернет-магазина",
    "section": "1. Описание и изучение данных",
    "text": "1. Описание и изучение данных\n\n1.1 Описание данных\nТаблица hypothesis (Гипотезы)\n\nHypothesis — краткое описание гипотезы;\nReach — охват пользователей по 10-балльной шкале;\nImpact — влияние на пользователей по 10-балльной шкале;\nConfidence — уверенность в гипотезе по 10-балльной шкале;\nEfforts — затраты ресурсов на проверку гипотезы по 10-балльной шкале. Чем больше значение Efforts, тем дороже проверка гипотезы.\n\nТаблица orders (Заказы)\n\ntransactionId — идентификатор заказа;\nvisitorId — идентификатор пользователя, совершившего заказ;\ndate — дата, когда был совершён заказ;\nrevenue — выручка заказа;\ngroup — группа A/B-теста, в которую попал заказ.\n\nТаблица visitors (Посетители)\n\ndate — дата;\ngroup — группа A/B-теста;\nvisitors — количество пользователей в указанную дату в указанной группе A/B-теста\n\n\n\n1.2 Изучение данных\n\n1.2.1 Изучение переменных\n\n1.2.1.1 Таблица hypothesis (Гипотезы)\nЗагружаем данные и задаем типы данных для столбцов, где это возможно.\n\n\nShow the code\ndf_hypothesis = pd.read_csv('https://code.s3.yandex.net/datasets/hypothesis.csv')\ndf_hypothesis\n\n\n\n\n\n\n\n\n\nHypothesis\nReach\nImpact\nConfidence\nEfforts\n\n\n\n\n0\nДобавить два новых канала привлечения трафика,...\n3\n10\n8\n6\n\n\n1\nЗапустить собственную службу доставки, что сок...\n2\n5\n4\n10\n\n\n2\nДобавить блоки рекомендаций товаров на сайт ин...\n8\n3\n7\n3\n\n\n3\nИзменить структура категорий, что увеличит кон...\n8\n3\n3\n8\n\n\n4\nИзменить цвет фона главной страницы, чтобы уве...\n3\n1\n1\n1\n\n\n5\nДобавить страницу отзывов клиентов о магазине,...\n3\n2\n2\n3\n\n\n6\nПоказать на главной странице баннеры с актуаль...\n5\n3\n8\n3\n\n\n7\nДобавить форму подписки на все основные страни...\n10\n7\n8\n5\n\n\n8\nЗапустить акцию, дающую скидку на товар в день...\n1\n9\n9\n5\n\n\n\n\n\n\n\nНаблюдения:\n\nВ таблице с гипотезами присутствует 9 гипотез с оценками для охвата, влияния, уверенности и сложности.\n\n\n\n1.2.1.2 Таблица orders (Заказы)\nЗагружаем данные и задаем типы данных для столбцов, где это возможно.\n\n\nShow the code\ndtype = {'group': 'category'}\ndf_orders = pd.read_csv('https://code.s3.yandex.net/datasets/orders.csv', dtype=dtype\n                , parse_dates=['date'], date_format='%Y-%m-%d')\ndf_orders.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n657\n2081053731\n3572819427\n2019-08-26\n7024\nA\n\n\n98\n1962247337\n2706377257\n2019-08-01\n7129\nA\n\n\n63\n4049927765\n343208965\n2019-08-16\n1350\nA\n\n\n905\n2120503539\n3239199975\n2019-08-27\n510\nB\n\n\n782\n2339954598\n1668030113\n2019-08-27\n2600\nA\n\n\n\n\n\n\n\nИзучим отдельно каждый столбец\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_orders)\ngen.next()\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n1.20k\n5\n0\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 2: Статистика столбца \"date\"\n\n\n\n\n\nFirst date\n2019-08-01 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2019-08-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n1.20k (100%)\n\nDistinct\n31.00 (3%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n1.17k (97%)\n\nDays missing\n0%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ таблице с заказами данные за август 2019 года.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 3: Статистика и гистограмма столбца \"transactionId\"\n\n\n\n\n\nValues\n1.20k (100%)\n\nMax\n4.29b\n\nAvg\n2.16b\n\n3.67b &lt;1%\n\n\nMissing\n---\n\n95%\n4.07b\n\nMode\n---\n\n4.17b &lt;1%\n\n\nDistinct\n1.20k (100%)\n\n75%\n3.24b\n\nRange\n4.29b\n\n2.88b &lt;1%\n\n\nDuplicates\n---\n\n50%\n2.15b\n\niQR\n2.07b\n\n504.37m &lt;1%\n\n\nZeros\n---\n\n25%\n1.17b\n\nstd\n1.23b\n\n2.02b &lt;1%\n\n\nNegative\n---\n\n5%\n233.63m\n\nkurt\n-1.18\n\n724.54m &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1.06m\n\nskew\n-0.01\n\n2.29b &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 4: Статистика и гистограмма столбца \"visitorId\"\n\n\n\n\n\nValues\n1.20k (100%)\n\nMax\n4.28b\n\nAvg\n2.17b\n\n4.26b &lt;1%\n\n\nMissing\n---\n\n95%\n4.08b\n\nMode\n---\n\n2.46b &lt;1%\n\n\nDistinct\n1.03k (86%)\n\n75%\n3.18b\n\nRange\n4.28b\n\n2.38b &lt;1%\n\n\nDuplicates\n166.00 (14%)\n\n50%\n2.22b\n\niQR\n2.07b\n\n2.04b &lt;1%\n\n\nZeros\n---\n\n25%\n1.11b\n\nstd\n1.24b\n\n199.60m &lt;1%\n\n\nNegative\n---\n\n5%\n236.48m\n\nkurt\n-1.17\n\n237.75m &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n5.11m\n\nskew\n-0.02\n\n3.06b &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n Вернуться к выводам\n\n\n\nShow the code\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 5: Статистика и гистограмма столбца \"revenue\"\n\n\n\n\n\nValues\n1.20k (100%)\n\nMax\n1.29m\n\nAvg\n8.35k\n\n990.00 (1%)\n\n\nMissing\n---\n\n95%\n28.00k\n\nMode\n990.00\n\n390.00 (1%)\n\n\nDistinct\n713.00 (60%)\n\n75%\n8.29k\n\nRange\n1.29m\n\n890.00 (1%)\n\n\nDuplicates\n484.00 (40%)\n\n50%\n2.98k\n\niQR\n7.07k\n\n400.00 &lt;1%\n\n\nZeros\n---\n\n25%\n1.22k\n\nstd\n39.19k\n\n1.49k &lt;1%\n\n\nNegative\n---\n\n5%\n300.00\n\nkurt\n972.30\n\n1.19k &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n50.00\n\nskew\n29.77\n\n1.29k &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nСтоимость заказа варьируется от 50 до 1.29 млн рублей.\nВ основном заказы лежат в диапазоне от 1.22 тыс до 8.29 тыс. рублей.\nЗаказ на сумму 1.29 млн явно является выбросом.\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 6: Статистика и топ-10 значений столбца \"group\"\n\n\n\n\n\nValues\n1.20k (100%)\n\nB (53%)\n\n\nMissing\n---\n\nA (47%)\n\n\nDistinct\n2.00 (&lt;1%)\n\n\n\n\nDuplicated origin\n1.20k (99.8%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ группе B заказов немного больше, чем в группе A (53% на 47%).\n\nПроверим не попали ли у нас пользователи в обе группы.\n\n\nShow the code\ndf_orders.head(1)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n\n\n\n\n\n\n\nShow the code\nbuyers_in_both_group = np.intersect1d(df_orders[df_orders.group == 'A'].visitorId.unique(), df_orders[df_orders.group == 'B'].visitorId.unique())\nbuyers_in_both_group\n\n\narray([   8300375,  199603092,  232979603,  237748145,  276558944,\n        351125977,  393266494,  457167155,  471551937,  477780734,\n        818047933,  963407295, 1230306981, 1294878855, 1316129916,\n       1333886533, 1404934699, 1602967004, 1614305549, 1648269707,\n       1668030113, 1738359350, 1801183820, 1959144690, 2038680547,\n       2044997962, 2378935119, 2458001652, 2579882178, 2587333274,\n       2600415354, 2654030115, 2686716486, 2712142231, 2716752286,\n       2780786433, 2927087541, 2949041841, 2954449915, 3062433592,\n       3202540741, 3234906277, 3656415546, 3717692402, 3766097110,\n       3803269165, 3891541246, 3941795274, 3951559397, 3957174400,\n       3963646447, 3972127743, 3984495233, 4069496402, 4120364173,\n       4186807279, 4256040402, 4266935830])\n\n\nПосмотрим какой процент таких пользователей.\n\n\nShow the code\nround(buyers_in_both_group.size * 100 / df_orders.visitorId.nunique(), 2)\n\n\n5.63\n\n\nНаблюдения:\n\nВ таблице с заказами есть пользователи, которые попали в обе группы АБ теста (5.64 процента от общего количества пользователей).\n\n\n\n1.2.1.3 Таблица visitors (Посетители)\nЗагружаем данные и задаем типы данных для столбцов, где это возможно.\n\n\nShow the code\ndtype = {'group': 'category'}\ndf_visitors = pd.read_csv('https://code.s3.yandex.net/datasets/visitors.csv', dtype=dtype\n                , parse_dates=['date'], date_format='%Y-%m-%d')\ndf_visitors.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\ndate\ngroup\nvisitors\n\n\n\n\n15\n2019-08-16\nA\n361\n\n\n2\n2019-08-03\nA\n507\n\n\n35\n2019-08-05\nB\n707\n\n\n27\n2019-08-28\nA\n594\n\n\n31\n2019-08-01\nB\n713\n\n\n\n\n\n\n\nИзучим отдельно каждый столбец\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_visitors)\ngen.next()\n\n\n\n\n\n\n\nTable 7: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n62.00\n3\n0\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 8: Статистика столбца \"date\"\n\n\n\n\n\nFirst date\n2019-08-01 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2019-08-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n62.00 (100%)\n\nDistinct\n31.00 (50%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n31.00 (50%)\n\nDays missing\n0%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ таблице с визитами данные за август 2019 года.\n\n Вернуться к выводам\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 9: Статистика и гистограмма столбца \"visitors\"\n\n\n\n\n\nValues\n62.00 (100%)\n\nMax\n770.00\n\nAvg\n607.29\n\n490.00 (3%)\n\n\nMissing\n---\n\n95%\n747.90\n\nMode\n---\n\n610.00 (3%)\n\n\nDistinct\n58.00 (94%)\n\n75%\n710.50\n\nRange\n409.00\n\n654.00 (3%)\n\n\nDuplicates\n4.00 (6%)\n\n50%\n624.50\n\niQR\n176.50\n\n718.00 (3%)\n\n\nZeros\n---\n\n25%\n534.00\n\nstd\n114.40\n\n544.00 (2%)\n\n\nNegative\n---\n\n5%\n395.55\n\nkurt\n-0.65\n\n581.00 (2%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n361.00\n\nskew\n-0.60\n\n509.00 (2%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nКоличество пользователей в день лежит в диапазоне от 361 до 770 в день.\nВ основном в день было от 534 до 711 пользователей.\n\n\n\nShow the code\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 10: Статистика и топ-10 значений столбца \"group\"\n\n\n\n\n\nValues\n62.00 (100%)\n\nA (50%)\n\n\nMissing\n---\n\nB (50%)\n\n\nDistinct\n2.00 (3%)\n\n\n\n\nDuplicated origin\n60.00 (97%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nСоберем все датафреймы в словарь для удобства дальнейшей работы.\n\n\nShow the code\ndfs = dict(\n    hypothesis = df_hypothesis\n    , orders = df_orders\n    , visitors = df_visitors\n)\n\n\n\n\n\n1.2.2 Изучение дубликатов\nПосмотрим на дубли во всех датафреймах.\n\n\nShow the code\nfor key, df in dfs.items():\n    display(f'{key} - {pagri_data_tools.check_duplicated(df)}')\n\n\n'hypothesis - no duplicates'\n\n\n'orders - no duplicates'\n\n\n'visitors - no duplicates'\n\n\nОтлично полных дублей нет.\nПосмотрим дубли в каждой колонке.\n\n\nShow the code\nfor key, df in dfs.items():\n    print(key)\n    series_duplicated = pagri_data_tools.find_columns_with_duplicates(df)   \n\n\nhypothesis\n\n\n\n\n\n\n\nTable 11: Duplicates\n\n\n\n\n\nReach\n3 (33.33%)\n\n\nImpact\n2 (22.22%)\n\n\nConfidence\n2 (22.22%)\n\n\nEfforts\n3 (33.33%)\n\n\n\n\n\n\n\n\norders\n\n\n\n\n\n\n\nTable 12: Duplicates\n\n\n\n\n\nvisitorId\n166 (13.87%)\n\n\ndate\n1166 (97.41%)\n\n\nrevenue\n484 (40.43%)\n\n\ngroup\n1195 (99.83%)\n\n\n\n\n\n\n\n\nvisitors\n\n\n\n\n\n\n\nTable 13: Duplicates\n\n\n\n\n\ndate\n31 (50.00%)\n\n\ngroup\n60 (96.77%)\n\n\nvisitors\n4 (6.45%)\n\n\n\n\n\n\n\n\nУ нас нет столбцов, в которых значения долны быть уникальными. Поэтом все в порядке.\n\n\n1.2.3 Изучение пропусков\nПосмотрим на пропуски в каждом столбце\n\n\nShow the code\nfor key, df in dfs.items():\n    print(key)\n    series_duplicated = pagri_data_tools.find_columns_with_missing_values(df)   \n\n\nhypothesis\nThere are no missing values\norders\nThere are no missing values\nvisitors\nThere are no missing values\n\n\nПропусков не обнаружено.\n\n\n1.2.4 Изучение выбросов\nВ таблице с заказами в колонке с выручкой были обнаружены слишком высокие значения.\nИзучим их.\n\n\nShow the code\nseries_outliers = pd.Series([df_orders[df_orders.revenue &gt; 25000]], index=['revenue'])\n\n\n Вернуться к выводам\n\n\nShow the code\nseries_outliers['revenue'].sort_values('revenue', ascending=False).head(10)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n425\n590470918\n1920142716\n2019-08-19\n1294500\nB\n\n\n1196\n3936777065\n2108080724\n2019-08-15\n202740\nB\n\n\n858\n192721366\n1316129916\n2019-08-27\n93940\nA\n\n\n1136\n666610489\n1307669133\n2019-08-13\n92550\nA\n\n\n744\n3668308183\n888512513\n2019-08-27\n86620\nB\n\n\n682\n1216533772\n4266935830\n2019-08-29\n78990\nB\n\n\n662\n1811671147\n4266935830\n2019-08-29\n78990\nA\n\n\n743\n3603576309\n4133034833\n2019-08-09\n67990\nA\n\n\n1103\n1348774318\n1164614297\n2019-08-12\n66350\nA\n\n\n1099\n316924019\n148427295\n2019-08-12\n65710\nA\n\n\n\n\n\n\n\nНаблюдения:\n\nВ группу B попало 2 крупных заказа. На сумму 1 294 500 и на сумму 202740. От 2019-08-19 и 2019-08-15 числа соответственно. Эти заказы совершили 2 клиента с id 1920142716 и 2108080724 соответственно.\n\n Вернуться к выводам\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_outliers, \"by_category\", \"revenue\", \"group\")\n\n\n\n\n\n\n\nTable 14: Share in \"revenue\" by category \"group\"\n\n\n\n\n\ngroup\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nA\n31\n29\n93.5%\n39.7%\n50.0%\n-10.3%\n\n\nB\n31\n44\n141.9%\n60.3%\n50.0%\n10.3%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ группе B больше выбросов в сумме заказа, чем в группе A.\n\nПроверим нет ли у нас выбросов по сумме заказов по пользователям.\nСгруппируем по пользователем и посмотрим топ пользователей по сумме заказа.\n\n\nShow the code\ndf_orders.groupby('visitorId')[['revenue']].sum().sort_values('revenue', ascending=False).head(5)\n\n\n\n\n\n\n\n\n\nrevenue\n\n\nvisitorId\n\n\n\n\n\n1920142716\n1294500\n\n\n2108080724\n202740\n\n\n4256040402\n176490\n\n\n4266935830\n157980\n\n\n2378935119\n142939\n\n\n\n\n\n\n\nНаблюдения:\n\nВидно, что 2 пользователя, которые мы обнаружили выше, совершили только по одной покупке.\n\nПосмотрим на выбросы используя квантили.\nВыбросами будем считать значения, которые выходят за пределы 5 и 95 квантилей.\n Вернуться к выводам\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df_orders)\n\n\n\n\n\n\n\nTable 15: Outliers\n\n\n\n\n\ntransactionId\n120 (10.03%)\n\n\nvisitorId\n120 (10.03%)\n\n\nrevenue\n112 (9.36%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nПроцент выбросов в выручке составляет чуть меньше 10%. Это приемлемое значение, которое показывает, что выбросов не сильно много.\n\n\n\nShow the code\ndf_orders.head(1)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n\n\n\n\n\nПосмотрим на распределены выбросы во времени\n\n\nShow the code\noutliers_by_month = series_outliers.revenue.set_index('date').resample('d')['revenue'].sum().reset_index()\n\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = outliers_by_month\n    , x = 'date'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True      \n    , width = 1000\n    , height = 450                                                                                                                         \n)\nfig = pagri_data_tools.bar(config)\nfig = pagri_data_tools.plotly_default_settings(fig)\nfig.update_layout(\n    title_text = 'Суммарная стоимость заказа по дням'\n    , yaxis_title_text = 'Стоимость заказа'\n    , xaxis_title_text = 'Дата'\n    , xaxis=dict(\n        dtick='D1',  # Интервал в 1 день\n        tickformat='%d %b',  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        showgrid = False\n    )    \n)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего суммарных выбросов в стоимости заказа было 19 августа.\n\n\n\n\n1.3 Промежуточный вывод\n\nВ таблице с заказами есть пользователи, которые попали в обе группы АБ теста (5.64 процента от общего количества пользователей).\nВ таблице с гипотезами присутствует 9 гипотез с оценками для охвата, влияния, уверенности и сложности.\nВ таблице с заказами данные за август 2019 года.\nСтоимость заказа варьируется от 50 до 1.29 млн рублей.\nВ основном заказы лежат в диапазоне от 1.22 тыс до 8.29 тыс. рублей.\nЗаказ на сумму 1.29 млн явно является выбросом.\nВ группе B заказов немного больше, чем в группе A (53% на 47%).\nВ таблице с визитами данные за август 2019 года.\nКоличество пользователей в день лежит в диапазоне от 361 до 770 в день.\nВ основном в день было от 534 до 711 пользователей.\nВ группу B попало 2 крупных заказа. На сумму 1 294 500 и на сумму 202740. От 2019-08-19 и 2019-08-15 числа соответственно. Эти заказы совершили 2 клиента с id 1920142716 и 2108080724 соответственно.\nВ группе B больше выбросов в сумме заказа, чем в группе A.\nВидно, что 2 пользователя, которые мы обнаружили выше, совершили только по одной покупке.\nПроцент выбросов в выручке составляет чуть меньше 10%. Это приемлемое значение, которое показывает, что выбросов не сильно много.\nБольше всего суммарных выбросов в стоимости заказа было 19 августа."
  },
  {
    "objectID": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#предобработка-данных",
    "href": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#предобработка-данных",
    "title": "Тестирование гипотез для увеличения выручки интернет-магазина",
    "section": "2. Предобработка данных",
    "text": "2. Предобработка данных\n\n2.1 Обработка выбросов\nВ таблице с заказами есть пользователи, которые попали в обе группы. Было бы правильно их удалить, так как они будут искажать результаты.\nНо так как в таблице с визитами у нас нет ай ди клиента, то мы не можем удалить этих пользователей из визитов.\nСледовательно, удалив пользователей из таблицы с заказами, мы можем получить некорректные результаты.\nПоэтому оставим этих пользователей в таблице с заказами.\nДля дальнейшего анализа датафрейма без выбросов, создадим новый датафрейм.\n\n\nShow the code\ndf_orders_filtered = df_orders.copy()\n\n\nУдалим 2 заказа, которые аномально высокие.\n\n\nShow the code\ndf_orders_filtered.shape[0]\n\n\n1197\n\n\n\n\nShow the code\ndf_orders_filtered = df_orders_filtered[~(df_orders_filtered['revenue'] &gt; 100_000)]\n\n\n\n\nShow the code\ndf_orders_filtered.shape[0]\n\n\n1195\n\n\nПосмотрим как у нас распределены значения после обрезания выбросов.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column ['Именительный падеж', 'для кого / чего']\n    revenue = ['Выручка', 'выручки']\n    # categorical column ['Именительный падеж', 'для кого / чего']\n    # Распределение долей по городу и тарифу с нормализацией по городу\n    , group = ['Группа A/B-теста', 'группы A/B-теста']\n)\nconfig = dict(\n    df = df_orders_filtered\n    , cat_var = 'group'\n    , num_var = 'revenue'\n    , top_n=3\n    , lower_quantile=0\n    , upper_quantile=1\n    , bins=20\n    , line_width=3\n    , opacity = 0.6\n)\npagri_data_tools.histograms_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nПо счетам 95-й и 99-й перцентили стоимости заказа.\n\n\nShow the code\ndf_orders_filtered.revenue.quantile([0.95, 0.99])\n\n\n0.95   27,565.00\n0.99   56,744.20\nName: revenue, dtype: float64\n\n\nПосмотрим сколько у нас заказов больше 40 тысяч.\n\n\nShow the code\ndf_orders_filtered[(df_orders_filtered['revenue'] &gt; 40_000)].shape[0]\n\n\n27\n\n\n\n\nShow the code\ndf_orders_filtered[(df_orders_filtered['revenue'] &gt; 40_000)].shape[0] / df_orders_filtered.shape[0]\n\n\n0.022594142259414227\n\n\nОколо 2 процентов. Удалим эти выбросы, чтобы не искажали данные.\n\n\nShow the code\ndf_orders_filtered = df_orders_filtered[~(df_orders_filtered['revenue'] &gt; 40_000)]\n\n\n\n\nShow the code\ndf_orders_filtered.shape[0]\n\n\n1168\n\n\nПосмотрим сколько у нас заказов совершил каждый пользователь.\n\n\nShow the code\ndf_orders_filtered.head(1)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n\n\n\n\n\nПостроим график количества заказов на пользователя.\n\n\nShow the code\ndf_orders_by_users = df_orders.groupby(['group', 'visitorId'], observed=True).agg({'transactionId': 'nunique'}).reset_index().rename(columns={'transactionId': 'orders'})\ndf_orders_by_users.head(5)\n\n\n\n\n\n\n\n\n\ngroup\nvisitorId\norders\n\n\n\n\n0\nA\n8300375\n1\n\n\n1\nA\n11685486\n1\n\n\n2\nA\n54447517\n1\n\n\n3\nA\n66685450\n1\n\n\n4\nA\n78758296\n1\n\n\n\n\n\n\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column ['Именительный падеж', 'для кого / чего']\n    orders = ['Количество заказов на пользователя', 'количество заказов на пользователя']\n    # categorical column ['Именительный падеж', 'для кого / чего']\n    # Распределение долей по городу и тарифу с нормализацией по городу\n    , group = ['Группа A/B-теста', 'группы A/B-теста']\n)\nconfig = dict(\n    df = df_orders_by_users\n    , cat_var = 'group'\n    , num_var = 'orders'\n    , top_n=3\n    , lower_quantile=0\n    , upper_quantile=1\n    , bins=20\n    , line_width=3\n    , opacity = 0.6\n)\npagri_data_tools.histograms_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ основном пользователи совершают 1 покупку.\n\nПо счетам 95-й и 99-й перцентили количества заказов на пользователя.\n\n\nShow the code\ndf_orders_by_users.orders.quantile([0.95, 0.99])\n\n\n0.95   2.00\n0.99   4.00\nName: orders, dtype: float64\n\n\nОставим только пользователей, которые совершили хотя бы 3 заказа\n\n\nShow the code\ndf_orders_filtered.shape[0]\n\n\n1168\n\n\n\n\nShow the code\nfiltered_buyers = df_orders_by_users[df_orders_by_users.orders &lt;= 3]['visitorId'].unique()\ndf_orders_filtered = df_orders_filtered[df_orders_filtered.visitorId.isin(filtered_buyers)]\ndf_orders_filtered.head()\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n1\n2804400009\n3642806036\n2019-08-15\n730\nB\n\n\n2\n2961555356\n4069496402\n2019-08-15\n400\nA\n\n\n3\n3797467345\n1196621759\n2019-08-15\n9759\nB\n\n\n4\n2282983706\n2322279887\n2019-08-15\n2308\nB\n\n\n\n\n\n\n\n\n\nShow the code\ndf_orders_filtered.shape[0]\n\n\n1140\n\n\nПосмотрим как распределена выручка по пользователям\n\n\nShow the code\ndf_orders_filtered.head(1)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n\n\n\n\n\nПостроим график выручки на пользователя.\n\n\nShow the code\ndf_revenue_by_users = df_orders.groupby(['group', 'visitorId'], observed=True).agg({'revenue': 'sum'}).reset_index()\ndf_revenue_by_users.head(5)\n\n\n\n\n\n\n\n\n\ngroup\nvisitorId\nrevenue\n\n\n\n\n0\nA\n8300375\n1790\n\n\n1\nA\n11685486\n6201\n\n\n2\nA\n54447517\n130\n\n\n3\nA\n66685450\n7990\n\n\n4\nA\n78758296\n1044\n\n\n\n\n\n\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column ['Именительный падеж', 'для кого / чего']\n    revenue = ['Выручка на пользователя', 'выручка на пользователя']\n    # categorical column ['Именительный падеж', 'для кого / чего']\n    # Распределение долей по городу и тарифу с нормализацией по городу\n    , group = ['Группа A/B-теста', 'группы A/B-теста']\n)\nconfig = dict(\n    df = df_revenue_by_users\n    , cat_var = 'group'\n    , num_var = 'revenue'\n    , top_n=3\n    , lower_quantile=0\n    , upper_quantile=1\n    , bins=20\n    , line_width=3\n    , opacity = 0.6\n)\npagri_data_tools.histograms_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nПо счетам 95-й и 99-й перцентили выручки на пользователя.\n\n\nShow the code\ndf_revenue_by_users.revenue.quantile([0.95, 0.99])\n\n\n0.95   32,052.00\n0.99   67,286.00\nName: revenue, dtype: float64\n\n\nОставим только пользователей, которые суммарно совершили заказов на сумму не более 70 000.\n\n\nShow the code\ndf_orders_filtered.shape[0]\n\n\n1140\n\n\n\n\nShow the code\nfiltered_buyers = df_revenue_by_users[df_revenue_by_users.revenue &lt;= 70_000]['visitorId'].unique()\ndf_orders_filtered = df_orders_filtered[df_orders_filtered.visitorId.isin(filtered_buyers)]\ndf_orders_filtered.head()\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n1\n2804400009\n3642806036\n2019-08-15\n730\nB\n\n\n2\n2961555356\n4069496402\n2019-08-15\n400\nA\n\n\n3\n3797467345\n1196621759\n2019-08-15\n9759\nB\n\n\n4\n2282983706\n2322279887\n2019-08-15\n2308\nB\n\n\n\n\n\n\n\n\n\nShow the code\ndf_orders_filtered.shape[0]\n\n\n1139\n\n\n\n\n2.2 Промежуточный вывод\n\nВ таблице с заказами удалили аномально высокие заказы, чтобы они не искажали результаты.\nВ таблице с заказами удалили пользователей, которые совершили более 3 заказов и пользователей, которые совершили заказы на сумму больше 70 тысяч, чтобы эти пользователи не искажали результаты."
  },
  {
    "objectID": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#приоритизация-гипотез",
    "href": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#приоритизация-гипотез",
    "title": "Тестирование гипотез для увеличения выручки интернет-магазина",
    "section": "3. Приоритизация гипотез",
    "text": "3. Приоритизация гипотез\nИспользуем фреймворки ICE и RICE для приоритизации гипотез.\n\n\nShow the code\ndf_hypothesis\n\n\n\n\n\n\n\n\n\nHypothesis\nReach\nImpact\nConfidence\nEfforts\n\n\n\n\n0\nДобавить два новых канала привлечения трафика,...\n3\n10\n8\n6\n\n\n1\nЗапустить собственную службу доставки, что сок...\n2\n5\n4\n10\n\n\n2\nДобавить блоки рекомендаций товаров на сайт ин...\n8\n3\n7\n3\n\n\n3\nИзменить структура категорий, что увеличит кон...\n8\n3\n3\n8\n\n\n4\nИзменить цвет фона главной страницы, чтобы уве...\n3\n1\n1\n1\n\n\n5\nДобавить страницу отзывов клиентов о магазине,...\n3\n2\n2\n3\n\n\n6\nПоказать на главной странице баннеры с актуаль...\n5\n3\n8\n3\n\n\n7\nДобавить форму подписки на все основные страни...\n10\n7\n8\n5\n\n\n8\nЗапустить акцию, дающую скидку на товар в день...\n1\n9\n9\n5\n\n\n\n\n\n\n\n\n\nShow the code\ndf_hypothesis['ice_score'] = df_hypothesis['Impact'] * df_hypothesis['Confidence']  / df_hypothesis['Efforts'] \n\n\n\n\nShow the code\ndf_hypothesis['rice_score'] = df_hypothesis['Reach'] * df_hypothesis['Impact'] * df_hypothesis['Confidence']  / df_hypothesis['Efforts'] \n\n\n\n\nShow the code\n# Сохраняем текущее значение max_colwidth\noriginal_max_colwidth = pd.get_option('display.max_colwidth')\n# Устанавливаем max_colwidth в None для отображения полной строки\npd.set_option('display.max_colwidth', None)\n\n\n Вернуться к выводам\n\n\n\nShow the code\ndf_hypothesis[['Hypothesis', 'ice_score', 'rice_score']].sort_values(by=['rice_score', 'ice_score'], ascending=False)\n\n\n\n\n\n\n\n\n\nHypothesis\nice_score\nrice_score\n\n\n\n\n7\nДобавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок\n11.20\n112.00\n\n\n2\nДобавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа\n7.00\n56.00\n\n\n0\nДобавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей\n13.33\n40.00\n\n\n6\nПоказать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию\n8.00\n40.00\n\n\n8\nЗапустить акцию, дающую скидку на товар в день рождения\n16.20\n16.20\n\n\n3\nИзменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар\n1.12\n9.00\n\n\n1\nЗапустить собственную службу доставки, что сократит срок доставки заказов\n2.00\n4.00\n\n\n5\nДобавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов\n1.33\n4.00\n\n\n4\nИзменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей\n1.00\n3.00\n\n\n\n\n\n\n\nНаблюдения:\n\nТак как фреймворк ice не учитывает охват, то его общая оценка отличается от оценки фреймворка rice.\nПо фреймворку rice самые приоритетные гипотезы 7, 2, 0, 6\nПо фреймворку ice самые приоритетные гипотезы 8, 0, 7, 6\nГипотезы 0 и 7 стоит проверять в первую очередь, так как они имеют высокий приоритет в обоих фреймворках.\n\n\n\nShow the code\npd.set_option('display.max_colwidth', original_max_colwidth)\n\n\n\n3.1 Промежуточный вывод\n\nТак как фреймворк ice не учитывает охват, то его общая оценка отличается от оценки фреймворка rice.\nПо фреймворку rice самые приоритетные гипотезы 7, 2, 0, 6\nПо фреймворку ice самые приоритетные гипотезы 8, 0, 7, 6\nГипотезы 0 и 7 стоит проверять в первую очередь, так как они имеют высокий приоритет в обоих фреймворках."
  },
  {
    "objectID": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#анализ-ab-теста",
    "href": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#анализ-ab-теста",
    "title": "Тестирование гипотез для увеличения выручки интернет-магазина",
    "section": "4. Анализ A/B-теста",
    "text": "4. Анализ A/B-теста\n\n4.1 Визуализация кумулятивных метрик\nПодготовим дата фреймы для анализа кумулятивных метрик.\nСначала рассчитаем кумулятивные метрики для сырых данных.\n\n\nShow the code\ndf_orders.head(1)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n\n\n\n\n\n\n\nShow the code\ndf_visitors.head(5)\n\n\n\n\n\n\n\n\n\ndate\ngroup\nvisitors\n\n\n\n\n0\n2019-08-01\nA\n719\n\n\n1\n2019-08-02\nA\n619\n\n\n2\n2019-08-03\nA\n507\n\n\n3\n2019-08-04\nA\n717\n\n\n4\n2019-08-05\nA\n756\n\n\n\n\n\n\n\n\n\nShow the code\ndf_orders['group'] = df_orders['group'].cat.reorder_categories(['A', 'B'], ordered=True)\ndf_visitors['group'] = df_visitors['group'].cat.reorder_categories(['A', 'B'], ordered=True)\n\n\n\n\nShow the code\n# создаем массив уникальных пар значений дат и групп теста\ndates_groups = df_orders[['date','group']].drop_duplicates()\n# получаем агрегированные кумулятивные по дням данные о заказах \ndf_orders_aggregated = dates_groups.apply(lambda x: df_orders[np.logical_and(df_orders['date'] &lt;= x['date'], df_orders['group'] == x['group'])].agg({'date' : 'max', 'group' : 'max', 'transactionId' : 'nunique', 'visitorId' : 'nunique', 'revenue' : 'sum'}), axis=1).sort_values(by=['date','group'])\ndf_orders_aggregated.columns = ['date','group','orders','buyers','revenue']\ndf_orders_aggregated.head()\n\n\n\n\n\n\n\n\n\ndate\ngroup\norders\nbuyers\nrevenue\n\n\n\n\n55\n2019-08-01\nA\n24\n20\n148579\n\n\n66\n2019-08-01\nB\n21\n20\n101217\n\n\n175\n2019-08-02\nA\n44\n38\n242401\n\n\n173\n2019-08-02\nB\n45\n43\n266748\n\n\n291\n2019-08-03\nA\n68\n62\n354874\n\n\n\n\n\n\n\n\n\nShow the code\ndf_visitors_aggregated = dates_groups.apply(lambda x: df_visitors[np.logical_and(df_visitors['date'] &lt;= x['date'], df_visitors['group'] == x['group'])].agg({'date' : 'max', 'group' : 'max', 'visitors' : 'sum'}), axis=1).sort_values(by=['date','group'])\ndf_visitors_aggregated.head()\n\n\n\n\n\n\n\n\n\ndate\ngroup\nvisitors\n\n\n\n\n55\n2019-08-01\nA\n719\n\n\n66\n2019-08-01\nB\n713\n\n\n175\n2019-08-02\nA\n1338\n\n\n173\n2019-08-02\nB\n1294\n\n\n291\n2019-08-03\nA\n1845\n\n\n\n\n\n\n\n\n\nShow the code\ndf_aggregated = pd.merge(df_orders_aggregated, df_visitors_aggregated, on = ['date', 'group'], how='outer')\n\n\n\n\nShow the code\ndf_aggregated.isna().sum()\n\n\ndate        0\ngroup       0\norders      0\nbuyers      0\nrevenue     0\nvisitors    0\ndtype: int64\n\n\n\n\nShow the code\ndf_aggregated['aov'] = df_aggregated['revenue'] / df_aggregated['orders']\n\n\n\n\nShow the code\ndf_aggregated['C1'] = (df_aggregated['buyers'] * 100 / df_aggregated['visitors']).round(2)\n\n\n\n\nShow the code\ndf_aggregated.tail()\n\n\n\n\n\n\n\n\n\ndate\ngroup\norders\nbuyers\nrevenue\nvisitors\naov\nC1\n\n\n\n\n57\n2019-08-29\nB\n596\n544\n5559398\n17708\n9,327.85\n3.07\n\n\n58\n2019-08-30\nA\n545\n493\n4022970\n18037\n7,381.60\n2.73\n\n\n59\n2019-08-30\nB\n620\n567\n5774631\n18198\n9,313.92\n3.12\n\n\n60\n2019-08-31\nA\n557\n503\n4084803\n18736\n7,333.58\n2.68\n\n\n61\n2019-08-31\nB\n640\n586\n5907760\n18916\n9,230.88\n3.10\n\n\n\n\n\n\n\nПосчитаем метрики для фильтрованных данных\n\n\nShow the code\ndf_orders_filtered.head(1)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n\n\n\n\n\n\n\nShow the code\ndf_visitors.head(5)\n\n\n\n\n\n\n\n\n\ndate\ngroup\nvisitors\n\n\n\n\n0\n2019-08-01\nA\n719\n\n\n1\n2019-08-02\nA\n619\n\n\n2\n2019-08-03\nA\n507\n\n\n3\n2019-08-04\nA\n717\n\n\n4\n2019-08-05\nA\n756\n\n\n\n\n\n\n\n\n\nShow the code\ndf_orders_filtered['group'] = df_orders_filtered['group'].cat.reorder_categories(['A', 'B'], ordered=True)\ndf_visitors['group'] = df_visitors['group'].cat.reorder_categories(['A', 'B'], ordered=True)\n\n\n\n\nShow the code\n# создаем массив уникальных пар значений дат и групп теста\ndates_groups = df_orders_filtered[['date','group']].drop_duplicates()\n# получаем агрегированные кумулятивные по дням данные о заказах \ndf_orders_aggregated_filtered = dates_groups.apply(lambda x: df_orders_filtered[np.logical_and(df_orders_filtered['date'] &lt;= x['date'], df_orders_filtered['group'] == x['group'])].agg({'date' : 'max', 'group' : 'max', 'transactionId' : 'nunique', 'visitorId' : 'nunique', 'revenue' : 'sum'}), axis=1).sort_values(by=['date','group'])\ndf_orders_aggregated_filtered.columns = ['date','group','orders','buyers','revenue']\ndf_orders_aggregated_filtered.head()\n\n\n\n\n\n\n\n\n\ndate\ngroup\norders\nbuyers\nrevenue\n\n\n\n\n55\n2019-08-01\nA\n23\n19\n142779\n\n\n66\n2019-08-01\nB\n21\n20\n101217\n\n\n175\n2019-08-02\nA\n43\n37\n236601\n\n\n173\n2019-08-02\nB\n45\n43\n266748\n\n\n291\n2019-08-03\nA\n67\n61\n349074\n\n\n\n\n\n\n\n\n\nShow the code\ndf_visitors_aggregated = dates_groups.apply(lambda x: df_visitors[np.logical_and(df_visitors['date'] &lt;= x['date'], df_visitors['group'] == x['group'])].agg({'date' : 'max', 'group' : 'max', 'visitors' : 'sum'}), axis=1).sort_values(by=['date','group'])\ndf_visitors_aggregated.head()\n\n\n\n\n\n\n\n\n\ndate\ngroup\nvisitors\n\n\n\n\n55\n2019-08-01\nA\n719\n\n\n66\n2019-08-01\nB\n713\n\n\n175\n2019-08-02\nA\n1338\n\n\n173\n2019-08-02\nB\n1294\n\n\n291\n2019-08-03\nA\n1845\n\n\n\n\n\n\n\n\n\nShow the code\ndf_aggregated_filtered = pd.merge(df_orders_aggregated_filtered, df_visitors_aggregated, on = ['date', 'group'], how='outer')\n\n\n\n\nShow the code\ndf_aggregated_filtered.isna().sum()\n\n\ndate        0\ngroup       0\norders      0\nbuyers      0\nrevenue     0\nvisitors    0\ndtype: int64\n\n\n\n\nShow the code\ndf_aggregated_filtered['aov'] = df_aggregated_filtered['revenue'] / df_aggregated_filtered['orders']\n\n\n\n\nShow the code\ndf_aggregated_filtered['C1'] = (df_aggregated_filtered['buyers'] * 100 / df_aggregated_filtered['visitors']).round(2)\n\n\n\n\nShow the code\ndf_aggregated_filtered.tail()\n\n\n\n\n\n\n\n\n\ndate\ngroup\norders\nbuyers\nrevenue\nvisitors\naov\nC1\n\n\n\n\n57\n2019-08-29\nB\n573\n532\n3414506\n17708\n5,959.00\n3.00\n\n\n58\n2019-08-30\nA\n513\n474\n2898478\n18037\n5,650.05\n2.63\n\n\n59\n2019-08-30\nB\n596\n554\n3583959\n18198\n6,013.35\n3.04\n\n\n60\n2019-08-31\nA\n524\n484\n2955141\n18736\n5,639.58\n2.58\n\n\n61\n2019-08-31\nB\n615\n573\n3715238\n18916\n6,041.04\n3.03\n\n\n\n\n\n\n\nСоздадим словарь для подписей на графиках.\n\n\nShow the code\ntitles_for_axis = dict(\n    orders = ['Количество заказов', 'количество заказов', 0]\n    , buyers = ['Количество покупателей', 'количество покупателей', 0]\n    , revenue = ['Выручка', 'выручка', 2]\n    , aov = ['Средний чек', 'средний чек', 1]\n    , C1 = ['Конверсия', 'конверсия', 2]\n    , C1_ratio = ['Отношение конверсии группы A к группе B', 'отношение конверсии группы A к группе B', 0]\n    , aov_ratio = ['Отношение среднего чека группы A к группе B', 'отношение среднего чека группы A к группе B', 0]\n    , group = ['Группа A/B-теста', 'группы A/B-теста', 'группе A/B-теста']\n    , date = ['Дата', 'даты', 'дате']\n)\n\n\nПостроим график кумулятивной выручки по группам для сырых данных\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_aggregated\n    , x = 'date'\n    , y = 'revenue'\n    , category = 'group'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа сырых данных выручка группы B по итогу теста больше выручки группы A. Но прирост был получен за 1 день 19 августа.\n\nПостроим график кумулятивной выручки по группам для фильтрованных данных\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_aggregated_filtered\n    , x = 'date'\n    , y = 'revenue'\n    , category = 'group'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа фильтрованных дынных выручка группы B растет равномерно без скачков быстрее группы А.\n\nПостроим график кумулятивного среднего чека по группам для сырых данных.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_aggregated\n    , x = 'date'\n    , y = 'aov'\n    , category = 'group'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа сырых данных по итогу теста у группы B средний чек выше, чем у группы A, но разница получена в один день 19 августа. И при этом после 19 августа средний чек у группы B растет, а у группы A падает.\n\nПостроим график кумулятивного среднего чека по группам для фильтрованных данных.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_aggregated_filtered\n    , x = 'date'\n    , y = 'aov'\n    , category = 'group'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа фильтрованных данных у группы B средний чек выше, чем у группы A. У группы B было сильное падение среднего чека до 7 августа.\n\nПостроим график относительного изменения кумулятивного среднего чека группы B к группе A для сырых данных.\n\n\nShow the code\naov_ratio = df_aggregated[df_aggregated.group == 'B'].set_index('date').aov / df_aggregated[df_aggregated.group == 'A'].set_index('date').aov\naov_ratio = aov_ratio.reset_index()\naov_ratio.columns = ['date', 'aov_ratio']\n\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = aov_ratio\n    , x = 'date'\n    , y = 'aov_ratio'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\nfig.add_shape(\n    type='line',\n    x0=aov_ratio['date'].min(),\n    x1=aov_ratio['date'].max(),\n    y0=1,\n    y1=1,\n    line=dict(color='#049CB3', width=2) \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа сырых данных отношение среднего чека группы B к группе A по итогу теста больше 1, но это из-за скачка 19 августа. После этого значение снижается.\n\nПостроим график относительного изменения кумулятивного среднего чека группы B к группе A для фильтрованных даннных.\n\n\nShow the code\naov_ratio = df_aggregated_filtered[df_aggregated_filtered.group == 'B'].set_index('date').aov / df_aggregated_filtered[df_aggregated_filtered.group == 'A'].set_index('date').aov\naov_ratio = aov_ratio.reset_index()\naov_ratio.columns = ['date', 'aov_ratio']\n\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = aov_ratio\n    , x = 'date'\n    , y = 'aov_ratio'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\nfig.add_shape(\n    type='line',\n    x0=aov_ratio['date'].min(),\n    x1=aov_ratio['date'].max(),\n    y0=1,\n    y1=1,\n    line=dict(color='#049CB3', width=2) \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа фильтрованных данных отношение среднего чека группы B к группе A немного больше 1. Что говорит о том, что средний чек группы B больше среднего чека группы A.\n\nПостроим график кумулятивной конверсии по группам на сырых данных.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_aggregated\n    , x = 'date'\n    , y = 'C1'\n    , category = 'group'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа сырых данных конверсии к концу месяца стабилизировались и конверсия в группе B выше, чем в группе A.\n\nПостроим график кумулятивной конверсии по группам на фильтрованных данных.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_aggregated\n    , x = 'date'\n    , y = 'C1'\n    , category = 'group'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа фильтрованных данных конверсии к концу месяца стабилизировались и конверсия в группе B выше, чем в группе A.\n\nПостроим график относительного изменения кумулятивной конверсии группы B к группе A на сырых данных.\n\n\nShow the code\nC1_ratio = df_aggregated[df_aggregated.group == 'B'].set_index('date').C1 / df_aggregated[df_aggregated.group == 'A'].set_index('date').C1\nC1_ratio = C1_ratio.reset_index()\nC1_ratio.columns = ['date', 'C1_ratio']\n\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = C1_ratio\n    , x = 'date'\n    , y = 'C1_ratio'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\nfig.add_shape(\n    type='line',\n    x0=aov_ratio['date'].min(),\n    x1=aov_ratio['date'].max(),\n    y0=1,\n    y1=1,\n    line=dict(color='#049CB3', width=2) \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа сырых отношение конверсии группы B к группе A стабильно выше 1. Это говорит о том, что группа B имеет выше конверсию в сравнении с группой A.\n\nПостроим график относительного изменения кумулятивной конверсии группы B к группе A на фильтрованных данных.\n\n\nShow the code\nC1_ratio = df_aggregated_filtered[df_aggregated_filtered.group == 'B'].set_index('date').C1 / df_aggregated_filtered[df_aggregated_filtered.group == 'A'].set_index('date').C1\nC1_ratio = C1_ratio.reset_index()\nC1_ratio.columns = ['date', 'C1_ratio']\n\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = C1_ratio\n    , x = 'date'\n    , y = 'C1_ratio'\n    , height = 450\n    , width = 1000\n    , sort_axis = False\n)\nfig = pagri_data_tools.line(config, titles_for_axis)\nfig.update_layout(\n    xaxis=dict(\n        dtick='D1',\n        tickformat=\"%d %b\",  # Формат отображения даты\n        tickangle=-45,  # Угол наклона меток\n        tickvals=pd.date_range(start='2019-08-01', periods=11, freq='3D')\n    )    \n)\nfig.add_shape(\n    type='line',\n    x0=aov_ratio['date'].min(),\n    x1=aov_ratio['date'].max(),\n    y0=1,\n    y1=1,\n    line=dict(color='#049CB3', width=2) \n)\n\n\n                                                \n\n\nНаблюдения:\n\nНа фильтрованных данных отношение конверсии группы B к группе A стабильно выше 1. Это говорит о том, что группа B имеет выше конверсию в сравнении с группой A.\n\n\n\n4.2 Проверка гипотез\nПосчитаем статистическую значимость различий в конверсии между группами, используя только итоговые значения количества пользователей и количества покупателей на сырых данных.\n\nВернуться к выводам\nГипотеза 1: Нет различий в конверсии между группами.\nH0: Конверсия между группами не отличается.\nH1: Конверсия между группами отличается.\n\n\nShow the code\nab_test_res = df_aggregated.iloc[-2:]\nab_test_res\n\n\n\n\n\n\n\n\n\ndate\ngroup\norders\nbuyers\nrevenue\nvisitors\naov\nC1\n\n\n\n\n60\n2019-08-31\nA\n557\n503\n4084803\n18736\n7,333.58\n2.68\n\n\n61\n2019-08-31\nB\n640\n586\n5907760\n18916\n9,230.88\n3.10\n\n\n\n\n\n\n\n\n\nShow the code\nconversion_diff = round(576 * 100 / 18736 - 488 * 100 / 18916, 2)\nconversion_diff\n\n\n0.49\n\n\n\n\nShow the code\npagri_data_tools.proportions_ztest_2sample(count1=488, count2=576, n1=18736, n2=18916)\n\n\nZ тест для долей\nalpha =  0.05\np-value =  0.00992021329341157\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа сырых данных на уровне значимости 0.05 нулевая гипотеза о том, что нет различий в конверсии между группами, была отклонена. Это свидетельствует о том, что конверсия между группами статистически значимо различается.\n\nНа сырых данных посчитаем статистическую значимость различий в конверсии между группами, используя данные о заказах. Это будет аналог конверсии.\nДля этого составим 2 выбрки для каждой группы, в которой будет количество заказов каждого пользователя, те пользователи, которые ничего не покупали будут иметь 0. Чтобы получить количество пользователей, которые ничего не покупали, вычтем поличество покупателей из общего количества пользователей в таблице df_visitors.\n\n\nShow the code\ndf_aggregated.head(1)\n\n\n\n\n\n\n\n\n\ndate\ngroup\norders\nbuyers\nrevenue\nvisitors\naov\nC1\n\n\n\n\n0\n2019-08-01\nA\n24\n20\n148579\n719\n6,190.79\n2.78\n\n\n\n\n\n\n\n\n\nShow the code\ndf_orders.head(1)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n\n\n\n\n\n\n\nShow the code\norders_by_users_A = df_orders[df_orders.group == 'A'].groupby('visitorId').agg({'transactionId': 'nunique'}).reset_index().rename(columns={'transactionId': 'orders'})\norders_by_users_B = df_orders[df_orders.group == 'B'].groupby('visitorId').agg({'transactionId': 'nunique'}).reset_index().rename(columns={'transactionId': 'orders'})\n\n\n\n\nShow the code\ndf_visitors.head(1)\n\n\n\n\n\n\n\n\n\ndate\ngroup\nvisitors\n\n\n\n\n0\n2019-08-01\nA\n719\n\n\n\n\n\n\n\n\n\nShow the code\nsampleA = pd.concat([\n                     orders_by_users_A['orders'],\n                     pd.Series(0, index=np.arange(df_visitors['visitors'].sum() - len(orders_by_users_A['orders'])),\n                     name='orders')\n                     ],axis=0)\nsampleB = pd.concat([\n                     orders_by_users_B['orders'],\n                     pd.Series(0, index=np.arange(df_visitors['visitors'].sum() - len(orders_by_users_B['orders'])),\n                     name='orders')\n                     ],axis=0)\n\n\nСформулируем гипотезы.\nH0: Конверсия между группами не отличается.\nH1: Конверсия между группами отличается.\nИспользуем критерий Манна-Уитни\nАльтернатива будет - двусторонняя\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.mannwhitneyu(sampleA, sampleB)\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  0.011308079133840975\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа сырых данных на уровне значимости 0.05 нулевая гипотеза о том, что нет различий в конверсии между группами, была отклонена. Это свидетельствует о том, что конверсия между группами статистически значимо различается.\n\nПосчитаем статистическую значимость различий в конверсии между группами, используя только итоговые значения количества пользователей и количества покупателей на фильтрованных данных.\nH0: Конверсия между группами не отличается.\nH1: Конверсия между группами отличается.\n\n\nShow the code\nab_test_res = df_aggregated_filtered.iloc[-2:]\nab_test_res\n\n\n\n\n\n\n\n\n\ndate\ngroup\norders\nbuyers\nrevenue\nvisitors\naov\nC1\n\n\n\n\n60\n2019-08-31\nA\n524\n484\n2955141\n18736\n5,639.58\n2.58\n\n\n61\n2019-08-31\nB\n615\n573\n3715238\n18916\n6,041.04\n3.03\n\n\n\n\n\n\n\n\n\nShow the code\nconversion_diff = round(573 * 100 / 18916 - 484 * 100 / 18736, 2)\nconversion_diff\n\n\n0.45\n\n\n\n\nShow the code\npagri_data_tools.proportions_ztest_2sample(count1=573, count2=484, n1=18916, n2=18736)\n\n\nZ тест для долей\nalpha =  0.05\np-value =  0.008815725534066248\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа фильтрованных данных на уровне значимости 0.05 нулевая гипотеза о том, что нет различий в конверсии между группами, была отклонена. Это свидетельствует о том, что конверсия между группами статистически значимо различается.\n\nНа фильтрованных данных посчитаем статистическую значимость различий в конверсии между группами, используя данные о заказах. Это будет аналог конверсии.\nДля этого составим 2 выбрки для каждой группы, в которой будет количество заказов каждого пользователя, те пользователи, которые ничего не покупали будут иметь 0. Чтобы получить количество пользователей, которые ничего не покупали, вычтем поличество покупателей из общего количества пользователей в таблице df_visitors.\n\n\nShow the code\ndf_aggregated_filtered.head(1)\n\n\n\n\n\n\n\n\n\ndate\ngroup\norders\nbuyers\nrevenue\nvisitors\naov\nC1\n\n\n\n\n0\n2019-08-01\nA\n23\n19\n142779\n719\n6,207.78\n2.64\n\n\n\n\n\n\n\n\n\nShow the code\ndf_orders_filtered.head(1)\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n\n\n\n\n\n\n\nShow the code\norders_by_users_A = df_orders_filtered[df_orders_filtered.group == 'A'].groupby('visitorId').agg({'transactionId': 'nunique'}).reset_index().rename(columns={'transactionId': 'orders'})\norders_by_users_B = df_orders_filtered[df_orders_filtered.group == 'B'].groupby('visitorId').agg({'transactionId': 'nunique'}).reset_index().rename(columns={'transactionId': 'orders'})\n\n\n\n\nShow the code\ndf_visitors.head(1)\n\n\n\n\n\n\n\n\n\ndate\ngroup\nvisitors\n\n\n\n\n0\n2019-08-01\nA\n719\n\n\n\n\n\n\n\n\n\nShow the code\nsampleA = pd.concat([\n                     orders_by_users_A['orders'],\n                     pd.Series(0, index=np.arange(df_visitors['visitors'].sum() - len(orders_by_users_A['orders'])),\n                     name='orders')\n                     ],axis=0)\nsampleB = pd.concat([\n                     orders_by_users_B['orders'],\n                     pd.Series(0, index=np.arange(df_visitors['visitors'].sum() - len(orders_by_users_B['orders'])),\n                     name='orders')\n                     ],axis=0)\n\n\nСформулируем гипотезы.\nH0: Конверсия между группами не отличается.\nH1: Конверсия между группами отличается.\nИспользуем критерий Манна-Уитни\nАльтернатива будет - двусторонняя\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.mannwhitneyu(sampleA, sampleB)\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  0.005835588016969488\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа фильтрованных данных на уровне значимости 0.05 нулевая гипотеза о том, что нет различий в конверсии между группами, была отклонена. Это свидетельствует о том, что конверсия между группами статистически значимо различается.\n\nПосчитаем статистическую значимость различий в среднем чеке заказа между группами по сырым данным.\n\nВернуться к выводам\nГипотеза 2: Нет различий в среднем чеке между группами.\nH0: Средний чек между группами не отличается.\nH1: Средний чек между группами отличается.\nИспользуем критерий Манна-Уитни\nАльтернатива будет - двусторонняя\nУровень значимости alpha выберем 0.05\n\n\nShow the code\ndf_orders.head()\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n1\n2804400009\n3642806036\n2019-08-15\n730\nB\n\n\n2\n2961555356\n4069496402\n2019-08-15\n400\nA\n\n\n3\n3797467345\n1196621759\n2019-08-15\n9759\nB\n\n\n4\n2282983706\n2322279887\n2019-08-15\n2308\nB\n\n\n\n\n\n\n\n\n\nShow the code\naov_diff = df_orders[df_orders.group=='B']['revenue'].mean() - df_orders[df_orders.group=='A']['revenue'].mean()\naov_diff\n\n\nnp.float64(1897.2969030520644)\n\n\n\n\nShow the code\npagri_data_tools.mannwhitneyu_df(df_orders[['group', 'revenue']])\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  0.7292909855432458\nНет оснований отвергнуть нулевую гипотезу, поскольку p-value больше или равно уровню значимости\n\n\nРезультат:\n\nНа сырых данных на уровне значимости 0.05 нет оснований отвергнуть нулевая гипотеза о том, что средний чек между группами отличается.\n\nПосчитаем статистическую значимость различий в среднем чеке заказа между группами по фильтрованных данным.\nH0: Средний чек между группами не отличается.\nH1: Средний чек между группами отличается.\nИспользуем критерий Манна-Уитни\nАльтернатива будет - двусторонняя\nУровень значимости alpha выберем 0.05\n\n\nShow the code\ndf_orders_filtered.head()\n\n\n\n\n\n\n\n\n\ntransactionId\nvisitorId\ndate\nrevenue\ngroup\n\n\n\n\n0\n3667963787\n3312258926\n2019-08-15\n1650\nB\n\n\n1\n2804400009\n3642806036\n2019-08-15\n730\nB\n\n\n2\n2961555356\n4069496402\n2019-08-15\n400\nA\n\n\n3\n3797467345\n1196621759\n2019-08-15\n9759\nB\n\n\n4\n2282983706\n2322279887\n2019-08-15\n2308\nB\n\n\n\n\n\n\n\n\n\nShow the code\naov_diff = df_orders_filtered[df_orders_filtered.group=='B']['revenue'].mean() - df_orders_filtered[df_orders_filtered.group=='A']['revenue'].mean()\naov_diff\n\n\nnp.float64(401.4553373052813)\n\n\n\n\nShow the code\npagri_data_tools.mannwhitneyu_df(df_orders_filtered[['group', 'revenue']])\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  0.5753545332613015\nНет оснований отвергнуть нулевую гипотезу, поскольку p-value больше или равно уровню значимости\n\n\nРезультат:\n\nНа фильтрованных данных на уровне значимости 0.05 нет оснований отвергнуть нулевая гипотеза о том, что средний чек между группами отличается.\n\n\n\n4.3 Промежуточный вывод\n\nНа сырых данных выручка группы B по итогу теста больше выручки группы A. Но прирост был получен за 1 день 19 августа.\nНа фильтрованных дынных выручка группы B растет равномерно без скачков быстрее группы А.\nНа сырых данных по итогу теста у группы B средний чек выше, чем у группы A, но разница получена в один день 19 августа. И при этом после 19 августа средний чек у группы B растет, а у группы A падает.\nНа фильтрованных данных у группы B средний чек выше, чем у группы A. У группы B было сильное падение среднего чека до 7 августа.\nНа сырых данных отношение среднего чека группы B к группе A по итогу теста больше 1, но это из-за скачка 19 августа. После этого значение снижается.\nНа фильтрованных данных отношение среднего чека группы B к группе A немного больше 1. Что говорит о том, что средний чек группы B больше среднего чека группы A.\nНа сырых данных конверсии к концу месяца стабилизировались и конверсия в группе B выше, чем в группе A.\nНа фильтрованных данных конверсии к концу месяца стабилизировались и конверсия в группе B выше, чем в группе A.\nНа сырых отношение конверсии группы B к группе A стабильно выше 1. Это говорит о том, что группа B имеет выше конверсию в сравнении с группой A.\nНа фильтрованных данных отношение конверсии группы B к группе A стабильно выше 1. Это говорит о том, что группа B имеет выше конверсию в сравнении с группой A.\nНа сырых и фильтрованных данных на уровне значимости 0.05 нулевая гипотеза о том, что нет различий в конверсии между группами, была отклонена. Это свидетельствует о том, что конверсия между группами статистически значимо различается.\nНа сырых и фильтрованных данных на уровне значимости 0.05 нет оснований отвергнуть нулевая гипотеза о том, что средний чек между группами отличается."
  },
  {
    "objectID": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#общий-вывод",
    "href": "projects/revenue_growth_hypotheses/revenue_growth_hypotheses.html#общий-вывод",
    "title": "Тестирование гипотез для увеличения выручки интернет-магазина",
    "section": "5. Общий вывод",
    "text": "5. Общий вывод\nВыводы:\n\nПо фреймворку rice самые приоритетные гипотезы 7, 2, 0, 6\nПо фреймворку ice самые приоритетные гипотезы 8, 0, 7, 6\nНа сырых данных выручка группы B по итогу теста больше выручки группы A. Но прирост был получен за 1 день 19 августа.\nНа фильтрованных дынных выручка группы B растет равномерно без скачков быстрее группы А.\nНа сырых данных по итогу теста у группы B средний чек выше, чем у группы A, но разница получена в один день 19 августа. И при этом после 19 августа средний чек у группы B растет, а у группы A падает.\nНа фильтрованных данных у группы B средний чек выше, чем у группы A. У группы B было сильное падение среднего чека до 7 августа.\nНа сырых данных отношение среднего чека группы B к группе A по итогу теста больше 1, но это из-за скачка 19 августа. После этого значение снижается.\nНа фильтрованных данных отношение среднего чека группы B к группе A немного больше 1. Что говорит о том, что средний чек группы B больше среднего чека группы A.\nНа сырых данных конверсии к концу месяца стабилизировались и конверсия в группе B выше, чем в группе A.\nНа фильтрованных данных конверсии к концу месяца стабилизировались и конверсия в группе B выше, чем в группе A.\nНа сырых отношение конверсии группы B к группе A стабильно выше 1. Это говорит о том, что группа B имеет выше конверсию в сравнении с группой A.\nНа фильтрованных данных отношение конверсии группы B к группе A стабильно выше 1. Это говорит о том, что группа B имеет выше конверсию в сравнении с группой A.\nСтоимость заказа варьируется от 50 до 1.29 млн рублей.\nВ основном заказы лежат в диапазоне от 1.22 тыс до 8.29 тыс. рублей.\nВ группе B заказов немного больше, чем в группе A (53% на 47%).\nКоличество пользователей в день лежит в диапазоне от 361 до 770 в день.\nВ основном в день было от 534 до 711 пользователей.\nВ группу B попало 2 крупных заказа. На сумму 1 294 500 и на сумму 202740. От 2019-08-19 и 2019-08-15 числа соответственно. Эти заказы совершили 2 клиента с id 1920142716 и 2108080724 соответственно.\nВ группе B больше выбросов в сумме заказа, чем в группе A.\nПроцент выбросов в выручке составляет чуть меньше 10%. Это приемлемое значение, которое показывает, что выбросов не сильно много.\nБольше всего суммарных выбросов в стоимости заказа было 19 августа.\n\nАномалии и особенности в данных:\n\nВ таблице с заказами есть пользователи, которые попали в обе группы АБ теста (5.64 процента от общего количества пользователей).\nВ таблице с заказами есть заказ на сумму 1.29 млн. Можно с уверенностью предположить, что это аномальное значение.\n\nРезультаты предобработки данных:\n\nВ таблице с заказами удалили аномально высокие заказы, чтобы они не искажали результаты.\nВ таблице с заказами удалили пользователей, которые совершили более 3 заказов и пользователей, которые совершили заказы на сумму больше 70 тысяч, чтобы эти пользователи не искажали результаты.\n\nРезультаты проверки гипотез:\n\nГипотеза 1: Нет различий в конверсии между группами.\nРезультат: На уровне значимости 0.05 гипотеза была отклонена.\nЭто указывает на то, что между группами присутствуют статистически значимые различия в конверсии.\nГипотеза 2: Нет различий в среднем чеке между группами.\nРезультат: На уровне значимости 0.05 нет оснований отвергнуть гипотезу.\n\nРекомендации:\n\nПриоритетные гипотезы\n\nГипотезы 0 и 7 стоит проверять в первую очередь, так как они имеют высокий приоритет в обоих фреймворках.\n\nРезультаты А/В теста\n\nТест можно останавливать. Так как конверсии уже стабилизировалась, и разница между конверсиями статистически значима. При этом средний чек хоть и выше у группы B, но это не статистически значимо. Скорее всего это вызвано выбросами."
  },
  {
    "objectID": "projects/research_of_food_service_industry/temp_for_report.html",
    "href": "projects/research_of_food_service_industry/temp_for_report.html",
    "title": "Pavel Grigoryev projects",
    "section": "",
    "text": "бистро\n\n\n_gen_ \n\n\n_start_\n_end_\nimport IPython\nnotebook_path = \"/\".join(\n        IPython.extract_module_locals()[1][\"__vsc_ipynb_file__\"].split(\"/\"))\npagri_data_tools.collect_observations(notebook_path, '')\n\nCorrected notebook saved to /home/pagri/git_repos/pagri-projects/quarto/projects/research_on_video_game_sales/temp_for_report.ipynb\n\n\n\nid - идентификатор объекта;\nobject_name - название объекта общественного питания;\nchain - сетевой ресторан;\nobject_type - тип объекта общественного питания;\naddress - адрес;\nnumber - количество посадочных мест.\n\n\ndf_users Таблица users (информация о пользователях)\ndf_calls Таблица calls (информация о звонках)\ndf_messages Таблица messages (информация о сообщениях)\ndf_internet Таблица internet (информация об интернет-сессиях)\ndf_tariffs Таблица tariffs (информация о тарифах)\ndf_calls_full\ndf_messages_full\ndf_internet_full\ndf_by_userid_month\ndf_arpu\n\n\n\n- В колонке с датой прекращения пользования тарифом 92 % пропусков. Значит 92 % пользователей ещё пользуются таррифом.\n- Есть пропущенные недели и дни в дате прекращения пользования тарифом, но в данном случае это нормально.  \n- В колонке с датой подключения тарифа 26 % дней пропущено.\n- В таблице users 500 уникльных пользователей.\n- Пользователи имеют возраст от 18 до 75 лет\n- В основном пользователи имеют возраст от 32 до 62 лет.\n- Больше всего пользователей из Москвы и Санкт-Петербурга.\n- У большинства (70%) пользователей тариф smart\n- В колонке с длительностью звонка 20 процентов нулей.\n- Максимальная длительность звонка 38 минут.\n- Длительность звонка варьируется от 0 до 38 минут.\n- В основном длительность звонка находится в диапазоне от 1.3 до 10.7 минут.\n- Чаще всего звонок составляет 0 минут.\n- В таблице users 492 уникальных пользователя. \n- В колонке с объемом интернет-трафика 13 процентов нулей.\n- За одну сессию пользователи тратят от 0 до 1 724.83 мегабайт\n- В основном пользователи тратят от 138.19 до 559.55 мегабайт\n- В таблице с информацией о интернет-сессиях 497 уникальных пользователей.\n- Сделать проверку на нулевые значения в длительности звонка и в объеме интернет трафика.  \n- Большинство пользователей в возрасте старше 60 лет.\n- Летом совершалось меньше всего звонков.\n- Больше всего звонков было в декабре и ноябре.\n\n\n- На гистограмме выручки присутствуют 2 пика. Это связанно с абоненской платой, так как у нас 2 тарифа\n- Месячная выручка по пользователям варьируется от 550 до 6 542.88рублей.\n- В основном выручка лежит в диапазоне от 656.94 до 1 950 рублей.\n- В тарифе премиум чаще не превышают лимит по тарифу. Это видно по самым распространенным значениям в выручке.  \n- Средняя количество звонков в день варьируется от 0 до 100.\n- В основном пользователи совершают от 1.95 до 3 звонков в день.\n- Средняя количество сообщений в день варьируется от 0 до 51.67\n- В основном пользователи отправляют от 1.18 до 2.33 сообщений в день.\n- Пользователи проводят от 0 до 58 интернет-сессий в день.\n- В основном пользователи проводят от 1.75 до 2.35 интернет-сесси в день.\n- Средняя длительность звонка в день варьируется от 0 до 58 минут.\n- В основном звонки длятся от 1.75 до 2.35 минут.\n\n\nПеременные с id\n- user_id (users) - уникальный идентификатор пользователя\n- id (calls) - уникальный номер звонка\n- id (messages) - уникальный номер сообщения\n- user_id (calls) - идентификатор пользователя, сделавшего звонок\n- user_id (messages) - идентификатор пользователя, отправившего сообщение\n- id (internet) - уникальный номер сессии\n- user_id (internet) - идентификатор пользователя\n\nКатегориальные переменные\n- city (users) - город проживания пользователя\n- tarif (users) - название тарифного плана\n- tariff_name (tariffs) - название тарифа\n- age_cat (users) - возрастная категория\n- duration_cat (calls) - категория длительности звонка\n- mb_used_cat (internet) - категория объема интернет трафика\n- reg_date_weekday (users) - день недели подключения тарифа\n- reg_date_month (users) - месяц подключения тарифа\n- reg_date_weekday (users) - день недели подключения тарифа\n- reg_date_month (users) - месяц подключения тарифа\n- call_date_weekday (calls) - день недели звонка\n- call_date_month (calls) - месяц звонка\n- message_date_weekday (messages) - день недели сообщения\n- message_date_month (messages) - месяц сообщения\n- session_date_weekday (internet) - день недели интернет-сессии\n- session_date_month (internet) - месяц интернет-сессии\n- is_active - активен ли тариф\n\nЧисловые переменные\n- age (users) - возраст пользователя (годы)\n- duration (calls) - длительность звонка в минутах\n- mb_used (internet) - объём потраченного за сессию интернет-трафика (в мегабайтах)\n- rub_monthly_fee (tariffs) - ежемесячная абонентская плата в рублях\n- minutes_included (tariffs) - количество минут разговора в месяц, включённых в абонентскую плату\n- messages_included (tariffs) - количество сообщений в месяц, включённых в абонентскую плату\n- mb_per_month_included (tariffs) - объём интернет-трафика, включённого в абонентскую плату (в мегабайтах)\n- rub_per_minute (tariffs) - стоимость минуты разговора сверх тарифного пакета (например, если в тарифе 100 минут разговора в месяц, то со 101 минуты будет взиматься плата)\n- rub_per_message (tariffs) - стоимость отправки сообщения сверх тарифного пакета\n- rub_per_gb (tariffs) - стоимость дополнительного гигабайта интернет-трафика сверх тарифного пакета (1 гигабайт = 1024 мегабайта)\n\nВременные переменные\n- reg_date (users) - дата подключения тарифа (день, месяц, год)\n- churn_date (users) - дата прекращения пользования тарифом (если значение пропущено, то тариф ещё действовал на момент выгрузки данных)\n- call_date (calls) - дата звонка\n- message_date (messages) - дата сообщения\n- session_date (internet) - дата интернет-сессии\n\nОстальные\n- first_name (users) - имя пользователя\n- last_name (users) - фамилия пользователя\n\n\nТаблица users (информация о пользователях):\n\nuser_id - уникальный идентификатор пользователя\nfirst_name - имя пользователя\nlast_name - фамилия пользователя\nage - возраст пользователя (годы)\nreg_date - дата подключения тарифа (день, месяц, год)\nchurn_date - дата прекращения пользования тарифом (если значение пропущено, то тариф ещё действовал на момент выгрузки данных)\ncity - город проживания пользователя\ntarif - название тарифного плана\n\n\n\nТаблица calls (информация о звонках):\n\nid - уникальный номер звонка\ncall_date - дата звонка\nduration - длительность звонка в минутах\nuser_id - идентификатор пользователя, сделавшего звонок\n\n\n\nТаблица messages (информация о сообщениях):\n\nid - уникальный номер сообщения\nmessage_date - дата сообщения\nuser_id - идентификатор пользователя, отправившего сообщение\n\n\n\nТаблица internet (информация об интернет-сессиях):\n\nid - уникальный номер сессии\nmb_used - объём потраченного за сессию интернет-трафика (в мегабайтах)\nsession_date - дата интернет-сессии\nuser_id - идентификатор пользователя\n\n\n\nТаблица tariffs (информация о тарифах):\n\ntariff_name - название тарифа\nrub_monthly_fee - ежемесячная абонентская плата в рублях\nminutes_included - количество минут разговора в месяц, включённых в абонентскую плату\nmessages_included - количество сообщений в месяц, включённых в абонентскую плату\nmb_per_month_included - объём интернет-трафика, включённого в абонентскую плату (в мегабайтах)\nrub_per_minute - стоимость минуты разговора сверх тарифного пакета (например, если в тарифе 100 минут разговора в месяц, то со 101 минуты будет взиматься плата)\nrub_per_message - стоимость отправки сообщения сверх тарифного пакета\nrub_per_gb - стоимость дополнительного гигабайта интернет-трафика сверх тарифного пакета (1 гигабайт = 1024 мегабайта)"
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nКоммерческий департамент компании «Мегалайн», федерального оператора сотовой связи, стремится оптимизировать рекламный бюджет, выяснив, какой из тарифных планов - «Смарт» или «Ультра» - приносит больше дохода. Для этого необходимо провести предварительный анализ на основе данных 500 пользователей, включая информацию о тарифах, количестве звонков и сообщений за 2018 год. Нужно проанализировать поведение клиентов и сделать вывод - какой тариф лучше.\nЦель:\nПровести анализ данных 500 пользователей компании «Мегалайн» для определения более прибыльного тарифного плана («Смарт» или «Ультра») и оптимизации рекламного бюджета.\nИсточники данных:\nДанные о пользователях и тарифных планах предоставлены компанией «Мегалайн».\nУсловия проведения анализа данных:\nДля анализ будут использоваться данные с 1 января 2018 по 31 декабря 2018 года\nГлавные выводы:\nАномалии и особенности в данных:\n- В колонке с датой прекращения пользования тарифом 92 % пропусков. Значит 92 % пользователей ещё пользуются тарифом.\n- В колонке с датой подключения тарифа 26 % дней пропущено.\n- В колонке с длительностью звонка 20 процентов нулей. Это пропущенные звонки.\n- В колонке с объемом интернет-трафика 13 процентов нулей."
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#загрузка-библиотек",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#загрузка-библиотек",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "Загрузка библиотек ",
    "text": "Загрузка библиотек \n\n\nShow the code\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore\npd.set_option('display.max_columns', None)\n\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload"
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#описание-и-изучение-данных",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#описание-и-изучение-данных",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "1. Описание и изучение данных",
    "text": "1. Описание и изучение данных\n\n1.1 Описание данных\nОписание тарифов\n\nТариф «Смарт»\n\nЕжемесячная плата: 550 рублей\nВключено 500 минут разговора, 50 сообщений и 15 Гб интернет-трафика\nСтоимость услуг сверх тарифного пакета: 1. минута разговора: 3 рубля («Мегалайн» всегда округляет вверх значения минут и мегабайтов. Если пользователь проговорил всего 1 секунду, в тарифе засчитывается целая минута); 2. сообщение: 3 рубля; 3. 1 Гб интернет-трафика: 200 рублей.\n\nТариф «Ультра»\n\nЕжемесячная плата: 1950 рублей\nВключено 3000 минут разговора, 1000 сообщений и 30 Гб интернет-трафика\nСтоимость услуг сверх тарифного пакета: 1. минута разговора: 1 рубль; 2. сообщение: 1 рубль; 3. 1 Гб интернет-трафика: 150 рублей.\n\n\nТаблица users (информация о пользователях):\n\nuser_id - уникальный идентификатор пользователя\nfirst_name - имя пользователя\nlast_name - фамилия пользователя\nage - возраст пользователя (годы)\nreg_date - дата подключения тарифа (день, месяц, год)\nchurn_date - дата прекращения пользования тарифом (если значение пропущено, то тариф ещё действовал на момент выгрузки данных)\ncity - город проживания пользователя\ntarif - название тарифного плана\n\nТаблица calls (информация о звонках):\n\nid - уникальный номер звонка\ncall_date - дата звонка\nduration - длительность звонка в минутах\nuser_id - идентификатор пользователя, сделавшего звонок\n\nТаблица messages (информация о сообщениях):\n\nid - уникальный номер сообщения\nmessage_date - дата сообщения\nuser_id - идентификатор пользователя, отправившего сообщение\n\nТаблица internet (информация об интернет-сессиях):\n\nid - уникальный номер сессии\nmb_used - объём потраченного за сессию интернет-трафика (в мегабайтах)\nsession_date - дата интернет-сессии\nuser_id - идентификатор пользователя\n\nТаблица tariffs (информация о тарифах):\n\ntariff_name - название тарифа\nrub_monthly_fee - ежемесячная абонентская плата в рублях\nminutes_included - количество минут разговора в месяц, включённых в абонентскую плату\nmessages_included - количество сообщений в месяц, включённых в абонентскую плату\nmb_per_month_included - объём интернет-трафика, включённого в абонентскую плату (в мегабайтах)\nrub_per_minute - стоимость минуты разговора сверх тарифного пакета (например, если в тарифе 100 минут разговора в месяц, то со 101 минуты будет взиматься плата)\nrub_per_message - стоимость отправки сообщения сверх тарифного пакета\nrub_per_gb - стоимость дополнительного гигабайта интернет-трафика сверх тарифного пакета (1 гигабайт = 1024 мегабайта)\n\n\n\n1.2 Изучение данных\n\n1.2.1 Изучение переменных\n\n1.2.1.1 Таблица users (информация о пользователях)\n\n\nShow the code\ndtype = {'city': 'category', 'tariff': 'category'}\ndf_users = pd.read_csv('https://code.s3.yandex.net/datasets/users.csv', dtype=dtype\n                       , parse_dates=['reg_date', 'churn_date'], date_format='%Y-%m-%d')\ndf_users.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nuser_id\nage\nchurn_date\ncity\nfirst_name\nlast_name\nreg_date\ntariff\n\n\n\n\n308\n1308\n52\nNaT\nМосква\nИнесса\nКорнилова\n2018-01-04\nsmart\n\n\n13\n1013\n36\nNaT\nИваново\nБорис\nАндреенко\n2018-11-14\nultra\n\n\n414\n1414\n70\nNaT\nВладимир\nАлександра\nЛобанова\n2018-05-05\nsmart\n\n\n32\n1032\n31\nNaT\nУльяновск\nИнна\nИгнатьева\n2018-01-04\nsmart\n\n\n460\n1460\n64\nNaT\nИжевск\nАрина\nАбашкина\n2018-04-06\nsmart\n\n\n\n\n\n\n\nИзучим каждый столбец отдельно.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_users)\ngen.next()\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n500\n8\n0\n---\n---\n\n\n\n\n\n\n\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 2: Статистика столбца \"churn_date\"\n\n\n\n\n\nFirst date\n2018-08-17 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-12-30 00:00:00\n\nMissing\n462 (92%)\n\nMonths missing\n0%\n\n\n\nValues\n38 (8%)\n\nDistinct\n33 (7%)\n\nWeeks missing\n30%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n466 (93%)\n\nDays missing\n76%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ колонке с датой прекращения пользования тарифом 92 % пропусков. Значит 92 % пользователей ещё пользуются тарифом.\nЕсть пропущенные недели и дни, но в данном случае это нормально.\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 3: Статистика столбца \"reg_date\"\n\n\n\n\n\nFirst date\n2018-01-01 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-12-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n500 (100%)\n\nDistinct\n270 (54%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n230 (46%)\n\nDays missing\n26%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ колонке с датой подключения тарифа 26 % дней пропущено.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 4: Статистика и гистограмма столбца \"user_id\"\n\n\n\n\n\nValues\n500 (100%)\n\nMax\n1 499\n\nAvg\n1 249.5\n\n1 000 &lt;1%\n\n\nMissing\n---\n\n95%\n1 474.05\n\nMode\n---\n\n1 329 &lt;1%\n\n\nDistinct\n500 (100%)\n\n75%\n1 374.25\n\nRange\n499\n\n1 342 &lt;1%\n\n\nDuplicates\n---\n\nMedian\n1 249.5\n\niQR\n249.5\n\n1 341 &lt;1%\n\n\nZeros\n---\n\n25%\n1 124.75\n\nstd\n144.48\n\n1 340 &lt;1%\n\n\nNegative\n---\n\n5%\n1 024.95\n\nkurt\n-1.20\n\n1 339 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1 000\n\nskew\n0.00\n\n1 338 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ таблице users 500 уникальных пользователей.\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 5: Статистика и гистограмма столбца \"age\"\n\n\n\n\n\nValues\n500 (100%)\n\nMax\n75\n\nAvg\n46.59\n\n53 (3%)\n\n\nMissing\n---\n\n95%\n72.05\n\nMode\n---\n\n42 (3%)\n\n\nDistinct\n58 (12%)\n\n75%\n62\n\nRange\n57\n\n63 (3%)\n\n\nDuplicates\n442 (88%)\n\nMedian\n46\n\niQR\n30\n\n64 (3%)\n\n\nZeros\n---\n\n25%\n32\n\nstd\n16.67\n\n71 (3%)\n\n\nNegative\n---\n\n5%\n21\n\nkurt\n-1.20\n\n73 (2%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n18\n\nskew\n-0.00\n\n21 (2%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nПользователи имеют возраст от 18 до 75 лет\nВ основном пользователи имеют возраст от 32 до 62 лет.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 6: Статистика и топ-10 значений столбца \"city\"\n\n\n\n\n\nValues\n500 (100%)\n\nМосква (20%)\n\n\nMissing\n---\n\nСанкт-Петербург (8%)\n\n\nDistinct\n76 (15%)\n\nНовосибирск (3%)\n\n\nDuplicated origin\n424 (85%)\n\nКазань (3%)\n\n\nDupl (modify - origin)\n---\n\nОмск (3%)\n\n\nEmpty\n---\n\nУфа (2%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nНабережные Челны (2%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nБольше всего пользователей из Москвы и Санкт-Петербурга.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 7: Статистика и топ-10 значений столбца \"first_name\"\n\n\n\n\n\nValues\n500 (100%)\n\nРадим (1%)\n\n\nMissing\n---\n\nЛеонид (1%)\n\n\nDistinct\n246 (49%)\n\nПётр (1%)\n\n\nDuplicated origin\n254 (51%)\n\nАндрей &lt;1%\n\n\nDupl (modify - origin)\n---\n\nАдам &lt;1%\n\n\nEmpty\n---\n\nМарта &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nТамара &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nБольше всего пользователей с именем Радим\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 8: Статистика и топ-10 значений столбца \"last_name\"\n\n\n\n\n\nValues\n500 (100%)\n\nАндреенко (1%)\n\n\nMissing\n---\n\nБерезина &lt;1%\n\n\nDistinct\n419 (84%)\n\nАркадьев &lt;1%\n\n\nDuplicated origin\n81 (16%)\n\nБулгаков &lt;1%\n\n\nDupl (modify - origin)\n---\n\nСоловьев &lt;1%\n\n\nEmpty\n---\n\nАлексеенко &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nАнищенко &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nБольше всего пользователей с фамилией Андреенко.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 9: Статистика и топ-10 значений столбца \"tariff\"\n\n\n\n\n\nValues\n500 (100%)\n\nsmart (70%)\n\n\nMissing\n---\n\nultra (30%)\n\n\nDistinct\n2 (&lt;1%)\n\n\n\n\nDuplicated origin\n498 (99.6%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nУ большинства (70%) пользователей тариф smart\n\n\n\n1.2.1.2 Таблица calls (информация о звонках)\n\n\nShow the code\ndf_calls = pd.read_csv('https://code.s3.yandex.net/datasets/calls.csv'\n                       , parse_dates=['call_date'], date_format='%Y-%m-%d')\ndf_calls.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nid\ncall_date\nduration\nuser_id\n\n\n\n\n73455\n1185_249\n2018-10-19\n14.37\n1185\n\n\n12917\n1033_168\n2018-08-17\n12.56\n1033\n\n\n74950\n1186_772\n2018-04-27\n0.00\n1186\n\n\n189799\n1467_66\n2018-12-15\n0.00\n1467\n\n\n165787\n1409_412\n2018-11-04\n2.69\n1409\n\n\n\n\n\n\n\nИзучим каждый столбец отдельно.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_calls)\ngen.next()\n\n\n\n\n\n\n\nTable 10: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n202 607\n4\n16\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 11: Статистика столбца \"call_date\"\n\n\n\n\n\nFirst date\n2018-01-01 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-12-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n202 607 (100%)\n\nDistinct\n365 (&lt;1%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n2\n\nDuplicates\n202 242 (99.8%)\n\nDays missing\n0%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nПропусков и нулевых значений нет.\nПрисутствуют данные за каждый день.\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 12: Статистика и гистограмма столбца \"duration\"\n\n\n\n\n\nValues\n202 607 (100%)\n\nMax\n38\n\nAvg\n6.76\n\n0 (20%)\n\n\nMissing\n---\n\n95%\n17.52\n\nMode\n0\n\n4.49 &lt;1%\n\n\nDistinct\n2 871 (1%)\n\n75%\n10.7\n\nRange\n38\n\n5.5 &lt;1%\n\n\nDuplicates\n199 736 (99%)\n\nMedian\n6\n\niQR\n9.4\n\n6.15 &lt;1%\n\n\nZeros\n39 613 (20%)\n\n25%\n1.3\n\nstd\n5.84\n\n6.38 &lt;1%\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n-0.11\n\n4.92 &lt;1%\n\n\nRAM (Mb)\n2\n\nMin\n0\n\nskew\n0.69\n\n5.05 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ колонке с длительностью звонка 20 процентов нулей.\nМаксимальная длительность звонка 38 минут.\nДлительность звонка варьируется от 0 до 38 минут.\nВ основном длительность звонка находится в диапазоне от 1.3 до 10.7 минут.\nЧаще всего звонок составляет 0 минут.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 13: Статистика и гистограмма столбца \"user_id\"\n\n\n\n\n\nValues\n202 607 (100%)\n\nMax\n1 499\n\nAvg\n1 253.94\n\n1 377 &lt;1%\n\n\nMissing\n---\n\n95%\n1 472\n\nMode\n1 377\n\n1 168 &lt;1%\n\n\nDistinct\n492 (&lt;1%)\n\n75%\n1 379\n\nRange\n499\n\n1 375 &lt;1%\n\n\nDuplicates\n202 115 (99.8%)\n\nMedian\n1 260\n\niQR\n253\n\n1 453 &lt;1%\n\n\nZeros\n---\n\n25%\n1 126\n\nstd\n144.72\n\n1 196 &lt;1%\n\n\nNegative\n---\n\n5%\n1 027\n\nkurt\n-1.24\n\n1 021 &lt;1%\n\n\nRAM (Mb)\n2\n\nMin\n1 000\n\nskew\n-0.05\n\n1 363 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ таблице users 492 уникальных пользователя.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 14: Статистика и топ-10 значений столбца \"id\"\n\n\n\n\n\nValues\n202 607 (100%)\n\n1000_0 &lt;1%\n\n\nMissing\n---\n\n1344_881 &lt;1%\n\n\nDistinct\n202 607 (100%)\n\n1344_883 &lt;1%\n\n\nDuplicated origin\n---\n\n1344_884 &lt;1%\n\n\nDupl (modify - origin)\n---\n\n1344_885 &lt;1%\n\n\nEmpty\n---\n\n1344_886 &lt;1%\n\n\nRAM (Mb)\n11\n\n1344_887 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВсе id звонков уникальны. Так и должно быть.\n\n\n\n1.2.1.3 Таблица messages (информация о сообщениях)\n\n\nShow the code\ndf_messages = pd.read_csv('https://code.s3.yandex.net/datasets/messages.csv'\n                       , parse_dates=['message_date'], date_format='%Y-%m-%d')\ndf_messages.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nid\nmessage_date\nuser_id\n\n\n\n\n15098\n1065_434\n2018-08-27\n1065\n\n\n33764\n1146_562\n2018-08-25\n1146\n\n\n49985\n1222_189\n2018-09-02\n1222\n\n\n101044\n1413_3\n2018-11-27\n1413\n\n\n43573\n1188_36\n2018-06-28\n1188\n\n\n\n\n\n\n\nИзучим каждый столбец отдельно.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_messages)\ngen.next()\n\n\n\n\n\n\n\nTable 15: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n123 036\n3\n9\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 16: Статистика столбца \"message_date\"\n\n\n\n\n\nFirst date\n2018-01-02 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-12-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n123 036 (100%)\n\nDistinct\n364 (&lt;1%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n1\n\nDuplicates\n122 672 (99.7%)\n\nDays missing\n0%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 17: Статистика и гистограмма столбца \"user_id\"\n\n\n\n\n\nValues\n123 036 (100%)\n\nMax\n1 499\n\nAvg\n1 256.99\n\n1 277 (1%)\n\n\nMissing\n---\n\n95%\n1 475\n\nMode\n1 277\n\n1 089 (1%)\n\n\nDistinct\n426 (&lt;1%)\n\n75%\n1 381\n\nRange\n499\n\n1 231 (1%)\n\n\nDuplicates\n122 610 (99.7%)\n\nMedian\n1 271\n\niQR\n247\n\n1 385 (1%)\n\n\nZeros\n---\n\n25%\n1 134\n\nstd\n143.52\n\n1 356 &lt;1%\n\n\nNegative\n---\n\n5%\n1 026\n\nkurt\n-1.18\n\n1 004 &lt;1%\n\n\nRAM (Mb)\n1\n\nMin\n1 000\n\nskew\n-0.11\n\n1 344 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ таблице с информацией о сообщениях 426 уникальных пользователя.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 18: Статистика и топ-10 значений столбца \"id\"\n\n\n\n\n\nValues\n123 036 (100%)\n\n1000_0 &lt;1%\n\n\nMissing\n---\n\n1344_248 &lt;1%\n\n\nDistinct\n123 036 (100%)\n\n1344_96 &lt;1%\n\n\nDuplicated origin\n---\n\n1344_95 &lt;1%\n\n\nDupl (modify - origin)\n---\n\n1344_94 &lt;1%\n\n\nEmpty\n---\n\n1344_93 &lt;1%\n\n\nRAM (Mb)\n7\n\n1344_92 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВсе id сообщений уникальный. Так и должно быть.\n\n\n\n1.2.1.4 Таблица internet (информация об интернет-сессиях)\n\n\nShow the code\ndf_internet = pd.read_csv('https://code.s3.yandex.net/datasets/internet.csv'\n                       , parse_dates=['session_date'], date_format='%Y-%m-%d', index_col=0).reset_index(drop=True)\ndf_internet.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nid\nmb_used\nsession_date\nuser_id\n\n\n\n\n109657\n1373_579\n0.00\n2018-05-31\n1373\n\n\n5266\n1015_274\n91.12\n2018-08-22\n1015\n\n\n69602\n1238_194\n381.53\n2018-11-04\n1238\n\n\n65465\n1224_111\n461.78\n2018-04-26\n1224\n\n\n139810\n1469_198\n163.69\n2018-09-08\n1469\n\n\n\n\n\n\n\nИзучим каждый столбец отдельно.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_internet)\ngen.next()\n\n\n\n\n\n\n\nTable 19: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n149 396\n4\n11\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 20: Статистика столбца \"session_date\"\n\n\n\n\n\nFirst date\n2018-01-01 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-12-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n149 396 (100%)\n\nDistinct\n365 (&lt;1%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n1\n\nDuplicates\n149 031 (99.8%)\n\nDays missing\n0%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 21: Статистика и гистограмма столбца \"mb_used\"\n\n\n\n\n\nValues\n149 396 (100%)\n\nMax\n1 724.83\n\nAvg\n370.19\n\n0 (13%)\n\n\nMissing\n---\n\n95%\n866.52\n\nMode\n0\n\n335.91 &lt;1%\n\n\nDistinct\n70 003 (47%)\n\n75%\n559.55\n\nRange\n1 724.83\n\n447.3 &lt;1%\n\n\nDuplicates\n79 393 (53%)\n\nMedian\n348.01\n\niQR\n421.37\n\n197.56 &lt;1%\n\n\nZeros\n19 598 (13%)\n\n25%\n138.19\n\nstd\n278.3\n\n199.11 &lt;1%\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n-0.28\n\n379.69 &lt;1%\n\n\nRAM (Mb)\n1\n\nMin\n0\n\nskew\n0.51\n\n292.14 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ колонке с объемом интернет-трафика 13 процентов нулей.\nЗа одну сессию пользователи тратят от 0 до 1 724.83 мегабайт\nВ основном пользователи тратят от 138.19 до 559.55 мегабайт\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 22: Статистика и гистограмма столбца \"user_id\"\n\n\n\n\n\nValues\n149 396 (100%)\n\nMax\n1 499\n\nAvg\n1 252.1\n\n1 496 &lt;1%\n\n\nMissing\n---\n\n95%\n1 476\n\nMode\n1 496\n\n1 227 &lt;1%\n\n\nDistinct\n497 (&lt;1%)\n\n75%\n1 380\n\nRange\n499\n\n1 204 &lt;1%\n\n\nDuplicates\n148 899 (99.7%)\n\nMedian\n1 251\n\niQR\n250\n\n1 240 &lt;1%\n\n\nZeros\n---\n\n25%\n1 130\n\nstd\n144.05\n\n1 251 &lt;1%\n\n\nNegative\n---\n\n5%\n1 025\n\nkurt\n-1.20\n\n1 385 &lt;1%\n\n\nRAM (Mb)\n1\n\nMin\n1 000\n\nskew\n-0.02\n\n1 072 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ таблице с информацией о интернет-сессиях 497 уникальных пользователей.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 23: Статистика и топ-10 значений столбца \"id\"\n\n\n\n\n\nValues\n149 396 (100%)\n\n1000_0 &lt;1%\n\n\nMissing\n---\n\n1333_109 &lt;1%\n\n\nDistinct\n149 396 (100%)\n\n1334_0 &lt;1%\n\n\nDuplicated origin\n---\n\n1334_1 &lt;1%\n\n\nDupl (modify - origin)\n---\n\n1334_2 &lt;1%\n\n\nEmpty\n---\n\n1334_3 &lt;1%\n\n\nRAM (Mb)\n8\n\n1334_4 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\n\n1.2.1.5 Таблица tariffs (информация о тарифах)\n\n\nShow the code\ndtype = {'tariff_name': 'category'}\ndf_tariffs = pd.read_csv('https://code.s3.yandex.net/datasets/tariffs.csv', nrows=5)\ndf_tariffs    \n\n\n\n\n\n\n\n\n\nmessages_included\nmb_per_month_included\nminutes_included\nrub_monthly_fee\nrub_per_gb\nrub_per_message\nrub_per_minute\ntariff_name\n\n\n\n\n0\n50\n15360\n500\n550\n200\n3\n3\nsmart\n\n\n1\n1000\n30720\n3000\n1950\n150\n1\n1\nultra\n\n\n\n\n\n\n\nСоберем все датафреймы в словарь для удобства дальнейшей работы.\n\n\nShow the code\ndfs = dict(\n    users = df_users\n    , calls = df_calls\n    , messages = df_messages\n    , internet = df_internet\n    , tariffs = df_tariffs\n)\n\n\n\n\n\n1.2.2 Изучение дубликатов\nПосмотрим на дубли во всем датафрейме\n\n\nShow the code\nfor key, df in dfs.items():\n    display(f'{key} - {pagri_data_tools.check_duplicated(df)}')\n\n\n'users - no duplicates'\n\n\n'calls - no duplicates'\n\n\n'messages - no duplicates'\n\n\n'internet - no duplicates'\n\n\n'tariffs - no duplicates'\n\n\nПолных дубликатов у нас нет в датафреймах\nПосмотрим сколько у нас дублей в каждой колонке\nТаблица users (информация о пользователях)\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df_users)\n\n\n\n\n\n\n\nTable 24: Duplicates\n\n\n\n\n\nage\n442 (88.40%)\n\n\nchurn_date\n466 (93.20%)\n\n\ncity\n424 (84.80%)\n\n\nfirst_name\n254 (50.80%)\n\n\nlast_name\n81 (16.20%)\n\n\nreg_date\n230 (46.00%)\n\n\ntariff\n498 (99.60%)\n\n\n\n\n\n\n\n\nТаблица calls (информация о звонках)\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df_calls)\n\n\n\n\n\n\n\nTable 25: Duplicates\n\n\n\n\n\ncall_date\n202242 (99.82%)\n\n\nduration\n199736 (98.58%)\n\n\nuser_id\n202115 (99.76%)\n\n\n\n\n\n\n\n\nТаблица messages (информация о сообщениях)\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df_messages)\n\n\n\n\n\n\n\nTable 26: Duplicates\n\n\n\n\n\nmessage_date\n122672 (99.70%)\n\n\nuser_id\n122610 (99.65%)\n\n\n\n\n\n\n\n\nТаблица internet (информация об интернет-сессиях)\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df_internet)\n\n\n\n\n\n\n\nTable 27: Duplicates\n\n\n\n\n\nmb_used\n79393 (53.14%)\n\n\nsession_date\n149031 (99.76%)\n\n\nuser_id\n148899 (99.67%)\n\n\n\n\n\n\n\n\nТаблица tariffs (информация о тарифах)\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df_tariffs)\n\n\nThere are no duplicated values\n\n\nДубликаты присутствуют там, где они могут быть, поэтому все в порядке.\nПроверим есть ли у нас в таблице df_users пользователи с одними и теми же именем и фамилией\n\n\nShow the code\nfiltered_df = df_users[['first_name', 'last_name']]\npagri_data_tools.check_duplicated(filtered_df)\n\n\n'no duplicates'\n\n\n\n\n1.2.3 Изучение пропусков\nТаблица users (информация о пользователях)\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df_users)\n\n\n\n\n\n\n\nTable 28: Missings\n\n\n\n\n\nchurn_date\n462 (92.40%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ данном случае пропуски нормально, они означают, что пользователь не прекратил использовать тариф\n\nТаблица calls (информация о звонках)\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df_calls)\n\n\nThere are no missing values\n\n\nТаблица messages (информация о сообщениях)\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df_messages)\n\n\nThere are no missing values\n\n\nТаблица internet (информация об интернет-сессиях)\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df_internet)\n\n\nThere are no missing values\n\n\nТаблица tariffs (информация о тарифах)\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df_tariffs)\n\n\nThere are no missing values\n\n\nОтлично. Пропуски у нас только в колонке с датой прекращения пользования тарифом. И они означают, что пользователь еще пользуется тарифом.\n\n\n1.2.4 Изучение выбросов\nПри изучении каждой колонки по отдельности выбросы не были обнаружены.\nПосмотрим на выбросы используя квантили.\nВыбросами будем считать значения, которые выходят за пределы 5 и 95 квантилей.\nТаблица users (информация о пользователях)\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df_users)\n\n\n\n\n\n\n\nTable 29: Outliers\n\n\n\n\n\nuser_id\n50 (10.00%)\n\n\nage\n49 (9.80%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nОколо 10 процентов пользователей попали в выбросы\n\nТаблица calls (информация о звонках)\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df_calls)\n\n\n\n\n\n\n\nTable 30: Outliers\n\n\n\n\n\nduration\n10105 (4.99%)\n\n\nuser_id\n19650 (9.70%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nОколо 5 процентов звонков попали в выбросы\n\nТаблица messages (информация о сообщениях)\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df_messages)\n\n\n\n\n\n\n\nTable 31: Outliers\n\n\n\n\n\nuser_id\n12030 (9.78%)\n\n\n\n\n\n\n\n\nТаблица internet (информация об интернет-сессиях)\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df_internet)\n\n\n\n\n\n\n\nTable 32: Outliers\n\n\n\n\n\nmb_used\n7470 (5.00%)\n\n\nuser_id\n14401 (9.64%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nОколо 5 процентов интернет-сессий попали в выбросы\n\nТаблица tariffs (информация о тарифах)\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df_tariffs)\n\n\n\n\n\n\n\nTable 33: Outliers\n\n\n\n\n\nmessages_included\n2 (100.00%)\n\n\nmb_per_month_included\n2 (100.00%)\n\n\nminutes_included\n2 (100.00%)\n\n\nrub_monthly_fee\n2 (100.00%)\n\n\nrub_per_gb\n2 (100.00%)\n\n\nrub_per_message\n2 (100.00%)\n\n\nrub_per_minute\n2 (100.00%)\n\n\n\n\n\n\n\n\n\n\n1.2.5 Изучение отрицательных значений\nПосмотрим есть ли у нас отрицательные значения\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df_users)\n\n\nThere are no negative values\n\n\nТаблица calls (информация о звонках)\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df_calls)\n\n\nThere are no negative values\n\n\nТаблица messages (информация о сообщениях)\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df_messages)\n\n\nThere are no negative values\n\n\nТаблица internet (информация об интернет-сессиях)\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df_internet)\n\n\nThere are no negative values\n\n\nТаблица tariffs (информация о тарифах)\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df_tariffs)\n\n\nThere are no negative values\n\n\nОтлично. Отрицательных значений нет.\n\n\n1.2.6 Изучение нулевых значений\nПосмотрим есть ли у нас колонки с нулевыми значениями\n\n\nShow the code\nseries_zeros = pagri_data_tools.find_columns_with_zeros_values(df_users)\n\n\nThere are no zeros values\n\n\nТаблица calls (информация о звонках)\n\n\nShow the code\nseries_zeros_calls = pagri_data_tools.find_columns_with_zeros_values(df_calls)\n\n\n\n\n\n\n\nTable 34: Zeros\n\n\n\n\n\nduration\n39613 (19.55%)\n\n\n\n\n\n\n\n\nТаблица messages (информация о сообщениях)\n\n\nShow the code\nseries_zeros = pagri_data_tools.find_columns_with_zeros_values(df_messages)\n\n\nThere are no zeros values\n\n\nТаблица internet (информация об интернет-сессиях)\n\n\nShow the code\nseries_zeros_internet = pagri_data_tools.find_columns_with_zeros_values(df_internet)\n\n\n\n\n\n\n\nTable 35: Zeros\n\n\n\n\n\nmb_used\n19598 (13.12%)\n\n\n\n\n\n\n\n\nТаблица tariffs (информация о тарифах)\n\n\nShow the code\nseries_zeros = pagri_data_tools.find_columns_with_zeros_values(df_tariffs)\n\n\nThere are no zeros values\n\n\nУ нас нули в длительности звонков и в объеме интернет-трафика.\n\n\nShow the code\nduration_zeros = series_zeros_calls['duration']\nmb_used_zeros = series_zeros_internet['mb_used']\n\n\n\n\nShow the code\ncommon_users_with_zeros = set(duration_zeros['user_id']).intersection(set(df_internet['user_id']))\nlen(common_users_with_zeros)\n\n\n491\n\n\nЛишь 488 одинаковых пользователей. Получается нет зависимости от пользователей.\nПосмотрим в разрезе названия тарифа на нулевые значения\n\n\nShow the code\nduration_merged = pd.merge(duration_zeros[['user_id', 'duration']], df_users[['user_id', 'tariff']])\n\n\n\n\nShow the code\nduration_merged.groupby('tariff', observed=True).size().to_frame('count')\n\n\n\n\n\n\n\n\n\ncount\n\n\ntariff\n\n\n\n\n\nsmart\n25669\n\n\nultra\n13944\n\n\n\n\n\n\n\nНаблюдения:\n\nЗависимость от тарифа не обнаружена.\n\n\n\n\n1.3 Промежуточный вывод\n\nВ колонке с датой прекращения пользования тарифом 92 % пропусков. Значит 92 % пользователей ещё пользуются тарифом.\nЕсть пропущенные недели и дни в дате прекращения пользования тарифом, но в данном случае это нормально.\n\nВ колонке с датой подключения тарифа 26 % дней пропущено.\nВ таблице users 500 уникальных пользователей.\nПользователи имеют возраст от 18 до 75 лет\nВ основном пользователи имеют возраст от 32 до 62 лет.\nБольше всего пользователей из Москвы и Санкт-Петербурга.\nУ большинства (70%) пользователей тариф smart\nВ колонке с длительностью звонка 20 процентов нулей.\nМаксимальная длительность звонка 38 минут.\nДлительность звонка варьируется от 0 до 38 минут.\nВ основном длительность звонка находится в диапазоне от 1.3 до 10.7 минут.\nЧаще всего звонок составляет 0 минут.\nВ таблице users 492 уникальных пользователя.\nВ колонке с объемом интернет-трафика 13 процентов нулей.\nЗа одну сессию пользователи тратят от 0 до 1 724.83 мегабайт\nВ основном пользователи тратят от 138.19 до 559.55 мегабайт\nВ таблице с информацией о интернет-сессиях 497 уникальных пользователей."
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#предобработка-данных",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#предобработка-данных",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "2. Предобработка данных",
    "text": "2. Предобработка данных\n\n2.1 Обработка выбросов\nУ нас нулевые значения в таблице calls в поле duration.\nИ у нас нулевые значения в таблице internet в поле mb_used.\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df_calls)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\nduration\n39613 (19.6%)\n\n\n\n\n\n\n\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df_internet)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\nmb_used\n19598 (13.1%)\n\n\n\n\n\n\n\nВ длительности звонков нулями обозначены пропущенные звонки, поэтому их обрабатывать не нужно.\nНули в объеме трафика тоже нормально.\n\n\n2.2 Обработка пропусков\nПропуски у нас только в колонке с датой прекращения пользования тарифом. И они означают, что пользователь еще пользуется тарифом.\nНе будем их обрабатывать.\n\n\n2.3 Промежуточный вывод\n\nНе стали обрабатывать пропуски в дате прекращения пользования тарифом, так как эти пропуски показывают, что пользователь ещё пользуется тарифом.\n\nНули в длительности звонка и в объеме интернет трафика не стали обрабатывать, чтобы не исказить данные.\nДля удобства в таблице пользователей в поле является ли пользователь активным изменили значения на ‘да’, ‘нет’"
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#обогащение-данных-и-создание-новых-переменных",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#обогащение-данных-и-создание-новых-переменных",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "3. Обогащение данных и создание новых переменных",
    "text": "3. Обогащение данных и создание новых переменных\n\n3.1 Категоризация данных\nСоздадим новую категориальную переменную активен ли тариф\n\n\nShow the code\ndf_users['is_active'] = df_users['churn_date'].isna().astype('category')\n\n\nПриведем значения к более удобному виду.\n\n\nShow the code\ndf_users.is_active = df_users.is_active.astype(str).map({'True': 'да', 'False': 'нет'}).astype('category')\n\n\nСоздадим новую категориальную переменную с возрастными группами.\nСделаем следующие группы\n\nдо 30 лет\nот 30 до 40 лет\nот 40 до 50 лет\nот 50 до 60 лет\nстарше 60 лет\n\n\n\nShow the code\nlabels = ['до 30', '30-40', '40-50', '50-60', 'старше 60']\nbins = [-np.inf, 30, 40, 50, 60, np.inf]\n\n\n\n\nShow the code\ndf_users['age_cat'] = pagri_data_tools.create_category_column(df_users.age, labels=labels, bins=bins)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_users, column='age_cat', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 36: Статистика и топ-10 значений столбца \"age_cat\"\n\n\n\n\n\nValues\n500 (100%)\n\nстарше 60 (26%)\n\n\nMissing\n---\n\nдо 30 (23%)\n\n\nDistinct\n5 (1%)\n\n40-50 (18%)\n\n\nDuplicated origin\n495 (99%)\n\n50-60 (17%)\n\n\nDupl (modify - origin)\n---\n\n30-40 (16%)\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nБольшинство пользователей в возрасте старше 60 лет.\n\nСоздадим новую категориальную переменную из длительности звонка.\nПосмотрим на распределение длительности звонка по квантилям.\n\n\nShow the code\npagri_data_tools.quantiles_columns(df_calls.duration)\n\n\n\n\n\n\n\nTable 37: Quantiles\n\n\n\n\n\nMax\n38\n\n\n95\n17.52\n\n\n75\n10.7\n\n\n50\n6\n\n\n25\n1.3\n\n\n5\n0\n\n\nMin\n0\n\n\n\n\n\n\n\n\nСделаем следующие группы\n\nкороткий\nсредний\nдлительный\n\n\n\nShow the code\nlabels = ['короткий', 'средний', 'длительный']\nbins = [-np.inf, 2, 10, np.inf]\n\n\n\n\nShow the code\ndf_calls['duration_cat'] = pagri_data_tools.create_category_column(df_calls.duration, labels=labels, bins=bins)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_calls, column='duration_cat', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 38: Статистика и топ-10 значений столбца \"duration_cat\"\n\n\n\n\n\nValues\n202 607 (100%)\n\nсредний (43%)\n\n\nMissing\n---\n\nдлительный (28%)\n\n\nDistinct\n3 (&lt;1%)\n\nкороткий (28%)\n\n\nDuplicated origin\n202 604 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nБольшинство звонков средней длительности.\n\nСоздадим новую категориальную переменную из объема интернет трафика.\nПосмотрим на распределение длительности звонка по квантилям.\n\n\nShow the code\npagri_data_tools.quantiles_columns(df_internet.mb_used)\n\n\n\n\n\n\n\nTable 39: Quantiles\n\n\n\n\n\nMax\n1 724.83\n\n\n95\n866.52\n\n\n75\n559.55\n\n\n50\n348.01\n\n\n25\n138.19\n\n\n5\n0\n\n\nMin\n0\n\n\n\n\n\n\n\n\nСделаем следующие группы\n\nнизкий\nсредний\nвысокий\n\n\n\nShow the code\nlabels = ['низкий', 'средний', 'высокий']\nbins = [-np.inf, 100, 600, np.inf]\n\n\n\n\nShow the code\ndf_internet['mb_used_cat'] = pagri_data_tools.create_category_column(df_internet.mb_used, labels=labels, bins=bins)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_internet, column='mb_used_cat', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 40: Статистика и топ-10 значений столбца \"mb_used_cat\"\n\n\n\n\n\nValues\n149 396 (100%)\n\nсредний (58%)\n\n\nMissing\n---\n\nнизкий (21%)\n\n\nDistinct\n3 (&lt;1%)\n\nвысокий (21%)\n\n\nDuplicated origin\n149 393 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nОсновная часть трафика среднего объема.\n\nСоздаем новые переменные из времени\n\n\nShow the code\nweekday_dict = {\n    'Monday': 'Понедельник',\n    'Tuesday': 'Вторник',\n    'Wednesday': 'Среда',\n    'Thursday': 'Четверг',\n    'Friday': 'Пятница',\n    'Saturday': 'Суббота',\n    'Sunday': 'Воскресенье'\n}\nmonth_dict = {\n    1: 'Январь',\n    2: 'Февраль',\n    3: 'Март',\n    4: 'Апрель',\n    5: 'Май',\n    6: 'Июнь',\n    7: 'Июль',\n    8: 'Август',\n    9: 'Сентябрь',\n    10: 'Октябрь',\n    11: 'Ноябрь',\n    12: 'Декабрь'\n}\n\n\n\n\nShow the code\ndf_users['reg_date_weekday'] = df_users['reg_date'].dt.day_name().map(weekday_dict).astype('category')\ndf_users['reg_date_month'] = df_users['reg_date'].dt.month.map(month_dict).astype('category')\n# Задаем порядок для weekdays\nweekday_order = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']\ndf_users['reg_date_weekday'] = df_users['reg_date_weekday'].cat.reorder_categories(weekday_order, ordered=True)\n\n# Задаем порядок для months\nmonth_order = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']\ndf_users['reg_date_month'] = df_users['reg_date_month'].cat.reorder_categories(month_order, ordered=True)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_users, column='reg_date_weekday', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 41: Статистика и топ-10 значений столбца \"reg_date_weekday\"\n\n\n\n\n\nValues\n500 (100%)\n\nВторник (17%)\n\n\nMissing\n---\n\nПятница (16%)\n\n\nDistinct\n7 (1%)\n\nПонедельник (15%)\n\n\nDuplicated origin\n493 (99%)\n\nВоскресенье (14%)\n\n\nDupl (modify - origin)\n---\n\nСуббота (14%)\n\n\nEmpty\n---\n\nСреда (13%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nЧетверг (12%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_users, column='reg_date_month', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 42: Статистика и топ-10 значений столбца \"reg_date_month\"\n\n\n\n\n\nValues\n500 (100%)\n\nАпрель (11%)\n\n\nMissing\n---\n\nАвгуст (10%)\n\n\nDistinct\n12 (2%)\n\nОктябрь (9%)\n\n\nDuplicated origin\n488 (98%)\n\nИюль (9%)\n\n\nDupl (modify - origin)\n---\n\nЯнварь (9%)\n\n\nEmpty\n---\n\nНоябрь (8%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nМай (8%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\n\nShow the code\ndf_calls['call_date_weekday'] = df_calls['call_date'].dt.day_name().map(weekday_dict).astype('category')\ndf_calls['call_date_month'] = df_calls['call_date'].dt.month.map(month_dict).astype('category')\n# Задаем порядок для weekdays\nweekday_order = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']\ndf_calls['call_date_weekday'] = df_calls['call_date_weekday'].cat.reorder_categories(weekday_order, ordered=True)\n\n# Задаем порядок для months\nmonth_order = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']\ndf_calls['call_date_month'] = df_calls['call_date_month'].cat.reorder_categories(month_order, ordered=True)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_calls, column='call_date_weekday', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 43: Статистика и топ-10 значений столбца \"call_date_weekday\"\n\n\n\n\n\nValues\n202 607 (100%)\n\nПонедельник (15%)\n\n\nMissing\n---\n\nВоскресенье (15%)\n\n\nDistinct\n7 (&lt;1%)\n\nСуббота (14%)\n\n\nDuplicated origin\n202 600 (99.9%)\n\nПятница (14%)\n\n\nDupl (modify - origin)\n---\n\nЧетверг (14%)\n\n\nEmpty\n---\n\nВторник (14%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nСреда (14%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_calls, column='call_date_month', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 44: Статистика и топ-10 значений столбца \"call_date_month\"\n\n\n\n\n\nValues\n202 607 (100%)\n\nДекабрь (17%)\n\n\nMissing\n---\n\nНоябрь (15%)\n\n\nDistinct\n12 (&lt;1%)\n\nОктябрь (13%)\n\n\nDuplicated origin\n202 595 (99.9%)\n\nСентябрь (12%)\n\n\nDupl (modify - origin)\n---\n\nАвгуст (11%)\n\n\nEmpty\n---\n\nИюль (9%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nИюнь (7%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nБольше всего звонков было в декабре и ноябре.\n\n\n\nShow the code\ndf_messages['message_date_weekday'] = df_messages['message_date'].dt.day_name().map(weekday_dict).astype('category')\ndf_messages['message_date_month'] = df_messages['message_date'].dt.month.map(month_dict).astype('category')\n# Задаем порядок для weekdays\nweekday_order = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']\ndf_messages['message_date_weekday'] = df_messages['message_date_weekday'].cat.reorder_categories(weekday_order, ordered=True)\n\n# Задаем порядок для months\nmonth_order = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']\ndf_messages['message_date_month'] = df_messages['message_date_month'].cat.reorder_categories(month_order, ordered=True)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_messages, column='message_date_weekday', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 45: Статистика и топ-10 значений столбца \"message_date_weekday\"\n\n\n\n\n\nValues\n123 036 (100%)\n\nПонедельник (15%)\n\n\nMissing\n---\n\nВоскресенье (14%)\n\n\nDistinct\n7 (&lt;1%)\n\nСуббота (14%)\n\n\nDuplicated origin\n123 029 (99.9%)\n\nПятница (14%)\n\n\nDupl (modify - origin)\n---\n\nСреда (14%)\n\n\nEmpty\n---\n\nЧетверг (14%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nВторник (14%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_messages, column='message_date_month', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 46: Статистика и топ-10 значений столбца \"message_date_month\"\n\n\n\n\n\nValues\n123 036 (100%)\n\nДекабрь (17%)\n\n\nMissing\n---\n\nНоябрь (15%)\n\n\nDistinct\n12 (&lt;1%)\n\nОктябрь (14%)\n\n\nDuplicated origin\n123 024 (99.9%)\n\nСентябрь (12%)\n\n\nDupl (modify - origin)\n---\n\nАвгуст (11%)\n\n\nEmpty\n---\n\nИюль (9%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nИюнь (7%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nБольше всего звонков было в декабре и ноябре.\n\n\n\nShow the code\ndf_internet['session_date_weekday'] = df_internet['session_date'].dt.day_name().map(weekday_dict).astype('category')\ndf_internet['session_date_month'] = df_internet['session_date'].dt.month.map(month_dict).astype('category')\n# Задаем порядок для weekdays\nweekday_order = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']\ndf_internet['session_date_weekday'] = df_internet['session_date_weekday'].cat.reorder_categories(weekday_order, ordered=True)\n\n# Задаем порядок для months\nmonth_order = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']\ndf_internet['session_date_month'] = df_internet['session_date_month'].cat.reorder_categories(month_order, ordered=True)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_internet, column='session_date_weekday', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 47: Статистика и топ-10 значений столбца \"session_date_weekday\"\n\n\n\n\n\nValues\n149 396 (100%)\n\nПонедельник (15%)\n\n\nMissing\n---\n\nВоскресенье (15%)\n\n\nDistinct\n7 (&lt;1%)\n\nПятница (14%)\n\n\nDuplicated origin\n149 389 (99.9%)\n\nЧетверг (14%)\n\n\nDupl (modify - origin)\n---\n\nСуббота (14%)\n\n\nEmpty\n---\n\nСреда (14%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nВторник (14%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_internet, column='session_date_month', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 48: Статистика и топ-10 значений столбца \"session_date_month\"\n\n\n\n\n\nValues\n149 396 (100%)\n\nДекабрь (17%)\n\n\nMissing\n---\n\nНоябрь (15%)\n\n\nDistinct\n12 (&lt;1%)\n\nОктябрь (13%)\n\n\nDuplicated origin\n149 384 (99.9%)\n\nСентябрь (12%)\n\n\nDupl (modify - origin)\n---\n\nАвгуст (11%)\n\n\nEmpty\n---\n\nИюль (9%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nИюнь (7%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\nБольше всего тратили интернет трафик в декабре и ноябре.\n\n\n\n3.2 Объединение данных\nСоздадим дополнительные таблицы для анализа\nСоздадим отдельные таблицы для анализа выручки для звонков, сообщений и интернета.\n\n\nShow the code\nprint('len of df_calls = ', len(df_calls))\nprint('len of df_messages = ', len(df_messages))\nprint('len of df_internet = ', len(df_internet))\n\n\nlen of df_calls =  202607\nlen of df_messages =  123036\nlen of df_internet =  149396\n\n\n\n\nShow the code\ndf_calls_full = df_calls.merge(df_users, on='user_id', how='left')\ndf_messages_full = df_messages.merge(df_users, on='user_id', how='left')\ndf_internet_full = df_internet.merge(df_users, on='user_id', how='left')\n\n\n\n\nShow the code\nprint('len of calls_users = ', len(df_calls_full))\nprint('len of messages_users = ', len(df_messages_full))\nprint('len of internet_users = ', len(df_internet_full))\n\n\nlen of calls_users =  202607\nlen of messages_users =  123036\nlen of internet_users =  149396\n\n\nКоличество строк не изменилось, все хорошо.\n\n\n3.3 Расчет метрик\nДля каждого пользователя рассчитаем длительность пользования сервисом\n\n\nShow the code\ndf_calls_users_last_activity = df_calls.groupby('user_id')[['call_date']].agg(last_activity_date=('call_date', 'max')).reset_index()\ndf_messages_users_last_activity = df_messages.groupby('user_id')[['message_date']].agg(last_activity_date=('message_date', 'max')).reset_index()\ndf_internet_users_last_activity = df_internet.groupby('user_id')[['session_date']].agg(last_activity_date=('session_date', 'max')).reset_index()\n\n\n\n\nShow the code\ndf_users_last_activity = pd.concat([df_calls_users_last_activity, df_messages_users_last_activity, df_internet_users_last_activity])\ndf_users_last_activity = df_users_last_activity.groupby('user_id').max()\n\n\n\n\nShow the code\ndf_users = df_users.merge(df_users_last_activity, on='user_id', how='left')\n\n\n\n\nShow the code\ndf_users[df_users.last_activity_date.isna()]\n\n\n\n\n\n\n\n\n\nuser_id\nage\nchurn_date\ncity\nfirst_name\nlast_name\nreg_date\ntariff\nis_active\nage_cat\nreg_date_weekday\nreg_date_month\nlast_activity_date\n\n\n\n\n128\n1128\n51\n2018-12-23\nВолжский\nКсения\nАгаева\n2018-12-15\nultra\nнет\n50-60\nСуббота\nДекабрь\nNaT\n\n\n371\n1371\n50\n2018-12-30\nОмск\nИриней\nТрофимов\n2018-12-25\nsmart\nнет\n40-50\nВторник\nДекабрь\nNaT\n\n\n\n\n\n\n\nУ нас 2 пользователя с na в last_activity_date, так как они уже ушли, заменим пропуски на churn_date\n\n\nShow the code\ndf_users.loc[df_users.last_activity_date.isna(), 'last_activity_date'] = df_users.churn_date\ndf_users[df_users.last_activity_date.isna()]\n\n\n\n\n\n\n\n\n\nuser_id\nage\nchurn_date\ncity\nfirst_name\nlast_name\nreg_date\ntariff\nis_active\nage_cat\nreg_date_weekday\nreg_date_month\nlast_activity_date\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ndf_users['using_duration'] = (df_users['last_activity_date'] - df_users['reg_date']).dt.days.astype(int)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_users, column='using_duration', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 49: Статистика и гистограмма столбца \"using_duration\"\n\n\n\n\n\nValues\n500 (100%)\n\nMax\n364\n\nAvg\n179.47\n\n217 (2%)\n\n\nMissing\n---\n\n95%\n344\n\nMode\n217\n\n87 &lt;1%\n\n\nDistinct\n268 (54%)\n\n75%\n264\n\nRange\n364\n\n222 &lt;1%\n\n\nDuplicates\n232 (46%)\n\nMedian\n177\n\niQR\n175.25\n\n121 &lt;1%\n\n\nZeros\n3 (1%)\n\n25%\n88.75\n\nstd\n102.75\n\n361 &lt;1%\n\n\nNegative\n---\n\n5%\n21.95\n\nkurt\n-1.15\n\n317 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.05\n\n272 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\nДлительность использования тарифа лежит в диапазоне от 0 до 364 дней.\nВ основном пользователи используют тарифы от 88.75 до 264 дняй.\n\nСоздадим таблицу с аггрегацией по месяцам и рассчитаем различные метрики\n\n\nShow the code\ndf_calls_by_month_for_revenue = df_calls.groupby(['user_id', 'call_date_month'], observed=True)[['duration']].agg(duration=('duration', 'sum'), avg_duration=('duration', 'mean')).reset_index().rename(columns={'call_date_month': 'month'})\nlen(df_calls_by_month_for_revenue)\n\n\n3174\n\n\n\n\nShow the code\ndf_messages_by_month_for_revenue = df_messages.groupby(['user_id', 'message_date_month'], observed=True)[['id']].agg(message_cnt=('id', 'count')).reset_index().rename(columns={'message_date_month': 'month'})\nlen(df_messages_by_month_for_revenue)\n\n\n2717\n\n\n\n\nShow the code\ndf_internet_by_month_for_revenue = df_internet.groupby(['user_id', 'session_date_month'], observed=True)[['mb_used']].agg(mb_used=('mb_used', 'sum'), avg_mb_used=('mb_used', 'mean')).reset_index().rename(columns={'session_date_month': 'month'}).round(2)\nlen(df_internet_by_month_for_revenue)\n\n\n3203\n\n\nОбъединим таблицы\n\n\nShow the code\ndf_by_userid_month = df_calls_by_month_for_revenue.merge(df_messages_by_month_for_revenue, on=['user_id', 'month'], how='outer')\nlen(df_by_userid_month)\n\n\n3213\n\n\n\n\nShow the code\ndf_by_userid_month = df_by_userid_month.merge(df_internet_by_month_for_revenue, on=['user_id', 'month'], how='outer')\nlen(df_by_userid_month)\n\n\n3214\n\n\n\n\nShow the code\ndf_by_userid_month = df_by_userid_month.merge(df_users, on='user_id')\nlen(df_by_userid_month)\n\n\n3214\n\n\n\n\nShow the code\ndf_by_userid_month = df_by_userid_month.merge(df_tariffs.rename(columns={'tariff_name': 'tariff'}), on='tariff')\nlen(df_by_userid_month)\n\n\n3214\n\n\nЗанулим пропуски, чтобы рассчитать общую выручку.\n\n\nShow the code\ndf_by_userid_month.duration = df_by_userid_month.duration.fillna(0)\ndf_by_userid_month.message_cnt = df_by_userid_month.message_cnt.fillna(0)\ndf_by_userid_month.mb_used = df_by_userid_month.mb_used.fillna(0)\n\n\nРассчитаем выручку\n\n\nShow the code\ndf_by_userid_month['revenue'] = ((df_by_userid_month.duration - df_by_userid_month.minutes_included) * df_by_userid_month.rub_per_minute).clip(lower=0)\ndf_by_userid_month['revenue'] += ((df_by_userid_month.message_cnt - df_by_userid_month.messages_included) * df_by_userid_month.rub_per_message).clip(lower=0)\ndf_by_userid_month['revenue'] += ((df_by_userid_month.mb_used - df_by_userid_month.mb_per_month_included) / 1024 * df_by_userid_month.rub_per_gb).clip(lower=0)\ndf_by_userid_month['revenue'] += df_by_userid_month.rub_monthly_fee\ndf_by_userid_month['revenue'] = df_by_userid_month['revenue'].round(2)\n\n\nИзучим отдельно столбец с выручкой\n Вернуться к выводам\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_by_userid_month, column='revenue', mode='column')\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 50: Статистика и гистограмма столбца \"revenue\"\n\n\n\n\n\nValues\n3 214 (100%)\n\nMax\n6 542.88\n\nAvg\n1 461.88\n\n1 950 (27%)\n\n\nMissing\n---\n\n95%\n2 758.03\n\nMode\n1 950\n\n550 (19%)\n\n\nDistinct\n1 677 (52%)\n\n75%\n1 950\n\nRange\n5 992.88\n\n553 &lt;1%\n\n\nDuplicates\n1 537 (48%)\n\nMedian\n1 514.19\n\niQR\n1 293.06\n\n589 &lt;1%\n\n\nZeros\n---\n\n25%\n656.94\n\nstd\n777.96\n\n616 &lt;1%\n\n\nNegative\n---\n\n5%\n550\n\nkurt\n1.28\n\n604 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n550\n\nskew\n0.75\n\n568 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nНа гистограмме выручки присутствуют 2 пика. Это связано с абонентской платой, так как у нас 2 тарифа\nМесячная выручка по пользователем варьируется от 550 до 6 542.88 рублей.\nВ основном выручка лежит в диапазоне от 656.94 до 1 950 рублей.\nВ тарифе премиум чаще не превышают лимит по тарифу. Это видно по самым распространенным значениям в выручке.\n\nРассчитаем среднее количество звонков в день\n\n\nShow the code\ncalls_metrics = df_calls.groupby(['user_id', 'call_date_month'], observed=True).agg(\n    total_calls=('id', 'count'),\n    active_days_calls=('call_date', 'nunique')\n).reset_index().rename(columns={'call_date_month': 'month'})\n\n\n\n\nShow the code\ndf_by_userid_month = df_by_userid_month.merge(calls_metrics, on=['user_id', 'month'], how='left')\n\n\n\n\nShow the code\ndf_by_userid_month['calls_per_day'] = df_by_userid_month['total_calls'] / df_by_userid_month['active_days_calls']\ndf_by_userid_month[['total_calls', 'active_days_calls', 'calls_per_day']] = df_by_userid_month[['total_calls', 'active_days_calls', 'calls_per_day']].fillna(0)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_by_userid_month, column='calls_per_day', mode='column')\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 51: Статистика и гистограмма столбца \"calls_per_day\"\n\n\n\n\n\nValues\n3 214 (100%)\n\nMax\n100\n\nAvg\n2.65\n\n3 (2%)\n\n\nMissing\n---\n\n95%\n4.2\n\nMode\n3\n\n2 (2%)\n\n\nDistinct\n724 (23%)\n\n75%\n3\n\nRange\n100\n\n1 (1%)\n\n\nDuplicates\n2 490 (77%)\n\nMedian\n2.48\n\niQR\n1.05\n\n2.5 (1%)\n\n\nZeros\n40 (1%)\n\n25%\n1.95\n\nstd\n2.58\n\n0 (1%)\n\n\nNegative\n---\n\n5%\n1.37\n\nkurt\n854.13\n\n1.5 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n25.89\n\n2.33 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nСредняя количество звонков в день варьируется от 0 до 100.\nВ основном пользователи совершают от 1.95 до 3 звонков в день.\n\nСреднее количество сообщений в день\n\n\nShow the code\nmessages_metrics = df_messages.groupby(['user_id', 'message_date_month'], observed=True).agg(\n    total_messages=('id', 'count'),\n    active_days_messages=('message_date', 'nunique')\n).reset_index().rename(columns={'message_date_month': 'month'})\n\n\n\n\nShow the code\ndf_by_userid_month = df_by_userid_month.merge(messages_metrics, on=['user_id', 'month'], how='left')\n\n\n\n\nShow the code\ndf_by_userid_month['messages_per_day'] = df_by_userid_month['total_messages'] / df_by_userid_month['active_days_messages']\ndf_by_userid_month[['total_messages', 'active_days_messages', 'messages_per_day']] = df_by_userid_month[['total_messages', 'active_days_messages', 'messages_per_day']].fillna(0)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_by_userid_month, column='messages_per_day', mode='column')\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 52: Статистика и гистограмма столбца \"messages_per_day\"\n\n\n\n\n\nValues\n3 214 (100%)\n\nMax\n51.67\n\nAvg\n1.8\n\n0 (15%)\n\n\nMissing\n---\n\n95%\n3.83\n\nMode\n0\n\n1 (6%)\n\n\nDistinct\n622 (19%)\n\n75%\n2.33\n\nRange\n51.67\n\n2 (2%)\n\n\nDuplicates\n2 592 (81%)\n\nMedian\n1.67\n\niQR\n1.15\n\n1.33 (2%)\n\n\nZeros\n497 (15%)\n\n25%\n1.18\n\nstd\n1.64\n\n1.5 (2%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n312.94\n\n1.25 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n12.08\n\n1.67 (1%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nСредняя количество сообщений в день варьируется от 0 до 51.67\nВ основном пользователи отправляют от 1.18 до 2.33 сообщений в день.\n\nСреднее количество интернет сессий в день\n\n\nShow the code\ninternet_metrics = df_internet.groupby(['user_id', 'session_date_month'], observed=True).agg(\n    total_sessions=('id', 'count'),\n    active_days_internet=('session_date', 'nunique')\n).reset_index().rename(columns={'session_date_month': 'month'})\n\n\n\n\nShow the code\ndf_by_userid_month = df_by_userid_month.merge(internet_metrics, on=['user_id', 'month'], how='left')\n\n\n\n\nShow the code\ndf_by_userid_month['sessions_per_day'] = df_by_userid_month['total_sessions'] / df_by_userid_month['active_days_internet']\ndf_by_userid_month[['total_sessions', 'active_days_internet', 'sessions_per_day']] = df_by_userid_month[['total_sessions', 'active_days_internet', 'sessions_per_day']].fillna(0)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_by_userid_month, column='sessions_per_day', mode='column')\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 53: Статистика и гистограмма столбца \"sessions_per_day\"\n\n\n\n\n\nValues\n3 214 (100%)\n\nMax\n58\n\nAvg\n2.13\n\n2 (5%)\n\n\nMissing\n---\n\n95%\n2.85\n\nMode\n2\n\n1.5 (2%)\n\n\nDistinct\n504 (16%)\n\n75%\n2.35\n\nRange\n58\n\n1.67 (1%)\n\n\nDuplicates\n2 710 (84%)\n\nMedian\n2.05\n\niQR\n0.6\n\n2.33 (1%)\n\n\nZeros\n11 (&lt;1%)\n\n25%\n1.75\n\nstd\n1.74\n\n1.75 &lt;1%\n\n\nNegative\n---\n\n5%\n1.33\n\nkurt\n704.02\n\n2.5 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n24.83\n\n1 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nПользователи проводят от 0 до 58 интернет-сессий в день.\nВ основном пользователи проводят от 1.75 до 2.35 интернет-сессии в день.\n\nСредняя длина звонка\n\n\nShow the code\ndf_by_userid_month['avg_call_duration'] = (df_by_userid_month['duration'] / df_by_userid_month['total_calls']).round(2)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_by_userid_month, column='sessions_per_day', mode='column')\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 54: Статистика и гистограмма столбца \"sessions_per_day\"\n\n\n\n\n\nValues\n3 214 (100%)\n\nMax\n58\n\nAvg\n2.13\n\n2 (5%)\n\n\nMissing\n---\n\n95%\n2.85\n\nMode\n2\n\n1.5 (2%)\n\n\nDistinct\n504 (16%)\n\n75%\n2.35\n\nRange\n58\n\n1.67 (1%)\n\n\nDuplicates\n2 710 (84%)\n\nMedian\n2.05\n\niQR\n0.6\n\n2.33 (1%)\n\n\nZeros\n11 (&lt;1%)\n\n25%\n1.75\n\nstd\n1.74\n\n1.75 &lt;1%\n\n\nNegative\n---\n\n5%\n1.33\n\nkurt\n704.02\n\n2.5 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n24.83\n\n1 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nСредняя длительность звонка в день варьируется от 0 до 58 минут.\nВ основном звонки длятся от 1.75 до 2.35 минут.\n\nARPU\n\n\nShow the code\ndf_arpu = df_by_userid_month.groupby(['month', 'city', 'is_active', 'age_cat', 'tariff'], observed=True).agg(\n    revenue = ('revenue', 'sum'),\n    users = ('user_id', 'nunique')).reset_index()\ndf_arpu['arpu'] = df_arpu['revenue'] / df_arpu['users']\n\n\n\n\n3.4 Промежуточный вывод\n\nНа гистограмме выручки присутствуют 2 пика. Это связано с абонентской платой, так как у нас 2 тарифа\nМесячная выручка по пользователем варьируется от 550 до 6 542.88 рублей.\nВ основном выручка лежит в диапазоне от 656.94 до 1 950 рублей.\nВ тарифе премиум чаще не превышают лимит по тарифу. Это видно по самым распространенным значениям в выручке.\n\nСредняя количество звонков в день варьируется от 0 до 100.\nВ основном пользователи совершают от 1.95 до 3 звонков в день.\nСредняя количество сообщений в день варьируется от 0 до 51.67\nВ основном пользователи отправляют от 1.18 до 2.33 сообщений в день.\nПользователи проводят от 0 до 58 интернет-сессий в день.\nВ основном пользователи проводят от 1.75 до 2.35 интернет-сессии в день.\nСредняя длительность звонка в день варьируется от 0 до 58 минут.\nВ основном звонки длятся от 1.75 до 2.35 минут.\nСоздадим новую категориальную переменную активен ли тариф\nСоздадим новую категориальную переменную с возрастными группами.\n\nБольшинство пользователей в возрасте старше 60 лет.\nСоздадим новую категориальную переменную из длительности звонка.\n\nБольшинство звонков средней длительности.\nСоздадим новую категориальную переменную из объема интернет трафика.\n\nОсновная часть трафика среднего объема.\n\nИз временных переменных создали новые переменные месяц и день недели\nБольше всего звонков было в декабре и ноябре.\nСоздали отдельные таблицы для анализа выручки для звонков, сообщений и интернета.\nСоздали таблицу с аггрегацией по пользователю и месяцу. И рассчитали следующие метрики\n\nвыручка\nсреднее количество звонков в день\nсреднее количество сообщений в день\nсреднее количество интернет-сессий день\nсредняя длина звонка\n\nСоздали таблицу для анализа arpu по разным категориальным переменным."
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#визуализация-взаимосвязей-переменных",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#визуализация-взаимосвязей-переменных",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "4. Визуализация взаимосвязей переменных",
    "text": "4. Визуализация взаимосвязей переменных\n\n4.1 Исследование корреляционных связей\n\n\nShow the code\ntitles_for_axis= dict(\n        calls_per_day = 'среднее количество звонков в день',\n        sessions_per_day = 'среднее количество интернет-сессий в день',\n        revenue = 'выручка',\n        mb_used = 'количество интернет-трафика',\n)\npagri_data_tools.heatmap_corr(df_by_userid_month[['sessions_per_day', 'calls_per_day', 'revenue', 'mb_used']], titles_for_axis= titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСильная положительная корреляция между количеством интернет-сессий в день и количеством звонков в день\nУмеренная положительная корреляция между выручкой и количеством интернет трафика в день\n\n\n\n4.2 Изучение зависимостей между числовыми переменными\nПостроим диаграммы рассеяния для числовых переменных\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    revenue = 'выручка'\n    , mb_used = 'кол-во трафика, мб / месяц'\n    , duration = 'длительность звонков, мин / месяц'\n    , active_days_internet = 'дней интернет сессий в месяц'    \n    , total_calls = 'кол-во звонков в месяц'\n    , total_sessions = 'кол-во интернет сессий в месяц'\n)\n\n\n\n\nShow the code\npairs = {('duration', 'mb_used'): {'duration': [np.float64(0.0), np.float64(1578.06)], 'mb_used': [np.float64(0.0), np.float64(49745.69)]}, ('mb_used', 'active_days_internet'): {'mb_used': [np.float64(0.0), np.float64(49745.69)], 'active_days_internet': [np.float64(0.0), np.float64(31.0)]}, ('total_calls', 'total_sessions'): {'total_calls': [np.float64(0.0), np.float64(244.0)], 'total_sessions': [np.float64(0.0), np.float64(118.0)]}}\npagri_data_tools.pairplot_pairs(df_by_userid_month, pairs, titles_for_axis=titles_for_axis, horizontal_spacing=0.12, rows=1, cols=3, height=400, width=1000) # .show(config=dict(displayModeBar=False, dpi=200), renderer=\"png\")\n\n\n                                                \n\n\nНаблюдения:\n\nЧем больше длительность звонка в минутах, тем больше количество интернет-трафика. Правда зависимость слабая.\nЧем больше количество дней интернет сессий, тем больше количество интернет-трафика. Что логично.\nЕсть небольшая зависимость между количеством звонков и количеством интернет сессий.\n\n\n\n4.3 Изучение зависимостей между категориальными переменными\n\n\nShow the code\ns = 'Количество пользователей в сети'\ns.split()\n\n\n['Количество', 'пользователей', 'в', 'сети']\n\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column \n    users = ['Количество пользователей', 'количество пользователей', 0]\n    , age = ['Возраст, лет', 'возраст', 1]\n    , using_duration = ['Длительность использования, дней', 'длительность использования', 2]\n    , mb_used = ['Объем интернет трафика, мб', 'объем интернет трафика', 1]\n    , revenue = ['Выручка, руб', 'выручка', 2]\n    # categorical column \n    , city = ['Город', 'города', 'городу']\n    , tariff = ['Тариф', 'тарифа', 'тарифу']\n    , is_active = ['активный ли клиент', 'активности клиента', 'активности клиента']\n    , age_cat = ['Возрастная категория', 'возрастной категории', 'возрастной категории']\n    , reg_date_month = ['Месяц регистрации', 'месяца регистрации', 'месяцу регистрации']\n    , call_date_month = ['Месяц звонка', 'месяца звонка', 'месяцу звонка']\n    , duration_cat = ['Категория длительности звонка', 'категории длительности звонка', 'категории длительности звонка']\n    , message_date_month = ['Месяц сообщения', 'месяца сообщения', 'месяцу сообщения']\n    , mb_used_cat = ['Категория интернет трафика', 'категории интернет трафика', 'категории интернет трафика']\n    , session_date_month = ['Месяц интернет сессии', 'месяца интернет сессии', 'месяцу интернет сессии']\n    , month = ['Месяц', 'месяца', 'месяцам']\n    , session_date_weekday = ['День недели интернет сессии', 'дня недели интернет сессии', 'дню недели интернет сессии']\n)\n\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'city'\n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего пользователей из Москвы (19.8 %) и Санкт-Петербурга (7.8%).\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'tariff'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n\n    , width = 450\n    , height = 300\n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ большинства (70%) пользователей тариф smart\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'is_active'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 450\n    , height = 300  \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\n92 % клиентов активные.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'age_cat'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400  \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольшинство пользователей в возрасте старше 60 лет.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_calls\n    , column_for_axis = 'duration_cat'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400  \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольшинство звонков средней длительности (43%)\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_internet\n    , column_for_axis = 'mb_used_cat'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400  \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего интернет сессий со средним объемом интернет трафика (57.8%)\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'city'\n    , column_for_legend = 'tariff'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'col'\n    , top_n_trim_axis = 20\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True                                            \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nИз всех пользователей, выбравших тариф ultra, 21% приходятся на Москву, что может указывать на то, что этот тариф пользуется спросом именно в этом городе.\nИз всех пользователей, выбравших тариф smart, 9% находятся в Санкт-Петербурге, что может свидетельствовать о том, что данный тариф более популярен среди петербуржцев.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'city'\n    , column_for_legend = 'is_active'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'col'\n    , top_n_trim_axis = 20\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True                                             \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nДоля неактивных пользователей из всех неактивных пользователей в Москве больше доли активных пользователей из всех активных пользователей.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'city'\n    , column_for_legend = 'age_cat'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , top_n_trim_axis = 20\n    , top_n_trim_legend = 20\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True                                             \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ Москве больше пользователей в возрасте до 30 лет.\nВ Петербурге больше пользователей от 30 до 40 лет. А вот в возрасте до 30 лет пользователей меньше всего.\n\nВ Петербурге есть потенциал в возрастной группе до 30 лет.\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'tariff'\n    , column_for_legend = 'is_active'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'col'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 950\n    , height = 500                                        \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ тарифе smart доля активных пользователей из всех активных пользователей больше.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'tariff'\n    , column_for_legend = 'age_cat'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True     \n    , width = 1000   \n    , height = 400                                    \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ обоих тарифах больше всего пользователей старше 60 лет\nВозрастная категория 30-40 лет представлена меньше всего. Есть потенциал в этой категории.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'tariff'\n    , column_for_legend = 'age_cat'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'row'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 1000   \n    , height = 400                                             \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ возрастных группах до 30 лет и старше 60 лет доля пользователей ultra из всех пользователей ultra больше чем доля smart. В остальных группах наоборот доля тарифа smart выше.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_internet_full\n    , column_for_axis = 'mb_used_cat'\n    , column_for_legend = 'tariff'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'row'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 1000   \n    , height = 400      \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ тарифе ultra доля количества сессий с высоким трафиком выше доли других категорий трафика.\n\n\n\n4.4 Изучение зависимостей между числовыми и категориальными переменными\nПостроим графики зависимостей числовых и категориальных переменных.\n\n\nShow the code\nconfig = dict(\n    df = df_users\n    , x = 'city'\n    , y = 'age'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , top_n_trim_axis = 50\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ Подольске самые возрастные клиенты, а в Нижневартовске самые молодые.\n\n\n\nShow the code\nconfig = dict(\n    df = df_users\n    , x = 'city'\n    , y = 'using_duration'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , top_n_trim_axis = 50\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ Подольске самая большая длительность использования тарифов.\n\n\n\nShow the code\nconfig = dict(\n    df = df_internet_full\n    , x = 'tariff'\n    , y = 'mb_used'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True      \n    , width = 600\n    , height = 400                                                             \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ тарифе ultra значительно больше среднее количество интернет трафика.\n\n\n\nShow the code\nconfig = dict(\n    df = df_internet_full\n    , x = 'is_active'\n    , y = 'mb_used'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400                                                                     \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nПользователи, которые стали неактивными, использовали немного больше интернет трафика за сессию.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'city'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , top_n_trim_axis = 50\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ Воронеже, Саранске и Брянске средняя выручка с пользователя выше, чем в других городах.\nВ Тамбове выручка с пользователя за месяц самая низка.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'city'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , top_n_trim_axis = 50\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего суммарной выручки в Москве и Санкт-Петербурге.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'is_active'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True   \n    , text = True\n    , width = 600\n    , height = 400    \n                                                                       \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианная выручка с пользователя в месяц у пользователей, которые стали неактивными, выше.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'age_cat'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True    \n    , text = True\n    , width = 600\n    , height = 400    \n                                                                       \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредняя выручка с пользователя выше у пользователей до 40 лет\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'age_cat'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True    \n    , text = True\n    , width = 600\n    , height = 400    \n                                                                       \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСуммарная выручка больше у возрастных категорий до 30 лет и старше 60 лет.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'tariff'\n    , y = 'revenue'  \n    # , category = 'is_active'\n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True    \n    , text = True\n    , width = 600\n    , height = 400    \n                                                                       \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ тарифа smart суммарная выручка больше, чем у тарифа ultra.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'is_active'\n    , y = 'revenue'  \n    , category = 'tariff'\n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 650\n    , height = 400                                                                        \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ неактивных клиентов суммарная выручка выше в тарифе Smart.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'age_cat'\n    , y = 'revenue'  \n    , category = 'tariff'\n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 700\n    , height = 400                                                                        \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ возрастных категориях старше 60 и до 30 лет у тарифа ultra суммарная выручка ближе к тарифу smart.\n\n\n\n4.5 Анализ временных зависимостей\nИзучим временную динамику\n\n\nShow the code\ndf_arpu.head()\n\n\n\n\n\n\n\n\n\nmonth\ncity\nis_active\nage_cat\ntariff\nrevenue\nusers\narpu\n\n\n\n\n0\nЯнварь\nАрхангельск\nда\nстарше 60\nsmart\n550.0\n1\n550.0\n\n\n1\nЯнварь\nАстрахань\nда\n40-50\nsmart\n550.0\n1\n550.0\n\n\n2\nЯнварь\nВолгоград\nда\n30-40\nsmart\n550.0\n1\n550.0\n\n\n3\nЯнварь\nВологда\nда\n30-40\nsmart\n550.0\n1\n550.0\n\n\n4\nЯнварь\nВологда\nда\n40-50\nsmart\n550.0\n1\n550.0\n\n\n\n\n\n\n\n\n\nShow the code\nconfig = dict(\n    df = df_arpu\n    , x = 'month'\n    , y = 'users'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True       \n    , width = 800\n    , height = 400                                                               \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nОбщее количество пользователей каждый месяц растет.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'month'\n    , y = 'revenue'  \n    , category = 'is_active' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредняя выручка у неактивных пользователей падает с августа.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_internet_full\n    , column_for_axis = 'session_date_month'\n    , column_for_legend = 'tariff'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True       \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nКоличество интернет сессий растет в обоих тарифах.\nВ тарифе smart рост количества интернет сессий значительно быстрее.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_internet_full\n    , column_for_axis = 'session_date_month'\n    , column_for_legend = 'is_active'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'col'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True      \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ период с июля по сентябрь пользователи, которые потом стали неактивными, провели больше интернет сессий, чем активные пользователи.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_internet_full\n    , column_for_axis = 'mb_used_cat'\n    , column_for_legend = 'session_date_month'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = False    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nКоличество сессий со средним интернет трафиком растет по месяцам значительно быстрее чем другие категории трафика.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_calls_full\n    , column_for_axis = 'call_date_month'\n    , column_for_legend = 'duration_cat'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nПреобладает средняя длительность звонков по всем месяцам.\nС каждым месяцем количество звонков увеличивается.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_calls_full\n    , column_for_axis = 'call_date_month'\n    , column_for_legend = 'tariff'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'col'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True      \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nКоличество звонков растет с каждым месяцем в обоих тарифах\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_calls_full\n    , column_for_axis = 'call_date_month'\n    , column_for_legend = 'is_active'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'col'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True      \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nПользователи, которые стали неактивными с июля по сентябрь совершали намного больше звонков чем активные.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_messages_full\n    , column_for_axis = 'message_date_month'\n    , column_for_legend = 'tariff'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True     \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nКоличество сообщений в обоих тарифах растет каждый месяц\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_messages_full\n    , column_for_axis = 'message_date_month'\n    , column_for_legend = 'is_active'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'col'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True      \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_users\n    , column_for_axis = 'reg_date_month'\n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True    \n    , width = 1000\n    , height = 430\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего регистраций было в апреле и августе.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_calls\n    , column_for_axis = 'call_date_month'\n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True    \n    , width = 1000\n    , height = 450    \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nС каждым месяцем количество звонков увеличивается.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df_messages\n    , column_for_axis = 'message_date_month'\n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True    \n    , width = 1000\n    , height = 450       \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nС каждым месяцем количество сообщений растет.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_internet\n    , column_for_axis = 'session_date_month'\n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True    \n    , width = 1000\n    , height = 450       \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nС каждым месяцем количество интернет сессий растет.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'month'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True        \n    , text = True\n    , width = 1000\n    , height = 470    \n                                                                  \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСуммарная выручка по месяцам растет.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'month'\n    , y = 'revenue'  \n    , category = 'tariff'\n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True        \n    , width = 1000\n    , height = 470                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ тарифе smart средняя выручка с пользователя растет, а в тарифе ultra практически стоит на месте.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'month'\n    , y = 'revenue'  \n    , category = 'tariff'\n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True        \n    , width = 1000\n    , height = 470                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ тарифе smart суммарная прибыль нарастает быстрее. чем в тарифе ultra.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_by_userid_month\n    , x = 'month'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True    \n    , text = True\n    , width = 1000\n    , height = 470    \n                                                                    \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредняя выручка с пользователя растет каждый месяц.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_internet_full\n    , x = 'session_date_weekday'\n    , y = 'mb_used'  \n    , category = 'tariff' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True      \n    , width = 1000\n    , height = 450                                                                                                                         \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВо все дни недели средний объем интернет трафика у тарифа ultra выше\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_users\n    , x = 'age_cat'\n    , y = 'age'  \n    , category = 'reg_date_month' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = False     \n    , height = 500                                                              \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВо все месяцы регистрировались больше люди старше 60 лет.\nВозрастная категория до 30 лет во все месяцы мало регистрировалась. Есть потенциал в этой категории.\n\n\n\n4.6 Промежуточный вывод\n\nСильная положительная корреляция между количеством интернет-сессий в день и количеством звонков в день\nУмеренная положительная корреляция между выручкой и количеством интернет трафика в день\nЧем больше длительность звонка в минутах, тем больше количество интернет-трафика. Правда зависимость слабая.\nЧем больше количество дней интернет сессий, тем больше количество интернет-трафика. Что логично.\nЕсть небольшая зависимость между количеством звонков и количеством интернет сессий.\nБольше всего пользователей из Москвы (19.8 %) и Санкт-Петербурга (7.8%).\nУ большинства (70%) пользователей тариф smart\n92 % клиентов активные.\nБольшинство пользователей в возрасте старше 60 лет.\nБольшинство звонков средней длительности (43%)\nБольше всего интернет сессий со средним объемом интернет трафика (57.8%)\nИз всех пользователей, выбравших тариф ultra, 21% приходятся на Москву, что может указывать на то, что этот тариф пользуется спросом именно в этом городе.\nИз всех пользователей, выбравших тариф smart, 9% находятся в Санкт-Петербурге, что может свидетельствовать о том, что данный тариф более популярен среди петербуржцев.\nДоля неактивных пользователей из всех неактивных пользователей в Москве больше доли активных пользователей из всех активных пользователей.\nВ Москве больше пользователей в возрасте до 30 лет.\nВ Петербурге больше пользователей от 30 до 40 лет. А вот в возрасте до 30 лет пользователей меньше всего.\nВ Петербурге есть потенциал в возрастной группе до 30 лет.\nВ тарифе smart доля активных пользователей из всех активных пользователей больше.\nВ обоих тарифах больше всего пользователей старше 60 лет\nВозрастная категория 30-40 лет представлена меньше всего. Есть потенциал в этой категории.\nВ возрастных группах до 30 лет и старше 60 лет доля пользователей ultra из всех пользователей ultra больше чем доля smart. В остальных группах наоборот доля тарифа smart выше.\nВ тарифе ultra доля количества сессий с высоким трафиком выше доли других категорий трафика.\nВ Подольске самые возрастные клиенты, а в Нижневартовске самые молодые.\nВ Подольске самая большая длительность использования тарифов.\nСуммарная выручка больше у возрастных категорий до 30 лет и старше 60 лет.\nВ тарифе ultra значительно больше среднее количество интернет трафика.\nПользователи, которые стали неактивными, использовали немного больше интернет трафика за сессию.\nВ Воронеже, Саранске и Брянске средняя выручка с пользователя выше, чем в других городах.\n\nВ Тамбове выручка с пользователя за месяц самая низка.\nМедианная выручка с пользователя в месяц у пользователей, которые стали неактивными, выше.\nСредняя выручка с пользователя выше у пользователей до 40 лет\nУ тарифа smart суммарная выручка больше, чем у тарифа ultra.\nУ неактивных клиентов суммарная выручка выше в тарифе Smart.\nВ возрастных категориях старше 60 и до 30 лет у тарифа ultra суммарная выручка ближе к тарифу smart.\nСредняя выручка у неактивных пользователей падает с августа.\nКоличество интернет сессий растет в обоих тарифах.\n\nВ тарифе smart рост количества интернет сессий значительно быстрее.\nВ период с июля по сентябрь пользователи, которые потом стали неактивными, провели больше интернет сессий, чем активные пользователи.\nКоличество сессий со средним интернет трафиком растет по месяцам значительно быстрее чем другие категории трафика.\nПреобладает средняя длительность звонков по всем месяцам.\nС каждым месяцем количество звонков увеличивается.\nКоличество звонков растет с каждым месяцем в обоих тарифах\nПользователи, которые стали неактивными с июля по сентябрь совершали намного больше звонков чем активные.\nКоличество сообщений в обоих тарифах растет каждый месяц\nБольше всего регистраций было в апреле и августе.\nС каждым месяцем количество звонков увеличивается.\nС каждым месяцем количество сообщений растет.\nС каждым месяцем количество интернет сессий растет.\nСуммарная выручка по месяцам растет.\nСредняя выручка с пользователя растет каждый месяц.\nВо все дни недели средний объем интернет трафика у тарифа ultra выше\nВо все месяцы регистрировались больше люди старше 60 лет.\n\nВозрастная категория до 30 лет во все месяцы мало регистрировалась. Есть потенциал в этой категории.\n\nВ тарифе smart средняя выручка с пользователя растет, а в тарифе ultra практически стоит на месте.\nВ тарифе smart суммарная прибыль нарастает быстрее. чем в тарифе ultra.\nБольше всего суммарной выручки в Москве и Санкт-Петербурге."
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#формулирование-и-провера-гипотез",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#формулирование-и-провера-гипотез",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "5. Формулирование и провера гипотез",
    "text": "5. Формулирование и провера гипотез\n\n5.1 Формулирование гипотез\nНа основе проведенного анализа данных сформулируем следующие гипотезы:\n\nГипотеза 1: Средняя выручка с пользователя не зависит от возрастной группы.\n\nГипотеза 2: Средняя выручка между тарифами Smart и Ultra не отличается.\n\nГипотеза 3: Средняя выручка с пользователя не зависит от месяца.\n\nГипотеза 4: Средняя выручка пользователей из Москвы не отличается от выручки пользователей из других регионов.\n\n\n\n5.2 Проверка гипотез\nСформируем словарь для подписей осей и названий гистограмм.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    revenue = ['Выручка', 'выручки']\n)\n\n\nПроверим сформулированные гипотезы.\nГипотеза 1: Средняя выручка с пользователя не зависит от возрастной группы.\nH0: Средняя выручка с пользователя не зависит от возрастной группы.\nH1: Средняя выручка с пользователя зависит от возрастной группы.\nпосмотрим на распределение\n\n\nShow the code\npagri_data_tools.histogram(df_by_userid_month.revenue, titles_for_axis)\n\n\n                                                \n\n\nРаспределение не нормальное, поэтому используем непараметрический критерий.\nИспользуем критерий Краскела-Уоллиса\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значений в каждой группе\n\n\nShow the code\ndf_by_userid_month['age_cat'].value_counts()\n\n\nage_cat\nстарше 60    855\nдо 30        751\n40-50        587\n50-60        532\n30-40        489\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.kruskal_df(df_by_userid_month[['age_cat', 'revenue']])\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  0.0012172428779618392\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя выручка с пользователя не зависит от возрастной группы, была отклонена.\nЭто указывает на то, что возрастная группа оказывает статистически значимое влияние на среднюю выручку с пользователя.\n\nГипотеза 2: Средняя выручка между тарифами Smart и Ultra не отличается.\nH0: Средняя выручка между тарифами Smart и Ultra не отличается.\nH1: Средняя выручка тарифа Smart больше, чем у тарифа Ultra.\nМы уже выяснили, что распределение выручки не нормальное, поэтому используем непараметрический критерий.\nИспользуем критерий Манна-Уитни\nАльтернатива будет - больше\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значений в каждой группе\n\n\nShow the code\ndf_by_userid_month['tariff'].value_counts()\n\n\ntariff\nsmart    2229\nultra     985\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.mannwhitneyu_df(df_by_userid_month[['tariff', 'revenue']])\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  1.6760405338621796e-232\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя выручка между тарифами Smart и Ultra не отличается, была отклонена.\nЭто указывает на то, что выручка от тарифа Smart статистически значимо выше, чем от тарифа Ultra.\n\nГипотеза 3: Средняя выручка с пользователя не зависит от месяца.\nH0: Средняя выручка с пользователя не зависит от месяца.\nH1: Средняя выручка с пользователя зависит от месяца.\nМы уже выяснили, что распределение выручки не нормальное, поэтому используем непараметрический критерий.\nИспользуем критерий Краскела-Уоллиса\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значений в каждой группе\n\n\nShow the code\ndf_by_userid_month['month'].value_counts()\n\n\nmonth\nДекабрь     476\nНоябрь      450\nОктябрь     417\nСентябрь    375\nАвгуст      342\nИюль        292\nИюнь        248\nМай         208\nАпрель      167\nМарт        114\nФевраль      82\nЯнварь       43\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.kruskal_df(df_by_userid_month[['month', 'revenue']])\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  6.3349474620727595e-12\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя выручка с пользователя не зависит от месяца, была отклонена.\nЭто указывает на то, что месяц оказывает статистически значимое влияние на среднюю выручку с пользователя.\n\nГипотеза 4: Средняя выручка пользователей из Москвы не отличается от выручки пользователей из других регионов.\nH0: Средняя выручка пользователей из Москвы не отличается от выручки пользователей из других регионов.\nH1: Средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов.\nМы уже выяснили, что распределение выручки не нормальное, поэтому используем непараметрический критерий.\nИспользуем критерий Манна-Уитни\nАльтернатива будет - больше\nУровень значимости alpha выберем 0.05\n\n\nShow the code\nmoscow_users_revenue = df_by_userid_month[df_by_userid_month['city'] == 'Москва']['revenue']\nother_users_revenue = df_by_userid_month[df_by_userid_month['city'] != 'Москва']['revenue']\n\n\nУбедимся, что у нас достаточно значений в каждой группе\n\n\nShow the code\nprint(moscow_users_revenue.size)\nprint(other_users_revenue.size)\n\n\n611\n2603\n\n\n\n\nShow the code\npagri_data_tools.mannwhitneyu(moscow_users_revenue, other_users_revenue)\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  0.2310715931384456\nНет оснований отвергнуть нулевую гипотезу, поскольку p-value больше или равно уровню значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нет оснований отклонить гипотезу, что средняя выручка пользователей из Москвы не отличается от выручки пользователей из других регионов.\n\n\n\n5.3 Промежуточный вывод\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя выручка с пользователя не зависит от возрастной группы, была отклонена.\nЭто указывает на то, что возрастная группа оказывает статистически значимое влияние на среднюю выручку с пользователя.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя выручка между тарифами Smart и Ultra не отличается., была отклонена.\nЭто указывает на то, что выручка от тарифа Smart статистически значимо выше, чем от тарифа Ultra.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя выручка с пользователя не зависит от месяца, была отклонена.\nЭто указывает на то, что месяц оказывает статистически значимое влияние на среднюю выручку с пользователя.\nНа уровне значимости 0.05 нет оснований отклонить гипотезу, что средняя выручка пользователей из Москвы не отличается от выручки пользователей из других регионов."
  },
  {
    "objectID": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#общий-вывод",
    "href": "projects/prospective_tariff_for_telecom/prospective_tariff_for_telecom.html#общий-вывод",
    "title": "Определение перспективного тарифа для телеком-компании",
    "section": "6. Общий вывод",
    "text": "6. Общий вывод\nВыводы:\n\nСуммарная выручка больше у возрастных категорий до 30 лет и старше 60 лет.\nВ Воронеже, Саранске и Брянске средняя выручка с пользователя выше, чем в других городах.\n\nВ Тамбове выручка с пользователя за месяц самая низкая.\nМедианная выручка с пользователя в месяц у пользователей, которые стали неактивными, выше.\nСредняя выручка с пользователя выше у пользователей до 40 лет\nУ тарифа smart суммарная выручка больше, чем у тарифа ultra.\nУ неактивных клиентов суммарная выручка выше в тарифе Smart.\nВ возрастных категориях старше 60 и до 30 лет у тарифа ultra суммарная выручка ближе к тарифу smart.\nСредняя выручка у неактивных пользователей падает с августа.\nКоличество интернет сессий растет в обоих тарифах.\n\nВ тарифе smart рост количества интернет сессий значительно быстрее.\nВ период с июля по сентябрь пользователи, которые потом стали неактивными, провели больше интернет сессий, чем активные пользователи.\nКоличество сессий со средним интернет трафиком растет по месяцам значительно быстрее чем другие категории трафика.\nКоличество звонков растет с каждым месяцем в обоих тарифах\nКоличество сообщений в обоих тарифах растет каждый месяц\nБольше всего регистраций было в апреле и августе.\nС каждым месяцем количество интернет сессий растет.\nСуммарная выручка по месяцам растет.\nСредняя выручка с пользователя растет каждый месяц.\nВо все дни недели средний объем интернет трафика у тарифа ultra выше\nВо все месяцы регистрировались больше люди старше 60 лет.\n\nВозрастная категория до 30 лет во все месяцы мало регистрировалась. Есть потенциал в этой категории.\n\nВ тарифе smart средняя выручка с пользователя растет, а в тарифе ultra практически стоит на месте.\nВ тарифе smart суммарная прибыль нарастает быстрее. чем в тарифе ultra.\nБольше всего суммарной выручки в Москве и Санкт-Петербурге.\nМесячная выручка по пользователем варьируется от 550 до 6 542.88 рублей.\nВ основном выручка с пользователя лежит в диапазоне от 656.94 до 1 950 рублей.\nБольше всего пользователей из Москвы (19.8 %) и Санкт-Петербурга (7.8%).\nУ большинства (70%) пользователей тариф smart\n92 % клиентов активные.\nПользователи имеют возраст от 18 до 75 лет\nВ основном пользователи имеют возраст от 32 до 62 лет.\nБольшинство пользователей в возрасте старше 60 лет.\nБольшинство звонков средней длительности (43%)\nВ обоих тарифах больше всего пользователей старше 60 лет\nДлительность звонка варьируется от 0 до 38 минут.\nВ основном длительность звонка находится в диапазоне от 1.3 до 10.7 минут.\nЗа одну сессию пользователи тратят от 0 до 1 724.83 мегабайт\nВ основном пользователи тратят от 138.19 до 559.55 мегабайт\nВ тарифе премиум чаще не превышают лимит по тарифу.\nСредняя количество звонков в день варьируется от 0 до 100.\nВ основном пользователи совершают от 1.95 до 3 звонков в день.\nСредняя количество сообщений в день варьируется от 0 до 51.67\nВ основном пользователи отправляют от 1.18 до 2.33 сообщений в день.\nПользователи проводят от 0 до 58 интернет-сессий в день.\nВ основном пользователи проводят от 1.75 до 2.35 интернет-сессии в день.\nСредняя длительность звонка в день варьируется от 0 до 58 минут.\nВ основном звонки длятся от 1.75 до 2.35 минут.\nОсновная часть трафика среднего объема.\n\nБольше всего звонков было в декабре и ноябре.\nСильная положительная корреляция между количеством интернет-сессий в день и количеством звонков в день\nУмеренная положительная корреляция между выручкой и количеством интернет трафика в день\nЧем больше длительность звонка в минутах, тем больше количество интернет-трафика. Но зависимость слабая.\nЕсть небольшая зависимость между количеством звонков и количеством интернет сессий.\nБольше всего интернет сессий со средним объемом интернет трафика (57.8%)\nИз всех пользователей, выбравших тариф ultra, 21% приходятся на Москву, что может указывать на то, что этот тариф пользуется спросом именно в этом городе.\nИз всех пользователей, выбравших тариф smart, 9% находятся в Санкт-Петербурге, что может свидетельствовать о том, что данный тариф более популярен среди петербуржцев.\nДоля неактивных пользователей из всех неактивных пользователей в Москве больше доли активных пользователей из всех активных пользователей.\nВ Москве больше пользователей в возрасте до 30 лет.\nВ Петербурге больше пользователей от 30 до 40 лет. А вот в возрасте до 30 лет пользователей меньше всего.\nВ Петербурге есть потенциал в возрастной группе до 30 лет.\nВ тарифе smart доля активных пользователей из всех активных пользователей больше.\nВозрастная категория 30-40 лет представлена меньше всего. Есть потенциал в этой категории.\nВ возрастных группах до 30 лет и старше 60 лет доля пользователей ultra из всех пользователей ultra больше чем доля smart. В остальных группах наоборот доля тарифа smart выше.\nВ тарифе ultra доля количества сессий с высоким трафиком выше доли других категорий трафика.\nВ Подольске самые возрастные клиенты, а в Нижневартовске самые молодые.\nВ Подольске самая большая длительность использования тарифов.\nВ тарифе ultra значительно больше среднее количество интернет трафика.\nПользователи, которые стали неактивными, использовали немного больше интернет трафика за сессию.\nПреобладает средняя длительность звонков по всем месяцам.\nПользователи, которые стали неактивными с июля по сентябрь совершали намного больше звонков чем активные.\n\nАномалии и особенности в данных:\n\nВ колонке с датой прекращения пользования тарифом 92 % пропусков. Значит 92 % пользователей ещё пользуются тарифом.\nЕсть пропущенные недели и дни в дате прекращения пользования тарифом, но в данном случае это нормально.\n\nВ колонке с датой подключения тарифа 26 % дней пропущено.\nВ колонке с длительностью звонка 20 процентов нулей. Это пропущенные звонки.\nВ колонке с объемом интернет-трафика 13 процентов нулей.\n\nРезультаты предобработки данных:\n\nНе стали обрабатывать пропуски в дате прекращения пользования тарифом, так как эти пропуски показывают, что пользователь ещё пользуется тарифом.\n\nНули в длительности звонка и в объеме интернет трафика не стали обрабатывать, чтобы не исказить данные.\nДля удобства в таблице пользователей в поле является ли пользователь активным изменили значения на ‘да’, ‘нет’\n\nРезультаты проверки гипотез:\n\nГипотеза 1: Средняя выручка с пользователя не зависит от возрастной группы.\nРезультат: На уровне значимости 0.05 нулевая гипотеза была отклонена.\nЭто указывает на то, что возрастная группа оказывает статистически значимое влияние на среднюю выручку с пользователя.\nГипотеза 2: Средняя выручка между тарифами Smart и Ultra не отличается.\nРезультат: На уровне значимости 0.05 нулевая гипотеза была отклонена.\nЭто указывает на то, что выручка от тарифа Smart статистически значимо выше, чем от тарифа Ultra.\nГипотеза 3: Средняя выручка с пользователя не зависит от месяца.\nРезультат: На уровне значимости 0.05 нулевая гипотеза была отклонена.\nЭто указывает на то, что месяц оказывает статистически значимое влияние на среднюю выручку с пользователя.\nГипотеза 4: Средняя выручка пользователей из Москвы не отличается от выручки пользователей из других регионов.\nРезультат: На уровне значимости 0.05 нет оснований отвергнуть нулевую гипотезу.\n\nРекомендации:\n\nТариф Smart приносит больше прибыли, и средняя выручка с пользователя растет каждый месяц, поэтому тарифный план Smart более перспективный.\nВ Москве тариф Ultra пользуется большей популярностью, чем в других городах, поэтому в Москве следует развивать Ultra больше, чем в других городах.\nВ Петербурге есть потенциал в возрастной группе до 30 лет. Поэтому стоит поработать с этой возрастной категорией.\nВыяснить причину пропусков в дате подключения тарифа. Добавить проверки, чтобы таких пропусков не было.\nВыяснить причину нулей в объеме интернет-трафика."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html",
    "href": "projects/creditworthiness-research/creditworthiness_research.html",
    "title": "Исследование надёжности заёмщиков",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nЗаказчик - кредитный отдел банка.\nНужно разобраться, влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок.\nВходные данные от банка - статистика о платёжеспособности клиентов.\nРезультаты исследования будут учтены при построении модели кредитного скоринга - специальной системы, которая оценивает способность потенциального заёмщика вернуть кредит банку.\nЦель:\nСоставить рекомендации для кредитного отдела банка, которые будут учтены при построении модели кредитного скоринга.\nОпределить влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок.\nИсточники данных:\nСтатистика о платёжеспособности клиентов.\nГлавные выводы:\nАномалии и особенности в данных:\nРекомендации:"
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#загрузка-библиотек",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#загрузка-библиотек",
    "title": "Исследование надёжности заёмщиков",
    "section": "Загрузка библиотек ",
    "text": "Загрузка библиотек \n\n\nShow the code\n\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools\npd.set_option('display.max_columns', None)"
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#описание-и-изучение-данных",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#описание-и-изучение-данных",
    "title": "Исследование надёжности заёмщиков",
    "section": "1. Описание и изучение данных",
    "text": "1. Описание и изучение данных\n\n1.1 Описание данных\nВернуться к выводам\n\nchildren - количество детей в семье\ndays_employed - общий трудовой стаж в днях\ndob_years - возраст клиента в годах\neducation - уровень образования клиента\neducation_id - идентификатор уровня образования\nfamily_status - семейное положение\nfamily_status_id - идентификатор семейного положения\ngender - пол клиента\nincome_type - тип занятости\ndebt - имел ли задолженность по возврату кредитов\ntotal_income - ежемесячный доход\npurpose - цель получения кредита\n\n\n\n1.2 Изучение данных\n\n1.2.1 Изучение переменных\nВернуться к выводам\n\n\nShow the code\n\ndtype = {'education': 'category', 'education_id': 'category', 'family_status': 'category', 'family_status_id': 'category', 'gender': 'category', 'income_type': 'category', 'debt': 'category'}\ndf = pd.read_csv('https://code.s3.yandex.net/datasets/data.csv', dtype=dtype)\ndf.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\ndob_years\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n4042\n1\n-2885.142188\n50\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\n0\n80236.028323\nприобретение автомобиля\n\n\n19177\n2\n-1803.080913\n36\nСреднее\n1\nженат / замужем\n0\nF\nсотрудник\n0\n163292.220004\nстроительство собственной недвижимости\n\n\n7372\n1\n-305.540665\n27\nСРЕДНЕЕ\n1\nгражданский брак\n1\nF\nсотрудник\n0\n69799.488812\nремонт жилью\n\n\n16245\n1\n-1593.946336\n50\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\n1\n107486.332934\nна покупку подержанного автомобиля\n\n\n11563\n0\n-1025.402943\n64\nвысшее\n0\nженат / замужем\n0\nM\nгосслужащий\n0\n706401.475790\nпрофильное образование\n\n\n\n\n\n\n\nИзменим название колонки dob_years на более понятное age\n\n\nShow the code\n\ndf = df.rename(columns={'dob_years': 'age'})\n\n\nИзменим значения в столбце debt на ‘есть’, ‘нет’\n\n\nShow the code\n\ndf.debt = df.debt.apply(lambda x: 'есть' if x == '1' else 'нет').astype('category')\n\n\nИзучим отдельно каждую колонку\n\n\nShow the code\n\ngen = pagri_data_tools.info_gen(df)\n\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n21 525\n12\n4\n54 (&lt;1%)\n0 (0%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\n\nЕсли заменить все пробелы на 1, привести к нижнему регистру, то дополнительно появляется 31 дубликат.\nНужно детальнее изучить дубликаты.\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 2: children\n\n\n\n\n\nValues\n21 525 (100%)\n\nMax\n20\n\nAvg\n0.54\n\n0 (66%)\n\n\nMissing\n---\n\n95%\n2\n\nMode\n0\n\n1 (22%)\n\n\nDistinct\n8 (&lt;1%)\n\n75%\n1\n\nRange\n21\n\n2 (10%)\n\n\nDuplicates\n21 517 (99.9%)\n\nMedian\n0\n\niQR\n1\n\n3 (2%)\n\n\nZeros\n14 149 (66%)\n\n25%\n0\n\nstd\n1.38\n\n20 &lt;1%\n\n\nNegative\n47 (&lt;1%)\n\n5%\n0\n\nkurt\n136.46\n\n-1 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n-1\n\nskew\n10.08\n\n4 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ столбце с количеством детей нет пропущенных значений.\n\nУникальных всего 8 значений. Это нормально. Количество детей не может сильно варьироваться.\nНаличие нулей нормально, это люди без детей, таких 66 %.\n\nЕсть отрицательные значения. 47 штук. Меньше 1 процента. Это явно ошибка. В реальных данных таких не должно быть.\nНужно выяснить почему появились отрицательное количество детей.\n\nМаксимальное количество детей 20. Это скорее всего ошибка.\n66 процентов имеют 0 детей, 22 процента имеют 1 ребенка, 10 % имеют 2 детей и меньше 5 % имеют более 2 детей.\n\nРаспределение детей соответствует реальности, больше всего людей без детей.\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 3: days_employed\n\n\n\n\n\nValues\n19 351 (90%)\n\nMax\n401 755.4\n\nAvg\n63 046.5\n\n-8 437.67 &lt;1%\n\n\nMissing\n2 174 (10%)\n\n95%\n380 718.0\n\nMode\n---\n\n-3 507.82 &lt;1%\n\n\nDistinct\n19 351 (90%)\n\n75%\n-291.1\n\nRange\n420 144.35\n\n354 500.42 &lt;1%\n\n\nDuplicates\n2 173 (10%)\n\nMedian\n-1 203.37\n\niQR\n2 456.33\n\n-769.72 &lt;1%\n\n\nZeros\n---\n\n25%\n-2 747.42\n\nstd\n140 827.31\n\n-3 963.59 &lt;1%\n\n\nNegative\n15 906 (74%)\n\n5%\n-6 622.97\n\nkurt\n0.91\n\n337 451.39 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n-18 388.95\n\nskew\n1.70\n\n356 425.15 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке общий трудовой стаж есть 10 % пропущенных значений.\n\n90 % уникальных значений, это нормально, так как стаж в днях.\n\n74 % отрицательных значений. Так быть не должно.\nНужно выяснить как считаются дни стажа и разобраться откуда появляются отрицательные значения.\n\nМаксимальное количество дней стажа больше 400 тысяч дней, это больше 1000 лет. Явно это выброс.\n\nДанные совершенно некорректные, нужно разбираться что является причиной.\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 4: age\n\n\n\n\n\nValues\n21 525 (100%)\n\nMax\n75\n\nAvg\n43.29\n\n35 (3%)\n\n\nMissing\n---\n\n95%\n64\n\nMode\n35\n\n40 (3%)\n\n\nDistinct\n58 (&lt;1%)\n\n75%\n53\n\nRange\n75\n\n41 (3%)\n\n\nDuplicates\n21 467 (99.7%)\n\nMedian\n42\n\niQR\n20\n\n34 (3%)\n\n\nZeros\n101 (&lt;1%)\n\n25%\n33\n\nstd\n12.57\n\n38 (3%)\n\n\nNegative\n---\n\n5%\n25\n\nkurt\n-0.48\n\n42 (3%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.01\n\n33 (3%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке возраста нет пропущенных значений.\n\n58 уникальных значений (&lt;1%), похоже на правду.\n\n101 нулевое значение. Это явно ошибки.\n\nМаксимальный возраст 75 лет. Вполне реально.\n\nМедиана 42 года, первый квартиль 33 года, можно сделать вывод, что у нас в основном люди старше 30 лет.\n\nБольше всего людей около 40 лет.\n\nТолько 5 процентов людей моложе 25 лет.\n\nРаспределение похоже на нормальное. Так и должно быть.\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 5: total_income\n\n\n\n\n\nValues\n19 351 (90%)\n\nMax\n2 265 604.03\n\nAvg\n167 422.3\n\n253 875.64 &lt;1%\n\n\nMissing\n2 174 (10%)\n\n95%\n340 590.1\n\nMode\n---\n\n157 691.85 &lt;1%\n\n\nDistinct\n19 351 (90%)\n\n75%\n203 435.07\n\nRange\n2 244 936.76\n\n70 113.9 &lt;1%\n\n\nDuplicates\n2 173 (10%)\n\nMedian\n145 017.94\n\niQR\n100 381.91\n\n116 196.52 &lt;1%\n\n\nZeros\n---\n\n25%\n103 053.15\n\nstd\n102 971.57\n\n157 205.83 &lt;1%\n\n\nNegative\n---\n\n5%\n63 322.85\n\nkurt\n40.73\n\n114 842.85 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n20 667.26\n\nskew\n3.94\n\n282 354.55 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ столбце дохода 10 процентов пропущенных значений.\n\nЕсть дубликаты, но это нормально.\n\nМаксимальный доход больше 2 млн, нужно проверить это, кажется что это нереально.\n\nМинимальная зарплата 20 тысяч, это похоже на истину.\n\nРаспределение зарплат соответствует реальности.\n\nМеньше 5 % людей имеют зарплату меньше 63 тысяч.\nМожно сделать вывод, что большинство имеет высокий доход.\nПри этом 25 % имеют доход больше 200 тысяч.\n\nСлишком много знаков после запятой, нужно разобраться в чем дело\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 6: education\n\n\n\n\n\nValues\n21 525 (100%)\n\nсреднее (64%)\n\n\nMissing\n---\n\nвысшее (22%)\n\n\nDistinct\n15 (&lt;1%)\n\nСРЕДНЕЕ (4%)\n\n\nDuplicated origin\n21 510 (99.9%)\n\nСреднее (3%)\n\n\nDupl (modify - origin)\n2 (&lt;1%)\n\nнеоконченное высшее (3%)\n\n\nEmpty\n---\n\nВЫСШЕЕ (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nВысшее (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке образование пропусков нет.\n\nУникальных значений 15\nПрисутствуют явные дубли из за разных регистров слов.\n\nБольше всего людей со средним образованием 71 %\nВысшее образование у 24 %\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 7: education_id\n\n\n\n\n\nValues\n21 525 (100%)\n\n1 (71%)\n\n\nMissing\n---\n\n0 (24%)\n\n\nDistinct\n5 (&lt;1%)\n\n2 (3%)\n\n\nDuplicated origin\n21 520 (99.9%)\n\n3 (1%)\n\n\nDupl (modify - origin)\n---\n\n4 &lt;1%\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с id образования нет дублей, которые есть в колонке образования\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 8: family_status\n\n\n\n\n\nValues\n21 525 (100%)\n\nженат / замужем (58%)\n\n\nMissing\n---\n\nгражданский брак (19%)\n\n\nDistinct\n5 (&lt;1%)\n\nНе женат / не замужем (13%)\n\n\nDuplicated origin\n21 520 (99.9%)\n\nв разводе (6%)\n\n\nDupl (modify - origin)\n---\n\nвдовец / вдова (4%)\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке семейного статуса пропусков нет\nПроблем не обнаружено\n58 % либо женаты, либо замужем\n19 % в гражданском браке\nМожно сделать вывод что большинство в браке.\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 9: family_status_id\n\n\n\n\n\nValues\n21 525 (100%)\n\n0 (58%)\n\n\nMissing\n---\n\n1 (19%)\n\n\nDistinct\n5 (&lt;1%)\n\n4 (13%)\n\n\nDuplicated origin\n21 520 (99.9%)\n\n3 (6%)\n\n\nDupl (modify - origin)\n---\n\n2 (4%)\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nКолонке семейный статус id проблем не обнаружено, значения совпадают со столбцом семейный статус\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 10: gender\n\n\n\n\n\nValues\n21 525 (100%)\n\nF (66%)\n\n\nMissing\n---\n\nM (34%)\n\n\nDistinct\n3 (&lt;1%)\n\nXNA &lt;1%\n\n\nDuplicated origin\n21 522 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ возрасте пропусков нет\n3 уникальных значения\nЗначение XNA меньше чем у 1 %, возможно не указали пол\n66 % женщины, можно сделать вывод, что большинство женщины\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 11: income_type\n\n\n\n\n\nValues\n21 525 (100%)\n\nсотрудник (52%)\n\n\nMissing\n---\n\nкомпаньон (24%)\n\n\nDistinct\n8 (&lt;1%)\n\nпенсионер (18%)\n\n\nDuplicated origin\n21 517 (99.9%)\n\nгосслужащий (7%)\n\n\nDupl (modify - origin)\n---\n\nбезработный &lt;1%\n\n\nEmpty\n---\n\nпредприниматель &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nв декрете &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ столбце тип занятости 8 уникальных значений.\n\nБольше всего сотрудников (52 %)\n24 % компаньоны\n18 % пенсионеры\nМеньше 1 % безработных.\nМожно сделать вывод, что большинство либо пенсионеры, либо имеют занятость\nТакже меньше 1 % предприниматели.\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 12: debt\n\n\n\n\n\nValues\n21 525 (100%)\n\nнет (92%)\n\n\nMissing\n---\n\nесть (8%)\n\n\nDistinct\n2 (&lt;1%)\n\n\n\n\nDuplicated origin\n21 523 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке наличия долга 2 значения.\n\nПропусков нет\n92 % людей не имеют долга\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 13: purpose\n\n\n\n\n\nValues\n21 525 (100%)\n\nсвадьба (4%)\n\n\nMissing\n---\n\nна проведение свадьбы (4%)\n\n\nDistinct\n38 (&lt;1%)\n\nсыграть свадьбу (4%)\n\n\nDuplicated origin\n21 487 (99.8%)\n\nоперации с недвижимостью (3%)\n\n\nDupl (modify - origin)\n---\n\nпокупка коммерческой недвижимости (3%)\n\n\nEmpty\n---\n\nпокупка жилья для сдачи (3%)\n\n\nRAM (Mb)\n3\n\nоперации с жильем (3%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке цель кредита пропусков нет\n\n38 уникальных значений, немного, но все таки есть похожие цели, нужно будет объединить в одно значение\nЯрко выраженной цели кредита нет, но сложно точно определить, нужно объединить сначала похожие цели.\n\nДля дальнейшего анализа срауз приведем колонку education к нижнему регистру и удалим лишние пробелы\n\n\nShow the code\n\ndf.education = pagri_data_tools.normalize_string_series(df.education)\ndf.education.value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\neducation\n\n\n\n\n\nсреднее\n15233\n\n\nвысшее\n5260\n\n\nнеоконченное высшее\n744\n\n\nначальное\n282\n\n\nученая степень\n6\n\n\n\n\n\n\n\nПроверим на ошибки целостности\nЕсли у нас есть столбцы, в которых значения должны совпадать попарно, то проверяем на это.\n\n\nShow the code\n\npagri_data_tools.get_non_matching_rows(df, 'education', 'education_id')\n\n\nНет строк для которых значения в col1 имеют разные значения в col2\n\n\nНет проблем с целостностью в образовании, несмотря на дубли в образовании.\n\n\nShow the code\n\npagri_data_tools.get_non_matching_rows(df, 'family_status', 'family_status_id')\n\n\nНет строк для которых значения в col1 имеют разные значения в col2\n\n\nВ семейном статусе также нет проблем с целостностью.\n\n\n1.2.2 Изучение дубликатов\nВернуться к выводам\nПроверим на дубли\nПосмотрим на дубли во всем датафрейме\n\n\nShow the code\n\ndupl_df = pagri_data_tools.check_duplicated(df)\n\n\nDuplicated is 71 (0.3%) rows\n\n\nУ нас 54 полных дубля в таблице. Посмотрим на них.\n\n\nShow the code\n\ndupl_df.sample(10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncount\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n\n0\n366085.971246\n58\nсреднее\n1\nженат / замужем\n0\nF\nпенсионер\nнет\n62509.116756\nпокупка своего жилья\n1\n\n\n-4471.908675\n49\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n145681.166753\nпокупка жилья для сдачи\n1\n\n\n-2161.728644\n45\nсреднее\n1\nженат / замужем\n0\nM\nкомпаньон\nнет\n174976.559244\nпокупка жилой недвижимости\n1\n\n\n1\nNaN\n45\nвысшее\n0\nженат / замужем\n0\nM\nсотрудник\nнет\nNaN\nна покупку подержанного автомобиля\n1\n\n\n0\n-202.034936\n62\nсреднее\n1\nвдовец / вдова\n2\nF\nсотрудник\nнет\n116093.542265\nстроительство жилой недвижимости\n1\n\n\n-10461.809545\n51\nсреднее\n1\nженат / замужем\n0\nF\nгосслужащий\nнет\n99292.152980\nпокупка коммерческой недвижимости\n1\n\n\n1\n-4878.408137\n39\nвысшее\n0\nгражданский брак\n1\nF\nсотрудник\nнет\n159931.847818\nсвой автомобиль\n1\n\n\n0\n-4777.041799\n51\nвысшее\n0\nженат / замужем\n0\nF\nсотрудник\nнет\n580657.906000\nсделка с подержанным автомобилем\n1\n\n\n-3564.541990\n32\nвысшее\n0\nгражданский брак\n1\nM\nсотрудник\nнет\n318667.904844\nсыграть свадьбу\n1\n\n\n2\n-221.799963\n30\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\n107204.889031\nремонт жилью\n1\n\n\n\n\n\n\n\nНаблюдения:\n\nТак как у нас нет уникального идентификатора клиентов, то дубли это нормально\nТакже у нас в строках с дублями есть пропуски в некоторых столбцах, если бы не было пропусков,\nто возможно дублей было бы меньше, так как было бы больше детализации\n\nПосмотрим сколько у нас дублей в каждой колонке\n\n\nShow the code\n\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df)\n\n\n\n\n\n\n\nTable 14: Duplicates\n\n\n\n\n\nchildren\n21517 (99.96%)\n\n\ndays_employed\n2173 (10.10%)\n\n\nage\n21467 (99.73%)\n\n\neducation\n21520 (99.98%)\n\n\neducation_id\n21520 (99.98%)\n\n\nfamily_status\n21520 (99.98%)\n\n\nfamily_status_id\n21520 (99.98%)\n\n\ngender\n21522 (99.99%)\n\n\nincome_type\n21517 (99.96%)\n\n\ndebt\n21523 (99.99%)\n\n\ntotal_income\n2173 (10.10%)\n\n\npurpose\n21487 (99.82%)\n\n\n\n\n\n\n\n\nПосмотрим на дубликаты между парами колонок\n\n\nShow the code\n\ngen = pagri_data_tools.check_duplicated_combinations_gen(df)\nnext(gen)\n\n\nGroup by 2 columns\n\n\n\n\n\n\n\nTable 15: Duplicates\n\n\n\n\n\n \nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\nchildren\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndays_employed\n2166\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\n21236\n2118\n\n\n\n\n\n\n\n\n\n\n\n\neducation\n21496\n2170\n21300\n\n\n\n\n\n\n\n\n\n\n\neducation_id\n21496\n2170\n21300\n21520\n\n\n\n\n\n\n\n\n\n\nfamily_status\n21488\n2169\n21253\n21502\n21502\n\n\n\n\n\n\n\n\n\nfamily_status_id\n21488\n2169\n21253\n21502\n21502\n21520\n\n\n\n\n\n\n\n\ngender\n21508\n2172\n21410\n21514\n21514\n21514\n21514\n\n\n\n\n\n\n\nincome_type\n21489\n2169\n21304\n21501\n21501\n21499\n21499\n21510\n\n\n\n\n\n\ndebt\n21510\n2172\n21412\n21516\n21516\n21515\n21515\n21520\n21512\n\n\n\n\n\ntotal_income\n2166\n2173\n2118\n2170\n2170\n2169\n2169\n2172\n2169\n2172\n\n\n\n\npurpose\n21279\n2136\n19504\n21368\n21368\n21347\n21347\n21448\n21367\n21449\n2136\n\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ нас большинство колонок имеют попранные дубликаты, это скорее всего вызвано пропусками\nЕсли бы не было пропусков в колонках стажа и дохода, то дублей было бы меньше\n\n\n\n1.2.3 Изучение пропусков\nВернуться к выводам\nПроверяем на пропуски\n\n\nShow the code\n\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df)\n\n\n\n\n\n\n\nTable 16: Missings\n\n\n\n\n\ndays_employed\n2174 (10.10%)\n\n\ntotal_income\n2174 (10.10%)\n\n\n\n\n\n\n\n\nУ нас пропуски в колонке со стажем и в колокне с доходом.\nПосмотрим на строки датафрейма с пропусками.\n\n\nShow the code\n\ndays_employed_missed = series_missed['days_employed']\ntotal_income_missed = series_missed['total_income']\n\n\nКоличество пропусков совпадает с точностью до строки.\nВыдвигаем гипотезу, что пропуски в обоих колонках в одних и тех же строках.\nПроверим эту гипотезу\nПосмотрим на стаж\n\n\nShow the code\n\ndays_employed_missed.sample(10)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n11702\n1\nNaN\n44\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nсделка с подержанным автомобилем\n\n\n21294\n0\nNaN\n45\nвысшее\n0\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nвысшее образование\n\n\n8886\n1\nNaN\n37\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nпокупка недвижимости\n\n\n15933\n0\nNaN\n22\nсреднее\n1\nгражданский брак\n1\nM\nсотрудник\nнет\nNaN\nна проведение свадьбы\n\n\n10756\n0\nNaN\n52\nсреднее\n1\nженат / замужем\n0\nF\nпенсионер\nнет\nNaN\nобразование\n\n\n5681\n0\nNaN\n42\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nавтомобиль\n\n\n20040\n0\nNaN\n63\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\nNaN\nстроительство жилой недвижимости\n\n\n1941\n0\nNaN\n48\nсреднее\n1\nгражданский брак\n1\nM\nсотрудник\nесть\nNaN\nна покупку своего автомобиля\n\n\n16904\n1\nNaN\n32\nвысшее\n0\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nна покупку подержанного автомобиля\n\n\n2304\n0\nNaN\n43\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nесть\nNaN\nобразование\n\n\n\n\n\n\n\nНаблюдения:\n\n10 случайно взятых строк подтверждают гипотезу\n\nПосмотрим на доход\n\n\nShow the code\n\ntotal_income_missed.sample(10)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n14469\n1\nNaN\n36\nсреднее\n1\nженат / замужем\n0\nM\nкомпаньон\nнет\nNaN\nоперации с коммерческой недвижимостью\n\n\n7514\n1\nNaN\n54\nсреднее\n1\nженат / замужем\n0\nF\nпенсионер\nнет\nNaN\nпокупка жилья для семьи\n\n\n619\n1\nNaN\n37\nсреднее\n1\nгражданский брак\n1\nF\nкомпаньон\nесть\nNaN\nсвадьба\n\n\n10462\n0\nNaN\n62\nсреднее\n1\nженат / замужем\n0\nF\nпенсионер\nнет\nNaN\nпокупка коммерческой недвижимости\n\n\n11968\n0\nNaN\n52\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nоперации с жильем\n\n\n11850\n0\nNaN\n61\nсреднее\n1\nНе женат / не замужем\n4\nF\nпенсионер\nнет\nNaN\nпокупка жилья\n\n\n11683\n0\nNaN\n46\nсреднее\n1\nгражданский брак\n1\nF\nкомпаньон\nнет\nNaN\nжилье\n\n\n19384\n0\nNaN\n29\nсреднее\n1\nНе женат / не замужем\n4\nM\nсотрудник\nнет\nNaN\nоперации с недвижимостью\n\n\n19578\n1\nNaN\n47\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\nNaN\nзаняться образованием\n\n\n21000\n2\nNaN\n35\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\nNaN\nпокупка жилья\n\n\n\n\n\n\n\nНаблюдения:\n\n10 случайно взятых строк подтверждают гипотезу\n\nПосмотрим сколько пропусков в обоих колонках вместе\n\n\nShow the code\n\ndf_missed_employed_income = pagri_data_tools.check_na_in_both_columns(df, ['days_employed', 'total_income'])\n\n\n2174 (10.10%) rows with missings simultaneously in ['days_employed', 'total_income']\n\n\nНаблюдения:\n\nВидим, что совместно пропуски в таком количестве строк как и по отдельности.\nГипотеза подтвердилась. У нас пропуски в строке стаж связаны с пропусками в строке доход.\nВозможно это вызвано тем, что при расчете дохода используется стаж, либо существует другое влияние одного на другое.\n\n\n\n1.2.4 Изучение выбросов\nВернуться к выводам\nСначала изучим потенциальные выбросы, которые мы выявили при изучении колонок.\nУ нас в количестве детей есть значение 20.\nИзучим его подробнее.\n\n\nShow the code\n\noutliers_series = pd.Series([df[df.children == 20]], index=['children'])\ngen = pagri_data_tools.analyze_by_category_gen(df, outliers_series)\nnext(gen)\n\n\nValue counts (0.35%)\n\n\n\n\n\n\n\nTable 17: children\n\n\n\n\n\n \ncount\n\n\nchildren\n \n\n\n\n\n20\n76\n\n\n\n\n\n\n\n\nПосмотрим на строки датафрейма, где количество детей равно 20\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n12534\n20\n-579.038062\n48\nсреднее\n1\nгражданский брак\n1\nF\nсотрудник\nесть\n125518.059419\nна проведение свадьбы\n\n\n18756\n20\n-2334.690116\n51\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n224637.817562\nавтомобиль\n\n\n3302\n20\nNaN\n35\nсреднее\n1\nНе женат / не замужем\n4\nF\nгосслужащий\nнет\nNaN\nпрофильное образование\n\n\n13256\n20\n-542.697631\n46\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n84405.034582\nоперации с недвижимостью\n\n\n18890\n20\n-904.259293\n37\nсреднее\n1\nженат / замужем\n0\nF\nкомпаньон\nесть\n212811.568585\nна покупку подержанного автомобиля\n\n\n17093\n20\n-1481.602776\n42\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n73069.574569\nполучение дополнительного образования\n\n\n9889\n20\n-2232.776113\n34\nсреднее\n1\nНе женат / не замужем\n4\nM\nсотрудник\nнет\n53971.576721\nпокупка жилья\n\n\n21325\n20\n-601.174883\n37\nсреднее\n1\nженат / замужем\n0\nF\nкомпаньон\nнет\n102986.065978\nпрофильное образование\n\n\n17509\n20\n-461.939717\n31\nсреднее\n1\nНе женат / не замужем\n4\nF\nсотрудник\nнет\n90937.893204\nжилье\n\n\n7027\n20\n-690.181658\n54\nсреднее\n1\nгражданский брак\n1\nF\nкомпаньон\nнет\n100206.266595\nна проведение свадьбы\n\n\n\n\n\n\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 18: Value in \"children\" by category \"family_status\"\n\n\n\n\n\nfamily_status\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nНе женат / не замужем\n2813\n9\n0.3%\n11.8%\n13.1%\n-1.2%\n\n\nв разводе\n1195\n2\n0.2%\n2.6%\n5.6%\n-2.9%\n\n\nвдовец / вдова\n960\n4\n0.4%\n5.3%\n4.5%\n0.8%\n\n\nгражданский брак\n4177\n12\n0.3%\n15.8%\n19.4%\n-3.6%\n\n\nженат / замужем\n12380\n49\n0.4%\n64.5%\n57.5%\n7.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nЗначительная часть людей с 20 детьми находятся в браке.\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 19: Value in \"children\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nв декрете\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nгосслужащий\n1459\n2\n0.1%\n2.6%\n6.8%\n-4.1%\n\n\nкомпаньон\n5085\n22\n0.4%\n28.9%\n23.6%\n5.3%\n\n\nпенсионер\n3856\n9\n0.2%\n11.8%\n17.9%\n-6.1%\n\n\nпредприниматель\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nсотрудник\n11119\n43\n0.4%\n56.6%\n51.7%\n4.9%\n\n\nстудент\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nБольшая часть сотрудники\nПенсионеры имеют меньшую долю с 20 детьми чем в основном количестве.\n\nУ нас в доходе странные максимальные значения нужно их изучить\n\n\nShow the code\n\noutliers_series = pd.Series([df[df.total_income &gt; 1000000]], index=['total_income'])\ngen = pagri_data_tools.analyze_by_category_gen(df, outliers_series)\nnext(gen)\n\n\nValue counts (0.12%)\n\n\n\n\n\n\n\nTable 20: total_income\n\n\n\n\n\n \ncount\n\n\ntotal_income\n \n\n\n\n\n1089120.307967\n1\n\n\n1172459.831538\n1\n\n\n1223042.479856\n1\n\n\n2200852.210259\n1\n\n\n1091627.585474\n1\n\n\n1092608.202547\n1\n\n\n1551152.893832\n1\n\n\n1427934.463152\n1\n\n\n1027742.279317\n1\n\n\n1597613.490467\n1\n\n\n\n\n\n\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n12412\n0\n-1477.438114\n44\nвысшее\n0\nженат / замужем\n0\nM\nкомпаньон\nнет\n2.265604e+06\nремонт жилью\n\n\n4129\n0\n-7992.968249\n52\nвысшее\n0\nженат / замужем\n0\nF\nкомпаньон\nнет\n1.004476e+06\nоперации с коммерческой недвижимостью\n\n\n18347\n0\n-5536.801152\n35\nвысшее\n0\nгражданский брак\n1\nF\nкомпаньон\nнет\n1.027742e+06\nоперации с жильем\n\n\n15268\n1\n-10207.448165\n64\nвысшее\n0\nв разводе\n3\nM\nкомпаньон\nнет\n1.350246e+06\nжилье\n\n\n20809\n0\n-4719.273476\n61\nсреднее\n1\nНе женат / не замужем\n4\nF\nсотрудник\nнет\n1.715018e+06\nпокупка жилья для семьи\n\n\n18766\n2\n-1019.604773\n43\nвысшее\n0\nженат / замужем\n0\nM\nкомпаньон\nнет\n1.092608e+06\nстроительство недвижимости\n\n\n7447\n0\n-8626.777234\n39\nсреднее\n1\nв разводе\n3\nF\nсотрудник\nнет\n1.240165e+06\nпокупка недвижимости\n\n\n19338\n3\n-1733.364682\n34\nвысшее\n0\nженат / замужем\n0\nM\nсотрудник\nнет\n1.091628e+06\nоперации с жильем\n\n\n2224\n1\n-4614.851849\n42\nвысшее\n0\nженат / замужем\n0\nM\nсотрудник\nнет\n1.278623e+06\nпокупка жилья\n\n\n13090\n1\n-3531.320534\n54\nвысшее\n0\nв разводе\n3\nF\nкомпаньон\nнет\n1.128836e+06\nоперации с недвижимостью\n\n\n\n\n\n\n\nНаблюдения:\n\nНичего особенного не заметно, возможно это не выбросы.\n\nПосмотрим на выбросы через квантили\n\n\nShow the code\n\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df)\n\n\n\n\n\n\n\nTable 21: Outliers\n\n\n\n\n\nchildren\n503 (2.34%)\n\n\ndays_employed\n1936 (8.99%)\n\n\nage\n1877 (8.72%)\n\n\ntotal_income\n1936 (8.99%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nинтересно что количество выбросов, кроме колонки количество детей, примерно одинаковое\n\nИзучим выбросы в разрезе категорий\n\n\nShow the code\n\ngen = pagri_data_tools.analyze_by_category_gen(df, series_outliers)\nnext(gen)\n\n\nValue counts (2.34%)\n\n\n\n\n\n\n\nTable 22: children\n\n\n\n\n\n \ncount\n\n\nchildren\n \n\n\n\n\n3\n330\n\n\n20\n76\n\n\n-1\n47\n\n\n4\n41\n\n\n5\n9\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВидим, что клиенты с количеством больше 2 попали в выбросы, что логично\nТакже -1 попало в выброс, что тоже верно\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n5315\n20\n-2047.754733\n24\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n100415.236833\nпокупка коммерческой недвижимости\n\n\n5362\n20\n355898.021316\n69\nсреднее\n1\nженат / замужем\n0\nM\nпенсионер\nнет\n138579.082863\nавтомобили\n\n\n13683\n3\n-412.704203\n37\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\n250758.702480\nпокупка жилой недвижимости\n\n\n20533\n3\n-3486.098717\n33\nвысшее\n0\nженат / замужем\n0\nF\nгосслужащий\nнет\n181661.163824\nоперации с коммерческой недвижимостью\n\n\n3445\n3\n-3316.247950\n38\nсреднее\n1\nженат / замужем\n0\nM\nкомпаньон\nнет\n243288.609169\nсделка с подержанным автомобилем\n\n\n1985\n3\n-823.339980\n33\nсреднее\n1\nженат / замужем\n0\nF\nгосслужащий\nнет\n57541.895996\nстроительство жилой недвижимости\n\n\n6219\n3\n-321.640557\n37\nвысшее\n0\nгражданский брак\n1\nF\nкомпаньон\nнет\n172214.363998\nнедвижимость\n\n\n20756\n3\n-2903.921654\n48\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\nнет\n63511.921815\nоперации с недвижимостью\n\n\n16809\n3\n360587.743062\n42\nсреднее\n1\nгражданский брак\n1\nF\nпенсионер\nесть\n66187.816041\nна проведение свадьбы\n\n\n12916\n3\nNaN\n36\nсреднее\n1\nженат / замужем\n0\nM\nсотрудник\nнет\nNaN\nзаняться высшим образованием\n\n\n\n\n\n\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 23: Value in \"children\" by category \"family_status\"\n\n\n\n\n\nfamily_status\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nНе женат / не замужем\n2813\n24\n0.9%\n4.8%\n13.1%\n-8.3%\n\n\nв разводе\n1195\n18\n1.5%\n3.6%\n5.6%\n-2.0%\n\n\nвдовец / вдова\n960\n15\n1.6%\n3.0%\n4.5%\n-1.5%\n\n\nгражданский брак\n4177\n83\n2.0%\n16.5%\n19.4%\n-2.9%\n\n\nженат / замужем\n12380\n363\n2.9%\n72.2%\n57.5%\n14.7%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nженат / замужем содержит значительно больше выбросов, даже учитывая что в общем количестве их тоже больше\n\n\n\nShow the code\n\n%%capture\nnext(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 24: Value in \"children\" by category \"gender\"\n\n\n\n\n\ngender\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nF\n14236\n313\n2.2%\n62.2%\n66.1%\n-3.9%\n\n\nM\n7288\n190\n2.6%\n37.8%\n33.9%\n3.9%\n\n\nXNA\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ мужчин немного побольше выбросов, учитывая размер группы мужчин\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 25: Value in \"children\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nв декрете\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nгосслужащий\n1459\n50\n3.4%\n9.9%\n6.8%\n3.2%\n\n\nкомпаньон\n5085\n114\n2.2%\n22.7%\n23.6%\n-1.0%\n\n\nпенсионер\n3856\n24\n0.6%\n4.8%\n17.9%\n-13.1%\n\n\nпредприниматель\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nсотрудник\n11119\n315\n2.8%\n62.6%\n51.7%\n11.0%\n\n\nстудент\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nБольше всего выбросов у сотрудников, даже больше чем пропорция сотрудников в общем количестве\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 26: Value in \"days_employed\" by category \"gender\"\n\n\n\n\n\ngender\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nF\n14236\n1544\n10.8%\n79.8%\n66.1%\n13.6%\n\n\nM\n7288\n392\n5.4%\n20.2%\n33.9%\n-13.6%\n\n\nXNA\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ женщин выбросов в стаже намного больше чем у мужчин, даже учитывая что женщин больше всего\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 27: Value in \"days_employed\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n1\n50.0%\n0.1%\n0.0%\n0.0%\n\n\nв декрете\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nгосслужащий\n1459\n183\n12.5%\n9.5%\n6.8%\n2.7%\n\n\nкомпаньон\n5085\n173\n3.4%\n8.9%\n23.6%\n-14.7%\n\n\nпенсионер\n3856\n967\n25.1%\n49.9%\n17.9%\n32.0%\n\n\nпредприниматель\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nсотрудник\n11119\n612\n5.5%\n31.6%\n51.7%\n-20.0%\n\n\nстудент\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ пенсионеров значительно больше выбросов в стаже\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 28: Value in \"days_employed\" by category \"debt\"\n\n\n\n\n\ndebt\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nнет\n19784\n1838\n9.3%\n94.9%\n91.9%\n3.0%\n\n\nесть\n1741\n98\n5.6%\n5.1%\n8.1%\n-3.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ должников выбросов в стаже меньше, учитывая пропорции.\n\n\n\nShow the code\n\nnext(gen)\n\n\nValue counts (8.72%)\n\n\n\n\n\n\n\nTable 29: age\n\n\n\n\n\n \ncount\n\n\nage\n \n\n\n\n\n24\n264\n\n\n23\n254\n\n\n65\n194\n\n\n66\n183\n\n\n22\n183\n\n\n67\n167\n\n\n21\n111\n\n\n0\n101\n\n\n68\n99\n\n\n69\n85\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ выбросы попали самые молодые и самые старые по возрасту, что логично, также попал 0\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 30: Value in \"age\" by category \"family_status\"\n\n\n\n\n\nfamily_status\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nНе женат / не замужем\n2813\n465\n16.5%\n24.8%\n13.1%\n11.7%\n\n\nв разводе\n1195\n75\n6.3%\n4.0%\n5.6%\n-1.6%\n\n\nвдовец / вдова\n960\n176\n18.3%\n9.4%\n4.5%\n4.9%\n\n\nгражданский брак\n4177\n385\n9.2%\n20.5%\n19.4%\n1.1%\n\n\nженат / замужем\n12380\n776\n6.3%\n41.3%\n57.5%\n-16.2%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nНе женат / не замужем выделяется по выбросам, учитывая пропорцию в общем количестве\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 31: Value in \"age\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nв декрете\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nгосслужащий\n1459\n69\n4.7%\n3.7%\n6.8%\n-3.1%\n\n\nкомпаньон\n5085\n333\n6.5%\n17.7%\n23.6%\n-5.9%\n\n\nпенсионер\n3856\n792\n20.5%\n42.2%\n17.9%\n24.3%\n\n\nпредприниматель\n2\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\nсотрудник\n11119\n682\n6.1%\n36.3%\n51.7%\n-15.3%\n\n\nстудент\n1\n1\n100.0%\n0.1%\n0.0%\n0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ пенсионеров больше выбросов по возрасту, что логично\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen);next(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 32: Value in \"total_income\" by category \"family_status\"\n\n\n\n\n\nfamily_status\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nНе женат / не замужем\n2813\n217\n7.7%\n11.2%\n13.1%\n-1.9%\n\n\nв разводе\n1195\n96\n8.0%\n5.0%\n5.6%\n-0.6%\n\n\nвдовец / вдова\n960\n95\n9.9%\n4.9%\n4.5%\n0.4%\n\n\nгражданский брак\n4177\n336\n8.0%\n17.4%\n19.4%\n-2.0%\n\n\nженат / замужем\n12380\n1192\n9.6%\n61.6%\n57.5%\n4.1%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ женатых больше выбросов по доходу\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 33: Value in \"total_income\" by category \"income_type\"\n\n\n\n\n\nincome_type\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбезработный\n2\n1\n50.0%\n0.1%\n0.0%\n0.0%\n\n\nв декрете\n1\n1\n100.0%\n0.1%\n0.0%\n0.0%\n\n\nгосслужащий\n1459\n140\n9.6%\n7.2%\n6.8%\n0.5%\n\n\nкомпаньон\n5085\n488\n9.6%\n25.2%\n23.6%\n1.6%\n\n\nпенсионер\n3856\n500\n13.0%\n25.8%\n17.9%\n7.9%\n\n\nпредприниматель\n2\n1\n50.0%\n0.1%\n0.0%\n0.0%\n\n\nсотрудник\n11119\n805\n7.2%\n41.6%\n51.7%\n-10.1%\n\n\nстудент\n1\n0\n0.0%\n0.0%\n0.0%\n-0.0%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nУ пенсионеров больше выбросов по доходу\n\n\n\nShow the code\n\nnext(gen)\n\n\n\n\n\n\n\nTable 34: Value in \"total_income\" by category \"debt\"\n\n\n\n\n\ndebt\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nнет\n19784\n1811\n9.2%\n93.5%\n91.9%\n1.6%\n\n\nесть\n1741\n125\n7.2%\n6.5%\n8.1%\n-1.6%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nБез задолженности немного больше выбросов по доходу.\n\n\n\n\n1.3 Промежуточный вывод\nВернуться к выводам\n\nВ датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\nТак как у нас нет уникального идентификатора клиентов, то эти дубли не выглядят ошибкой.\nТакже у нас в строках с дублями есть пропуски в некоторых столбцах, если бы не было пропусков,\nто возможно дублей было бы меньше, так как было бы больше детализации\nВ столбце с количеством детей есть отрицательные значения. 47 штук. Меньше 1 процента. Также есть клиенты с 20 детьми. Что странно.\nТакое количество детей в основном у людей в браке и сотрудников. У пенсионеров явно доля с 20 детьми меньше, чем доле пенсионеров в общем количестве людей.\nВозможно 20 детей связано с тем, что во время ввода данных указали лишний ноль.\nРекомендация, сделать проверку на отрицательные значения и на 20 детей, чтобы на стадии ввода не допускать ошибок.\n\n66 процентов имеют 0 детей, 22 процента имеют 1 ребенка, 10 % имеют 2 детей и меньше 5 % имеют более 2 детей.\n\nВ колонке общий трудовой стаж есть 10 % пропущенных значений.\n\n74 % отрицательных значений. Так быть не должно.\n\nМаксимальное количество дней стажа больше 400 тысяч дней, это больше 1000 лет. Явно это выброс.\n\nСтолбец со стажем выглядит некорректно. Нужно выяснить методику расчета и разобраться в чем проблема.\n\nВ колонке возраста 101 нулевое значение. Это явно ошибки.\n\nМедиана 42 года, первый квартиль 33 года, можно сделать вывод, что у нас в основном люди старше 30 лет.\n\nБольше всего людей около 40 лет.\n\nТолько 5 процентов людей моложе 25 лет.\n\nКолонка дохода имеет слишком много знаков после запятой. Нужно выяснить причину.\n\nДоход больше 1 млн может быть правдой. Тем более такой доход в большинстве у мужчин с высшим образованием, у компаньонов или сотрудников.\nНет оснований считать это выбросом. Максимальный доход 2 млн. Также может быть реальным.\nМеньше 5 % людей имеют зарплату меньше 63 тысяч.\nМожно сделать вывод, что большинство имеет высокий доход.\nПри этом 25 % имеют доход больше 200 тысяч.\n\nВ колонке с образованием присутствуют одни и те же значения с разными регистрами. Нужно выяснить почему так происходит при загрузке.\nПри этом в колонке с id образования все в порядке.\n\nБольше всего людей со средним образованием 71 %. Высшее образование у 24 %.\n58 % женаты либо замужем. 19 % в гражданском браке. Можно сделать вывод что большинство в браке.\n\nВ колонке пола присутствует значение XNA меньше чем у 1 %, возможно не указали пол.\n66 % женщины, можно сделать вывод, что большинство женщины\nВ столбце занятость больше всего сотрудников (52 %). Меньше 1 % безработных. Предпринимателей также 1 %. Можно сделать вывод, что большинство либо пенсионеры, либо имеют занятость.\n92 % не имеют долга\nВ колонке цель кредита 38 уникальных значений, немного, но все таки есть похожие цели, нужно будет объединить в одно значение.\nУ нас пропуски в колонке со стажем и в колокне с доходом.\n\nГипотеза, что пропуски в обоих колонках расположены в одних и тех же строках подтвердилась.\nВозможно это вызвано тем, что при расчете дохода используется стаж, либо существует другое влияние одного на другое.\n\nКатегория семейного статуса ‘женат / замужем’ содержит значительно больше выбросов по количеству детей, даже учитывая что в общем количестве их тоже больше\nУ мужчин немного побольше выбросов по количеству детей, учитывая размер группы мужчин.\nБольше всего выбросов по количеству детей у категории занятости ‘сотрудник’\nУ женщин выбросов в стаже намного больше чем у мужчин, даже учитывая что женщин больше всего\nУ пенсионеров значительно больше выбросов в стаже\nКатегория семейного статуса ‘Не женат / не замужем’ выделяется по выбросам, учитывая пропорцию в общем количестве.\nУ пенсионеров больше выбросов по возрасту, что логично\nКатегория семейного статуса ‘Не женат / не замужем’ имеет больше выбросов по доходу\nУ пенсионеров больше выбросов по доходу\nУ людей без задолженности немного больше выбросов по доходу."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#предобработка-данных",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#предобработка-данных",
    "title": "Исследование надёжности заёмщиков",
    "section": "2. Предобработка данных",
    "text": "2. Предобработка данных\n\n2.1 Выбор нужных столбцов для дальнейшей работы и нормализация таблицы\nВернуться к выводам\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\nage\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n-8437.673028\n42\nвысшее\n0\nженат / замужем\n0\nF\nсотрудник\nнет\n253875.639453\nпокупка жилья\n\n\n\n\n\n\n\nДля дальнейшего анализа нам не нужно 2 колонки с образованием и с семейным статусом.\nУдалим колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nТакже колонка days_employed имеет совершенно некорректные данные, нужно разбираться откуда такие данные.\nВ данный момент мы ничего не можем с этим сделать и любые действия могут исказить результат. Поэтому не будем брать эту колонку.\nСохраним исходный датафрейм в переменную df_origin, чтобы была возможность вернуться к нему\n\n\nShow the code\n\ndf_origin = df.copy()\n\n\n\n\nShow the code\n\ndf = df.drop(['education_id', 'family_status_id', 'days_employed'], axis=1)\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253875.639453\nпокупка жилья\n\n\n\n\n\n\n\n\n\n2.2 Обработка выбросов\nВернуться к выводам\nПосмотрим где у нас отрицательные значения\n\n\nShow the code\n\npagri_data_tools.check_negative_value_in_df(df)\n\n\n\n\n\n\n\n\n\nnegative\n\n\n\n\nchildren\n47 (0.2%)\n\n\n\n\n\n\n\nУ нас 0.2% отрицательных значений, лучше всего будет их просто удалить.\n\n\nShow the code\n\ndf.shape[0]\n\n\n21525\n\n\n\n\nShow the code\n\ndf = df[df.children &gt;= 0]\ndf.shape[0]\n\n\n21478\n\n\nПосмотрим где у нас нулевые значения\n\n\nShow the code\n\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\nchildren\n14149 (65.9%)\n\n\nage\n101 (0.5%)\n\n\n\n\n\n\n\nВ количестве детей 0 это нормально. С этим ничего делать не будем.\nВ возрасте 0.5% нулевых значений. Лучше будет их удалить.\n\n\nShow the code\n\ndf.shape[0]\n\n\n21478\n\n\n\n\nShow the code\n\ndf = df[df.age != 0]\ndf.shape[0]\n\n\n21377\n\n\nУбедимся, что у нас нет нулевых и отрицательных значений там, где их быть не должно\n\n\nShow the code\n\npagri_data_tools.check_negative_value_in_df(df)\n\n\n\n\n\n\n\n\n\nnegative\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\nchildren\n14080 (65.9%)\n\n\n\n\n\n\n\nПосле изучения данных мы выяснили, что у нас есть странное значение в количестве детей, которое может быть выбросом.\n\n\nShow the code\n\ncnt = (df.children == 20).sum()\ncnt\n\n\nnp.int64(75)\n\n\n\n\nShow the code\n\ncnt * 100 / df.shape[0]\n\n\nnp.float64(0.35084436543949105)\n\n\nУ нас таких данных меньше пол процента, удалим их, так как нет уверенности, что это не выбросы.\nЕсли их оставить, то они могут внести больше искажений, чем их удалить.\n\n\nShow the code\n\ndf.shape[0]\n\n\n21377\n\n\n\n\nShow the code\n\ndf = df[df.children != 20]\ndf.shape[0]\n\n\n21302\n\n\n\n\n2.3 Обработка пропусков\nВернуться к выводам\nПосмотрим, где у нас пропуски\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ntotal_income\n2152 (10.1%)\n\n\n\n\n\n\n\nУ нас 10 процентов пропусков в доходе.\nУдалять нельзя. Попробуем заменить.\nВ доходе мы можем заполнить пропуски учитывая категории.\nВыберем категории следующие - образование, семейный статус, пол, занятость.\nВыбраны эти категории, так как они могут оказывать влияние на доход.\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253875.639453\nпокупка жилья\n\n\n\n\n\n\n\nПосмотрим размеры групп, если заменять внутри этих групп\n\n\nShow the code\n\ncategory_columns = ['education', 'family_status', 'gender', 'income_type']\nvalue_column = 'total_income'\npagri_data_tools.check_group_count(df, category_columns, value_column)\n\n\n67.53% groups have missing values\n63.46%  groups with missings have more than 30 elements\n85.58%  groups with missings have more than 10 elements\n90.38%  groups with missings have more than 5 elements\n2.88%  groups have only missings\n3 missings in groups with only missings\n\n\nНаблюдения:\n\n86 % групп с пропусками имеют 10 и более элементов. По таким группам можем заполнить пропуски медианой\n3 % групп имеют только пропуски, таких 3 пропусков всего, их мы такими группами заполнить не сможем.\n\nЗаполним пропуски в группах от 10 элементов\n\n\nShow the code\n\ndf.loc[:,value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ntotal_income\n18 (0.1%)\n\n\n\n\n\n\n\nОставшиеся пропуски попробуем заполнить без учета семейного статуса\n\n\nShow the code\n\ncategory_columns = ['education', 'gender', 'income_type']\nvalue_column = 'total_income'\npagri_data_tools.check_group_count(df, category_columns, value_column)\n\n\n23.26% groups have missing values\n60.00%  groups with missings have more than 30 elements\n80.00%  groups with missings have more than 10 elements\n80.00%  groups with missings have more than 5 elements\n10.00%  groups have only missings\n1 missings in groups with only missings\n\n\n\n\nShow the code\n\ndf[value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ntotal_income\n3 (0.0%)\n\n\n\n\n\n\n\nОставшиеся заменим по образованию и типу занятости\n\n\nShow the code\n\ncategory_columns = ['education', 'income_type']\nvalue_column = 'total_income'\npagri_data_tools.check_group_count(df, category_columns, value_column)\n\n\n8.33% groups have missing values\n0.00%  groups with missings have more than 30 elements\n0.00%  groups with missings have more than 10 elements\n50.00%  groups with missings have more than 5 elements\n0.00%  groups have only missings\n0 missings in groups with only missings\n\n\n\n\nShow the code\n\ndf[value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ntotal_income\n3 (0.0%)\n\n\n\n\n\n\n\nОставшиеся заменим медианой по образованию\n\n\nShow the code\n\ncategory_columns = ['education']\nvalue_column = 'total_income'\npagri_data_tools.check_group_count(df, category_columns, value_column)\n\n\n40.00% groups have missing values\n100.00%  groups with missings have more than 30 elements\n100.00%  groups with missings have more than 10 elements\n100.00%  groups with missings have more than 5 elements\n0.00%  groups have only missings\n0 missings in groups with only missings\n\n\n\n\nShow the code\n\ndf[value_column] = pagri_data_tools.fill_na_with_function_by_categories(df, category_columns, value_column, func='median', minimal_group_size=10)\n\n\n\n\nShow the code\n\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\n\n\n\n\n\nПропусков не осталось, можно продолжать анализ.\n\n\n2.4 Обработка дубликатов\nВернуться к выводам\nПосмотрим снова на дубли после обработки пропусков\n\n\nShow the code\n\npagri_data_tools.check_duplicated_value_in_df(df)\n\n\n\n\n\n\n\nTable 35: Duplicates\n\n\n\n\n\nchildren\n21296 (99.97%)\n\n\nage\n21245 (99.73%)\n\n\neducation\n21297 (99.98%)\n\n\nfamily_status\n21297 (99.98%)\n\n\ngender\n21299 (99.99%)\n\n\nincome_type\n21294 (99.96%)\n\n\ndebt\n21300 (99.99%)\n\n\ntotal_income\n2103 (9.87%)\n\n\npurpose\n21264 (99.82%)\n\n\n\n\n\n\n\n\nУ нас нет столбцов, где дублей не должно быть и нет комбинаций столбцов, в которых не должно быть дублей.\nПоэтому нет оснований обрабатывать дубли. Оставим как есть.\n\n\n2.5 Приведение данных к удобной форме\nВернуться к выводам\nОкруглим значения в поле дохода до целого.\nЦелая часть выглядит реальной. А с дробной частью нужно разбираться почему столько знаков.\n\n\nShow the code\n\ndf['total_income'] = df.total_income.round().astype('int32')\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nпокупка жилья\n\n\n\n\n\n\n\nПосмотрим сколько у нас людей с полом XNA осталось\n\n\nShow the code\n\n(df.gender == 'XNA').sum()\n\n\nnp.int64(1)\n\n\nПосмотрим кто это\n\n\nShow the code\n\ndf[df.gender == 'XNA']\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n10701\n0\n24\nнеоконченное высшее\nгражданский брак\nXNA\nкомпаньон\nнет\n203905\nпокупка недвижимости\n\n\n\n\n\n\n\nВсего 1 человек. И мы не можем идентифицировать его пол.\nУдалим, чтобы не мешало анализировать графики.\n\n\nShow the code\n\ndf.drop(df[df.gender == 'XNA'].index, inplace=True)\ndf['gender'] = df['gender'].cat.remove_unused_categories()\ndf.gender.value_counts(dropna=False).to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\ngender\n\n\n\n\n\nF\n14083\n\n\nM\n7218\n\n\n\n\n\n\n\n\n\nShow the code\n\ndf.shape[0]\n\n\n21301\n\n\n\n\n2.6 Категоризация данных\nВернуться к выводам\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nпокупка жилья\n\n\n\n\n\n\n\nСделаем дополнительную колонку, в которой будет указано есть дети или нет\n\n\nShow the code\n\ndf['has_child'] = df.children.apply(lambda x: 'есть' if x &gt; 0 else 'нет').astype('category')\ndf['has_child'].value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\nhas_child\n\n\n\n\n\nнет\n14079\n\n\nесть\n7222\n\n\n\n\n\n\n\nСоздадим дополнительную категориальную переменную из возраста, для удобства анализа.\nСделаем следующие группы - до 30 лет - от 30 до 40 лет - от 40 до 50 лет - от 50 до 60 лет - старше 60 лет\n\n\nShow the code\n\nlabels = ['до 30', '30-40', '40-50', '50-60', 'старше 60']\nbins = [-np.inf, 30, 40, 50, 60, np.inf]\n\n\n\n\nShow the code\n\ndf['age_cat'] = pagri_data_tools.create_category_column(df.age, labels=labels, bins=bins)\ndf['age_cat'].value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\nage_cat\n\n\n\n\n\n30-40\n5704\n\n\n40-50\n5241\n\n\n50-60\n4520\n\n\nдо 30\n3704\n\n\nстарше 60\n2132\n\n\n\n\n\n\n\nСоздадим категориальную переменную по доходу\n\n\nShow the code\n\npagri_data_tools.quantiles_columns(df.total_income)\n\n\n\n\n\n\n\nTable 36: Quantiles\n\n\n\n\n\nMax\n2 265 604\n\n\n5\n64 748\n\n\n25\n107 702\n\n\n50\n145 005\n\n\n75\n197 380\n\n\n95\n331 729\n\n\nMin\n20 667\n\n\n\n\n\n\n\n\nСделаем следующие категории - до 50 тыс - от 50 до 100 тыс - от 100 до 200 тыс - от 200 до 500 тыс - от 500 тыс и выше\n\n\nShow the code\n\nlabels = ['до 50 тыс', '50-100 тыс', '100-200 тыс', '200-500 тыс', 'больше 500 тыс']\nbins = [-np.inf, 50_000, 100_000, 200_000, 500_000, np.inf]\n\n\n\n\nShow the code\n\ndf['total_income_cat'] = pagri_data_tools.create_category_column(df.total_income, labels=labels, bins=bins)\ndf['total_income_cat'].value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\ntotal_income_cat\n\n\n\n\n\n100-200 тыс\n11778\n\n\n200-500 тыс\n4876\n\n\n50-100 тыс\n4056\n\n\nдо 50 тыс\n369\n\n\nбольше 500 тыс\n222\n\n\n\n\n\n\n\nСделаем категории из колонки целей кредита используя лемматизацию\n\n\nShow the code\n\ncategorization_dict = {\n    'недвижимость': ['жилье', 'недвижимость']\n    , 'образование': ['образование']\n    , 'автомобиль': ['автомобиль', 'машина']\n    , 'свадьба': ['свадьба']\n}\n\n\n\n\nShow the code\n\ndf['purpose_new'] = pagri_data_tools.categorize_column_by_lemmatize(df.purpose, categorization_dict, use_cache=True)\ndf['purpose_new'].value_counts().to_frame()\n\n\n\n\n\n\n\n\n\ncount\n\n\npurpose_new\n\n\n\n\n\nнедвижимость\n10732\n\n\nавтомобиль\n4267\n\n\nобразование\n3979\n\n\nсвадьба\n2323\n\n\n\n\n\n\n\nУдалим старую цель кредита\n\n\nShow the code\n\ndf = df.drop('purpose', axis=1).rename(columns={'purpose_new': 'purpose'})\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\nhas_child\nage_cat\ntotal_income_cat\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nесть\n40-50\n200-500 тыс\nнедвижимость\n\n\n\n\n\n\n\n\n\n2.7 Промежуточный вывод\nВернуться к выводам\n\nУдалили колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nКолонка со стажем имеет совершенно некорректные данные. Чтобы не внести искажение в анализ, удалим эту колонку.\nУдалили отрицательные значения в колонке с количеством детей, которые составляли 0,2% от общего количества записей в данных.\nУдалили нулевые значения в колонке с возрастом, которые составляли 0,5% от общего количества записей в данных.\nУдалили записи, где количество детей равно 20, которые составляли 0,35% от общего количества записей в данных.\nЗаполнили пропуски в столбце с доходом медианным значением, учитывая категории образование, семейный статус, пол, занятость.\nОкруглили значения дохода до целого.\nУдалили 1 запись, где пол равен XNA\nСоздали дополнительную бинарную колонку, указывающую на наличие детей (1 - есть дети, 0 - нет детей).\nСделали дополнительную колонку с возрастными категориями.\n\nСделали дополнительную колонку с категориями дохода.\n\nТематизировали колонку с целью кредита, чтобы получить категории целей кредита."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#анализ-корреляций-между-переменными",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#анализ-корреляций-между-переменными",
    "title": "Исследование надёжности заёмщиков",
    "section": "3. Анализ корреляций между переменными",
    "text": "3. Анализ корреляций между переменными\n\n3.1 Исследование корреляционных связей\nВернуться к выводам\nПосмотрим на корреляцию между колонками\n\n\nShow the code\n\ntitles_for_axis = dict(\n    children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\n\n\n\n\nShow the code\n\npagri_data_tools.heatmap_corr(df, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nКорреляции не обнаружено\n\nПосмотрим какие переменные сильнее других влияют на предсказание долга с помощью модели случайного леса\n Вернуться к выводам\n\n\nShow the code\n\ntitles_for_axis = dict(\n    debt = 'долга'\n    , children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\n\n\n\n\nShow the code\n\npagri_data_tools.plot_feature_importances_classifier(df, target='debt', titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВидим, что доход значительно превышает стаж и количество детей.\n\n\n\n3.2 Промежуточный вывод\nВернуться к выводам\n\nКорреляций между переменными не обнаружено.\nДоход является самым значимым признаком для предсказания задолженности."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#визуализация-взаимосвязей-переменных",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#визуализация-взаимосвязей-переменных",
    "title": "Исследование надёжности заёмщиков",
    "section": "4. Визуализация взаимосвязей переменных",
    "text": "4. Визуализация взаимосвязей переменных\n\n4.1 Изучение зависимостей между числовыми переменными\nВернуться к выводам\nПосмотрим на зависимости между числовыми переменными.\n\n\n\nShow the code\n\ntitles_for_axis = dict(\n    # numeric column\n    children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\n\n\n\n\nShow the code\n\npagri_data_tools.pairplot(df, titles_for_axis=titles_for_axis, horizontal_spacing=0.12, height=400, width=1200, rows=1, cols=3).show(config=dict(displayModeBar=False, dpi=200), renderer=\"png\")\n\n\n\n\n\n\n\n\n\nНаблюдения:\n\nМожно заметить, что чем меньше количество детей, тем больше значений с высоким доходом.\nТакже можно заметить, что чем моложе клиент, тем в среднем у него больше детей.\n\n\n\n4.2 Изучение зависимостей между категориальными переменными\nВернуться к выводам\n\n\nShow the code\n\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количество детей', 0]\n    , age = ['Возраст, лет', 'возраст', 1]\n    , total_income = ['Ежемесячный доход', 'ежемесячный доход', 1]\n     # category column\n    , education = ['Уровень образования', 'уровня образования']\n    , family_status = ['Семейное положение', 'семейного положения']\n    , gender = ['Пол', 'пола']\n    , income_type = ['Тип занятости', 'типа занятости']\n    , debt = ['Задолженность', 'задолженности']\n    , purpose = ['Цель получения кредита', 'цели получения кредита']\n    , has_child = ['Наличие детей', 'наличия детей']\n    , age_cat = ['Возрастная категория, лет', 'возрастной категории']\n    , total_income_cat = ['Категория дохода', 'категории дохода']\n)\n\n\nПосмотрим на распределение количества элементов между группами\n\n\nShow the code\n\ngen = pagri_data_tools.categorical_graph_analys_gen(df, titles_for_axis)\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nВ каждой категории семейного положения доля женщин больше.\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nСреди семейного статуса и занятости больше всего женатых сотрудников\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nНет явной зависимости семейного положения и задолженности.\nНе женатые и люди в гражданском браке чаще других имеют задолженность, но всего лишь на пару процентов долей.\n\nЖенатых без долго явно больше остальных.\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nЖенатых без детей больше всего\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nВозрастная группа 30-40 лет выделяется среди женатых\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nБольшая часть женатых имеет доход 100-200 тыс\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего кредит берут на цели, связанные с недвижимостью, кроме людей в гражданском браке\nЛюди в гражданском браке чаще берут кредит на свадьбу\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего женщин сотрудников\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nЖенщины чаще возвращают кредит. Это видно из пропорций.\n\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen);next(gen)\n\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nЛюди старше 60 лет реже других имеют долги (вкладка сравнение задолженность).\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nДолги есть у людей с разным доходом\n\n Вернуться к выводам\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения: - Кредиты, оформленные на цели, связанные с недвижимостью, реже других приводят к долгам.\n\n\nShow the code\n\n%%capture\nnext(gen);next(gen);next(gen)\n\n\n\n\nShow the code\n\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nМожно заметить, что категория возраста от 30 до 40 лет имеет больше зарплату\n\nПосмотрим на распределение количества людей по категориям на сэнки диаграмме\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\nhas_child\nage_cat\ntotal_income_cat\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nесть\n40-50\n200-500 тыс\nнедвижимость\n\n\n\n\n\n\n\n\n\n4.3 Изучение зависимостей между числовыми и категориальными переменными\nВернуться к выводам\n\n\nShow the code\n\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количество детей', 0]\n    , age = ['Возраст, лет', 'возраст', 1]\n    , total_income = ['Ежемесячный доход', 'ежемесячный доход', 1]\n     # category column\n    , education = ['Уровень образования', 'уровня образования']\n    , family_status = ['Семейное положение', 'семейного положения']\n    , gender = ['Пол', 'пола']\n    , income_type = ['Тип занятости', 'типа занятости']\n    , debt = ['Задолженность', 'задолженности']\n    , purpose = ['Цель получения кредита', 'цели получения кредита']\n    , has_child = ['Наличие детей', 'наличия детей']\n    , age_cat = ['Возрастная категория', 'возрастной категории']\n    , total_income_cat = ['Категория дохода', 'категории дохода']\n)\n\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'gender'\n    , x = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ мужчин средний доход выше\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'gender'\n    , x = 'total_income'\n    , category = 'education'\n    , width = 900\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nНа всех уровнях образования, кроме ученой степени, доход у мужчин выше.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'purpose'\n    , x = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nЦель получения кредита практически не зависит от среднего ежемесячного доход\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'family_status'\n    , y = 'children'\n    , category = 'gender'\n    , width = 820\n    , orientation = 'h'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ мужчин, которые в браке или были в браке, количество детей больше, чем у мужчин, женщин в той же категории\nУ женатых детей больше, что логично\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'family_status'\n    , y = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , orientation = 'h'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредний доход по семейному статусу примерно одинаковый, у вдовцов немного пониже\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'income_type'\n    , y = 'total_income'\n    # , category = 'family_status'\n    , width = 800\n    , func = 'median'\n    , orientation='h'\n    # , text = True\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианный доход предпринимателей больше, чем у других.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'children'\n    , y = 'debt'\n    , category = 'gender'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ должников в среднем больше детей. В частности, среди должников женщины имеют больше детей в среднем, чем мужчины, а среди не должников мужчины имеют больше детей в среднем, чем женщины\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'age'\n    , y = 'debt'\n    # , category = 'family_status'\n    , width = 850\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ должников средний возраст немного ниже\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'gender'\n    , y = 'age'\n    , category = 'income_type'\n    , width = 1000\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ разрезе семейного положения ситуация сохраняться, возраст немного меньше у должников\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'total_income'\n    , y = 'debt'\n    # , category = 'education'\n    , width = 800\n    , func = 'median'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианный доход у должников и не должников практически не отличается\n\n\n\nShow the code\n\n\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'age_cat'\n    , y = 'children'\n    , category = 'gender'\n    , width = 900\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСреднее количество детей у группы 30-40 лет больше.\nДо 40 лет детей больше у женщин, старше 40 лет детей больше у мужчин\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'age_cat'\n    , y = 'total_income'\n    , category = 'income_type'\n    , width = 1200\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nПредприниматели до 30 лет имеют значительно болье средний доход, но в этой группе всего один клиент.\nСтранно, что в группе 40-50 лет безработные имеют доход сравнимый с другими группами, а в других возрастных категориях - нет.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'children'\n    , x = 'total_income_cat'\n    , category = 'gender'\n    , width = 800\n    # , orientation='h'\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nС доходом до 100 тысяч детей больше у женщин, а с доходом выше 100 тысяч - у мужчин.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'gender'\n    , y = 'age'\n    , category = 'education'\n    , width = 800\n    , orientation='h'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ женщин средний возраст выше, кроме категории ученая степень\nУ мужчин с ученой степенью средний возраст выше, чем у женщин, но размер группы ‘ученая степень’ маленький, поэтому утверждать нельзя.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'age'\n    , y = 'income_type'\n    # , category = 'income_type'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредний возраст распределен логично, можно отметить, что госслужащие имеют средний возраст больше 40 лет\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'income_type'\n    , y = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , orientation = 'h'\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредний доход предпринимателей значительно выше других, но как видно предприниматель только 1, поэтому это нерепрезентативно.\nВ декрете и студент имеют самый низкий доход, но размеры групп маленькие, поэтому также нет уверенности в выводе.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'debt'\n    , y = 'age'\n    , category = 'gender'\n    , orientation='h'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nДолжники имеют ниже средний возраст как мужчины так и женщины.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(df = df\n    , y = 'age_cat'\n    , x = 'total_income'\n    # , category = 'education'\n    , width = 800\n    , showgrid_y = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nЛюди от 30 до 50 лет имеют самый высокий средний доход.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'total_income_cat'\n    , y = 'children'\n    , category = 'debt'\n    , width = 1200\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВо всех группах дохода, кроме ‘больше 500 тыс’ среднее количество детей у должников больше\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'total_income_cat'\n    , y = 'age'\n    , category = 'debt'\n    , width = 800\n    , showgrid_y = False\n    , orientation='h'\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВо всех группах дохода средний возраст должников ниже\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'total_income_cat'\n    , y = 'children'\n    , category = 'age_cat'\n    # , width = 1200\n    , showgrid_x = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВозрастная категория ‘30-40’ лет имеет больше детей во всех категориях дохода\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'has_child'\n    , y = 'age'\n    , category = 'family_status'\n    , width = 800\n    , showgrid_y = False\n    , orientation='h'\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nДля всех значений в семейном статусе, у людей без детей средний возраст выше.\n\n\n\nShow the code\n\nconfig = dict(df = df\n    , x = 'has_child'\n    , y = 'age'\n    # , category = 'age_cat'\n    , width = 800\n    , showgrid_y = False\n    , orientation='h'\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредний возраст у людей без детей выше примерно на 9 лет\n\n\n\n4.4 Промежуточный вывод\nВернуться к выводам\n\nМожно заметить, что чем меньше количество детей, тем больше значений с высоким доходом.\nСреди семейного статуса и занятости больше всего женатых сотрудников\nЖенатых без долго явно больше остальных.\nБольшая часть женатых имеет доход 100-200 тыс\nЖенщины чаще возвращают кредит.\nДолги есть у людей с разным доходом.\nНа всех уровнях образования, кроме ученой степени, доход у мужчин выше.\nЦель получения кредита практически не зависит от среднего ежемесячного дохода.\nУ мужчин, которые в браке или были в браке, количество детей больше, чем у женщин в той же категории\nСредний доход по семейному статусу примерно одинаковый, у вдовцов немного пониже\nУ должников в среднем больше детей\nУ должников среднее количество детей больше у женщин, а у не должников среднее количество детей больше у мужчин\nУ должников средний возраст немного ниже для всех категорий семейного положения.\nМедианный доход у должников и не должников практически не отличается\nСреднее количество детей у группы 30-40 лет больше.\nДо 40 лет детей больше у женщин, старше 40 лет детей больше у мужчин\nВ группе 40-50 лет безработные имеют доход сравнимый с другими группами, а в других возрастных категориях доход безработных значительно ниже.\nС доходом до 100 тысяч детей больше у женщин, а с доходом выше 100 тысяч - у мужчин.\nУ женщин средний возраст выше, кроме категории ученая степень\nДолжники имеют ниже средний возраст как мужчины так и женщины. Ситуация сохраняется во всех группах дохода.\nЛюди от 30 до 50 лет имеют самый высокий средний доход.\nВо всех группах дохода, кроме ‘больше 500 тыс’ среднее количество детей больше\nВозрастная категория ‘30-40’ лет имеет больше детей во всех категориях дохода\nБольше всего кредит берут на цели, связанные с недвижимостью, кроме людей в гражданском браке\nЛюди в гражданском браке чаще берут кредит на свадьбу"
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#формулирование-и-провера-гипотез",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#формулирование-и-провера-гипотез",
    "title": "Исследование надёжности заёмщиков",
    "section": "5. Формулирование и провера гипотез",
    "text": "5. Формулирование и провера гипотез\n\n5.1 Формулирование гипотез\nВернуться к выводам\nНа основе проведенного анализа данных сформулируем следующие гипотезы:\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок.\nГипотеза 2: У мужчин средний доход выше\nГипотеза 3: Цель получения кредита не зависит от еза 3: Цель получения кредита не зависит от среднего ежемесячного доход\nГипотеза 4: Средний доход по семейному статусу одинаковый, но у вдовцов отличается\nГипотеза 5: У должников в среднем больше детей\nГипотеза 6: У должников средний возраст ниже\nГипотеза 7: Медианный доход у должников и не должников не отличается\n\n\nShow the code\n\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количества детей']\n    , age = ['Возраст', 'возраста']\n    , total_income = ['Ежемесячный доход', 'ежемесячного дохода']\n)\n\n\n\n\n5.2 Проверка гипотез\nВернуться к выводам\nПроверим сформулированные гипотезы.\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок\nH0: Наличие детей не влияет на возврат кредита в срок.\nH1: Наличие детей влияет на возврат кредита в срок.\nТак как у нас обе переменных категориальные, то воспользуемся критерием хи-квадрат Пирсона.\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\npagri_data_tools.chi2_pearson(df.has_child, df.debt)\n\n\nХи-квадрат Пирсона\nalpha =  0.05\np-value =  1.724356890544321e-05\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что наличие детей не влияет на возврат кредита в срок, была отклонена.\nЭто указывает на то, что наличие детей оказывает статистически значимое влияние на возврат кредита в срок.\n\nГипотеза 2: У мужчин средний доход выше\nH0: У мужчин средний доход не выше, чем у женщин\nH1: У мужчин средний доход выше, чем у женщин\nпосмотрим на распределение\n\n\nShow the code\n\npagri_data_tools.histogram(df.total_income, titles_for_axis)\n\n\n                                                \n\n\nУ нас значительные выбросы в доходе нужно использовать непараметрический тест\nИспользуем критерий Манна-Уитни\nАльтернатива будет - больше\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\nmale = df[df.gender=='M']['total_income']\nfemale = df[df.gender=='F']['total_income']\n\n\n\n\nShow the code\n\npagri_data_tools.mannwhitneyu(male, female, alternative='l')\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  2.4375861413179528e-245\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что у мужчин средний доход не выше, чем у женщин, была отклонена. Это указывает на то, что доход мужчин статистически значимо выше, чем у женщин.\n\nГипотеза 3: Цель получения кредита не зависит от среднего ежемесячного доход\nH0: Средний ежемесячный доход не различается между группами цели получения кредита.\nH1: Средний ежемесячный доход различается между группами цели получения кредита.\nИспользуем критерий Краскела-Уоллиса\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\nhas_child\nage_cat\ntotal_income_cat\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nесть\n40-50\n200-500 тыс\nнедвижимость\n\n\n\n\n\n\n\n\n\nShow the code\n\npagri_data_tools.kruskal_df(df[['purpose', 'total_income']])\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  0.281811844807747\nНет оснований отвергнуть нулевую гипотезу, поскольку p-value больше или равно уровню значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 у нас нет оснований отвергнуть гипотезу, что средний ежемесячный доход не различается между группами цели получения кредита.\n\nГипотеза 4: Средний доход по семейному статусу одинаковый, но у вдовцов отличается\nH0: Средний ежемесячный доход не различается между группами по семейному статусу\nH1: Средний ежемесячный доход различается между группами по семейному статусу\nИспользуем критерий Краскела-Уоллиса\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\npagri_data_tools.kruskal_df(df[['family_status', 'total_income']])\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  6.410790246681138e-16\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nИспользуем тест Тьюки, чтобы определить различия между группами\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\npagri_data_tools.tukey_hsd_df(df[['family_status', 'total_income']])\n\n\n                  Multiple Comparison of Means - Tukey HSD, FWER=0.05                   \n========================================================================================\n        group1             group2        meandiff  p-adj     lower       upper    reject\n----------------------------------------------------------------------------------------\nНе женат / не замужем        в разводе   1164.3623 0.9971  -8164.6436  10493.3681  False\nНе женат / не замужем   вдовец / вдова -24417.8772    0.0 -34517.7163  -14318.038   True\nНе женат / не замужем гражданский брак  -2094.6023 0.9086  -8676.0921   4486.8875  False\nНе женат / не замужем  женат / замужем    -18.9288    1.0  -5656.3008   5618.4432  False\n            в разводе   вдовец / вдова -25582.2395    0.0 -37297.2146 -13867.2643   True\n            в разводе гражданский брак  -3258.9646 0.8541 -12121.8028   5603.8736  False\n            в разводе  женат / замужем  -1183.2911 0.9949  -9369.4902    7002.908  False\n       вдовец / вдова гражданский брак  22323.2749    0.0  12652.3751  31994.1746   True\n       вдовец / вдова  женат / замужем  24398.9483    0.0  15344.1012  33453.7955   True\n     гражданский брак  женат / замужем   2075.6735 0.7668  -2751.2835   6902.6304  False\n----------------------------------------------------------------------------------------\n\n\nВидим, что гипотеза отвергается в парах где есть вдова / вдовец\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средний ежемесячный доход не различается между группами по семейному статусу, была отклонена.\nЭто указывает на то, что семейный статус оказывает статистически значимое влияние на ежемесячный доход.\n\nГипотеза 5: У должников в среднем больше детей\nH0: У должников и не должников в среднем одинаковое количество детей.\nH1: У должников в среднем больше детей, чем у не должников.\nПосмотрим на распределение количества детей\n\n\nShow the code\n\npagri_data_tools.histogram(df.children, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nТак как у нас дискретное распределение, то будем использовать критерий Манна-Уитни\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\nage\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\nhas_child\nage_cat\ntotal_income_cat\npurpose\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\nнет\n253876\nесть\n40-50\n200-500 тыс\nнедвижимость\n\n\n\n\n\n\n\n\n\nShow the code\n\nyes = df[df.debt=='есть']['children']\nno = df[df.debt=='нет']['children']\n\n\n\n\nShow the code\n\npagri_data_tools.mannwhitneyu(yes, no, alternative='l')\n\n\nU-критерий Манна-Уитни\nalpha =  0.05\np-value =  1.0747666746471685e-05\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n- На уровне значимости 0.05 нулевая гипотеза о том, что у должников и не должников в среднем одинаковое количество детей, была отклонена.\nЭто указывает на то, существует статистически значимое отличие в количестве детей между должниками и не должниками.\nГипотеза 6: У должников средний возраст ниже\nH0: У должников и не должников одинаковый средний возраст\nH1: У должников средний возраст ниже, чем у не должников.\nПосмотрим на распределение возраста\n\n\nShow the code\n\npagri_data_tools.histogram(df.age, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: У должников и не должников дисперсия не отличается\nH1: У должников и не должников дисперсия отличается\nИспользуем тест Левена\n\n\nShow the code\n\nyes = df[df.debt=='есть']['age']\nno = df[df.debt=='нет']['age']\n\n\n\n\nShow the code\n\npagri_data_tools.levene([yes, no])\n\n\nТест Левена на гомогенность дисперсии\nalpha =  0.05\np-value =  0.00014336895517146544\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\npagri_data_tools.ttest_ind(yes, no, equal_var=False, alternative='s')\n\n\nT-критерий Уэлча\np-value =  1.7456980757984063e-27\nalpha =  0.05\nbeta =  0.0\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nПостроим доверительный интервал\n\n\nShow the code\n\npagri_data_tools.confint_t_2samples(yes, no, equal_var=False, alternative='s')\n\n\n(-inf, np.float64(-2.7569637392575))\n\n\nРезультат:\n- На уровне значимости 0.05 нулевая гипотеза о том, что у должников и не должников одинаковый средний возраст, была отклонена.\nЭто указывает на то, существует статистически значимое различие в среднем возрасте должников и не должников.\n95 % доверительный интервал для разницы средних возрастов для должников и не должников равен (-inf, -2.74)\nГипотеза 7: Медианный доход у должников и не должников не отличается\nH0: Медианный доход у должников и не должников не отличается\nH1: Медианный доход у должников и не должников отличается\nИспользуем бутстреп для проверке гипотезы\nУровень значимости alpha выберем 0.05\n\n\nShow the code\n\nyes = df[df.debt=='есть']['total_income']\nno = df[df.debt=='нет']['total_income']\n\n\n\n\nShow the code\n\nfig = pagri_data_tools.bootstrap_diff_2sample(yes, no, stat_func=np.median)\n\n\nBootstrap resampling to estimate the difference\nalpha =  0.05\np-value =  0.0575972194489306\nci =  (np.float64(-2622.3749999999995), np.float64(235.07499999999993))\nНет оснований отвергнуть нулевую гипотезу, поскольку p-value больше или равно уровню значимости\n\n\n\n\nShow the code\n\nfig.show()\n\n\n                                                \n\n\nРезультат:\nНа уровне значимости 0.05 нет оснований отвергнуть гипотезу. что медианный доход у должников и не должников не отличается.\n95 % доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34)\n\n\n5.3 Промежуточный вывод\nВернуться к выводам\n\nНа уровне значимости 0.05 гипотеза, что у мужчин средний доход выше, чем у женщин подтвердилась\nНа уровне значимости 0.05 у нас нет оснований отвергнуть гипотезу, что цель получения кредита практически не зависит от среднего ежемесяченого доход\nНа уровне значимости 0.05 гипотеза, что средний доход по семейному статусу примерно одинаковый, но у вдовцов отличается подтвердилась.\nНа уровне значимости 0.05 гипотеза, что у должников в среднем больше детей подтвердилась.\nНа уровне значимости 0.05 гипотеза, что у должников средний возраст ниже подтвердилась.\n95 % доверительный интервал для разницы средних возрастов для должников и не должников равен (-inf, -2.74)\nНа уровне значимости 0.05 нет оснований отвергнуть гипотезу. что медианный доход у должников и не должников не отличается.\n95 % доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34)\nНа уровне значимости 0.05 гипотеза, что наличие детей не влияет на возврат кредита в срок не подтвердилась."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#общий-вывод",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#общий-вывод",
    "title": "Исследование надёжности заёмщиков",
    "section": "6. Общий вывод",
    "text": "6. Общий вывод\nВернуться к выводам\nВыводы:\n\nНет явной зависимости семейного положения и задолженности.\nУ должников в среднем больше детей. В частности, среди должников женщины имеют больше детей в среднем, чем мужчины, а среди не должников мужчины имеют больше детей в среднем, чем женщины.\nЖенщины чаще возвращают кредит, чем мужчины.\nДолги присутствуют у людей с разным доходом.\nЛюди старше 60 лет реже других имеют долги.\nКредиты, оформленные на цели, связанные с недвижимостью, реже других приводят к долгам.\nУ должников средний возраст немного ниже для всех категорий семейного положения.\nМедианный доход у должников и не должников практически не отличается.\nДолжники имеют ниже средний возраст как мужчины так и женщины. Ситуация сохраняется во всех группах дохода.\nБольше всего кредит берут на цели, связанные с недвижимостью, кроме людей в гражданском браке.\nЛюди в гражданском браке чаще берут кредит на свадьбу.\nДоход является самым значимым признаком для предсказания задолженности.\nЛюди от 30 до 50 лет имеют самый высокий средний доход.\nТолько 5 процентов клиентов моложе 25 лет. Основная часть клиентов старше 30 лет.\nМеньше 5 % клиентов имеют зарплату меньше 63 тысяч. При этом 25 % имеют доход больше 200 тысяч.\n58 % клиентов либо женаты, либо замужем. 19 % в гражданском браке. Можно сделать вывод что большинство в браке.\nБольшинство клиентов женщины (66 процентов).\n92 % клиентов не имеют долга.\nЧем меньше количество детей, тем больше значений с высоким доходом.\nБольшая часть женатых имеет доход 100-200 тыс.\nНа всех уровнях образования, кроме ученой степени, доход у мужчин выше.\nЦель получения кредита практически не зависит от среднего ежемесячного дохода.\nУ мужчин, которые в браке или были в браке, количество детей больше, чем у женщин в той же категории.\n\nАномалии и особенности в данных:\n\nВ датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\n\nВ столбце с количеством детей есть отрицательные значения. 47 штук. Меньше 1 процента от всего датафрейма. Также есть клиенты с 20 детьми.\nКолонка общий трудовой стаж содержит 74 % отрицательных значений. А также максимальное количество дней стажа больше 400 тысяч дней, это больше 1000 лет.\nВ колонке возраста 101 нулевое значение.\nКолонка дохода имеет слишком много знаков после запятой.\nВ колонке с образованием присутствуют одни и те же значения с разными регистрами. При этом в колонке с id образования все в порядке.\n\nРезультаты предобработки данных:\n\nУдалили колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nКолонка со стажем имеет совершенно некорректные данные. Чтобы не внести искажение в анализ, удалим эту колонку.\nУдалили отрицательные значения в колонке с количеством детей, которые составляли 0,2% от общего количества записей в данных.\nУдалили нулевые значения в колонке с возрастом, которые составляли 0,5% от общего количества записей в данных.\nУдалили записи, где количество детей равно 20, которые составляли 0,35% от общего количества записей в данных.\nЗаполнили пропуски в столбце с доходом медианным значением, учитывая категории образование, семейный статус, пол, занятость.\nОкруглили значения дохода до целого.\nУдалили 1 запись, где пол равен XNA\nСоздали дополнительную бинарную колонку, указывающую на наличие детей (1 - есть дети, 0 - нет детей).\nСделали дополнительную колонку с возрастными категориями.\n\nСделали дополнительную колонку с категориями дохода.\n\nЛематизировали колонку с целью кредита, чтобы получить категории целей кредита.\n\nРезультаты проверки гипотез:\n\nГипотеза 1: У мужчин средний доход выше, чем у женщин\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась.\nГипотеза 2: Цель получения кредита практически не зависит от среднего ежемесячного дохода\nРезультат: На уровне значимости 0.05 у нас нет оснований отвергнуть гипотезу.\nГипотеза 3: Средний доход по семейному статусу примерно одинаковый, но у вдовцов отличается\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась.\nГипотеза 4: У должников в среднем больше детей\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась.\n\nГипотеза 5: У должников средний возраст ниже\nРезультат: На уровне значимости 0.05 гипотеза подтвердилась. 95% доверительный интервал для разницы средних возрастов для должников и не должников равен (-inf, -2.74).\n\nГипотеза 6: Медианный доход у должников и не должников не отличается\nРезультат: На уровне значимости 0.05 нет оснований отвергнуть гипотезу. 95% доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34).\n\nГипотеза 7: Наличие детей не влияет на возврат кредита в срок\nРезультат: На уровне значимости 0.05 гипотеза не подтвердилась.\n\nРекомендации:\n\nДобавить контроль данных, чтобы не дублировались значения с разными регистрами в колонке с образованием.\nДобавить уникальный идентификатор клиента, чтобы избежать дублирования строк.\nДобавить проверку на отрицательные значения и на слишком большие значения в количестве детей при загрузке данных.\nВыяснить откуда возникают отрицательные значения в трудовом стаже и добавить контроль ввода невалидных данных.\nВыяснить причину нулевых значений в колонке возраста и добавить проверку на нулевые значения при загрузке данных.\nВыяснить причину большого количества знаков после запятой в колонке дохода."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pavel Grigoryev projects",
    "section": "",
    "text": "Таблица users (информация о пользователях):\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\nАнализ бизнес-показателей в Яндекс.Афиша\n\n\n\n\n\n\nМаркетологи Яндекс.Афиши оптимизируют расходы и эффективность рекламных кампаний. Для достижения этой цели необходимо провести глубокий анализ логов сервера, выгрузок заказов и статистики рекламных расходов.\n\n\n\n\n\n\n\n\n\n\n\n\nИсследование надёжности заёмщиков\n\n\n\n\n\n\nИсследование влияния семейного положения и количества детей клиента на факт погашения кредита в срок для кредитного отдела банка.\n\n\n\n\n\n\n\n\n\n\n\n\nИсследование объявлений о продаже квартир\n\n\n\n\n\n\nИсследование факторов, влияющих на ценообразование на рынке недвижимости в Санкт-Петербурге.\n\n\n\n\n\n\n\n\n\n\n\n\nИсследование продаж компьютерных игр\n\n\n\n\n\n\nПроводится анализ для выявления ключевых факторов, влияющих на успешность продаж компьютерных игр, с целью оптимизации рекламных кампаний и прогнозирования популярных продуктов.\n\n\n\n\n\n\n\n\n\n\n\n\nИсследование рынка заведений общественного питания\n\n\n\n\n\n\nОткрывается кафе с роботами-официантами в Москве. Проект инновационный, но дорогой. Необходимо исследование рынка для привлечения инвесторов и оценки потенциала проекта.\n\n\n\n\n\n\n\n\n\n\n\n\nОпределение перспективного тарифа для телеком-компании\n\n\n\n\n\n\nПроводится анализ данных пользователей для оптимизации рекламного бюджета и выявления более прибыльного тарифного плана: «Смарт» или «Ультра».\n\n\n\n\n\n\n\n\n\n\n\n\nТестирование гипотез для увеличения выручки интернет-магазина\n\n\n\n\n\n\nУвеличение выручки интернет-магазина путем приоритизации, тестирования и анализа гипотез для выявления наиболее эффективных стратегий.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html",
    "href": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html",
    "title": "Анализ бизнес-показателей в Яндекс.Афиша",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nМаркетологи Яндекс.Афиши нацелены на оптимизацию расходов и повышение эффективности рекламных кампаний. Для достижения этой цели необходимо провести глубокий анализ логов сервера, выгрузок заказов и статистики рекламных расходов. Это позволит выявить неэффективные источники трафика и оптимально перераспределить бюджет. Ключевые задачи проекта включают изучение поведения клиентов на сайте, определение времени первых покупок, расчет доходности каждого клиента и анализ сроков окупаемости затрат на привлечение. Полученные результаты помогут не только снизить затраты, но и значительно улучшить маркетинговые стратегии, обеспечивая более высокий возврат на инвестиции.\nЦель:\nОптимизировать маркетинговые расходы и повысить эффективность рекламных стратегий путем анализа источников трафика и поведения клиентов, с целью выявления неэффективных каналов.\nИсточники данных:\nУсловия проведения анализа данных:\nДля анализ будут использоваться данные с июня 2017 по конец мая 2018 года.\nГлавные выводы:\n- Источники трафика 1, 2, 9, 5 окупили себя. Лучше всех показал себя источник 1\n- Источник трафика 3 сильно убыточный\n- По абсолютным значениям валовой прибыли компания 3 показывает очень существенный минус\n- С ноября 2017 по март 2018 тратилось много денег на компанию с id 3\n- Больше всего выручки получено в декабре 2017 года\n- Источник трафика с id 3 имеет самые большие средние расходы в день\n- На источник трафика 3 потратили намного больше, чем на все остальные источники\n- Средние расходы на маркетинг в день росли до ноября 2017 года. Затем снижались\n- Количество сессий растет до ноября 2017 года, затем снижается\n- MAU растет до ноября 2017 года, затем снижается\n- Количество новых пользователей растет до ноября 2017 года, затем снижается\n- Количество заказов растет до декабря 2017 года, затем скачкообразно снижается\n- Средний чек по месяцам колеблется вокруг значения 5 у.е\n- Стоимость привлечения одного покупателя колеблется возле значения 8 y.e\n- Стоимость привлечения одного пользователя слабо меняется по месяцам и колеблется около значения 1.4 у.е\n- Среднее количество покупок на одного покупателя стабильно держится около уровне 1.2\n- Максимальный средний чек был в декабре 2017 года\n- Средний доход с одного пользователя был максимальным в декабре 2017 года\n- Сумма заказа варьируется от 0 до 2633.28 у.е\n- В основном заказы совершаются в диапазоне от 1.22 до 4.89 у.е\n- Расходы на рекламные компании варьируются от 0.54 до 1788.28 у.е\n- В основном расходы на рекламу лежат в диапазоне от 21.95 до 170.06 у.е\n- Длительность сессии варьируется от 0 минут до 711 минут\n- В основном длительность сессии длиться от 2 до 14 минут\n- У новых пользователей медиана и размах в длительности сессии больше, чем у старых пользователей\n- С категории устройств desktop входов больше, чем с touch, во всех источниках трафика\n- Больше всего сессий от источника 4\n- Медианная длительность сессии на устройствах desktop значительно выше, чем на устройчтвах touch\n- Средняя длительность сессии больше у источников трафика 6, 1 и 2\n- Больше всего пользователей появлятеся в зимних когортах\n- Основная часть выручки от когорты получается в первый месяц ее жизни\n- Больше всего кумулятивной выручки принесли когорты, которые появились с сентября 2017 по декабрь 2017\n- Основная часть заказов приходится на первый месяц жизни когорт\n- Присутствует динамика на снижение retention с каждой новой когортой\n- После первого месяца у всех когорт остается не более 10 процентов пользователей. Это очень низкий показатель\n- Когорта от сентября 2017 года имеет самые высокие значения LTV. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 5539673724080479777\n- Только 2 когорты вышли в плюс (июнь 2017 и сентябрь 2017). Когорта от сентября скорее исключение, так как там присутствует оптовый покупатель\nРекомендации:"
  },
  {
    "objectID": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#загрузка-библиотек",
    "href": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#загрузка-библиотек",
    "title": "Анализ бизнес-показателей в Яндекс.Афиша",
    "section": "Загрузка библиотек ",
    "text": "Загрузка библиотек \n\n\nShow the code\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore\npd.set_option('display.max_columns', None)\npd.options.display.float_format = '{:,.2f}'.format"
  },
  {
    "objectID": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#описание-и-изучение-данных",
    "href": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#описание-и-изучение-данных",
    "title": "Анализ бизнес-показателей в Яндекс.Афиша",
    "section": "1. Описание и изучение данных",
    "text": "1. Описание и изучение данных\n\n1.1 Описание данных\nТаблица visits_log (лог сервера с информацией о посещениях сайта):\n\nUid - уникальный идентификатор пользователя,\nDevice - категория устройства пользователя,\nStart Ts - дата и время начала сессии,\nEnd Ts - дата и время окончания сессии,\nSource Id - идентификатор источника перехода на сайт.\n\nТаблица orders_log (информацию о заказах):\n\nUid - уникальный идентификатор пользователя,\nBuy Ts - дата и время заказа,\nRevenue - сумма заказа.\n\nТаблица costs (информацию о расходах на маркетинг):\n\nsource_id - идентификатор рекламного источника,\ndt - дата проведения рекламной кампании,\ncosts - расходы на эту кампанию.\n\n\n\n1.2 Изучение данных\n\n1.2.1 Изучение переменных\n\n1.2.1.1 Таблица visits_log (лог сервера с информацией о посещениях сайта)\nЗагружаем данные и задаем типы данных для столбцов, где это возможно.\n\n\nShow the code\ndtype = {'Device': 'category', 'Source Id': 'category'}\ndf_visits = pd.read_csv('https://code.s3.yandex.net/datasets/visits_log.csv', dtype=dtype\n                , parse_dates=['End Ts', 'Start Ts'], date_format='%Y-%m-%d %H:%M:%S')\ndf_visits.rename(columns={'Device': 'device', 'End Ts': 'session_end_dt', 'Start Ts': 'session_start_dt'\n                          , 'Source Id': 'source_id', 'Uid': 'uid'}, inplace=True)\ndf_visits.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\ndevice\nsession_end_dt\nsource_id\nsession_start_dt\nuid\n\n\n\n\n349164\ndesktop\n2018-04-24 09:37:00\n2\n2018-04-24 09:10:00\n2569181675832811876\n\n\n36050\ndesktop\n2017-11-20 20:12:00\n3\n2017-11-20 19:15:00\n8877700266692256763\n\n\n189380\ntouch\n2017-11-12 14:36:00\n2\n2017-11-12 14:13:00\n7420756121024737125\n\n\n351149\ndesktop\n2017-12-07 16:09:00\n4\n2017-12-07 16:06:00\n9717719112529363193\n\n\n85669\ndesktop\n2017-10-05 17:40:00\n3\n2017-10-05 17:39:00\n8687122272170077156\n\n\n\n\n\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_visits)\ngen.next() \n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n359.40k\n5\n9\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 2: Статистика столбца \"session_end_dt\"\n\n\n\n\n\nFirst date\n2017-06-01 00:02:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-06-01 01:26:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n359.40k (100%)\n\nDistinct\n224.76k (63%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n3\n\nDuplicates\n134.64k (37%)\n\nDays missing\n&lt;1%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ дате окончания сессии последняя дата попала на следующий месяц, нужно это учесть при расчете метрик.\nВ дате окончания сессии есть пропуски в днях, но совсем мало (меньше 1%)\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 3: Статистика столбца \"session_start_dt\"\n\n\n\n\n\nFirst date\n2017-06-01 00:01:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-05-31 23:59:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n359.40k (100%)\n\nDistinct\n224.30k (62%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n3\n\nDuplicates\n135.10k (38%)\n\nDays missing\n&lt;1%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ дате начала сессии есть пропуски в днях, но совсем мало (меньше 1%)\n\n\n\nShow the code\ngen.next(only_summary=True)\n\n\n\n            \n                \n\n\n\n\nTable 4: Summary for \"uid\n\n\n\n\n\nValues\n359.40k (100%)\n\n\n\nMissing\n---\n\n\n\nDistinct\n228.17k (63%)\n\n\n\nDuplicates\n131.23k (37%)\n\n\n\nZeros\n---\n\n\n\nNegative\n---\n\n\n\nRAM (Mb)\n3\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ таблице с логами о посещении сайта 63% уникальных пользователей.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 5: Статистика и топ-10 значений столбца \"device\"\n\n\n\n\n\nValues\n359.40k (100%)\n\ndesktop (73%)\n\n\nMissing\n---\n\ntouch (27%)\n\n\nDistinct\n2.00 (&lt;1%)\n\n\n\n\nDuplicated origin\n359.40k (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nПользователей с девайсами desktop 73%, пользователей с девайсами touchpad 27%\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 6: Статистика и топ-10 значений столбца \"source_id\"\n\n\n\n\n\nValues\n359.40k (100%)\n\n4 (28%)\n\n\nMissing\n---\n\n3 (24%)\n\n\nDistinct\n9.00 (&lt;1%)\n\n5 (19%)\n\n\nDuplicated origin\n359.39k (99.9%)\n\n2 (13%)\n\n\nDupl (modify - origin)\n---\n\n1 (9%)\n\n\nEmpty\n---\n\n9 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\n10 (3%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\n\nShow the code\npagri_data_tools.value_counts_table(df_visits, 'source_id', chunk_size = 5, tables_in_row = 10)\n\n\n\n\n\n\n\nTable 7: value counts for \"source_id\"\n\n\n\n\n\n4\n101 794 (28.32%)\n|\n9\n13 277 (3.69%)\n\n\n3\n85 610 (23.82%)\n|\n10\n10 025 (2.79%)\n\n\n5\n66 905 (18.62%)\n|\n7\n36 (0.01%)\n\n\n2\n47 626 (13.25%)\n|\n6\n6 (0.0%)\n\n\n1\n34 121 (9.49%)\n|\n\n\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ таблице визитов 9 уникальных источников перехода на сайт\nИсточники 6 и 7 очень редко встречаются\n\n\n\n1.2.1.2 Таблица orders_log (информацию о заказах)\nЗагружаем данные и задаем типы данных для столбцов, где это возможно.\n\n\nShow the code\ndf_orders = pd.read_csv('https://code.s3.yandex.net/datasets/orders_log.csv'\n                , parse_dates=['Buy Ts'], date_format='%Y-%m-%d %H:%M:%S')\ndf_orders.rename(columns={'Buy Ts': 'order_dt', 'Revenue': 'revenue', 'Uid': 'uid'}, inplace=True)\ndf_orders.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\norder_dt\nrevenue\nuid\n\n\n\n\n49089\n2018-05-26 18:28:00\n5.50\n1811520111156483535\n\n\n50332\n2018-05-31 19:43:00\n1.77\n4194075740388201505\n\n\n3675\n2017-07-17 14:24:00\n1.83\n6363711940649679047\n\n\n37863\n2018-03-02 20:13:00\n18.33\n16208519295351883434\n\n\n20859\n2017-11-29 09:42:00\n0.24\n17752546109465586272\n\n\n\n\n\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_orders)\ngen.next()\n\n\n\n\n\n\n\nTable 8: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n50.41k\n3\n1\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 9: Статистика столбца \"order_dt\"\n\n\n\n\n\nFirst date\n2017-06-01 00:10:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-06-01 00:02:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n50.41k (100%)\n\nDistinct\n45.99k (91%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n4.42k (9%)\n\nDays missing\n&lt;1%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ дате заказа последняя дата попала на следующий месяц, нужно это учесть при расчете метрик.\nВ дате заказа есть пропущенные дни, но их мало (меньше 1%)\n\n Вернуться к выводам\n\n\nShow the code\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 10: Статистика и гистограмма столбца \"revenue\"\n\n\n\n\n\nValues\n50.41k (100%)\n\nMax\n2.63k\n\nAvg\n5.00\n\n1.83 (5%)\n\n\nMissing\n---\n\n95%\n13.75\n\nMode\n1.83\n\n2.44 (5%)\n\n\nDistinct\n1.15k (2%)\n\n75%\n4.89\n\nRange\n2.63k\n\n3.67 (5%)\n\n\nDuplicates\n49.27k (98%)\n\n50%\n2.50\n\niQR\n3.67\n\n1.22 (4%)\n\n\nZeros\n51.00 (&lt;1%)\n\n25%\n1.22\n\nstd\n21.82\n\n3.05 (4%)\n\n\nNegative\n---\n\n5%\n0.37\n\nkurt\n5300.27\n\n4.89 (3%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.00\n\nskew\n58.91\n\n0.61 (3%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nВ столбце с суммой заказов 51 нулевое значение (меньше 1%)\nСумма заказа варьируется от 0 до 2633.28 у.е.\nВ основном заказы совершаются в диапазоне от 1.22 до 4.89 у.е.\nСумма заказа в 2633.28 у.е. является выбросом\n\n\n\nShow the code\ngen.next(only_summary=True)\n\n\n\n            \n                \n\n\n\n\nTable 11: Summary for \"uid\n\n\n\n\n\nValues\n50.41k (100%)\n\n\n\nMissing\n---\n\n\n\nDistinct\n36.52k (72%)\n\n\n\nDuplicates\n13.89k (28%)\n\n\n\nZeros\n---\n\n\n\nNegative\n---\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ таблице с заказами 72% уникальных пользователей.\n\n\n\n1.2.1.3 Таблица costs (информацию о расходах на маркетинг)\nЗагружаем данные и задаем типы данных для столбцов, где это возможно.\n\n\nShow the code\ndtype = {'source_id': 'category'}\ndf_costs = pd.read_csv('https://code.s3.yandex.net/datasets/costs.csv', dtype=dtype\n                , parse_dates=['dt'], date_format='%Y-%m-%d')\ndf_costs.rename(columns={'dt': 'promo_date', 'costs': 'promo_costs'}, inplace=True)\ndf_costs.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nsource_id\npromo_date\npromo_costs\n\n\n\n\n1770\n5\n2018-04-16\n139.51\n\n\n660\n2\n2018-03-25\n125.00\n\n\n1782\n5\n2018-04-28\n81.28\n\n\n1352\n4\n2018-02-19\n164.76\n\n\n1308\n4\n2018-01-06\n301.00\n\n\n\n\n\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_costs)\ngen.next()\n\n\n\n\n\n\n\nTable 12: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n2.54k\n3\n0\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 13: Статистика столбца \"promo_date\"\n\n\n\n\n\nFirst date\n2017-06-01 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-05-31 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n2.54k (100%)\n\nDistinct\n364.00 (14%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n2.18k (86%)\n\nDays missing\n&lt;1%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\nНаблюдения:\n\nВ таблице с расходами на рекламные компании есть пропущенные дни, но их мало (меньше 1%)\n\n Вернуться к выводам\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 14: Статистика и гистограмма столбца \"promo_costs\"\n\n\n\n\n\nValues\n2.54k (100%)\n\nMax\n1.79k\n\nAvg\n129.48\n\n16.25 &lt;1%\n\n\nMissing\n---\n\n95%\n470.72\n\nMode\n---\n\n16.81 &lt;1%\n\n\nDistinct\n2.40k (94%)\n\n75%\n170.06\n\nRange\n1.79k\n\n57.07 &lt;1%\n\n\nDuplicates\n146.00 (6%)\n\n50%\n77.30\n\niQR\n148.12\n\n18.37 &lt;1%\n\n\nZeros\n---\n\n25%\n21.95\n\nstd\n156.30\n\n6.35 &lt;1%\n\n\nNegative\n---\n\n5%\n7.39\n\nkurt\n9.71\n\n10.32 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.54\n\nskew\n2.49\n\n23.74 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nРасходы на рекламные компании варьируются от 0.54 до 1788.28 у.е.\nВ основном расходы на рекламу лежат в диапазоне от 21.95 до 170.06 у.е.\nВ расходах на рекламные компании значение 1788.28 у.е. является выбросом.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 15: Статистика и топ-10 значений столбца \"source_id\"\n\n\n\n\n\nValues\n2.54k (100%)\n\n5 (14%)\n\n\nMissing\n---\n\n1 (14%)\n\n\nDistinct\n7.00 (&lt;1%)\n\n10 (14%)\n\n\nDuplicated origin\n2.54k (99.7%)\n\n2 (14%)\n\n\nDupl (modify - origin)\n---\n\n3 (14%)\n\n\nEmpty\n---\n\n4 (14%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\n9 (14%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ таблице с расходами на рекламные компании 7 уникальных рекламных компаний, а в таблице с посещениями сайтов 9.\nКомпании 6 и 7 отсутствуют в таблице с расходами на рекламные компании. Возможно это бесплатный трафик.\n\nСоберем все датафреймы в словарь для удобства дальнейшей работы.\n\n\nShow the code\ndfs = dict(\n    visits = df_visits\n    , orders = df_orders\n    , costs = df_costs\n)\n\n\n\n\n\n1.2.2 Изучение дубликатов\nПосмотрим на дубли во всем датафрейме\n\n\nShow the code\nfor key, df in dfs.items():\n    display(f'{key} - {pagri_data_tools.check_duplicated(df)}')\n\n\n'visits - no duplicates'\n\n\n'orders - no duplicates'\n\n\n'costs - no duplicates'\n\n\nПосмотрим сколько у нас дублей в каждой колонке\n\n\nShow the code\nfor key, df in dfs.items():\n    print(key)\n    series_duplicated = pagri_data_tools.find_columns_with_duplicates(df)   \n\n\nvisits\n\n\n\n\n\n\n\nTable 16: Duplicates\n\n\n\n\n\ndevice\n359398 (100.00%)\n\n\nsession_end_dt\n134640 (37.46%)\n\n\nsource_id\n359391 (100.00%)\n\n\nsession_start_dt\n135097 (37.59%)\n\n\nuid\n131231 (36.51%)\n\n\n\n\n\n\n\n\norders\n\n\n\n\n\n\n\nTable 17: Duplicates\n\n\n\n\n\norder_dt\n4424 (8.78%)\n\n\nrevenue\n49266 (97.72%)\n\n\nuid\n13892 (27.56%)\n\n\n\n\n\n\n\n\ncosts\n\n\n\n\n\n\n\nTable 18: Duplicates\n\n\n\n\n\nsource_id\n2535 (99.72%)\n\n\npromo_date\n2178 (85.68%)\n\n\npromo_costs\n146 (5.74%)\n\n\n\n\n\n\n\n\n\n\n1.2.3 Изучение пропусков\nПосмотрим на пропуски в каждом столбце\n\n\nShow the code\nfor key, df in dfs.items():\n    print(key)\n    series_duplicated = pagri_data_tools.find_columns_with_missing_values(df)   \n\n\nvisits\nThere are no missing values\norders\nThere are no missing values\ncosts\nThere are no missing values\n\n\nПропусков не обнаружено\n\n\n1.2.4 Изучение выбросов\nИзучим выбросы в каждом столбце.\nПосмотрим что за заказы с суммой больше 1000 у.е.\n\n\nShow the code\ndf_orders[df_orders.revenue &gt; 1000]\n\n\n\n\n\n\n\n\n\norder_dt\nrevenue\nuid\n\n\n\n\n23165\n2017-12-10 13:04:00\n1,195.64\n5539673724080479777\n\n\n23244\n2017-12-10 20:17:00\n2,633.28\n5539673724080479777\n\n\n24607\n2017-12-17 18:06:00\n1,109.10\n11149926373378902217\n\n\n36522\n2018-02-23 08:54:00\n1,236.28\n11149926373378902217\n\n\n36682\n2018-02-24 09:25:00\n1,221.37\n11149926373378902217\n\n\n40386\n2018-03-18 09:13:00\n1,073.11\n11149926373378902217\n\n\n47507\n2018-05-16 19:53:00\n1,080.44\n11149926373378902217\n\n\n\n\n\n\n\nПодозрительные 2 пользователя.\nСгруппируем по пользователем и посмотрим топ пользователей по сумме заказа.\n\n\nShow the code\ndf_orders.groupby('uid')[['revenue']].sum().sort_values('revenue', ascending=False).head(5)\n\n\n\n\n\n\n\n\n\nrevenue\n\n\nuid\n\n\n\n\n\n5539673724080479777\n11,810.18\n\n\n11149926373378902217\n10,519.46\n\n\n17999372575896145244\n1,979.33\n\n\n6731421022966725351\n1,450.68\n\n\n3644482766749211722\n1,444.29\n\n\n\n\n\n\n\nНаблюдения:\n\n2 пользователя (id 5539673724080479777 и 11149926373378902217) имеют намного больше суммы заказов, чем остальные. Скорее всего это оптовики или перекупы.\n\nПосмотрим на расходы на рекламные компании больше 1000\n\n\nShow the code\ndf_costs[df_costs.promo_costs &gt; 1000]\n\n\n\n\n\n\n\n\n\nsource_id\npromo_date\npromo_costs\n\n\n\n\n902\n3\n2017-11-24\n1,788.28\n\n\n919\n3\n2017-12-11\n1,061.18\n\n\n\n\n\n\n\nНаблюдения:\n\nДля рекламной компании с id 3 были две очень крупные суммы расходов 2017-11-01 и 2017-12-11.\n\nПосмотрим на выбросы используя квантили.\nВыбросами будем считать значения, которые выходят за пределы 5 и 95 квантилей.\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df_orders)\n\n\n\n\n\n\n\nTable 19: Outliers\n\n\n\n\n\nrevenue\n4476 (8.88%)\n\n\nuid\n5037 (9.99%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nПроцент выбросов в выручке меньше 10%, это указывает на то, что выбросов не слишком много.\n\nПосмотрим на распределены выбросы во времени\n\n\nShow the code\noutliers_by_month = series_outliers.revenue.set_index('order_dt').resample('ME')[['revenue']].sum().reset_index()\n\n\n\n\nShow the code\nconfig = dict(\n    df = outliers_by_month\n    , x = 'order_dt'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True      \n    , width = 1000\n    , height = 450                                                                                                                         \n)\nfig = pagri_data_tools.bar(config)\nfig = pagri_data_tools.plotly_default_settings(fig)\nfig.update_layout(\n    title_text = 'Суммарная стоимость заказа в зависимости от месяца'\n    , yaxis_title_text = 'Стоимость заказа'\n    , xaxis_title_text = 'Месяц и год'\n)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего суммарных выбросов в стоимости заказа было в декабре 2017 года\n\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df_costs)\n\n\n\n\n\n\n\nTable 20: Outliers\n\n\n\n\n\npromo_costs\n256 (10.07%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nПроцент выбросов в расходах на рекламные компании чуть больше 10%, это указывает на то, что выбросов не слишком много.\n\n\n\nShow the code\nseries_outliers.promo_costs.head(1)\n\n\n\n\n\n\n\n\n\nsource_id\npromo_date\npromo_costs\n\n\n\n\n30\n1\n2017-07-01\n5.80\n\n\n\n\n\n\n\nПосмотрим на распределены выбросы во времени\n\n\nShow the code\noutliers_by_month = (\n    series_outliers['promo_costs']\n    .groupby([pd.Grouper(key='promo_date', freq='ME'), 'source_id'], observed=True)  # Группируем по месяцу и source_id\n    .agg({'promo_costs': 'sum'})  # Суммируем promo_costs\n    .reset_index()  # Сбрасываем индекс\n)\n\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = outliers_by_month\n    , x = 'promo_date'\n    , y = 'promo_costs'  \n    , category = 'source_id'\n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort = True    \n    , sort_axis = False    \n    , sort_legend = True      \n    , width = 1000\n    , height = 450                                                                                                                         \n)\nfig = pagri_data_tools.bar(config)\nfig = pagri_data_tools.plotly_default_settings(fig)\nfig.update_layout(\n    title_text = 'Суммарная стоимость рекламной компании в зависимости от месяца'\n    , yaxis_title_text = 'Стоимость рекламнойкомпании'\n    , xaxis_title_text = 'Месяц и год'\n    , legend_title_text = 'Компанния'\n)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего суммарные расходы в выбросах у компании с id 3.\nС ноября 2017 по март 2018 тратилось много денег на компанию с id 3.\n\nПосмотрим на выбросы в разрезе компаний.\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_outliers, \"by_category\", \"promo_costs\", \"source_id\")\n\n\n\n\n\n\n\nTable 21: Share in \"promo_costs\" by category \"source_id\"\n\n\n\n\n\nsource_id\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\n1\n363\n2\n0.6%\n0.8%\n14.3%\n-13.5%\n\n\n10\n363\n70\n19.3%\n27.3%\n14.3%\n13.1%\n\n\n2\n363\n1\n0.3%\n0.4%\n14.3%\n-13.9%\n\n\n3\n363\n113\n31.1%\n44.1%\n14.3%\n29.9%\n\n\n4\n363\n25\n6.9%\n9.8%\n14.3%\n-4.5%\n\n\n5\n364\n2\n0.5%\n0.8%\n14.3%\n-13.5%\n\n\n9\n363\n43\n11.8%\n16.8%\n14.3%\n2.5%\n\n\n\n\n\n\n\n\nНаблюдения: - Рекламная. компания с id 3 имеет больше выбросов в расходах, чем другие компании. Также много выбросов в расходах у компании с id 10, но меньше\n\n\n1.2.5 Изучение отрицательных значений\nИзучим отрицательные значения в каждом столбце.\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df_visits)\n\n\nThere are no negative values\n\n\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df_orders)\n\n\nThere are no negative values\n\n\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df_costs)\n\n\nThere are no negative values\n\n\nОтрицательные значения не обнаружены\n\n\n1.2.6 Изучение нулевых значений\nИзучим нулевые значения в каждом столбце.\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_zeros_values(df_visits)\n\n\nThere are no zeros values\n\n\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_zeros_values(df_orders)\n\n\n\n\n\n\n\nTable 22: Zeros\n\n\n\n\n\nrevenue\n51 (0.10%)\n\n\n\n\n\n\n\n\nПосмотрим на нули в стоимости заказа\n\n\nShow the code\nseries_negative.revenue.head()\n\n\n\n\n\n\n\n\n\norder_dt\nrevenue\nuid\n\n\n\n\n1802\n2017-06-22 18:19:00\n0.00\n17030528792926543083\n\n\n2787\n2017-07-07 15:54:00\n0.00\n10281425020415612933\n\n\n4783\n2017-08-02 14:54:00\n0.00\n184148767273119549\n\n\n5095\n2017-08-09 14:48:00\n0.00\n5603453646174104178\n\n\n5863\n2017-08-23 13:43:00\n0.00\n5603453646174104178\n\n\n\n\n\n\n\nПосмотрим есть ли зависимость от пользователей\n\n\nShow the code\nseries_negative.revenue.groupby('uid')[['revenue']].count().sort_values('revenue', ascending=False).head(10)\n\n\n\n\n\n\n\n\n\nrevenue\n\n\nuid\n\n\n\n\n\n2037345392173160982\n12\n\n\n5603453646174104178\n6\n\n\n8277558335454815700\n6\n\n\n4927261749585088199\n4\n\n\n5570343171257035973\n4\n\n\n2883839899480223178\n2\n\n\n184148767273119549\n1\n\n\n10281425020415612933\n1\n\n\n15254206642996645755\n1\n\n\n14973814017160376581\n1\n\n\n\n\n\n\n\nНаблюдения:\n\nУ пользователя с id 2037345392173160982 больше всего нулей в стоимости заказа.\n\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_zeros_values(df_costs)\n\n\nThere are no zeros values\n\n\n\n\n\n1.3 Промежуточный вывод\n\nВ столбце с суммой заказов 51 нулевое значение (меньше 1%)\nВ таблице с расходами на рекламные компании 7 уникальных рекламных компаний, а в таблице с посещениями сайтов 9.\nКомпании 6 и 7 отсутствуют в таблице с расходами на рекламные компании. Возможно это бесплатный трафик.\nСумма заказа в 2633.28 у.е. является выбросом\nВ расходах на рекламные компании значение 1788.28 у.е. является выбросом.\n2 пользователя (id 5539673724080479777 и 11149926373378902217) имеют намного больше суммы заказов, чем остальные. Скорее всего это оптовики или перекупы.\nДля рекламной компании с id 3 были две очень крупные суммы расходов 2017-11-01 и 2017-12-11.\nПроцент выбросов в выручке меньше 10%, это указывает на то, что выбросов не слишком много.\nБольше всего суммарных выбросов в стоимости заказа было в декабре 2017 года\nПроцент выбросов в расходах на рекламные компании чуть больше 10%, это указывает на то, что выбросов не слишком много.\nБольше всего суммарные расходы в выбросах у компании с id 3.\nС ноября 2017 по март 2018 тратилось много денег на компанию с id 3.\nРекламная. компания с id 3 имеет больше выбросов в расходах, чем другие компании. Также много выбросов в расходах у компании с id 10, но меньше\nУ пользователя с id 2037345392173160982 больше всего нулей в стоимости заказа.\nВ дате окончания сессии последняя дата попала на следующий месяц, нужно это учесть при расчете метрик.\nВ дате окончания сессии есть пропуски в днях, но совсем мало (меньше 1%)\nВ дате начала сессии есть пропуски в днях, но совсем мало (меньше 1%)\nВ таблице с логами о посещении сайта 63% уникальных пользователей.\nПользователей с девайсами desktop 73%, пользователей с девайсами touchpad 27%\nВ таблице визитов 9 уникальных источников перехода на сайт\nИсточники 6 и 7 очень редко встречаются\nВ дате заказа последняя дата попала на следующий месяц, нужно это учесть при расчете метрик.\nВ дате заказа есть пропущенные дни, но их мало (меньше 1%)\nСумма заказа варьируется от 0 до 2633.28 у.е.\nВ основном заказы совершаются в диапазоне от 1.22 до 4.89 у.е.\nВ таблице с заказами 72% уникальных пользователей.\nВ таблице с расходами на рекламные компании есть пропущенные дни, но их мало (меньше 1%)\nРасходы на рекламные компании варьируются от 0.54 до 1788.28 у.е.\nВ основном расходы на рекламу лежат в диапазоне от 21.95 до 170.06 у.е."
  },
  {
    "objectID": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#предобработка-данных",
    "href": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#предобработка-данных",
    "title": "Анализ бизнес-показателей в Яндекс.Афиша",
    "section": "2. Предобработка данных",
    "text": "2. Предобработка данных\n\n2.1 Предварительная фильтрация данных\nВ дате окончания сессии и в дате заказа есть данные за июнь 2018 года.\nЧтобы даты во всех таблицах имели одинаковые границы, обрежем дату в окончании сессии и дате заказа от 2017-06-01 до 2018-06-01.\n\n\nShow the code\ndf_visits = df_visits[(df_visits.session_end_dt &gt; '2017-06-01') & (df_visits.session_end_dt &lt; '2018-06-01')]\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_visits, column='session_end_dt', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 23: Статистика столбца \"session_end_dt\"\n\n\n\n\n\nFirst date\n2017-06-01 00:02:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-05-31 23:59:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n359.39k (100%)\n\nDistinct\n224.75k (63%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n5\n\nDuplicates\n134.64k (37%)\n\nDays missing\n&lt;1%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\n\n\nShow the code\ndf_orders = df_orders[(df_orders.order_dt &gt; '2017-06-01') & (df_orders.order_dt &lt; '2018-06-01')]\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_orders, column='order_dt', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 24: Статистика столбца \"order_dt\"\n\n\n\n\n\nFirst date\n2017-06-01 00:10:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2018-05-31 23:56:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n50.41k (100%)\n\nDistinct\n45.99k (91%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n1\n\nDuplicates\n4.42k (9%)\n\nDays missing\n&lt;1%\n\n\n\n\n\n\n\n\n\n            \n            \n\n\n\n\n2.2 Обработка выбросов\nВ столбце с суммой заказов 51 нулевое значение (меньше 1%).\nТак как этих значений мало, то удалим их, чтобы не мешали анализу.\n\n\nShow the code\ndf_orders.shape[0]\n\n\n50414\n\n\n\n\nShow the code\ndf_orders = df_orders[df_orders.revenue != 0]\ndf_orders.shape[0]\n\n\n50363\n\n\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df_orders)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\n\n\n\n\n\n\n\n2.3 Промежуточный вывод\n\nОбрезали данные, чтобы все даты были от 2017-06-01 до 2018-06-01.\nУдалили 51 нулевое значение (меньше 1%) в столбце с суммой заказа."
  },
  {
    "objectID": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#обогащение-данных-и-создание-новых-переменных",
    "href": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#обогащение-данных-и-создание-новых-переменных",
    "title": "Анализ бизнес-показателей в Яндекс.Афиша",
    "section": "3. Обогащение данных и создание новых переменных",
    "text": "3. Обогащение данных и создание новых переменных\n\n3.1 Создание новых числовых переменных\nСоздадим новую числовую переменную - длительность сессии в минутах.\n\n\nShow the code\ndf_visits.columns\n\n\nIndex(['device', 'session_end_dt', 'source_id', 'session_start_dt', 'uid'], dtype='object')\n\n\n\n\nShow the code\ndf_visits['session_duration'] = (df_visits.session_end_dt - df_visits.session_start_dt) / np.timedelta64(1, 'm')\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_visits, column='session_duration', mode='column')\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 25: Статистика и гистограмма столбца \"session_duration\"\n\n\n\n\n\nValues\n359.39k (100%)\n\nMax\n711.00\n\nAvg\n10.72\n\n1.00 (15%)\n\n\nMissing\n---\n\n95%\n38.00\n\nMode\n1.00\n\n0.00 (10%)\n\n\nDistinct\n312.00 (&lt;1%)\n\n75%\n14.00\n\nRange\n757.00\n\n2.00 (10%)\n\n\nDuplicates\n359.08k (99.9%)\n\n50%\n5.00\n\niQR\n12.00\n\n3.00 (7%)\n\n\nZeros\n35.79k (10%)\n\n25%\n2.00\n\nstd\n16.62\n\n4.00 (6%)\n\n\nNegative\n2.00 (&lt;1%)\n\n5%\n0.00\n\nkurt\n81.26\n\n5.00 (5%)\n\n\nRAM (Mb)\n5\n\nMin\n-46.00\n\nskew\n5.74\n\n6.00 (4%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\n2 Отрицательных значения. Посмотрим на эти строки.\n\n\nShow the code\ndf_visits[df_visits.session_duration &lt; 0]\n\n\n\n\n\n\n\n\n\ndevice\nsession_end_dt\nsource_id\nsession_start_dt\nuid\nsession_duration\n\n\n\n\n4181\ndesktop\n2018-03-25 03:18:00\n3\n2018-03-25 03:50:00\n13092152539246794986\n-32.00\n\n\n177972\ndesktop\n2018-03-25 03:09:00\n9\n2018-03-25 03:55:00\n4621202742905035453\n-46.00\n\n\n\n\n\n\n\nЭто явно ошибка, удалим эти строки.\n\n\nShow the code\ndf_visits.shape[0]\n\n\n359388\n\n\n\n\nShow the code\ndf_visits = df_visits[~(df_visits.session_duration &lt; 0)]\n\n\n\n\nShow the code\ndf_visits.shape[0]\n\n\n359386\n\n\n Вернуться к выводам\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_visits, column='session_duration', mode='column')\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 26: Статистика и гистограмма столбца \"session_duration\"\n\n\n\n\n\nValues\n359.39k (100%)\n\nMax\n711.00\n\nAvg\n10.72\n\n1.00 (15%)\n\n\nMissing\n---\n\n95%\n38.00\n\nMode\n1.00\n\n0.00 (10%)\n\n\nDistinct\n310.00 (&lt;1%)\n\n75%\n14.00\n\nRange\n711.00\n\n2.00 (10%)\n\n\nDuplicates\n359.08k (99.9%)\n\n50%\n5.00\n\niQR\n12.00\n\n3.00 (7%)\n\n\nZeros\n35.79k (10%)\n\n25%\n2.00\n\nstd\n16.62\n\n4.00 (6%)\n\n\nNegative\n---\n\n5%\n0.00\n\nkurt\n81.27\n\n5.00 (5%)\n\n\nRAM (Mb)\n5\n\nMin\n0.00\n\nskew\n5.74\n\n6.00 (4%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nВ длительности сессии есть 10% нулевых значений.\nВ длительности сессии есть 2 отрицательных значения.\nДлительность сессии варьируется от 0 минут до 711 минут.\nВ основном длительность сессии длиться от 2 до 14 минут.\n\nПосмотрим на длительность сессий в разрезе пользователей\n\n\nShow the code\ndf_visits[df_visits.session_duration == 0].groupby('uid')[['session_duration']].count().sort_values('session_duration', ascending=False).head(10)\n\n\n\n\n\n\n\n\n\nsession_duration\n\n\nuid\n\n\n\n\n\n12869801667763685675\n57\n\n\n3263486045884611639\n36\n\n\n10246903932085021612\n23\n\n\n15087669361906245158\n23\n\n\n9019681082555518724\n19\n\n\n6803848156077244893\n19\n\n\n11255648391090536411\n18\n\n\n8056418121947262981\n17\n\n\n3644482766749211722\n17\n\n\n10534330097262531592\n16\n\n\n\n\n\n\n\nНаблюдения:\n\nУ пользователя с id 12869801667763685675 больше всего сессий с длительностью 0, но не существенно.\n\nПосмотрим в разрезе устройства\n\n\nShow the code\ndf_visits[df_visits.session_duration == 0]['device'].value_counts()\n\n\ndevice\ndesktop    23689\ntouch      12105\nName: count, dtype: int64\n\n\nПосмотрим в разрезе источника трафика\n\n\nShow the code\ndf_visits[df_visits.session_duration == 0]['source_id'].value_counts()\n\n\nsource_id\n4     10898\n3      9025\n5      7385\n2      4158\n1      1975\n9      1297\n10     1054\n6         1\n7         1\nName: count, dtype: int64\n\n\nСущественных аномалий в записях с длительностью сессии в 0 минут не обнаружено. Скорее всего это очень короткие сессии.\n\n\n3.2 Категоризация данных\nСоздадим новую категориальную переменную - является ли сессия нулевой.\n\n\nShow the code\ndf_visits['is_zero_session'] = df_visits.apply(lambda x: 'да' if x['session_duration'] == 0 else 'нет', axis=1).astype('category')\n\n\n\n\nShow the code\ndf_visits['is_zero_session'].value_counts()\n\n\nis_zero_session\nнет    323592\nда      35794\nName: count, dtype: int64\n\n\nСоздадим новую категориальную переменную из стоимости заказа.\nПосмотрим на квантили в столбце с суммой заказа.\n\n\nShow the code\npagri_data_tools.quantiles_columns(df_orders.revenue)\n\n\n\n\n\n\n\nTable 27: Quantiles\n\n\n\n\n\nMax\n2 633.28\n\n\n95\n13.75\n\n\n75\n4.89\n\n\n50\n2.5\n\n\n25\n1.22\n\n\n5\n0.37\n\n\nMin\n0.01\n\n\n\n\n\n\n\n\nСделаем следующие категории\n\nДешевые: Заказы ниже Q1\n\nСредние: Заказы между Q1 и Q3\n\nДорогие: Заказы выше Q3\n\n\n\nShow the code\nlabels = ['Дешевые', 'Средние', 'Дорогие']\nbins = [-np.inf, 1.22, 4.89, np.inf]\n\n\n\n\nShow the code\ndf_orders['revenue_cat'] = pagri_data_tools.create_category_column(df_orders.revenue, labels=labels, bins=bins)\ndf_orders['revenue_cat'].value_counts(dropna=False)\n\n\nrevenue_cat\nСредние    25516\nДешевые    12824\nДорогие    12023\nName: count, dtype: int64\n\n\nСоздадим новую категориальную переменную из расходов на рекламную компанию.\nПосмотрим на квантили в столбце с суммой заказа.\n\n\nShow the code\npagri_data_tools.quantiles_columns(df_costs.promo_costs)\n\n\n\n\n\n\n\nTable 28: Quantiles\n\n\n\n\n\nMax\n1 788.28\n\n\n95\n470.72\n\n\n75\n170.06\n\n\n50\n77.3\n\n\n25\n21.95\n\n\n5\n7.39\n\n\nMin\n0.54\n\n\n\n\n\n\n\n\nСделаем следующие категории\n\nДешевые: Заказы ниже Q1\n\nСредние: Заказы между Q1 и Q3\n\nДорогие: Заказы выше Q3\n\n\n\nShow the code\nlabels = ['Дешевые', 'Средние', 'Дорогие']\nbins = [-np.inf, 21.95, 170.06, np.inf]\n\n\nЕсли нужно пропуски заменить, то добавляем параметр fillnavalue='не указано'\n\n\nShow the code\ndf_costs['promo_costs_cat'] = pagri_data_tools.create_category_column(df_costs.promo_costs, labels=labels, bins=bins)\ndf_costs['promo_costs_cat'].value_counts(dropna=False)\n\n\npromo_costs_cat\nСредние    1270\nДешевые     636\nДорогие     636\nName: count, dtype: int64\n\n\nДля даты начала сессии создадим новую категориальную переменную в формате месяц год.\n\n\nShow the code\n# Словарь для замены месяцев\nmonths_translation = {\n    'Jan': 'Янв',\n    'Feb': 'Фев',\n    'Mar': 'Мар',\n    'Apr': 'Апр',\n    'May': 'Май',\n    'Jun': 'Июн',\n    'Jul': 'Июл',\n    'Aug': 'Авг',\n    'Sep': 'Сен',\n    'Oct': 'Окт',\n    'Nov': 'Ноя',\n    'Dec': 'Дек'\n}\n# Получаем отдельно месяц и год\nmonths = df_visits['session_start_dt'].dt.strftime('%b').astype('category').cat.reorder_categories(list(months_translation.keys()), ordered=True)\nyears = df_visits['session_start_dt'].dt.strftime('%y')\nmonths_years = pd.concat([months, years], axis=1)\nmonths_years.columns = ['month', 'year']\n# Создаем список уникальных (год, месяц) и сортируем\nunique_months = months_years.drop_duplicates().sort_values(by=['year', 'month'])\n\n# Создаем список для порядка\nmonth_year_order = []\n\n# Формируем month_year_order на основе уникальных (год, месяц)\nfor _, row in unique_months.iterrows():\n    year = row['year']\n    month = row['month']\n    month_year_order.append(f\"{months_translation[month]}'{str(year)[-2:]}\")\n\n# Заменяем месяцы и соединяем с годом\ndf_visits['session_start_dt_month_year'] = months.astype(str).map(months_translation) + \"'\" + years\ndf_visits['session_start_dt_month_year'] = df_visits['session_start_dt_month_year'].astype('category')\ndf_visits['session_start_dt_month_year'] = df_visits['session_start_dt_month_year'].cat.reorder_categories(month_year_order, ordered=True)\n\n\nДля даты заказа создадим новую категориальную переменную в формате месяц год.\n\n\nShow the code\n# Словарь для замены месяцев\nmonths_translation = {\n    'Jan': 'Янв',\n    'Feb': 'Фев',\n    'Mar': 'Мар',\n    'Apr': 'Апр',\n    'May': 'Май',\n    'Jun': 'Июн',\n    'Jul': 'Июл',\n    'Aug': 'Авг',\n    'Sep': 'Сен',\n    'Oct': 'Окт',\n    'Nov': 'Ноя',\n    'Dec': 'Дек'\n}\n# Получаем отдельно месяц и год\nmonths = df_orders['order_dt'].dt.strftime('%b').astype('category').cat.reorder_categories(list(months_translation.keys()), ordered=True)\nyears = df_orders['order_dt'].dt.strftime('%y')\nmonths_years = pd.concat([months, years], axis=1)\nmonths_years.columns = ['month', 'year']\n# Создаем список уникальных (год, месяц) и сортируем\nunique_months = months_years.drop_duplicates().sort_values(by=['year', 'month'])\n\n# Создаем список для порядка\nmonth_year_order = []\n\n# Формируем month_year_order на основе уникальных (год, месяц)\nfor _, row in unique_months.iterrows():\n    year = row['year']\n    month = row['month']\n    month_year_order.append(f\"{months_translation[month]}'{str(year)[-2:]}\")\n\n# Заменяем месяцы и соединяем с годом\ndf_orders['order_dt_month_year'] = months.astype(str).map(months_translation) + \"'\" + years\ndf_orders['order_dt_month_year'] = df_orders['order_dt_month_year'].astype('category')\ndf_orders['order_dt_month_year'] = df_orders['order_dt_month_year'].cat.reorder_categories(month_year_order, ordered=True)\n\n\nДля даты рекламной компании создадим новую категориальную переменную в формате месяц год.\n\n\nShow the code\n# Словарь для замены месяцев\nmonths_translation = {\n    'Jan': 'Янв',\n    'Feb': 'Фев',\n    'Mar': 'Мар',\n    'Apr': 'Апр',\n    'May': 'Май',\n    'Jun': 'Июн',\n    'Jul': 'Июл',\n    'Aug': 'Авг',\n    'Sep': 'Сен',\n    'Oct': 'Окт',\n    'Nov': 'Ноя',\n    'Dec': 'Дек'\n}\n# Получаем отдельно месяц и год\nmonths = df_costs['promo_date'].dt.strftime('%b').astype('category').cat.reorder_categories(list(months_translation.keys()), ordered=True)\nyears = df_costs['promo_date'].dt.strftime('%y')\nmonths_years = pd.concat([months, years], axis=1)\nmonths_years.columns = ['month', 'year']\n# Создаем список уникальных (год, месяц) и сортируем\nunique_months = months_years.drop_duplicates().sort_values(by=['year', 'month'])\n\n# Создаем список для порядка\nmonth_year_order = []\n\n# Формируем month_year_order на основе уникальных (год, месяц)\nfor _, row in unique_months.iterrows():\n    year = row['year']\n    month = row['month']\n    month_year_order.append(f\"{months_translation[month]}'{str(year)[-2:]}\")\n\n# Заменяем месяцы и соединяем с годом\ndf_costs['promo_date_month_year'] = months.astype(str).map(months_translation) + \"'\" + years\ndf_costs['promo_date_month_year'] = df_costs['promo_date_month_year'].astype('category')\ndf_costs['promo_date_month_year'] = df_costs['promo_date_month_year'].cat.reorder_categories(month_year_order, ordered=True)\n\n\n\n\n3.3 Расчет метрик\nСгруппируем данные по месяцам и объединим таблицы\n\n\nShow the code\ndf_visits.head(1)\n\n\n\n\n\n\n\n\n\ndevice\nsession_end_dt\nsource_id\nsession_start_dt\nuid\nsession_duration\nis_zero_session\nsession_start_dt_month_year\n\n\n\n\n0\ntouch\n2017-12-20 17:38:00\n4\n2017-12-20 17:20:00\n16879256277535980062\n18.00\nнет\nДек'17\n\n\n\n\n\n\n\n\n\nShow the code\n# Находим первый месяц для каждого клиента\ndf_visits['user_first_month'] = df_visits.groupby('uid')['session_start_dt_month_year'].transform('min')\n# Теперь мы можем определить новых клиентов\ndf_visits['is_new_user'] = df_visits['user_first_month'] == df_visits['session_start_dt_month_year']\n\n\n\n\nShow the code\n# Сначала отфильтруем новых пользователей\nnew_users_cnt = df_visits[df_visits['is_new_user']].groupby('session_start_dt_month_year', observed=True).agg(\n    new_user_cnt=('uid', 'nunique')\n)\n\n# Затем сгруппируем все данные\ndf_visits_monthly = df_visits.groupby('session_start_dt_month_year', observed=True).agg(\n    session_cnt=('uid', 'count'),\n    mau=('uid', 'nunique'),\n    total_session_len=('session_duration', 'sum'),\n    avg_session_len=('session_duration', 'mean')\n)\n\n# Объединим результаты\ndf_visits_monthly = df_visits_monthly.join(new_users_cnt, how='outer')\ndf_visits_monthly.index.name = 'month_year'\n\n\n\n\nShow the code\ndf_visits['is_new_user'] = df_visits['is_new_user'].map({True: 'да', False: 'нет'}).astype('category')\ndf_visits['is_new_user'].value_counts(dropna=False)\n\n\nis_new_user\nда     267845\nнет     91541\nName: count, dtype: int64\n\n\n\n\nShow the code\ndf_visits_monthly.head(5)\n\n\n\n\n\n\n\n\n\nsession_cnt\nmau\ntotal_session_len\navg_session_len\nnew_user_cnt\n\n\nmonth_year\n\n\n\n\n\n\n\n\n\nИюн'17\n16505\n13259\n165,056.63\n10.00\n13259\n\n\nИюл'17\n17828\n14183\n179,657.58\n10.08\n13140\n\n\nАвг'17\n14355\n11631\n140,940.72\n9.82\n10181\n\n\nСен'17\n23907\n18975\n237,950.53\n9.95\n16704\n\n\nОкт'17\n37903\n29692\n388,181.10\n10.24\n25977\n\n\n\n\n\n\n\n\n\nShow the code\n# Находим первый месяц для каждого покупателя\ndf_orders['buyer_first_month'] = df_orders.groupby('uid')['order_dt_month_year'].transform('min')\n# Теперь мы можем определить новых покупателей\ndf_orders['is_new_buyer'] = df_orders['buyer_first_month'] == df_orders['order_dt_month_year']\n\n\n\n\nShow the code\n# Сначала отфильтруем новых пользователей\nnew_buers_cnt = df_orders[df_orders['is_new_buyer']].groupby('order_dt_month_year', observed=True).agg(\n    new_buer_cnt=('uid', 'nunique')\n)\n\ndf_orders_monthly = df_orders.groupby('order_dt_month_year', observed=True).agg(\n    orders_cnt = ('uid', 'count')\n    , buyers = ('uid', 'nunique')\n    , total_revenue = ('revenue', 'sum')\n    , avg_order_value = ('revenue', 'mean')\n)\ndf_orders_monthly = df_orders_monthly.join(new_buers_cnt, how='outer')\ndf_orders_monthly.index.name = 'month_year'\n\n\n\n\nShow the code\ndf_orders['is_new_buyer'] = df_orders['is_new_buyer'].map({True: 'да', False: 'нет'}).astype('category')\n\n\n\n\nShow the code\ndf_orders_monthly.head(5)\n\n\n\n\n\n\n\n\n\norders_cnt\nbuyers\ntotal_revenue\navg_order_value\nnew_buer_cnt\n\n\nmonth_year\n\n\n\n\n\n\n\n\n\nИюн'17\n2353\n2022\n9,557.49\n4.06\n2022\n\n\nИюл'17\n2362\n1983\n12,539.47\n5.31\n1922\n\n\nАвг'17\n1803\n1471\n8,758.78\n4.86\n1369\n\n\nСен'17\n3383\n2748\n18,345.51\n5.42\n2579\n\n\nОкт'17\n5677\n4673\n27,987.70\n4.93\n4340\n\n\n\n\n\n\n\n\n\nShow the code\ndf_costs_monthly = df_costs.groupby('promo_date_month_year', observed=True).agg(\n    promo_cnt = ('source_id', 'count')\n    , promo_cnt_unq = ('source_id', 'nunique')\n    , total_promo_costs = ('promo_costs', 'sum')\n    , avg_promo_costs = ('promo_costs', 'mean')\n)\ndf_costs_monthly.index.name = 'month_year'\n\n\n\n\nShow the code\ndf_costs_monthly.head(5)\n\n\n\n\n\n\n\n\n\npromo_cnt\npromo_cnt_unq\ntotal_promo_costs\navg_promo_costs\n\n\nmonth_year\n\n\n\n\n\n\n\n\nИюн'17\n210\n7\n18,015.00\n85.79\n\n\nИюл'17\n217\n7\n18,240.59\n84.06\n\n\nАвг'17\n217\n7\n14,790.54\n68.16\n\n\nСен'17\n210\n7\n24,368.91\n116.04\n\n\nОкт'17\n217\n7\n36,322.88\n167.39\n\n\n\n\n\n\n\n\n\nShow the code\ndf_visits_monthly.shape[0]\n\n\n12\n\n\n\n\nShow the code\ndf_orders_monthly.shape[0]\n\n\n12\n\n\n\n\nShow the code\ndf_costs_monthly.shape[0]\n\n\n12\n\n\n\n\nShow the code\ndf_monthly = df_visits_monthly.join(df_orders_monthly, how='outer')\n\n\n\n\nShow the code\ndf_monthly = df_monthly.join(df_costs_monthly, how='outer')\n\n\n\n\nShow the code\ndf_monthly = df_monthly.reset_index()\n\n\n\n\nShow the code\ndf_monthly.shape[0]\n\n\n12\n\n\nУбедимся, что у нас нет NA\n\n\nShow the code\ndf_monthly.isna().sum()\n\n\nmonth_year           0\nsession_cnt          0\nmau                  0\ntotal_session_len    0\navg_session_len      0\nnew_user_cnt         0\norders_cnt           0\nbuyers               0\ntotal_revenue        0\navg_order_value      0\nnew_buer_cnt         0\npromo_cnt            0\npromo_cnt_unq        0\ntotal_promo_costs    0\navg_promo_costs      0\ndtype: int64\n\n\nРассчитаем разные метрики для будущего анализа\n\n\nShow the code\ndf_monthly.head(1)\n\n\n\n\n\n\n\n\n\nmonth_year\nsession_cnt\nmau\ntotal_session_len\navg_session_len\nnew_user_cnt\norders_cnt\nbuyers\ntotal_revenue\navg_order_value\nnew_buer_cnt\npromo_cnt\npromo_cnt_unq\ntotal_promo_costs\navg_promo_costs\n\n\n\n\n0\nИюн'17\n16505\n13259\n165,056.63\n10.00\n13259\n2353\n2022\n9,557.49\n4.06\n2022\n210\n7\n18,015.00\n85.79\n\n\n\n\n\n\n\nДоля новых пользователей и доля новых покупателей покупателей\n\n\nShow the code\ndf_monthly['new_users_ratio'] = df_monthly['new_user_cnt'] / df_monthly['mau']\ndf_monthly['new_buers_ratio'] = df_monthly['new_buer_cnt'] / df_monthly['buyers']\n\n\nДоля покупателей из всех пользователей и доля новых покупателей из всех новых пользователей\n\n\nShow the code\ndf_monthly['buers_users_ration'] = df_monthly['buyers'] / df_monthly['mau']\ndf_monthly['new_buers_users_ration'] = df_monthly['new_buer_cnt'] / df_monthly['new_user_cnt']\n\n\nСтоимость привлечения одного покупателя\n\n\nShow the code\ndf_monthly['cac'] = (df_monthly.total_promo_costs / df_monthly.new_buer_cnt).round(2)\n\n\nСтоимость привлечения одного пользователя\n\n\nShow the code\ndf_monthly['cpa'] = (df_monthly.total_promo_costs / df_monthly.new_user_cnt).round(2)\n\n\nСреднее количество покупок на одного клиента.\n\n\nShow the code\ndf_monthly['apc'] = (df_monthly.orders_cnt / df_monthly.buyers).round(2)\n\n\nСредний чек\n\n\nShow the code\ndf_monthly['aov'] = (df_monthly.total_revenue / df_monthly.orders_cnt).round(2)\n\n\nВыручка с одного пользователя\n\n\nShow the code\ndf_monthly['arpu'] = (df_monthly.total_revenue / df_monthly.mau).round(2)\n\n\nВыручка с одного покупателя\n\n\nShow the code\ndf_monthly['arppu'] = (df_monthly.total_revenue / df_monthly.buyers).round(2)\n\n\nСоздадим датафрейм для сравнения источников по выручки минус затраты на маркетинг\n\n\nShow the code\ndf_visits.head(1)\n\n\n\n\n\n\n\n\n\ndevice\nsession_end_dt\nsource_id\nsession_start_dt\nuid\nsession_duration\nis_zero_session\nsession_start_dt_month_year\nuser_first_month\nis_new_user\n\n\n\n\n0\ntouch\n2017-12-20 17:38:00\n4\n2017-12-20 17:20:00\n16879256277535980062\n18.00\nнет\nДек'17\nДек'17\nда\n\n\n\n\n\n\n\nДля каждого пользователя определим источник, с которого он пришел на сайт.\n\n\nShow the code\nmask = df_visits.groupby('uid')['session_start_dt'].idxmin()\nusers_first_visit_source = df_visits.loc[mask][['uid', 'source_id']]\nusers_first_visit_source.columns = ['uid', 'first_visit_source']\n\n\nДобавим в таблицу с заказами источник первого входа\n\n\nShow the code\ndf_orders = df_orders.merge(users_first_visit_source, on='uid', how='left')\n\n\n\n\nShow the code\ndf_orders.isna().sum()\n\n\norder_dt               0\nrevenue                0\nuid                    0\nrevenue_cat            0\norder_dt_month_year    0\nbuyer_first_month      0\nis_new_buyer           0\nfirst_visit_source     0\ndtype: int64\n\n\n\n\nShow the code\nsource_revenue = df_orders.groupby('first_visit_source', observed=True).agg(\n    source_revenue = ('revenue', 'sum'),\n).reset_index().rename(columns={'first_visit_source': 'source_id'})\n\n\n\n\nShow the code\ndf_costs.head(1)\n\n\n\n\n\n\n\n\n\nsource_id\npromo_date\npromo_costs\npromo_costs_cat\npromo_date_month_year\n\n\n\n\n0\n1\n2017-06-01\n75.20\nСредние\nИюн'17\n\n\n\n\n\n\n\n\n\nShow the code\nsource_costs = df_costs.groupby('source_id', observed=True).agg(\n    source_costs = ('promo_costs', 'sum'),\n).reset_index()\n\n\n\n\nShow the code\ndf_sources = source_revenue.merge(source_costs, on='source_id', how='outer')\n\n\n\n\nShow the code\nsource_revenue\n\n\n\n\n\n\n\n\n\nsource_id\nsource_revenue\n\n\n\n\n0\n1\n31,090.55\n\n\n1\n10\n4,450.33\n\n\n2\n2\n46,923.61\n\n\n3\n3\n54,511.24\n\n\n4\n4\n56,693.41\n\n\n5\n5\n52,624.02\n\n\n6\n7\n1.22\n\n\n7\n9\n5,759.40\n\n\n\n\n\n\n\n\n\nShow the code\nsource_costs\n\n\n\n\n\n\n\n\n\nsource_id\nsource_costs\n\n\n\n\n0\n1\n20,833.27\n\n\n1\n10\n5,822.49\n\n\n2\n2\n42,806.04\n\n\n3\n3\n141,321.63\n\n\n4\n4\n61,073.60\n\n\n5\n5\n51,757.10\n\n\n6\n9\n5,517.49\n\n\n\n\n\n\n\n\n\nShow the code\ndf_sources.isna().sum()\n\n\nsource_id         0\nsource_revenue    0\nsource_costs      1\ndtype: int64\n\n\nДля источника 7, для которого нет расходов, заполним значение 0.\n\n\nShow the code\ndf_sources.fillna(0, inplace=True)\n\n\n\n\nShow the code\ndf_sources.isna().sum()\n\n\nsource_id         0\nsource_revenue    0\nsource_costs      0\ndtype: int64\n\n\nПосчитаем romi для каждого источника\n\n\nShow the code\ndf_sources['romi'] = ((df_sources['source_revenue'] - df_sources['source_costs']) / df_sources['source_costs']).round(2)\n\n\nДобавим разность выручки и расходов для каждого источника\n\n\nShow the code\ndf_sources['gross_profit'] = df_sources['source_revenue'] - df_sources['source_costs']\n\n\n\n\nShow the code\ndf_sources\n\n\n\n\n\n\n\n\n\nsource_id\nsource_revenue\nsource_costs\nromi\ngross_profit\n\n\n\n\n0\n1\n31,090.55\n20,833.27\n0.49\n10,257.28\n\n\n1\n10\n4,450.33\n5,822.49\n-0.24\n-1,372.16\n\n\n2\n2\n46,923.61\n42,806.04\n0.10\n4,117.57\n\n\n3\n3\n54,511.24\n141,321.63\n-0.61\n-86,810.39\n\n\n4\n4\n56,693.41\n61,073.60\n-0.07\n-4,380.19\n\n\n5\n5\n52,624.02\n51,757.10\n0.02\n866.92\n\n\n6\n7\n1.22\n0.00\ninf\n1.22\n\n\n7\n9\n5,759.40\n5,517.49\n0.04\n241.91\n\n\n\n\n\n\n\nУдалим из таблицы источник 7, так как он не репрезентативный.\n\n\nShow the code\ndf_sources = df_sources[df_sources.source_id != '7']\n\n\nПодготовим дата фреймы для когортного анализа\nТаблица визитов\n\n\nShow the code\ndf_visits.head(1)\n\n\n\n\n\n\n\n\n\ndevice\nsession_end_dt\nsource_id\nsession_start_dt\nuid\nsession_duration\nis_zero_session\nsession_start_dt_month_year\nuser_first_month\nis_new_user\n\n\n\n\n0\ntouch\n2017-12-20 17:38:00\n4\n2017-12-20 17:20:00\n16879256277535980062\n18.00\nнет\nДек'17\nДек'17\nда\n\n\n\n\n\n\n\n\n\nShow the code\ndf_visits['tmp_user_first_month'] = df_visits.groupby('uid')['session_start_dt'].transform('min')\n\n\n\n\nShow the code\ndf_visits['cohort_lifetime'] = (\n    (df_visits['session_start_dt'].dt.year - df_visits['tmp_user_first_month'].dt.year) * 12 +\n    (df_visits['session_start_dt'].dt.month - df_visits['tmp_user_first_month'].dt.month)\n)\n\n\nУбедимся, что нет отрицательных значений\n\n\nShow the code\n(df_visits['cohort_lifetime'] &lt; 0).sum()\n\n\nnp.int64(0)\n\n\n\n\nShow the code\ndf_visits.drop('tmp_user_first_month', axis=1, inplace=True)\n\n\nТаблица заказов\n\n\nShow the code\ndf_orders.head(1)\n\n\n\n\n\n\n\n\n\norder_dt\nrevenue\nuid\nrevenue_cat\norder_dt_month_year\nbuyer_first_month\nis_new_buyer\nfirst_visit_source\n\n\n\n\n0\n2017-06-01 00:10:00\n17.00\n10329302124590727494\nДорогие\nИюн'17\nИюн'17\nда\n1\n\n\n\n\n\n\n\n\n\nShow the code\ndf_orders['tmp_buyer_first_month'] = df_orders.groupby('uid')['order_dt'].transform('min')\n\n\n\n\nShow the code\ndf_orders['cohort_lifetime'] = (\n    (df_orders['order_dt'].dt.year - df_orders['tmp_buyer_first_month'].dt.year) * 12 +\n    (df_orders['order_dt'].dt.month - df_orders['tmp_buyer_first_month'].dt.month)\n)\n\n\nУбедимся, что нет отрицательных значений\n\n\nShow the code\n(df_orders['cohort_lifetime'] &lt; 0).sum()\n\n\nnp.int64(0)\n\n\n\n\nShow the code\ndf_orders.drop('tmp_buyer_first_month', axis=1, inplace=True)\n\n\nСгруппируем данные по месяцу когорты и lifetime\n\n\nShow the code\ndf_visits_cohort_by_month = df_visits.rename(columns={'user_first_month': 'cohort_month_year'}).groupby(['cohort_month_year', 'cohort_lifetime'], observed=True).agg(\n    visits_cnt=('uid', 'nunique'),\n)\n\n\n\n\nShow the code\ndf_orders_cohort_by_month = df_orders.rename(columns={'buyer_first_month': 'cohort_month_year'}).groupby(['cohort_month_year', 'cohort_lifetime'], observed=True).agg(\n    buyers_cnt=('uid', 'nunique'),\n    revenue=('revenue', 'sum'),\n    orders_cnt=('uid', 'count'),\n)\n\n\n\n\nShow the code\ndf_orders_cohort_by_month['revenue_cumsum'] = df_orders_cohort_by_month.groupby('cohort_month_year', observed=True)['revenue'].transform('cumsum')\n\n\nОбъединим таблицы в одну\n\n\nShow the code\ndf_visits_cohort_by_month.shape[0]\n\n\n78\n\n\n\n\nShow the code\ndf_orders_cohort_by_month.shape[0]\n\n\n78\n\n\n\n\nShow the code\ndf_cohort = df_visits_cohort_by_month.join(df_orders_cohort_by_month, how='outer').reset_index()\n\n\n\n\nShow the code\ndf_cohort.shape[0]\n\n\n78\n\n\n\n\nShow the code\ndf_cohort = df_cohort.merge(df_costs_monthly.reset_index(), left_on='cohort_month_year', right_on='month_year', how='outer').drop('month_year', axis=1)\n\n\n\n\nShow the code\ncohort_lifetime_order = list(map(str, range(100)))[:df_cohort['cohort_lifetime'].nunique()]\ndf_cohort['cohort_lifetime'] = df_cohort['cohort_lifetime'].astype(str).astype('category').cat.reorder_categories(cohort_lifetime_order, ordered=True)\n\n\nУбедимся, что у нас нет NA\n\n\nShow the code\ndf_cohort.isna().sum()\n\n\ncohort_month_year    0\ncohort_lifetime      0\nvisits_cnt           0\nbuyers_cnt           0\nrevenue              0\norders_cnt           0\nrevenue_cumsum       0\npromo_cnt            0\npromo_cnt_unq        0\ntotal_promo_costs    0\navg_promo_costs      0\ndtype: int64\n\n\nВсе хорошо.\nТеперь рассчитаем метрики для когорт\nДобавим столбец с стартовым количеством пользователей в когортах\n\n\nShow the code\ndf_cohort['visits_cnt_start'] = df_cohort.groupby('cohort_month_year', observed=False)[['visits_cnt']].transform('max')\ndf_cohort.tail(20)\n\n\n\n\n\n\n\n\n\ncohort_month_year\ncohort_lifetime\nvisits_cnt\nbuyers_cnt\nrevenue\norders_cnt\nrevenue_cumsum\npromo_cnt\npromo_cnt_unq\ntotal_promo_costs\navg_promo_costs\nvisits_cnt_start\n\n\n\n\n58\nДек'17\n1\n1410\n146\n1,141.22\n270\n21,913.08\n217\n7\n38,315.35\n176.57\n25268\n\n\n59\nДек'17\n2\n960\n103\n4,054.70\n202\n25,967.78\n217\n7\n38,315.35\n176.57\n25268\n\n\n60\nДек'17\n3\n786\n97\n4,669.10\n179\n30,636.88\n217\n7\n38,315.35\n176.57\n25268\n\n\n61\nДек'17\n4\n512\n50\n1,371.57\n86\n32,008.45\n217\n7\n38,315.35\n176.57\n25268\n\n\n62\nДек'17\n5\n481\n63\n1,481.66\n105\n33,490.11\n217\n7\n38,315.35\n176.57\n25268\n\n\n63\nЯнв'18\n0\n22624\n3373\n13,949.50\n3783\n13,949.50\n217\n7\n33,518.52\n154.46\n22624\n\n\n64\nЯнв'18\n1\n1351\n114\n994.22\n224\n14,943.72\n217\n7\n33,518.52\n154.46\n22624\n\n\n65\nЯнв'18\n2\n890\n83\n1,026.34\n159\n15,970.06\n217\n7\n33,518.52\n154.46\n22624\n\n\n66\nЯнв'18\n3\n565\n43\n481.59\n64\n16,451.65\n217\n7\n33,518.52\n154.46\n22624\n\n\n67\nЯнв'18\n4\n458\n45\n211.48\n78\n16,663.13\n217\n7\n33,518.52\n154.46\n22624\n\n\n68\nФев'18\n0\n22197\n3651\n15,177.16\n4094\n15,177.16\n196\n7\n32,723.03\n166.95\n22197\n\n\n69\nФев'18\n1\n1267\n118\n1,015.98\n222\n16,193.14\n196\n7\n32,723.03\n166.95\n22197\n\n\n70\nФев'18\n2\n565\n58\n286.66\n83\n16,479.80\n196\n7\n32,723.03\n166.95\n22197\n\n\n71\nФев'18\n3\n446\n39\n270.70\n70\n16,750.50\n196\n7\n32,723.03\n166.95\n22197\n\n\n72\nМар'18\n0\n20589\n3534\n17,096.38\n4131\n17,096.38\n211\n7\n30,415.27\n144.15\n20589\n\n\n73\nМар'18\n1\n861\n90\n1,063.05\n178\n18,159.43\n211\n7\n30,415.27\n144.15\n20589\n\n\n74\nМар'18\n2\n557\n58\n1,114.87\n176\n19,274.30\n211\n7\n30,415.27\n144.15\n20589\n\n\n75\nАпр'18\n0\n15709\n2274\n10,600.69\n2487\n10,600.69\n203\n7\n22,289.38\n109.80\n15709\n\n\n76\nАпр'18\n1\n760\n69\n1,209.92\n195\n11,810.61\n203\n7\n22,289.38\n109.80\n15709\n\n\n77\nМай'18\n0\n15266\n2986\n13,925.76\n3247\n13,925.76\n217\n7\n22,224.27\n102.42\n15266\n\n\n\n\n\n\n\n\n\nShow the code\ndf_monthly.head()\n\n\n\n\n\n\n\n\n\nmonth_year\nsession_cnt\nmau\ntotal_session_len\navg_session_len\nnew_user_cnt\norders_cnt\nbuyers\ntotal_revenue\navg_order_value\nnew_buer_cnt\npromo_cnt\npromo_cnt_unq\ntotal_promo_costs\navg_promo_costs\nnew_users_ratio\nnew_buers_ratio\nbuers_users_ration\nnew_buers_users_ration\ncac\ncpa\napc\naov\narpu\narppu\n\n\n\n\n0\nИюн'17\n16505\n13259\n165,056.63\n10.00\n13259\n2353\n2022\n9,557.49\n4.06\n2022\n210\n7\n18,015.00\n85.79\n1.00\n1.00\n0.15\n0.15\n8.91\n1.36\n1.16\n4.06\n0.72\n4.73\n\n\n1\nИюл'17\n17828\n14183\n179,657.58\n10.08\n13140\n2362\n1983\n12,539.47\n5.31\n1922\n217\n7\n18,240.59\n84.06\n0.93\n0.97\n0.14\n0.15\n9.49\n1.39\n1.19\n5.31\n0.88\n6.32\n\n\n2\nАвг'17\n14355\n11631\n140,940.72\n9.82\n10181\n1803\n1471\n8,758.78\n4.86\n1369\n217\n7\n14,790.54\n68.16\n0.88\n0.93\n0.13\n0.13\n10.80\n1.45\n1.23\n4.86\n0.75\n5.95\n\n\n3\nСен'17\n23907\n18975\n237,950.53\n9.95\n16704\n3383\n2748\n18,345.51\n5.42\n2579\n210\n7\n24,368.91\n116.04\n0.88\n0.94\n0.14\n0.15\n9.45\n1.46\n1.23\n5.42\n0.97\n6.68\n\n\n4\nОкт'17\n37903\n29692\n388,181.10\n10.24\n25977\n5677\n4673\n27,987.70\n4.93\n4340\n217\n7\n36,322.88\n167.39\n0.87\n0.93\n0.16\n0.17\n8.37\n1.40\n1.21\n4.93\n0.94\n5.99\n\n\n\n\n\n\n\nДобавим общее количество покупателей по когортам\n\n\nShow the code\ndf_cohort = df_cohort.merge(df_monthly[['month_year', 'new_buer_cnt']], left_on='cohort_month_year', right_on='month_year')\n\n\n\n\nShow the code\ndf_cohort.drop('month_year', axis=1, inplace=True)\ndf_cohort.rename(columns={'new_buer_cnt': 'total_buyers'}, inplace=True)\n\n\n\n\nShow the code\ndf_cohort.head(1)\n\n\n\n\n\n\n\n\n\ncohort_month_year\ncohort_lifetime\nvisits_cnt\nbuyers_cnt\nrevenue\norders_cnt\nrevenue_cumsum\npromo_cnt\npromo_cnt_unq\ntotal_promo_costs\navg_promo_costs\nvisits_cnt_start\ntotal_buyers\n\n\n\n\n0\nИюн'17\n0\n13259\n2022\n9,557.49\n2353\n9,557.49\n210\n7\n18,015.00\n85.79\n13259\n2022\n\n\n\n\n\n\n\nСреднее количество покупок на одного клиента.\n\n\nShow the code\ndf_cohort['apc'] = (df_cohort.orders_cnt / df_cohort.buyers_cnt).round(2)\n\n\nСредний чек\n\n\nShow the code\ndf_cohort['aov'] = (df_cohort.revenue / df_cohort.orders_cnt).round(2)\n\n\nСтоимость привлечения одного покупателя\n\n\nShow the code\ndf_cohort['cac'] = (df_cohort.total_promo_costs / df_cohort.total_buyers).round(2)\n\n\nСтоимость привлечения одного пользователя\n\n\nShow the code\ndf_cohort['cpa'] = (df_cohort.total_promo_costs / df_cohort.visits_cnt_start).round(2)\n\n\nКоэффициент удержания пользователей\n\n\nShow the code\ndf_cohort['retention'] = (df_cohort.visits_cnt / df_cohort.visits_cnt_start).round(4)\n\n\nПожизненная ценность клиента\n\n\nShow the code\ndf_cohort['ltv'] = (df_cohort['revenue_cumsum'] / df_cohort.total_buyers).round(2)\n\n\nВозврат на инвестиции в маркетинг\n\n\nShow the code\ndf_cohort['romi'] = (df_cohort['ltv'] / df_cohort['cac']).round(2)\n\n\n\n\n3.4 Промежуточный вывод\n\nВ длительности сессии есть 10% нулевых значений.\nВ длительности сессии есть 2 отрицательных значения.\nДлительность сессии варьируется от 0 минут до 711 минут.\nВ основном длительность сессии длиться от 2 до 14 минут.\nУ пользователя с id 12869801667763685675 больше всего сессий с длительностью 0, но не существенно.\nСоздали новые категориальные переменные.\nСгруппировали таблицы и рассчитали метрики.\nПодготовили таблицу для когортного анализа."
  },
  {
    "objectID": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#визуализация-взаимосвязей-переменных",
    "href": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#визуализация-взаимосвязей-переменных",
    "title": "Анализ бизнес-показателей в Яндекс.Афиша",
    "section": "4. Визуализация взаимосвязей переменных",
    "text": "4. Визуализация взаимосвязей переменных\n\n4.1 Сравнительный анализ распределений числовых переменных по категориям\nСформируем словарь для подписей осей и названий графиков.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column ['Именительный падеж', 'для кого / чего']\n    session_duration = ['Длительность сессии', 'длительность сессии']\n    , revenue = ['Выручка', 'выручка']\n    , promo_costs = ['Маркетинковые расходы', 'маркетинговые расходы']\n    # categorical column ['Именительный падеж', 'для кого / чего']\n    # Распределение долей по городу и тарифу с нормализацией по городу\n    , device = ['Категория устройства', 'категории устройства']\n    , source_id = ['Источник трафика', 'источника трафика']\n    , is_new_buyer = ['Новый ли покупатель', 'того новый ли покуатель']\n    , is_new_user = ['Новый ли пользователь', 'того новый ли пользователь']\n)\n\n\nПостроим гистограммы для числовых переменных в разрезе категорий\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_visits\n    , cat_var = 'is_new_user'\n    , num_var = 'session_duration'\n    , top_n=3\n    , lower_quantile=0\n    , upper_quantile=0.99\n    , bins=20\n    , line_width=3\n    , opacity = 0.6\n)\npagri_data_tools.histograms_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ новых пользователей медиана и размах в длительности сессии больше, чем у старых пользователей.\n\n\n\nShow the code\nconfig = dict(\n    df = df_visits\n    , cat_var = 'device'\n    , num_var = 'session_duration'\n    , top_n=3\n    , lower_quantile=0\n    , upper_quantile=0.99\n    , bins=20\n    , line_width=3\n    , opacity = 0.6\n)\npagri_data_tools.histograms_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nНа desktop длительность сессии выше, чем на touch. И разброс в длительности сессии у desktop больше.\n\nПостроим боксплоты для числовых переменных в разрезе категорий\n\n\nShow the code\nconfig = dict(\n    df = df_visits\n    , cat_var = 'source_id'\n    , num_var = 'session_duration'\n    , lower_quantile=0\n    , upper_quantile=0.95    \n    , top_n='all'\n)\npagri_data_tools.violins_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nИсточник трафика с id 1 имеет больше остальных медианную длительность сессии и размах значений.\n\n\n\nShow the code\nconfig = dict(\n    df = df_orders\n    , cat_var = 'is_new_buyer'\n    , num_var = 'revenue'\n    , top_n=3\n    , lower_quantile=0\n    , upper_quantile=0.99\n    , bins=30\n    , line_width=3\n    , opacity = 0.6\n    , barmode = 'overlay'\n)\npagri_data_tools.histograms_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\n\n\nShow the code\nconfig = dict(\n    df = df_costs\n    , cat_var = 'source_id'\n    , num_var = 'promo_costs'\n    , lower_quantile=0\n    , upper_quantile=0.99   \n    , top_n='all'\n)\npagri_data_tools.violins_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ маркетинговой компании 3 намного выше медианное значение дневных расходов.\n\n\n\n4.2 Изучение зависимостей между категориальными переменными\nСформируем словарь для подписей осей и названий графиков.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column ['Именительный падеж', 'мменительный падеж с маленькой буквы', 'род цифорой']\n    # (0 - средний род, 1 - мужской род, 2 - женский род[) (Середнее образовние, средний доход, средняя температура) )\n    # для функций count и nunique пишем - Количество &lt;чего / кого количество&gt; - и также с маленькой буквы, цифра 0 в качестве рода\n    session_duration = ['Длительность сессии', 'длительность сессии', 2]\n    , revenue = ['Выручка', 'выручка', 2]\n    , revenue_cumsum = ['Кумулятивная выручка', 'кумулятивная выручка', 2]\n    , promo_costs = ['Маркетинковые расходы', 'маркетинговые расходы', 3]\n    , visits_cnt = ['Количество посещений', 'количество посещений', 0]\n    , buyers_cnt = ['Количество покупателей', 'количество покупателей', 0]\n    , orders_cnt = ['Количество заказов', 'количество заказов', 0]\n    , session_cnt = ['Количество сессий', 'количество сессий', 0]\n    , total_promo_costs = ['Суммарные маркетинговые расходы', 'суммарные маркетинговые расходы', 3]\n    , avg_promo_costs = ['Средние маркетинговые расходы', 'средние маркетинговые расходы', 3]\n    , total_buyers = ['Суммарное количество покупателей', 'суммарное количество покупателей', 0]\n    , gross_profit = ['Валовая прибыль', 'валовая прибыль', 2]\n    , cac = ['CAC', 'cac', 2]\n    , cpa = ['CPA', 'cpa', 2]\n    , retention = ['Удержание клиента', 'удержание клиента', 2]\n    , ltv = ['LTV', 'ltv', 2]\n    , romi = ['ROMI', 'romi', 1]\n    , mau = ['MAU', 'mau', 0]\n    , avg_session_len = ['Средняя длина сессии', 'средняя длина сессии', 2]\n    , margin = ['Валовая прибыль', 'валовая прибыль', 2]\n    , margin_pct = ['Маржинальность', 'маржинальность', 2]\n    , arpu = ['ARPU', 'arpu', 2]\n    , arppu = ['ARPPU', 'arppu', 2]\n    , aov = ['Средний чек', 'средний чек', 1]\n    , apc = ['APC', 'среднее количество заказов', 0]\n    , new_user_cnt = ['Количество новых пользователей', 'количество новых пользователей', 0]\n    , buyers = ['Количество покупателей', 'количество покупателей', 0]\n    , avg_order_value = ['Средний чек', 'средний чек', 1]\n    , buers_users_ration = ['Доля покупателей', 'доля покупателей', 2]\n    , new_users_ratio = ['Доля новых пользователей', 'доля новых пользователей', 2]\n    , new_buer_cnt = ['Количество новых покупателей', 'количество новых покупателей', 0]\n    # categorical column ['Именительный падеж', 'для кого / чего']\n    # Распределение долей по городу и тарифу с нормализацией по городу\n    , device = ['Категория устройства', 'категории устройства', 'категории устройства']\n    , source_id = ['Источник трафика', 'источника трафика', 'источнику трафика']\n    , is_new_buyer = ['Новый ли покупатель', 'того новый ли покуатель', 'тому новый ли покуатель']\n    , is_new_user = ['Новый ли пользователь', 'того новый ли пользователь', 'тому новый ли пользователь']\n    , is_zero_session = ['Сессия нулевой длины', 'сессии нулевой длины', 'сессии нулевой длины']\n    , session_start_dt_month_year = ['Месяц и год начала сессии', 'месяца и года начала сессии', 'месяцу и году начала сессии']\n    , promo_costs_cat = ['Категория расходов', 'категории расходов', 'категории расходов']\n    , cohort_month_year = ['Месяц и год когорты', 'месяца и года когорты', 'месяцу и году когорты']\n    , cohort_lifetime = ['Время жизни когорты', 'времени жизни когорты', 'времени жизни когорты']\n    , order_dt_month_year = ['Месяц и год заказа', 'месяца и года заказа', 'месяцу и году заказа']\n    , promo_date_month_year = ['Месяц и год промоакции', 'месяца и года промоакции', 'месяцу и году промоакции']\n    , month_year = ['Месяц и год', 'месяца и года', 'месяцу и году']\n)\n\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_visits\n    , column_for_axis = 'device'\n    , column_for_legend = 'source_id'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , height = 450\n    , width = 1000\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- С категории устройств desktop входов больше, чем с touch, во всех источниках трафика.\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df_visits\n    , column_for_axis = 'source_id'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , height = 400\n    , width = 600\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Больше всего сессий от источника 4\n\n\nShow the code\n\nconfig = dict(\n    df = df_visits\n    , column_for_axis = 'device'\n    , column_for_legend = 'is_zero_session'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'col'\n    , height = 450\n    , width = 1000\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n\n)\nfig = pagri_data_tools.bar_categories(config, titles_for_axis)\nfig.update_layout(title_text=\"Распределение долей для устройств и длинны сессии с нормализацией по длинне сессии\")\n\n\n                                                \n\n\nНаблюдения:\n- На устройствах touch доля сессий с длительностью 0 больше, чем остальных сессий.\n\n\nShow the code\n\nconfig = dict(\n    df = df_visits\n    , column_for_axis = 'session_start_dt_month_year'\n    , column_for_legend = 'device'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , height = 450\n    , width = 1000\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = False    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- До ноября 2017 года количество сессий в месяц росло, затем снижается.\n\n\nShow the code\n\nconfig = dict(\n    df = df_visits\n    , column_for_axis = 'source_id'\n    , column_for_legend = 'is_zero_session'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'col'\n    , height = 450\n    , width = 1000\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- У источника трафика 1 ненулевых сессий намного меньше, чем нулевых, по сравнению с другими источниками.\n\n\nShow the code\n\nconfig = dict(\n    df = df_visits\n    , column_for_axis = 'source_id'\n    , column_for_legend = 'is_new_user'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'col'\n    , height = 450\n    , width = 1000\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- У источников трафика 1 и 2 доля новых клиентов значительно ниже, чем старых.\n\n\nShow the code\n\nconfig = dict(\n    df = df_costs\n    , column_for_axis = 'source_id'\n    , column_for_legend = 'promo_costs_cat'  \n    , barmode = 'stack'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , height = 450\n    , width = 1000\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- У источников трафика 1, 2, 4, 5 преобладают средние дневные затраты на маркетинг. - У источников трафика 9 и 10 преобладают дешевые дневные затраты на маркетинг. - У источника трафика 3 преобладают дорогие дневные затраты на маркетинг.\n\n\nShow the code\n\nconfig = dict(\n    df = df_costs\n    , column_for_axis = 'promo_costs_cat'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , height = 400\n    , width = 600\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Больше всего средних дневных затрат на маркетинг.\n\n\n4.3 Изучение зависимостей между числовыми и категориальными переменными\nПостроим графики для числовых переменных в разрезе категорий.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_visits\n    , x = 'device'\n    , y = 'session_duration'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'median'\n    , height = 400\n    , width = 700\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Медианная длительность сессии на устройствах desktop значительно выше, чем на устройствах touch.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_visits\n    , x = 'source_id'\n    , y = 'session_duration'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'mean'\n    , height = 400\n    , width = 600\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False       \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Средняя длительность сессии больше у источников трафика 6, 1 и 2.\n\n\nShow the code\nconfig = dict(\n    df = df_visits\n    , x = 'source_id'\n    , y = 'session_duration'  \n    , category = 'device' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- У источника 6 явно выделяется длительность сессии. Она значительно выше, чем у устройства touch для этого же источника.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_orders\n    , x = 'order_dt_month_year'\n    , y = 'revenue'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Больше всего выручки получено в декабре 2017 года.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_costs\n    , x = 'source_id'\n    , y = 'promo_costs'  \n    , barmode = 'group'\n    , func = 'mean'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Источник трафика с id 3 имеет самые большие средние расходы в день.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_costs\n    , x = 'source_id'\n    , y = 'promo_costs'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- На источник трафика 3 потратили намного больше, чем на все остальные источники.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_costs\n    , x = 'promo_date_month_year'\n    , y = 'promo_costs'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Средние расходы на маркетинг в день росли до ноября 2017 года. Затем снижались.\n\n\nShow the code\nconfig = dict(\n    df = df_costs\n    , x = 'promo_date_month_year'\n    , y = 'promo_costs'  \n    , category = 'source_id' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.area(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Источник трафика 3 имеет более резкий рост дневных расходов, чем остальные источники. И снижение расходов было также более сильным, чем у остальных источников.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'session_cnt'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.area(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Количество сессий растет до ноября 2017 года, затем снижается.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'mau'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.area(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- MAU растет до ноября 2017 года, затем снижается.\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'avg_session_len'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.area(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- В средней длительности сессии присутствует пик в ноябре 2017 года, затем длительность сессии медленно снижается.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'new_user_cnt'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.area(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Количество новых пользователей растет до ноября 2017 года, затем снижается.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'orders_cnt'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.area(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Количество заказов растет до декабря 2017 года, затем скачкообразно снижается.\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'buyers'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.area(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Количество покупателей растет до декабря 2017 года, затем снижается.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'avg_order_value'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Средний чек по месяцам колеблется вокруг значения 5 у.е.\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'new_buer_cnt'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.area(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Количество новых покупателей до декабря 2017 года росло, затем снижается.\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'new_users_ratio'   \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Отношение новых пользователей за месяц к mau снижается каждый месяц.\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'buers_users_ration'   \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Отношение количества покупателей к количеству пользователей резко выросло в мае 2018 года.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'cac'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Стоимость привлечения одного покупателя колеблется возле значения 8 y.e.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'cpa'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Стоимость привлечения одного пользователя слабо меняется по месяцам и колеблется около значения 1.4 у.е.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'apc'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Среднее количество покупок на одного покупателя стабильно держится около уровне 1.2\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'aov'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Максимальный средний чек был в декабре 2017 года.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'arpu'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Средний доход с одного пользователя был максимальным в декабре 2017 года.\n\n\nShow the code\nconfig = dict(\n    df = df_monthly\n    , x = 'month_year'\n    , y = 'arppu'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n- Средняя выручка с одного покупателя имеет пик в декабре 2017 года.\n Вернуться к выводам\n\n\n\nShow the code\nconfig = dict(\n    df = df_sources\n    , x = 'source_id'\n    , y = 'romi'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nИсточники трафика 1, 2, 9, 5 окупили себя. Лучше всех показал себя источник 1.\nИсточник трафика 3 сильно убыточный.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_sources\n    , x = 'source_id'\n    , y = 'gross_profit'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , height = 450\n    , width = 1000\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nПо абсолютным значениям валовой прибыли компания 3 показывает очень существенный минус.\n\n\n\n4.4 Когортный анализ\nИзучим данные по когортам.\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'visits_cnt' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False     \n    , is_reversed_y = True\n    , x_axis_position = 'top'    \n    , decimal_places = 0                                                  \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ количества посещений')\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего пользователей появятся в зимних когортах.\n\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'buyers_cnt' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False    \n    , is_reversed_y = True\n    , x_axis_position = 'top'    \n    , decimal_places = 0                                                            \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ количества покупателей')\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего покупателей появятся в зимних когортах.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'revenue' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False      \n    , is_reversed_y = True\n    , x_axis_position = 'top'                                                            \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ выручки')\n\n\n                                                \n\n\nНаблюдения:\n\nОсновная часть выручки от когорты получается в первый месяц ее жизни.\n\nУ когорты от сентября 2017 года есть всплеск выручки на 3 месяц жизни.\nВ зимние месяцы выручка возрастает у когорт.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'revenue_cumsum' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False      \n    , is_reversed_y = True\n    , x_axis_position = 'top'                                                            \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ кумулятивной выручки')\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего кумулятивной выручки принесли когорты, которые появились с сентября 2017 по декабрь 2017.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'orders_cnt' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False      \n    , is_reversed_y = True\n    , x_axis_position = 'top'                                                                                                                     \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ количества заказов')\n\n\n                                                \n\n\nНаблюдения:\n\nОсновная часть заказов приходится на первый месяц жизни когорт.\n\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'aov' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False      \n    , is_reversed_y = True\n    , x_axis_position = 'top'                                                                                                                     \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ среднего чека')\n\n\n                                                \n\n\nНаблюдения:\n\nПрисутствуют аномально высокие значения в среднем чеке в когорте сентябрь 2017 года. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 5539673724080479777.\nПрисутствуют аномально высокие значения в среднем чеке в когорте декабря 2017 года. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 11149926373378902217.\n\nПосмотрим когда у нас появились наши оптовые покупатели.\n\n\nShow the code\ndf_orders[df_orders.uid == 5539673724080479777].buyer_first_month.iloc[0]\n\n\n\"Сен'17\"\n\n\n\n\nShow the code\ndf_orders[df_orders.uid == 11149926373378902217].buyer_first_month.iloc[0]\n\n\n\"Дек'17\"\n\n\nВсе верно, именно в эти месяцы появились оптовые покупатели.\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'apc' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False      \n    , is_reversed_y = True\n    , x_axis_position = 'top'                                                                                                                     \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ среднего количества покупок на покупателя')\n\n\n                                                \n\n\nНаблюдения:\n\nКогорта от июня 2017 года имеет более высокие значения в среднем количестве покупок на покупателя\n\n Вернуться к выводам\n\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'retention' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False     \n    , is_reversed_y = True\n    , x_axis_position = 'top' \n    , skip_first_col_for_cohort = True  \n    , is_show_in_pct = True                                                                                                                   \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ Retention')\n\n\n                                                \n\n\nНаблюдения:\n\nПрисутствует динамика на снижение retention с каждой новой когортой.\nПосле первого месяца у всех когорт остается не более 10 процентов пользователей. Это очень низкий показатель\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'ltv' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False     \n    , is_reversed_y = True\n    , x_axis_position = 'top'                                                                                                                      \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ LTV')\n\n\n                                                \n\n\nНаблюдения:\n\nКогорта от сентября 2017 года имеет самые высокие значения LTV. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 5539673724080479777.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df_cohort\n    , column_for_x = 'cohort_month_year'\n    , column_for_y = 'cohort_lifetime' \n    , column_for_value = 'romi' \n    , orientation = 'v'\n    , func = 'mean'\n    , text = False    \n    , sort_axis = False    \n    , sort_legend = False      \n    , is_reversed_y = True\n    , x_axis_position = 'top'                                                                                                                     \n)\nfig = pagri_data_tools.heatmap(config, titles_for_axis)\nfig.update_layout(title_text = 'Когортный анализ ROMI')\n\n\n                                                \n\n\nНаблюдения:\n\nТолько 2 когорты вышли в плюс (июнь 2017 и сентябрь 2017). Когорта от сентября скорее исключение, так как там присутствует оптовый покупатель.\n\n\n\n4.5 Промежуточный вывод\n\nУ новых пользователей медиана и размах в длительности сессии больше, чем у старых пользователей.\nНа desktop длительность сессии выше, чем на touch. И разброс в длительности сессии у desktop больше.\nИсточник трафика с id 1 имеет больше остальных медианную длительность сессии и размах значений.\nУ маркетинговой компании 3 намного выше медианное значение дневных расходов.\nС категории устройств desktop входов больше, чем с touch, во всех источниках трафика.\nБольше всего сессий от источника 4\nНа устройствах touch доля сессий с длительностью 0 больше, чем остальных сессий.\nДо ноября 2017 года количество сессий в месяц росло, затем снижается.\nУ источника трафика 1 ненулевых сессий намного меньше, чем нулевых, по сравнению с другими источниками.\nУ источников трафика 1 и 2 доля новых клиентов значительно ниже, чем старых.\nУ источников трафика 1, 2, 4, 5 преобладают средние дневные затраты на маркетинг.\nУ источников трафика 9 и 10 преобладают дешевые дневные затраты на маркетинг.\nУ источника трафика 3 преобладают дорогие дневные затраты на маркетинг.\nБольше всего средних дневных затрат на маркетинг.\nМедианная длительность сессии на устройствах desktop значительно выше, чем на устройствах touch.\nСредняя длительность сессии больше у источников трафика 6, 1 и 2.\nУ источника 6 явно выделяется длительность сессии. Она значительно выше, чем у устройства touch для этого же источника.\nБольше всего выручки получено в декабре 2017 года.\nИсточник трафика с id 3 имеет самые большие средние расходы в день.\nНа источник трафика 3 потратили намного больше, чем на все остальные источники.\nСредние расходы на маркетинг в день росли до ноября 2017 года. Затем снижались.\nИсточник трафика 3 имеет более резкий рост дневных расходов, чем остальные источники. И снижение расходов было также более сильным, чем у остальных источников.\nКоличество сессий растет до ноября 2017 года, затем снижается.\nMAU растет до ноября 2017 года, затем снижается.\nВ средней длительности сессии присутствует пик в ноябре 2017 года, затем длительность сессии медленно снижается.\nКоличество новых пользователей растет до ноября 2017 года, затем снижается.\nКоличество заказов растет до декабря 2017 года, затем скачкообразно снижается.\nКоличество покупателей растет до декабря 2017 года, затем снижается.\nСредний по месяцам колеблется вокруг значения 5 у.е.\nКоличество новых покупателей до декабря 2017 года росло, затем снижается.\nОтношение новых пользователей за месяц к mau снижается каждый месяц.\nОтношение количества покупателей к количеству пользователей резко выросло в мае 2018 года.\nСтоимость привлечения одного покупателя колеблется возле значения 8 y.e.\nСтоимость привлечения одного пользователя слабо меняется по месяцам и колеблется около значения 1.4 у.е.\nСреднее количество покупок на одного покупателя стабильно держится около уровне 1.2\nМаксимальный средний чек был в декабре 2017 года.\nСредний доход с одного пользователя был максимальным в декабре 2017 года.\nСредняя выручка с одного покупателя имеет пик в декабре 2017 года.\nИсточники трафика 1, 2, 9, 5 окупили себя. Лучше всех показал себя источник 1.\nИсточник трафика 3 сильно убыточный.\nПо абсолютным значениям валовой прибыли компания 3 показывает очень существенный минус.\nБольше всего пользователей появятся в зимних когортах.\nБольше всего покупателей появятся в зимних когортах.\nОсновная часть выручки от когорты получается в первый месяц ее жизни.\n\nУ когорты от сентября 2017 года есть всплеск выручки на 3 месяц жизни.\nВ зимние месяцы выручка возрастает у когорт.\nБольше всего кумулятивной выручки принесли когорты, которые появились с сентября 2017 по декабрь 2017.\nОсновная часть заказов приходится на первый месяц жизни когорт.\nПрисутствуют аномально высокие значения в среднем чеке в когорте сентябрь 2017 года. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 5539673724080479777.\nПрисутствуют аномально высокие значения в среднем чеке в когорте декабря 2017 года. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 11149926373378902217.\nКогорта от июня 2017 года имеет более высокие значения в среднем количестве покупок на покупателя\nПрисутствует динамика на снижение retention с каждой новой когортой.\nПосле первого месяца у всех когорт остается не более 10 процентов пользователей. Это очень низкий показатель\nКогорта от сентября 2017 года имеет самые высокие значения LTV. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 5539673724080479777.\nТолько 2 когорты вышли в плюс (июнь 2017 и сентябрь 2017). Когорта от сентября скорее исключение, так как там присутствует оптовый покупатель."
  },
  {
    "objectID": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#общий-вывод",
    "href": "projects/business_metrics_in_yandex_afisha/business_metrics_in_yandex_afisha.html#общий-вывод",
    "title": "Анализ бизнес-показателей в Яндекс.Афиша",
    "section": "5. Общий вывод",
    "text": "5. Общий вывод\nВыводы:\n\nС ноября 2017 по март 2018 тратилось много денег на компанию с id 3.\nСумма заказа варьируется от 0 до 2633.28 у.е.\nВ основном заказы совершаются в диапазоне от 1.22 до 4.89 у.е.\nРасходы на рекламные компании варьируются от 0.54 до 1788.28 у.е.\nВ основном расходы на рекламу лежат в диапазоне от 21.95 до 170.06 у.е.\nДлительность сессии варьируется от 0 минут до 711 минут.\nВ основном длительность сессии длиться от 2 до 14 минут.\nУ новых пользователей медиана и размах в длительности сессии больше, чем у старых пользователей.\nНа desktop длительность сессии выше, чем на touch. И разброс в длительности сессии у desktop больше.\nИсточник трафика с id 1 имеет больше остальных медианную длительность сессии и размах значений.\nУ маркетинговой компании 3 намного выше медианное значение дневных расходов.\nС категории устройств desktop входов больше, чем с touch, во всех источниках трафика.\nБольше всего сессий от источника 4\nНа устройствах touch доля сессий с длительностью 0 больше, чем остальных сессий.\nДо ноября 2017 года количество сессий в месяц росло, затем снижается.\nУ источника трафика 1 ненулевых сессий намного меньше, чем нулевых, по сравнению с другими источниками.\nУ источников трафика 1 и 2 доля новых клиентов значительно ниже, чем старых.\nУ источников трафика 1, 2, 4, 5 преобладают средние дневные затраты на маркетинг.\nУ источников трафика 9 и 10 преобладают дешевые дневные затраты на маркетинг.\nУ источника трафика 3 преобладают дорогие дневные затраты на маркетинг.\nМедианная длительность сессии на устройствах desktop значительно выше, чем на устройствах touch.\nСредняя длительность сессии больше у источников трафика 6, 1 и 2.\nУ источника 6 явно выделяется длительность сессии. Она значительно выше, чем у устройства touch для этого же источника.\nБольше всего выручки получено в декабре 2017 года.\nИсточник трафика с id 3 имеет самые большие средние расходы в день.\nНа источник трафика 3 потратили намного больше, чем на все остальные источники.\nСредние расходы на маркетинг в день росли до ноября 2017 года. Затем снижались.\nИсточник трафика 3 имеет более резкий рост дневных расходов, чем остальные источники. И снижение расходов было также более сильным, чем у остальных источников.\nКоличество сессий растет до ноября 2017 года, затем снижается.\nMAU растет до ноября 2017 года, затем снижается.\nВ средней длительности сессии присутствует пик в ноябре 2017 года, затем длительность сессии медленно снижается.\nКоличество новых пользователей растет до ноября 2017 года, затем снижается.\nКоличество заказов растет до декабря 2017 года, затем скачкообразно снижается.\nКоличество покупателей растет до декабря 2017 года, затем снижается.\nСредний по месяцам колеблется вокруг значения 5 у.е.\nКоличество новых покупателей до декабря 2017 года росло, затем снижается.\nОтношение новых пользователей за месяц к mau снижается каждый месяц.\nОтношение количества покупателей к количеству пользователей резко выросло в мае 2018 года.\nСтоимость привлечения одного покупателя колеблется возле значения 8 y.e.\nСтоимость привлечения одного пользователя слабо меняется по месяцам и колеблется около значения 1.4 у.е.\nСреднее количество покупок на одного покупателя стабильно держится около уровне 1.2\nМаксимальный средний чек был в декабре 2017 года.\nСредний доход с одного пользователя был максимальным в декабре 2017 года.\nСредняя выручка с одного покупателя имеет пик в декабре 2017 года.\nИсточники трафика 1, 2, 9, 5 окупили себя. Лучше всех показал себя источник 1.\nИсточник трафика 3 сильно убыточный.\nПо абсолютным значениям валовой прибыли компания 3 показывает очень существенный минус.\nБольше всего пользователей появятся в зимних когортах.\nОсновная часть выручки от когорты получается в первый месяц ее жизни.\n\nУ когорты от сентября 2017 года есть всплеск выручки на 3 месяц жизни.\nВ зимние месяцы выручка возрастает у когорт.\nБольше всего кумулятивной выручки принесли когорты, которые появились с сентября 2017 по декабрь 2017.\nОсновная часть заказов приходится на первый месяц жизни когорт.\nПрисутствуют аномально высокие значения в среднем чеке в когорте сентябрь 2017 года. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 5539673724080479777.\nПрисутствуют аномально высокие значения в среднем чеке в когорте декабря 2017 года. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 11149926373378902217.\nКогорта от июня 2017 года имеет более высокие значения в среднем количестве покупок на покупателя\nПрисутствует динамика на снижение retention с каждой новой когортой.\nПосле первого месяца у всех когорт остается не более 10 процентов пользователей. Это очень низкий показатель\nКогорта от сентября 2017 года имеет самые высокие значения LTV. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 5539673724080479777.\nТолько 2 когорты вышли в плюс (июнь 2017 и сентябрь 2017). Когорта от сентября скорее исключение, так как там присутствует оптовый покупатель.\n\nАномалии и особенности в данных:\n\nВ столбце с суммой заказов 51 нулевое значение (меньше 1%)\nВ таблице с расходами на рекламные компании 7 уникальных рекламных компаний, а в таблице с посещениями сайтов 9.\nКомпании 6 и 7 отсутствуют в таблице с расходами на рекламные компании. Возможно это бесплатный трафик.\n2 пользователя (id 5539673724080479777 и 11149926373378902217) имеют намного больше суммы заказов, чем остальные. Скорее всего это оптовики или перекупы.\nПроцент выбросов в выручке меньше 10%, это указывает на то, что выбросов не слишком много.\nПроцент выбросов в расходах на рекламные компании чуть больше 10%, это указывает на то, что выбросов не слишком много.\nУ пользователя с id 2037345392173160982 больше всего нулей в стоимости заказа.\nВ длительности сессии есть 10% нулевых значений.\nВ длительности сессии есть 2 отрицательных значения.\nУ пользователя с id 12869801667763685675 больше всего сессий с длительностью 0, но не существенно.\nПрисутствуют аномально высокие значения в среднем чеке в когорте сентябрь 2017 года. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 5539673724080479777.\nПрисутствуют аномально высокие значения в среднем чеке в когорте декабря 2017 года. Это связано с тем, что в этот месяц появился оптовый покупатель с uid 11149926373378902217.\n\nРезультаты предобработки данных:\n\nОбрезали данные, чтобы все даты были от 2017-06-01 до 2018-06-01.\nУдалили 51 нулевое значение (меньше 1%) в столбце с суммой заказа.\n\nРекомендации:\n\nОптимизация расходов на маркетинг:\n\nУчитывая, что источник трафика 3 показывает высокие расходы и низкую рентабельность, рекомендуется пересмотреть стратегию его использования. Возможно, стоит сократить бюджет на этот источник или полностью исключить его из рекламной кампании.\nДля источников трафика 1 и 2, которые показали себя лучше всего, стоит увеличить инвестиции, чтобы максимизировать их потенциал.\n\nУлучшение пользовательского опыта:\n\nПоскольку длительность сессии на устройствах desktop выше, чем на touch, стоит рассмотреть возможность улучшения мобильной версии сайта или приложения, чтобы увеличить вовлеченность пользователей на мобильных устройствах.\nУчитывая, что новые пользователи имеют более высокую медиану длительности сессии, стоит разработать специальные предложения или программы лояльности для новых клиентов, чтобы удерживать их на платформе.\n\nАнализ и работа с когортами:\n\nПоскольку когорты, появившиеся в зимние месяцы, показывают рост выручки, стоит рассмотреть возможность запуска акций или специальных предложений в зимний период для привлечения новых пользователей. Учитывая, что retention снижается с каждой новой когортой, необходимо разработать стратегии для повышения удержания пользователей, такие как улучшение сервиса, персонализированные предложения и активное взаимодействие с клиентами.\n\nУвеличение количества заказов:\n\nПоскольку количество заказов и покупателей снижается после декабря 2017 года, стоит проанализировать причины этого падения и разработать маркетинговые стратегии для стимулирования повторных покупок, например, через email-рассылки или специальные акции для постоянных клиентов.\n\nУлучшение LTV:\n\nПоскольку когорты от сентября 2017 года показывают высокие значения LTV, стоит изучить, какие факторы способствовали этому успеху, и попытаться воспроизвести их в других когортах.\n\nМониторинг аномалий:\n\nНеобходимо внимательно следить за аномально высокими значениями среднего чека, связанными с оптовыми покупателями, чтобы избежать искажений в анализе данных. Возможно, стоит выделить эти случаи в отдельную категорию для более точного анализа."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html",
    "title": "Исследование объявлений о продаже квартир",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nПроект направлен на исследование факторов, влияющих на ценообразование на рынке недвижимости в Санкт-Петербурге.\nВ ходе проекта будут выявлены ключевые параметры, которые определяют стоимость квартир.\nПолученные знания будут использованы для создания системы, которая будет отслеживать аномалии и предупреждать о возможных случаях мошенничества.\nЦель:\nВыявить ключевые параметры, определяющие стоимость квартир, и разработать рекомендации для создания системы мониторинга,\nкоторая поможет выявлять аномалии в ценах и предупреждать о мошенничестве на рынке недвижимости.\nИсточники данных:\nДанные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктах за несколько лет.\nУсловия проведения анализа данных:\nДля анализ будут использоваться данные с 27 ноября 2014 по 3 мая 2019 года\nГлавные выводы:\n- В среднем объявление находится в продаже 180 дней.\n- Сильная положительная корреляция между жилой площадью и общей площадью\n- Сильная положительная корреляция между числом комнат и общей площадью\n- Сильная положительная корреляция между числом комнат и жилой площадью\n- Сильная отрицательная корреляция между отношением площади кухни к общей площади и отношением жилой площади к общей площади\n- Общая площадь является самым значимым признаком для предсказания цены квартиры. Число дней экспозиции находится на втором месте.\n- Можно заметить, что чем ближе к центру или парку, тем дороже стоит квартира.\n- Чем больше число комнат, тем больше общая площадь.\n- Чем больше число комнат, тем больше жилая площадь.\n- В воскресенье и субботу меньше всего публикаций\n- Есть тренд на увеличение количества фотографий по годам.\n- В премиуме среднее количество комнат больше на всех этажах\n- У премиум площадь квартир больше на всех этажах\n- В центре медианная стоимость квартир выше\n- В центре медианная площадь квартир больше\n- В центре медианное количество комнат больше\n- В центре медианная высота потолков выше.\n- В центре медианное количество дней экспозиции больше.\n- Среднее и медиана в центре для цены выше почти в 2 раза, чем во всем датафрейме.\n- Общая площадь в центре больше, чем во всем датафрейме.\n- Высота потолков в центре больше, чем во всем датафрейме\n- В центре меньше балконов, чем во всем датафрейме.\n- В центре меньше эконома и больше премиум квартир.\n- Санкт–Петербург, Пушкин и деревня Кудрово имеют самую большую цену квадратного метра.\nАномалии и особенности в данных:\n- Минимальное значение цены 12 190 является аномальным.\n- В высоте потолков есть пропуски (39 процентов)\n- В высоте потолков много выбросов. Есть значение 100.\n- В количестве этажей есть пропуски (меньше 1 процента)\n- В жилой площади 8 процентов пропусков.\n- В площади кухни 10 процентов пропусков.\n- В числе балконов 49 процентов пропусков. Скорее всего пропуски это отсутствие балкона.\n- В расстоянии до ближайшего аэропорта 23 процента пропусков.\n- В расстоянии до центр города 23 процента пропусков.\n- В колонке с количеством парков рядом 23 процента пропусков.\n- В колонке с расстоянием до ближайшего парка 66 процентов пропусков.\n- В колонке с количеством прудов 23 процента пропусков, скорее всего это отсутствие парков.\n- В колонке с расстоянием до ближайшего пруда 62 процента пропусков.\n- В колонке с количеством дней экспозиции 13 процентов пропусков.\n- В колонке с признаком является ли квартира апартаментом 88 процентов пропусков. Скорее всего эти квартиры не являются апартаментами.\n- В колонке с названием населенного пункта 49 пропущенных значений (меньше 1 процента)\n- Пропуски в колонках с количеством парков рядом, количеством прудов рядом,\n- Пропуски в количестве этажей совпадают с пропусками в признаке является ли квартира апартаментом\n- В количестве этаже пропуски зависят от признака является ли квартира студией.\nРекомендации:\n- Добавить контроль ввода слишком больших и слишком маленьких значений для цены, высоты потолка.\n- Добавить контроль ввода для количества комнат, чтобы исключить ввод нулевых значений.\n- Выяснить почему пропуски в колонках с количеством парков рядом, количеством прудов рядом,\nрасстоянием до центра, расстоянием до аэропорта в одних и тех же строках."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#загрузка-библиотек",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#загрузка-библиотек",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Загрузка библиотек",
    "text": "Загрузка библиотек\n\n\nShow the code\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore\npd.set_option('display.max_columns', None)"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#описание-и-изучение-данных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#описание-и-изучение-данных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "1. Описание и изучение данных",
    "text": "1. Описание и изучение данных\n\n1.1 Описание данных\nПо каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных.\nНапример, расстояние до центра, аэропорта, ближайшего парка и водоёма.\n\nairports_nearest - расстояние до ближайшего аэропорта в метрах (м)\nbalcony - число балконов\nceiling_height - высота потолков (м)\ncityCenters_nearest - расстояние до центра города (м)\ndays_exposition - сколько дней было размещено объявление (от публикации до снятия)\nfirst_day_exposition - дата публикации\nfloor - этаж\nfloors_total - всего этажей в доме\nis_apartment - апартаменты (булев тип)\nkitchen_area - площадь кухни в квадратных метрах (м²)\nlast_price - цена на момент снятия с публикации\nliving_area - жилая площадь в квадратных метрах(м²)\nlocality_name - название населённого пункта\nopen_plan - свободная планировка (булев тип)\nparks_around3000 - число парков в радиусе 3 км\nparks_nearest - расстояние до ближайшего парка (м)\nponds_around3000 - число водоёмов в радиусе 3 км\nponds_nearest - расстояние до ближайшего водоёма (м)\nrooms - число комнат\nstudio - квартира-студия (булев тип)\ntotal_area - площадь квартиры в квадратных метрах (м²)\ntotal_images - число фотографий квартиры в объявлении\n\n\n\n1.2 Изучение данных\n\n1.2.1 Изучение переменных\nОставим тип float, так как у нас пропуски в данных и мы не можем преобразовать нужные столбцы в int\n\n\nShow the code\ndtype = {'is_apartment': 'category', 'studio': 'category', 'open_plan': 'category'}\ndf = pd.read_csv('https://code.s3.yandex.net/datasets/real_estate_data.csv', dtype=dtype, sep='\\t'\n                , parse_dates=['first_day_exposition'], date_format='%Y-%m-%dT%H:%M:%S')\ndf.rename(columns={'cityCenters_nearest': 'city_centers_nearest'}, inplace=True)\ndf.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n6029\n7\n4200000.0\n42.00\n2017-12-05\n2\n2.58\n5.0\n28.5\n5\nNaN\nFalse\nFalse\n5.00\nNaN\nСанкт-Петербург\n36416.0\n9534.0\n2.0\n446.0\n3.0\n459.0\n18.0\n\n\n21836\n7\n3950000.0\n45.00\n2015-06-10\n2\nNaN\n9.0\n28.0\n7\nNaN\nFalse\nFalse\n7.00\n0.0\nСанкт-Петербург\n27880.0\n12138.0\n1.0\n638.0\n1.0\n593.0\n437.0\n\n\n5698\n7\n450000.0\n42.00\n2017-07-31\n2\nNaN\n1.0\n23.0\n1\nNaN\nFalse\nFalse\n5.80\nNaN\nгородской посёлок Будогощь\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n233.0\n\n\n9402\n11\n4900000.0\n55.00\n2017-06-19\n2\nNaN\n14.0\n32.0\n14\nNaN\nFalse\nFalse\n8.50\n2.0\nСанкт-Петербург\n39931.0\n12834.0\n0.0\nNaN\n0.0\nNaN\n15.0\n\n\n2519\n6\n3511000.0\n39.41\n2018-08-07\n1\n2.65\n27.0\nNaN\n12\nNaN\nFalse\nFalse\n11.28\n1.0\nпосёлок Мурино\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n60.0\n\n\n\n\n\n\n\nИзучим каждую колонку отдельно\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df)\nnext(gen)\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n23 699\n22\n5\n---\n---\n\n\n\n\n\n\n\n\nНаблюдения:\n\nПолных дубликатов в датафрейме нет\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 2: first_day_exposition\n\n\n\n\n\nFirst date\n2014-11-27 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2019-05-03 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n23 699 (100%)\n\nDistinct\n1 491 (6%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n22 208 (94%)\n\nDays missing\n8%\n\n\n\n\n\n\n\n\n\n        \n        \n\n\nНаблюдения:\n\nВ колонке с датой пропущенных значений нет.\nНет пропущенных годов и месяцев.\n8 процентов дней пропущено\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 3: total_images\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n50\n\nAvg\n9.86\n\n10 (8%)\n\n\nMissing\n---\n\n95%\n20\n\nMode\n10\n\n9 (7%)\n\n\nDistinct\n38 (&lt;1%)\n\n75%\n14\n\nRange\n50\n\n20 (7%)\n\n\nDuplicates\n23 661 (99.8%)\n\nMedian\n9\n\niQR\n8\n\n8 (7%)\n\n\nZeros\n1 059 (4%)\n\n25%\n6\n\nstd\n5.68\n\n7 (6%)\n\n\nNegative\n---\n\n5%\n1\n\nkurt\n-0.34\n\n6 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.26\n\n11 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с количеством фотографий пропусков нет\n4 процента записей с нулями, это нормально, поскольку у части объявлений нет изображений.\nМаксимальное количество фотографий 50. Это многовато, нужно будет это проверить.\nМедианное значение 9, похоже на правду.\n7 процентов записей имеют 20 фотографий.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 4: last_price\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n763 000 000\n\nAvg\n6 541 548.77\n\n4 500 000 (1%)\n\n\nMissing\n---\n\n95%\n15 300 000\n\nMode\n4 500 000\n\n3 500 000 (1%)\n\n\nDistinct\n2 978 (13%)\n\n75%\n6 800 000\n\nRange\n762 987 810\n\n4 300 000 (1%)\n\n\nDuplicates\n20 721 (87%)\n\nMedian\n4 650 000\n\niQR\n3 400 000\n\n4 000 000 (1%)\n\n\nZeros\n---\n\n25%\n3 400 000\n\nstd\n10 887 013.27\n\n4 200 000 (1%)\n\n\nNegative\n---\n\n5%\n1 870 000\n\nkurt\n1277.68\n\n3 600 000 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12 190\n\nskew\n25.80\n\n3 300 000 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ цене есть выбросы.\nМинимальное значение цены 12 190 и максимальное значение 763 млн выглядят подозрительно.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 5: total_area\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n900\n\nAvg\n60.35\n\n45 (2%)\n\n\nMissing\n---\n\n95%\n116\n\nMode\n45\n\n42 (2%)\n\n\nDistinct\n2 182 (9%)\n\n75%\n69.9\n\nRange\n888\n\n60 (1%)\n\n\nDuplicates\n21 517 (91%)\n\nMedian\n52\n\niQR\n29.9\n\n31 (1%)\n\n\nZeros\n---\n\n25%\n40\n\nstd\n35.65\n\n44 (1%)\n\n\nNegative\n---\n\n5%\n31\n\nkurt\n47.52\n\n40 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12\n\nskew\n4.77\n\n43 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nМаксимальная площадь в 900 квадратов.\nТакже нужно проверить площадь 12 квадратов\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 6: rooms\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n19\n\nAvg\n2.07\n\n1 (34%)\n\n\nMissing\n---\n\n95%\n4\n\nMode\n1\n\n2 (34%)\n\n\nDistinct\n17 (&lt;1%)\n\n75%\n3\n\nRange\n19\n\n3 (25%)\n\n\nDuplicates\n23 682 (99.9%)\n\nMedian\n2\n\niQR\n2\n\n4 (5%)\n\n\nZeros\n197 (1%)\n\n25%\n1\n\nstd\n1.08\n\n5 (1%)\n\n\nNegative\n---\n\n5%\n1\n\nkurt\n8.69\n\n0 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.52\n\n6 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nЕсть квартиры с 0 комнат, возможно так обозначили студии.\nМаксимальное количество комнат 19 нужно изучить.\nТреть квартир с 1 комнатой и треть квартир с двумя комнатами. Четверть с 3 комнатами.\nКвартир с 4 и более команд около 6 процентов.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 7: ceiling_height\n\n\n\n\n\nValues\n14 504 (61%)\n\nMax\n100\n\nAvg\n2.77\n\n2.5 (24%)\n\n\nMissing\n9 195 (39%)\n\n95%\n3.3\n\nMode\n2.5\n\n2.6 (11%)\n\n\nDistinct\n183 (1%)\n\n75%\n2.8\n\nRange\n99\n\n2.7 (11%)\n\n\nDuplicates\n23 515 (99.2%)\n\nMedian\n2.65\n\niQR\n0.28\n\n3 (8%)\n\n\nZeros\n---\n\n25%\n2.52\n\nstd\n1.26\n\n2.8 (7%)\n\n\nNegative\n---\n\n5%\n2.5\n\nkurt\n2627.14\n\n2.55 (7%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n41.71\n\n2.75 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ высоте потолков пропуски (39 процентов)\nЯвный выброс 100 в высоте потолков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 8: floors_total\n\n\n\n\n\nValues\n23 613 (99.6%)\n\nMax\n60\n\nAvg\n10.67\n\n5 (25%)\n\n\nMissing\n86 (&lt;1%)\n\n95%\n25\n\nMode\n5\n\n9 (16%)\n\n\nDistinct\n36 (&lt;1%)\n\n75%\n16\n\nRange\n59\n\n16 (6%)\n\n\nDuplicates\n23 662 (99.8%)\n\nMedian\n9\n\niQR\n11\n\n12 (6%)\n\n\nZeros\n---\n\n25%\n5\n\nstd\n6.6\n\n4 (5%)\n\n\nNegative\n---\n\n5%\n4\n\nkurt\n0.04\n\n10 (5%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n0.94\n\n25 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ количестве этажей есть пропуски (меньше 1 процента)\nМаксимальное количество этаже 60 нужно проверить.\nБольше всего пятиэтажек (25 процентов)\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 9: living_area\n\n\n\n\n\nValues\n21 796 (92%)\n\nMax\n409.7\n\nAvg\n34.46\n\n18 (4%)\n\n\nMissing\n1 903 (8%)\n\n95%\n69\n\nMode\n18\n\n17 (3%)\n\n\nDistinct\n1 782 (8%)\n\n75%\n42.3\n\nRange\n407.7\n\n30 (3%)\n\n\nDuplicates\n21 916 (92%)\n\nMedian\n30\n\niQR\n23.7\n\n16 (2%)\n\n\nZeros\n---\n\n25%\n18.6\n\nstd\n22.03\n\n20 (2%)\n\n\nNegative\n---\n\n5%\n15.2\n\nkurt\n31.36\n\n28 (2%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n2\n\nskew\n3.91\n\n31 (2%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ жилой площади 8 процентов пропусков.\nНужно проверить минимальную и максимальную жилую площади.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 10: floor\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n33\n\nAvg\n5.89\n\n2 (14%)\n\n\nMissing\n---\n\n95%\n16\n\nMode\n2\n\n3 (13%)\n\n\nDistinct\n33 (&lt;1%)\n\n75%\n8\n\nRange\n32\n\n1 (12%)\n\n\nDuplicates\n23 666 (99.9%)\n\nMedian\n4\n\niQR\n6\n\n4 (12%)\n\n\nZeros\n---\n\n25%\n2\n\nstd\n4.89\n\n5 (11%)\n\n\nNegative\n---\n\n5%\n1\n\nkurt\n2.33\n\n6 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n1.55\n\n7 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nБольше всего квартир с 1 по 5 этаж. Это логично, учитывая, что у нас больше всего пятиэтажек.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 11: kitchen_area\n\n\n\n\n\nValues\n21 421 (90%)\n\nMax\n112\n\nAvg\n10.57\n\n6 (6%)\n\n\nMissing\n2 278 (10%)\n\n95%\n20\n\nMode\n6\n\n10 (6%)\n\n\nDistinct\n971 (4%)\n\n75%\n12\n\nRange\n110.7\n\n8 (5%)\n\n\nDuplicates\n22 727 (96%)\n\nMedian\n9.1\n\niQR\n5\n\n9 (5%)\n\n\nZeros\n---\n\n25%\n7\n\nstd\n5.91\n\n7 (5%)\n\n\nNegative\n---\n\n5%\n5.5\n\nkurt\n33.76\n\n11 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1.3\n\nskew\n4.21\n\n12 (3%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ площади кухни 10 процентов пропусков.\n\nНужно проверить опять же максимальные и минимальные кухонные площади.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 12: balcony\n\n\n\n\n\nValues\n12 180 (51%)\n\nMax\n5\n\nAvg\n1.15\n\n1 (34%)\n\n\nMissing\n11 519 (49%)\n\n95%\n2\n\nMode\n1\n\n0 (31%)\n\n\nDistinct\n6 (&lt;1%)\n\n75%\n2\n\nRange\n5\n\n2 (30%)\n\n\nDuplicates\n23 692 (99.9%)\n\nMedian\n1\n\niQR\n2\n\n5 (2%)\n\n\nZeros\n3 758 (16%)\n\n25%\n0\n\nstd\n1.07\n\n4 (2%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n2.51\n\n3 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.24\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ числе балконов 49 процентов пропусков. Скорее всего пропуски это отсутствие балкона.\n\nТреть квартир без балконов, также по трети квартир с 1 и 2 балконами.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 13: airports_nearest\n\n\n\n\n\nValues\n18 157 (77%)\n\nMax\n84 869\n\nAvg\n28 793.67\n\n37 434 &lt;1%\n\n\nMissing\n5 542 (23%)\n\n95%\n51 340\n\nMode\n37 434\n\n21 928 &lt;1%\n\n\nDistinct\n8 275 (35%)\n\n75%\n37 273\n\nRange\n84 869\n\n44 870 &lt;1%\n\n\nDuplicates\n15 423 (65%)\n\nMedian\n26 726\n\niQR\n18 688\n\n39 946 &lt;1%\n\n\nZeros\n1 (&lt;1%)\n\n25%\n18 585\n\nstd\n12 630.88\n\n18 732 &lt;1%\n\n\nNegative\n---\n\n5%\n11 557.4\n\nkurt\n-0.29\n\n37 407 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.54\n\n39 140 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ расстоянии до ближайшего аэропорта 23 процента пропусков.\n1 нулевое значение\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 14: city_centers_nearest\n\n\n\n\n\nValues\n18 180 (77%)\n\nMax\n65 968\n\nAvg\n14 191.28\n\n8 460 &lt;1%\n\n\nMissing\n5 519 (23%)\n\n95%\n31 671.6\n\nMode\n8 460\n\n20 802 &lt;1%\n\n\nDistinct\n7 642 (32%)\n\n75%\n16 293\n\nRange\n65 787\n\n10 720 &lt;1%\n\n\nDuplicates\n16 056 (68%)\n\nMedian\n13 098.5\n\niQR\n7 055\n\n20 444 &lt;1%\n\n\nZeros\n---\n\n25%\n9 238\n\nstd\n8 608.39\n\n8 434 &lt;1%\n\n\nNegative\n---\n\n5%\n3 541\n\nkurt\n4.36\n\n8 370 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n181\n\nskew\n1.67\n\n10 364 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ расстоянии до центр города 23 процента пропусков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 15: parks_around3000\n\n\n\n\n\nValues\n18 181 (77%)\n\nMax\n3\n\nAvg\n0.61\n\n0 (56%)\n\n\nMissing\n5 518 (23%)\n\n95%\n2\n\nMode\n0\n\n1 (31%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n1\n\nRange\n3\n\n2 (10%)\n\n\nDuplicates\n23 694 (99.9%)\n\nMedian\n0\n\niQR\n1\n\n3 (4%)\n\n\nZeros\n10 106 (43%)\n\n25%\n0\n\nstd\n0.8\n\n\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n0.87\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.23\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с количеством парков рядом 23 процента пропусков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 16: parks_nearest\n\n\n\n\n\nValues\n8 079 (34%)\n\nMax\n3 190\n\nAvg\n490.8\n\n441 &lt;1%\n\n\nMissing\n15 620 (66%)\n\n95%\n968\n\nMode\n441\n\n173 &lt;1%\n\n\nDistinct\n995 (4%)\n\n75%\n612\n\nRange\n3 189\n\n392 &lt;1%\n\n\nDuplicates\n22 703 (96%)\n\nMedian\n455\n\niQR\n324\n\n456 &lt;1%\n\n\nZeros\n---\n\n25%\n288\n\nstd\n342.32\n\n471 &lt;1%\n\n\nNegative\n---\n\n5%\n95.9\n\nkurt\n12.22\n\n2 102 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.72\n\n541 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с расстоянием до ближайшего парка 66 процентов пропусков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 17: ponds_around3000\n\n\n\n\n\nValues\n18 181 (77%)\n\nMax\n3\n\nAvg\n0.77\n\n0 (50%)\n\n\nMissing\n5 518 (23%)\n\n95%\n3\n\nMode\n0\n\n1 (31%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n1\n\nRange\n3\n\n2 (10%)\n\n\nDuplicates\n23 694 (99.9%)\n\nMedian\n1\n\niQR\n1\n\n3 (8%)\n\n\nZeros\n9 071 (38%)\n\n25%\n0\n\nstd\n0.94\n\n\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n0.17\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.07\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с количеством прудов 23 процента пропусков, скорее всего это отсутствие парков.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 18: ponds_nearest\n\n\n\n\n\nValues\n9 110 (38%)\n\nMax\n1 344\n\nAvg\n517.98\n\n427 &lt;1%\n\n\nMissing\n14 589 (62%)\n\n95%\n976.55\n\nMode\n427\n\n454 &lt;1%\n\n\nDistinct\n1 096 (5%)\n\n75%\n729\n\nRange\n1 331\n\n153 &lt;1%\n\n\nDuplicates\n22 602 (95%)\n\nMedian\n502\n\niQR\n435\n\n433 &lt;1%\n\n\nZeros\n---\n\n25%\n294\n\nstd\n277.72\n\n474 &lt;1%\n\n\nNegative\n---\n\n5%\n93\n\nkurt\n-0.73\n\n564 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n13\n\nskew\n0.22\n\n303 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с расстоянием до ближайшего пруда 62 процента пропусков.\n\n  Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 19: days_exposition\n\n\n\n\n\nValues\n20 518 (87%)\n\nMax\n1 580\n\nAvg\n180.89\n\n45.0 (4%)\n\n\nMissing\n3 181 (13%)\n\n95%\n647\n\nMode\n45.0\n\n60 (3%)\n\n\nDistinct\n1 141 (5%)\n\n75%\n232\n\nRange\n1 579\n\n7 (1%)\n\n\nDuplicates\n22 557 (95%)\n\nMedian\n95\n\niQR\n187\n\n30 (1%)\n\n\nZeros\n---\n\n25%\n45.0\n\nstd\n219.73\n\n90.0 &lt;1%\n\n\nNegative\n---\n\n5%\n9\n\nkurt\n6.28\n\n4 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.31\n\n3.0 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ среднем объявление находится в продаже 180 дней, но из за выбросов оно не совсем точно описывает ситуацию.\nЛучше использовать медиану. Она составляет 95 дней.\nЧаще всего объявления находятся в продаже 45 дней.\nВ колонке с количеством дней экспозиции 13 процентов пропусков.\nМаксимальное значение в 1580 дней похоже на выброс.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 20: is_apartment\n\n\n\n\n\nValues\n2 775 (12%)\n\nFalse (98%)\n\n\nMissing\n20 924 (88%)\n\nTrue (2%)\n\n\nDistinct\n2 (&lt;1%)\n\n\n\n\nDuplicated origin\n23 696 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с признаком является ли квартира апартаментом 88 процентов пропусков. Скорее всего эти квартиры не являются апартаментами.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 21: studio\n\n\n\n\n\nValues\n23 699 (100%)\n\nFalse (99%)\n\n\nMissing\n---\n\nTrue &lt;1%\n\n\nDistinct\n2 (&lt;1%)\n\n\n\n\nDuplicated origin\n23 697 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nСтудий меньше 1 процента.\n\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 22: open_plan\n\n\n\n\n\nValues\n23 699 (100%)\n\nFalse (100%)\n\n\nMissing\n---\n\nTrue &lt;1%\n\n\nDistinct\n2 (&lt;1%)\n\n\n\n\nDuplicated origin\n23 697 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nПочти все квартиры с открытой планировкой.\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 23: locality_name\n\n\n\n\n\nValues\n23 650 (99.8%)\n\nСанкт-Петербург (66%)\n\n\nMissing\n49 (&lt;1%)\n\nпосёлок Мурино (2%)\n\n\nDistinct\n364 (2%)\n\nпосёлок Шушары (2%)\n\n\nDuplicated origin\n23 334 (98%)\n\nВсеволожск (2%)\n\n\nDupl (modify - origin)\n---\n\nПушкин (2%)\n\n\nEmpty\n---\n\nКолпино (1%)\n\n\nRAM (Mb)\n2\n\nпосёлок Парголово (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ колонке с названием населенного пункта 49 пропущенных значений (меньше 1 процента)\n\n\n\n1.2.2 Изучение дубликатов\nПосмотрим на дубли во всем датафрейме\n\n\nShow the code\npagri_data_tools.check_duplicated(df)\n\n\n'no duplicates'\n\n\nПолных дубликатов у нас нет.\nПосмотрим сколько у нас дублей в каждой колонке\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df)\n\n\n\n\n\n\n\nTable 24: Duplicates\n\n\n\n\n\ntotal_images\n23661 (99.84%)\n\n\nlast_price\n20721 (87.43%)\n\n\ntotal_area\n21517 (90.79%)\n\n\nfirst_day_exposition\n22208 (93.71%)\n\n\nrooms\n23682 (99.93%)\n\n\nceiling_height\n23515 (99.22%)\n\n\nfloors_total\n23662 (99.84%)\n\n\nliving_area\n21916 (92.48%)\n\n\nfloor\n23666 (99.86%)\n\n\nis_apartment\n23696 (99.99%)\n\n\nstudio\n23697 (99.99%)\n\n\nopen_plan\n23697 (99.99%)\n\n\nkitchen_area\n22727 (95.90%)\n\n\nbalcony\n23692 (99.97%)\n\n\nlocality_name\n23334 (98.46%)\n\n\nairports_nearest\n15423 (65.08%)\n\n\ncity_centers_nearest\n16056 (67.75%)\n\n\nparks_around3000\n23694 (99.98%)\n\n\nparks_nearest\n22703 (95.80%)\n\n\nponds_around3000\n23694 (99.98%)\n\n\nponds_nearest\n22602 (95.37%)\n\n\ndays_exposition\n22557 (95.18%)\n\n\n\n\n\n\n\n\nУ нас нет столбцов, в которых данные должны быть уникальны, поэтому проверять на дубли нечего.\n\n\n1.2.3 Изучение пропусков\nПосмотрим на столбцы, в которых есть пропуски.\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df)\n\n\n\n\n\n\n\nTable 25: Missings\n\n\n\n\n\nceiling_height\n9195 (38.80%)\n\n\nfloors_total\n86 (0.36%)\n\n\nliving_area\n1903 (8.03%)\n\n\nis_apartment\n20924 (88.29%)\n\n\nkitchen_area\n2278 (9.61%)\n\n\nbalcony\n11519 (48.61%)\n\n\nlocality_name\n49 (0.21%)\n\n\nairports_nearest\n5542 (23.38%)\n\n\ncity_centers_nearest\n5519 (23.29%)\n\n\nparks_around3000\n5518 (23.28%)\n\n\nparks_nearest\n15620 (65.91%)\n\n\nponds_around3000\n5518 (23.28%)\n\n\nponds_nearest\n14589 (61.56%)\n\n\ndays_exposition\n3181 (13.42%)\n\n\n\n\n\n\n\n\nУ нас есть пропуски в площадях. Посмотрим как они распределены.\nПосмотрим есть ли пропуски сразу во всех площадях.\n\n\nShow the code\ndf_na_in_both_columns = pagri_data_tools.check_na_in_both_columns(df, ['total_area', 'living_area', 'kitchen_area'])\ndf_na_in_both_columns.head()\n\n\n0 (0.00%) rows with missings simultaneously in ['total_area', 'living_area', 'kitchen_area']\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n\n\n\n\n\nПропусков одновременно во всех столбцах с площадями нет.\nПосмотрим на строки датафрейма, где пропуски во всех площадях.\n\n\nShow the code\nseries_missed['living_area'][['total_area', 'living_area', 'kitchen_area']].sample(10)\n\n\n\n\n\n\n\n\n\ntotal_area\nliving_area\nkitchen_area\n\n\n\n\n22379\n118.0\nNaN\nNaN\n\n\n20294\n44.6\nNaN\nNaN\n\n\n7768\n31.0\nNaN\nNaN\n\n\n16551\n39.0\nNaN\nNaN\n\n\n20332\n62.0\nNaN\nNaN\n\n\n30\n32.8\nNaN\nNaN\n\n\n9103\n99.1\nNaN\nNaN\n\n\n15716\n71.0\nNaN\n14.0\n\n\n18398\n45.0\nNaN\nNaN\n\n\n2385\n39.0\nNaN\nNaN\n\n\n\n\n\n\n\nУ нас нет пропусков в общей площади. Поэтому мы сможем заменить значения пропусков в площади кухни и жилой площади.\nМожно заметить, что количество пропусков в колонке с количеством парков рядом, количеством прудов рядом совпадает, расстоянием до центра, расстоянием до аэропорта примерно равны. Выдвигаем гипотезу, что пропуски в одних и тех же строках в обоих столбцах.\nПосмотрим сколько пропусков в обоих колонках вместе\n Вернуться к выводам\n\n\nShow the code\ndf_na_in_both_columns = pagri_data_tools.check_na_in_both_columns(df, ['airports_nearest', 'city_centers_nearest', 'parks_around3000', 'ponds_around3000'])\ndf_na_in_both_columns.head()\n\n\n5518 (23.28%) rows with missings simultaneously in ['airports_nearest', 'city_centers_nearest', 'parks_around3000', 'ponds_around3000']\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n5\n10\n2890000.0\n30.40\n2018-09-10\n1\nNaN\n12.0\n14.40\n5\nNaN\nFalse\nFalse\n9.10\nNaN\nгородской посёлок Янино-1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n55.0\n\n\n8\n20\n2900000.0\n33.16\n2018-05-23\n1\nNaN\n27.0\n15.43\n26\nNaN\nFalse\nFalse\n8.81\nNaN\nпосёлок Мурино\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n189.0\n\n\n12\n10\n3890000.0\n54.00\n2016-06-30\n2\nNaN\n5.0\n30.00\n5\nNaN\nFalse\nFalse\n9.00\n0.0\nСертолово\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n90.0\n\n\n22\n20\n5000000.0\n58.00\n2017-04-24\n2\n2.75\n25.0\n30.00\n15\nNaN\nFalse\nFalse\n11.00\n2.0\nдеревня Кудрово\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n60.0\n\n\n30\n12\n2200000.0\n32.80\n2018-02-19\n1\nNaN\n9.0\nNaN\n2\nNaN\nFalse\nFalse\nNaN\nNaN\nКоммунар\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n63.0\n\n\n\n\n\n\n\nГипотеза подтвердилась: - Пропуски в одних и тех же строках в колонках с количеством парков рядом, количеством прудов рядом совпадает, расстоянием до центра, расстоянием до аэропорта примерно равны\nПосмотрим как распределены пропуски по категориям в строках, где пропуски одновременно в этих столбцах.\n\n\nShow the code\ngen = pagri_data_tools.analyze_filtered_df_by_category(df, df_na_in_both_columns, 'df with na')\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 26: Value in \"df with na\" by category \"is_apartment\"\n\n\n\n\n\nis_apartment\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n2725\n621\n22.8%\n11.3%\n11.5%\n-0.2%\n\n\nTrue\n50\n7\n14.0%\n0.1%\n0.2%\n-0.1%\n\n\nnan\n20924\n4890\n23.4%\n88.6%\n88.3%\n0.3%\n\n\n\n\n\n\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 27: Value in \"df with na\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n5461\n23.2%\n99.0%\n99.4%\n-0.4%\n\n\nTrue\n149\n57\n38.3%\n1.0%\n0.6%\n0.4%\n\n\n\n\n\n\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 28: Value in \"df with na\" by category \"open_plan\"\n\n\n\n\n\nopen_plan\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23632\n5488\n23.2%\n99.5%\n99.7%\n-0.3%\n\n\nTrue\n67\n30\n44.8%\n0.5%\n0.3%\n0.3%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nЯвных зависимостей от категорий не обнаружено\n\nИзучим пропуски по категориям\n Вернуться к выводам\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"floors_total\", \"is_apartment\")\n\n\n\n\n\n\n\nTable 29: Share in \"floors_total\" by category \"is_apartment\"\n\n\n\n\n\nis_apartment\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n2725\n0\n0.0%\n0.0%\n11.5%\n-11.5%\n\n\nTrue\n50\n0\n0.0%\n0.0%\n0.2%\n-0.2%\n\n\nnan\n20924\n86\n0.4%\n100.0%\n88.3%\n11.7%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nПропуски в количестве этажей совпадают с пропусками в признаке является ли квартира апартаментом.\n\n Вернуться к выводам\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"floors_total\", \"studio\")\n\n\n\n\n\n\n\nTable 30: Share in \"floors_total\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n83\n0.4%\n96.5%\n99.4%\n-2.9%\n\n\nTrue\n149\n3\n2.0%\n3.5%\n0.6%\n2.9%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ количестве этаже пропуски зависят от признака является ли квартира студией.\n\nПочти все пропуски в квартирах, которые не являются студиями, даже учитывая общее количество пропорций.\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"kitchen_area\", \"studio\")\n\n\n\n\n\n\n\nTable 31: Share in \"kitchen_area\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n2129\n9.0%\n93.5%\n99.4%\n-5.9%\n\n\nTrue\n149\n149\n100.0%\n6.5%\n0.6%\n5.9%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ студиях в поле площадь кухни одни пропуски.\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"kitchen_area\", \"open_plan\")\n\n\n\n\n\n\n\nTable 32: Share in \"kitchen_area\" by category \"open_plan\"\n\n\n\n\n\nopen_plan\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23632\n2211\n9.4%\n97.1%\n99.7%\n-2.7%\n\n\nTrue\n67\n67\n100.0%\n2.9%\n0.3%\n2.7%\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ студиях в поле площадь кухни одни пропуски.\n\n\n\n1.2.4 Изучение выбросов\nСначала изучим потенциальные выбросы, которые мы выявили при изучении колонок.\nИзучим выброс с ценой 12190.0\n\n\nShow the code\ndf[df.last_price == 12190]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n8793\n7\n12190.0\n109.0\n2019-03-20\n2\n2.75\n25.0\n32.0\n25\nNaN\nFalse\nFalse\n40.5\nNaN\nСанкт-Петербург\n36421.0\n9176.0\n1.0\n805.0\n0.0\nNaN\n8.0\n\n\n\n\n\n\n\nНаблюдения:\n- Ничего особенно не обнаружено.\n- Скорее всего ошиблись не поставили нули.\nПосмотрим на выбросы с площадью квартиры.\n\n\nShow the code\ndf[df.total_area &gt; 500]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n3117\n19\n140000000.0\n631.0\n2019-03-30\n7\nNaN\n5.0\nNaN\n5\nNaN\nFalse\nFalse\n60.0\nNaN\nСанкт-Петербург\n25707.0\n4972.0\n0.0\nNaN\n2.0\n210.0\nNaN\n\n\n4237\n1\n50000000.0\n517.0\n2017-10-14\n7\nNaN\n4.0\n332.0\n3\nNaN\nFalse\nFalse\n22.0\nNaN\nСанкт-Петербург\n22835.0\n1847.0\n2.0\n477.0\n2.0\n540.0\nNaN\n\n\n5358\n20\n65000000.0\n590.0\n2019-02-14\n15\n3.50\n6.0\n409.0\n3\nNaN\nFalse\nFalse\n100.0\nNaN\nСанкт-Петербург\n24447.0\n4666.0\n1.0\n767.0\n0.0\nNaN\n14.0\n\n\n8018\n20\n84000000.0\n507.0\n2015-12-17\n5\n4.45\n7.0\n301.5\n7\nTrue\nFalse\nFalse\n45.5\n1.0\nСанкт-Петербург\nNaN\n5735.0\n2.0\n110.0\n0.0\nNaN\n1078.0\n\n\n12859\n20\n140000000.0\n631.2\n2019-04-09\n7\n3.90\n4.0\n322.3\n4\nNaN\nFalse\nFalse\n19.5\n1.0\nСанкт-Петербург\n25707.0\n4972.0\n0.0\nNaN\n2.0\n210.0\nNaN\n\n\n15651\n20\n300000000.0\n618.0\n2017-12-18\n7\n3.40\n7.0\n258.0\n5\nNaN\nFalse\nFalse\n70.0\nNaN\nСанкт-Петербург\n32440.0\n5297.0\n0.0\nNaN\n2.0\n198.0\n111.0\n\n\n19540\n8\n420000000.0\n900.0\n2017-12-06\n12\n2.80\n25.0\n409.7\n25\nNaN\nFalse\nFalse\n112.0\nNaN\nСанкт-Петербург\n30706.0\n7877.0\n0.0\nNaN\n2.0\n318.0\n106.0\n\n\n\n\n\n\n\nНаблюдения:\n- Не похоже на выбросы. Цена большая, количество комнат большое. Скорее всего просто большие дорогие квартиры.\n\n\nShow the code\ndf[df.total_area &lt; 15]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n17961\n3\n1400000.0\n13.0\n2017-12-03\n1\n2.60\n9.0\nNaN\n1\nNaN\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n14350.0\n15945.0\n0.0\nNaN\n1.0\n185.0\n410.0\n\n\n19546\n3\n1850000.0\n13.0\n2019-03-11\n1\n3.40\n5.0\nNaN\n2\nFalse\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n24915.0\n5483.0\n1.0\n644.0\n0.0\nNaN\n24.0\n\n\n19558\n2\n1686000.0\n13.2\n2018-12-17\n1\nNaN\n5.0\nNaN\n1\nNaN\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n19891.0\n4165.0\n1.0\n361.0\n1.0\n155.0\n19.0\n\n\n19642\n5\n1190000.0\n14.0\n2018-07-29\n1\nNaN\n5.0\n11.0\n1\nNaN\nFalse\nFalse\n2.0\nNaN\nСанкт-Петербург\n9898.0\n11122.0\n0.0\nNaN\n0.0\nNaN\n4.0\n\n\n19807\n0\n3800000.0\n13.0\n2018-07-04\n1\nNaN\n5.0\n10.0\n3\nNaN\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n21302.0\n1242.0\n1.0\n592.0\n3.0\n27.0\n9.0\n\n\n19904\n4\n2400000.0\n12.0\n2017-07-19\n1\n2.55\n5.0\n10.0\n2\nNaN\nFalse\nFalse\nNaN\nNaN\nСанкт-Петербург\n21314.0\n964.0\n1.0\n886.0\n2.0\n45.0\n200.0\n\n\n\n\n\n\n\nНаблюдения:\n- Не похоже на выбросы. Скорее всего это мелко нарезанные студии. Тем более этаж низкий.\nИзучим выброс в высоте потолка.\n\n\nShow the code\ndf[df.ceiling_height &gt; 10].ceiling_height.value_counts()\n\n\nceiling_height\n27.0     8\n25.0     7\n32.0     2\n24.0     1\n26.0     1\n14.0     1\n20.0     1\n22.6     1\n27.5     1\n10.3     1\n100.0    1\nName: count, dtype: int64\n\n\n\n\nShow the code\ndf[df.ceiling_height &gt; 30]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n3148\n14\n2900000.0\n75.0\n2018-11-12\n3\n32.0\n3.0\n53.0\n2\nNaN\nFalse\nFalse\n8.0\nNaN\nВолхов\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n22336\n19\n9999000.0\n92.4\n2019-04-05\n2\n32.0\n6.0\n55.5\n5\nFalse\nFalse\nFalse\n16.5\n4.0\nСанкт-Петербург\n18838.0\n3506.0\n0.0\nNaN\n3.0\n511.0\nNaN\n\n\n22869\n0\n15000000.0\n25.0\n2018-07-25\n1\n100.0\n5.0\n14.0\n5\nTrue\nFalse\nFalse\n11.0\n5.0\nСанкт-Петербург\n34963.0\n8283.0\n1.0\n223.0\n3.0\n30.0\n19.0\n\n\n\n\n\n\n\nНаблюдения:\n- Значения от 20 до 32 скорее всего поставили не там запятую.\n- А вот значения 10 и 100 странные.\nИзучим выбросы в количестве этажей\n\n\nShow the code\ndf[df.floors_total &gt; 35]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\nstudio\nopen_plan\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n397\n15\n5990000.0\n54.0\n2018-03-22\n2\nNaN\n36.0\n21.4\n28\nNaN\nFalse\nFalse\n18.70\n1.0\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\n11.0\n\n\n2253\n12\n3800000.0\n45.5\n2018-06-28\n2\n2.88\n60.0\n27.4\n4\nNaN\nFalse\nFalse\n7.40\nNaN\nКронштадт\n67763.0\n49488.0\n2.0\n342.0\n3.0\n614.0\n166.0\n\n\n5807\n17\n8150000.0\n80.0\n2019-01-09\n2\n27.00\n36.0\n41.0\n13\nNaN\nFalse\nFalse\n12.00\n5.0\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\n38.0\n\n\n11079\n16\n9200000.0\n75.0\n2019-02-22\n2\n2.70\n36.0\n40.0\n29\nNaN\nFalse\nFalse\n12.00\n2.0\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\nNaN\n\n\n16731\n9\n3978000.0\n40.0\n2018-09-24\n1\n2.65\n52.0\n10.5\n18\nNaN\nFalse\nFalse\n14.00\nNaN\nСанкт-Петербург\n20728.0\n12978.0\n1.0\n793.0\n0.0\nNaN\n45.0\n\n\n16934\n5\n4100000.0\n40.0\n2017-10-17\n1\n1.75\n37.0\n17.4\n5\nNaN\nFalse\nFalse\n8.34\nNaN\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\n71.0\n\n\n\n\n\n\n\nНаблюдения:\n- Так как в Санкт-Петербург есть здания такой высоты, то нет оснований считать это выбросами.\n\n\n1.2.5 Изучение отрицательных значений\nИзучаем отрицательные значения\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df)\n\n\nThere are no negative values\n\n\nУ нас нет отрицательных значений.\n\n\n1.2.6 Изучение нулевых значений\nИзучаем нулевые значения\n\n\nShow the code\nseries_zeros = pagri_data_tools.find_columns_with_zeros_values(df)\n\n\n\n\n\n\n\nTable 33: Zeros\n\n\n\n\n\ntotal_images\n1059 (4.47%)\n\n\nrooms\n197 (0.83%)\n\n\nbalcony\n3758 (15.86%)\n\n\nairports_nearest\n1 (0.00%)\n\n\nparks_around3000\n10106 (42.64%)\n\n\nponds_around3000\n9071 (38.28%)\n\n\n\n\n\n\n\n\nВсе кроме количества комнат и расстояния до ближайшего аэропорта может быть нулями, поэтому удалим их из текущего изучения.\n\n\nShow the code\nseries_zeros = series_zeros.loc[['rooms']]\n\n\nПосмотрим отдельно на нулевое значение в расстоянии до аэропорта.\n\n\nShow the code\ndf[df.airports_nearest == 0]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n21085\n0\n7000000.0\n34.7\n2018-09-23\n1\n2.7\n9.0\n19.8\n3\nNaN\n...\n6.0\n2.0\nСанкт-Петербург\n0.0\n22801.0\n0.0\nNaN\n0.0\nNaN\n60.0\n\n\n\n\n1 rows × 22 columns\n\n\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_zeros, \"value_counts\", \"rooms\")\n\n\nValue counts in rooms (0.83%)\n\n\n\n\n\n\n\nTable 34: rooms\n\n\n\n\n\n \ncount\n\n\nrooms\n \n\n\n\n\n0\n197\n\n\n\n\n\n\n\n\nВыдвинем гипотезу, что 0 комнат у студий и однокомнатных.\nПроверим гипотезу по площади.\nПредположим, что площадь студий и однокомнатных квартир составляет не более 40 м2.\nПосмотрим на выборку из датафрейма\n\n\nShow the code\nseries_zeros['rooms'][['last_price', 'total_area', 'living_area', 'kitchen_area', 'studio', 'open_plan']].query('total_area &gt; 40')\n\n\n\n\n\n\n\n\n\nlast_price\ntotal_area\nliving_area\nkitchen_area\nstudio\nopen_plan\n\n\n\n\n3458\n7400000.0\n73.60\n50.0\nNaN\nTrue\nFalse\n\n\n7237\n2999000.0\n42.63\n25.7\nNaN\nFalse\nTrue\n\n\n10008\n5050000.0\n44.20\n32.2\nNaN\nTrue\nFalse\n\n\n13613\n8100000.0\n58.40\n33.0\nNaN\nTrue\nFalse\n\n\n15319\n5970000.0\n43.30\n28.2\nNaN\nTrue\nFalse\n\n\n16130\n5000000.0\n42.10\n30.0\nNaN\nTrue\nFalse\n\n\n19392\n71000000.0\n371.00\nNaN\nNaN\nFalse\nTrue\n\n\n20082\n16300000.0\n98.40\n60.5\nNaN\nTrue\nFalse\n\n\n21227\n8200000.0\n71.00\n68.0\nNaN\nTrue\nFalse\n\n\n\n\n\n\n\nНаблюдения:\n\nВидим, что почти все квартиры с 0 комнат имеют площадь до 40 кв.\n2 квартиры имеют открытую планировку\n\nМожно будет заменить 0 на 1.\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_zeros, \"by_category\", \"rooms\", 'studio')\n\n\n\n\n\n\n\nTable 35: Share in \"rooms\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n59\n0.3%\n29.9%\n99.4%\n-69.4%\n\n\nTrue\n149\n138\n92.6%\n70.1%\n0.6%\n69.4%\n\n\n\n\n\n\n\n\nНаблюдения:\n- Большая часть квартир с нулем комнат являются студиями.\n\n\n\n1.3 Промежуточный вывод\n\n8 процентов дней пропущено\nМинимальное значение цены 12 190 и максимальное значение 763 млн выглядят подозрительно.\nМаксимальная площадь в 900 квадратов.\nВ высоте потолков пропуски (39 процентов)\nВ высоте потолков много выбросов. Есть значение 100.\nВ количестве этажей есть пропуски (меньше 1 процента)\nБольше всего пятиэтажек (25 процентов)\nВ жилой площади 8 процентов пропусков.\nВ площади кухни 10 процентов пропусков.\n\nВ числе балконов 49 процентов пропусков. Скорее всего пропуски это отсутствие балкона.\n\nТреть квартир без балконов, также по трети квартир с 1 и 2 балконами.\nВ расстоянии до ближайшего аэропорта 23 процента пропусков.\nВ расстоянии до центр города 23 процента пропусков.\nВ колонке с количеством парков рядом 23 процента пропусков.\n\nВ колонке с расстоянием до ближайшего парка 66 процентов пропусков.\n\nВ колонке с количеством прудов 23 процента пропусков, скорее всего это отсутствие парков.\n\nВ колонке с расстоянием до ближайшего пруда 62 процента пропусков.\nВ среднем объявление находится в продаже 180 дней, но из за выбросов оно не совсем точно описывает ситуацию.\nВ колонке с количеством дней экспозиции 13 процентов пропусков.\nВ колонке с признаком является ли квартира апартаментом 88 процентов пропусков. Скорее всего эти квартиры не являются апартаментами.\n\nВ колонке с названием населенного пункта 49 пропущенных значений (меньше 1 процента)\nПропуски в одних и тех же строках в колонках с количеством парков рядом, количеством прудов рядом совпадает, расстоянием до центра, расстоянием до аэропорта примерно равны\nПропуски в количестве этажей совпадают с пропусками в признаке является ли квартира апартаментом.\nВ количестве этаже пропуски зависят от признака является ли квартира студией.\n\nПочти все пропуски в квартирах, которые не являются студиями, даже учитывая общее количество пропорций.\nВ студиях в поле площадь кухни одни пропуски."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#предобработка-данных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#предобработка-данных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "2. Предобработка данных",
    "text": "2. Предобработка данных\n\n2.1 Выбор нужных столбцов для дальнейшей работы\nСохраним исходный датафрейм в переменную df_origin, чтобы была возможность вернуться к нему\n\n\nShow the code\ndf_origin = df.copy()\n\n\n\n\n2.2 Обработка выбросов\nПосле изучения данных отрицательные значения не обнаружены, но есть колонки с нулевыми значениями, где их быть не должно.\nПосмотрим где у нас нулевые значения\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\ntotal_images\n1059 (4.5%)\n\n\nrooms\n197 (0.8%)\n\n\nbalcony\n3758 (15.9%)\n\n\nairports_nearest\n1 (0.0%)\n\n\nparks_around3000\n10106 (42.6%)\n\n\nponds_around3000\n9071 (38.3%)\n\n\n\n\n\n\n\nНам нужно обработать нули в количестве комнат и в расстоянии до аэропорта.\n\n\nShow the code\ndf[df.airports_nearest == 0]\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n21085\n0\n7000000.0\n34.7\n2018-09-23\n1\n2.7\n9.0\n19.8\n3\nNaN\n...\n6.0\n2.0\nСанкт-Петербург\n0.0\n22801.0\n0.0\nNaN\n0.0\nNaN\n60.0\n\n\n\n\n1 rows × 22 columns\n\n\n\nТак как это всего одна запись и точно восстановить расстояние невозможно, то лучше удалить ее.\n\n\nShow the code\ndf.shape[0]\n\n\n23699\n\n\n\n\nShow the code\ndf = df[df.airports_nearest != 0]\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23698\n\n\nОбработаем нулевые значения в количестве комнат.\nТак как мы выяснили, что 0 комнат указано у студий и в открытой планировке, либо у квартир с площадью до 40 кв.,\nто заменим 0 на 1.\n\n\nShow the code\ntt = df.copy()\n\n\n\n\nShow the code\ntt.rooms = tt.rooms.apply(lambda x: 1 if x == 0 else x)\n\n\n\n\nShow the code\ndf.loc[:, 'rooms'] = df.rooms.apply(lambda x: 1 if x == 0 else x)\n\n\nУбедимся, что у нас не осталось нулевых и отрицательных значений где их быть не должно.\n\n\nShow the code\npagri_data_tools.check_negative_value_in_df(df)\n\n\n\n\n\n\n\n\n\nnegative\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\ntotal_images\n1058 (4.5%)\n\n\nbalcony\n3758 (15.9%)\n\n\nparks_around3000\n10105 (42.6%)\n\n\nponds_around3000\n9070 (38.3%)\n\n\n\n\n\n\n\nУ нас в цене есть одна запись со значением 12190. Скорее всего не поставили нули, но сложно определить сколько именно нулей не поставили.\nТак как это всего 1 запись, то удалим ее.\n\n\nShow the code\ndf.shape[0]\n\n\n23698\n\n\n\n\nShow the code\ndf = df[df.last_price != 12190]\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23697\n\n\nОбработаем выбросы в высоте потолков.\nБудем считать, что высота потолков больше 5 метров является маловероятным.\nПосмотрим сколько у нас записей с высотой потолка больше 5 метров.\n\n\nShow the code\npagri_data_tools.count_share(df.ceiling_height &gt; 5)\n\n\n'36 (0.2%)'\n\n\nТак как их очень мало и мы не можем обработать эти выбросы, то удалим их.\n\n\nShow the code\ndf.shape[0]\n\n\n23697\n\n\n\n\nShow the code\ndf[df.ceiling_height &gt; 5].shape[0]\n\n\n36\n\n\n\n\nShow the code\ndf = df[~(df.ceiling_height &gt; 5)]\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23661\n\n\n\n\n2.3 Обработка пропусков\nПосмотрим где у нас пропуски.\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\nceiling_height\n9195 (38.9%)\n\n\nfloors_total\n86 (0.4%)\n\n\nliving_area\n1901 (8.0%)\n\n\nis_apartment\n20899 (88.3%)\n\n\nkitchen_area\n2269 (9.6%)\n\n\nbalcony\n11507 (48.6%)\n\n\nlocality_name\n49 (0.2%)\n\n\nairports_nearest\n5532 (23.4%)\n\n\ncity_centers_nearest\n5509 (23.3%)\n\n\nparks_around3000\n5508 (23.3%)\n\n\nparks_nearest\n15598 (65.9%)\n\n\nponds_around3000\n5508 (23.3%)\n\n\nponds_nearest\n14566 (61.6%)\n\n\ndays_exposition\n3173 (13.4%)\n\n\n\n\n\n\n\nМы выяснили, что у нас пропуски в столбцах ‘airports_nearest’, ‘center’, ‘around 3000’, ‘around 3000’\nв одних и тех же строчках.\nТак как количество пропусков большое, то заменять их нельзя.\nПоэтому оставим их как есть.\nПропуски в высоте потолков мы обрабатывать не можем, так как их сильно много.\nПропуски в количестве этажей удалим, так как их мало.\n\n\nShow the code\ndf.shape[0]\n\n\n23661\n\n\n\n\nShow the code\ndf = df.dropna(subset=['floors_total'])\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23575\n\n\nПропуски в жилой площади и в площади кухни обработаем с помощью коэффициентов отношения площадей.\nПри этом рассчитывать будем с учетом количества комнат, чтобы было точнее.\n\n\nShow the code\ndf[['total_area', 'living_area', 'rooms', 'kitchen_area', 'balcony']].sample(5)\n\n\n\n\n\n\n\n\n\ntotal_area\nliving_area\nrooms\nkitchen_area\nbalcony\n\n\n\n\n12965\n59.5\n31.71\n2\n10.2\nNaN\n\n\n12325\n66.0\n42.40\n3\n10.0\n1.0\n\n\n11638\n65.5\nNaN\n3\nNaN\nNaN\n\n\n5362\n45.0\n28.00\n2\n7.2\n1.0\n\n\n9673\n44.0\nNaN\n2\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23575\n\n\n\n\nShow the code\nkitchen_ratio = df.groupby('rooms')['kitchen_area'].transform(\n    lambda x: x.median() / df.loc[x.index, 'total_area'].median() \n    if len(x) &gt;= 30 \n    else df['kitchen_area'].median() / df['total_area'].median()\n)\n\nliving_ratio = df.groupby('rooms')['living_area'].transform(\n    lambda x: x.median() / df.loc[x.index, 'total_area'].median()\n    if len(x) &gt;= 30 \n    else df['living_area'].median() / df['total_area'].median()\n)\n\ndf['kitchen_area'] = df['kitchen_area'].fillna(df['total_area'] * kitchen_ratio)\ndf['living_area'] = df['living_area'].fillna(df['total_area'] * living_ratio)\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23575\n\n\nПризнак является ли квартира апартаментом имеет много пропусков.\nОпределить является ли квартира апартаментом мы не можем, поэтому заменим на значение “не указано”.\n\n\nShow the code\ndf['is_apartment'] = df.is_apartment.astype(str).map({'True': 'да', 'False': 'нет'}).fillna(\"не указано\").astype('category')\n\n\nПропуски в названии населенного пункта мы заменить не можем, и их очень мало, поэтому удалим их.\n\n\nShow the code\ndf = df.dropna(subset=['locality_name'])\n\n\n\n\nShow the code\ndf.shape[0] \n\n\n23527\n\n\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\nceiling_height\n9084 (38.6%)\n\n\nbalcony\n11463 (48.7%)\n\n\nairports_nearest\n5514 (23.4%)\n\n\ncity_centers_nearest\n5491 (23.3%)\n\n\nparks_around3000\n5490 (23.3%)\n\n\nparks_nearest\n15513 (65.9%)\n\n\nponds_around3000\n5490 (23.3%)\n\n\nponds_nearest\n14506 (61.7%)\n\n\ndays_exposition\n3163 (13.4%)\n\n\n\n\n\n\n\nОстальные пропуски оставим как есть, чтобы не исказить данные.\n\n\n2.4 Приведение данных к удобной форме\nИзменим значения в столбцах на более удобные\n\n\nShow the code\ndf.studio = df.studio.astype(str).map({'True': 'да', 'False': 'нет'}).astype('category')\n\n\n\n\nShow the code\ndf.open_plan = df.open_plan.astype(str).map({'True': 'да', 'False': 'нет'}).astype('category')\n\n\nИзменим типы данных на более подходящие.\nУбедимся, что у нас нет дробных чисел в цене.\n\n\nShow the code\n(df.last_price != df.last_price.astype(int)).sum()\n\n\nnp.int64(0)\n\n\nПриведем цену к целому типу.\n\n\nShow the code\ndf.last_price = df.last_price.astype(int)\n\n\n\n\n2.5 Промежуточный вывод\n\nМы выяснили, что 0 комнат указано у студий, либо в открытой планировке, либо у квартир с площадью до 40 кв.,\nпоэтому нули в количестве комнат заменили на 1.\nВ цене была одна запись со значением 12190. Скорее всего не поставили нули, но сложно определить сколько именно нулей не поставили.\nТак как это всего 1 запись, то удалили ее.\nУдалили 36 записей (0.2%) с высотой потолка больше 5 метров. Так как таких записей мало, а замена их может исказить анализ.\n\nВ высоте потолка пропусков слишком много, поэтому их не стали трогать.\n\nВ количестве этажей пропуски удалили, так как определить реальный этаж невозможно, а пропусков мало.\n\nПропуски в жилой площади и в площади кухни обработали с помощью коэффициентов отношения площадей.\nПри этом расчеты провели с учетом количества комнат, чтобы было точнее.\n\nПризнак является ли квартира апартаментом имеет много пропусков.\nОпределить является ли квартира апартаментом мы не можем, поэтому заменили на значение “не указано”.\nУдалили пропуски в названии населенных пунктов, так как их мало."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#обогащение-данных-и-создание-новых-переменных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#обогащение-данных-и-создание-новых-переменных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "3. Обогащение данных и создание новых переменных",
    "text": "3. Обогащение данных и создание новых переменных\n\n3.1 Создание новых числовых переменных\nСоздадим переменную соотношение жилой и общей площади\n\n\nShow the code\ndf['living_total_ratio'] = round(df['living_area'] / df['total_area'],2)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'living_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 36: living_total_ratio\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n1\n\nAvg\n0.56\n\n0.58 (6%)\n\n\nMissing\n---\n\n95%\n0.72\n\nMode\n0.58\n\n0.62 (5%)\n\n\nDistinct\n91 (&lt;1%)\n\n75%\n0.63\n\nRange\n0.98\n\n0.48 (5%)\n\n\nDuplicates\n23 436 (99.6%)\n\nMedian\n0.57\n\niQR\n0.14\n\n0.56 (4%)\n\n\nZeros\n---\n\n25%\n0.49\n\nstd\n0.1\n\n0.55 (4%)\n\n\nNegative\n---\n\n5%\n0.4\n\nkurt\n0.32\n\n0.6 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.02\n\nskew\n-0.14\n\n0.64 (3%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим переменную отношения площади кухни к общей.\n\n\nShow the code\ndf['kitchen_total_ratio'] = round(df['kitchen_area'] / df['total_area'],2)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'kitchen_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 37: kitchen_total_ratio\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n0.79\n\nAvg\n0.19\n\n0.16 (9%)\n\n\nMissing\n---\n\n95%\n0.31\n\nMode\n0.16\n\n0.13 (7%)\n\n\nDistinct\n66 (&lt;1%)\n\n75%\n0.24\n\nRange\n0.76\n\n0.25 (7%)\n\n\nDuplicates\n23 461 (99.7%)\n\nMedian\n0.17\n\niQR\n0.11\n\n0.14 (6%)\n\n\nZeros\n---\n\n25%\n0.13\n\nstd\n0.07\n\n0.12 (6%)\n\n\nNegative\n---\n\n5%\n0.1\n\nkurt\n2.81\n\n0.15 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.03\n\nskew\n1.18\n\n0.11 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим переменную цена квадратного метра\n\n\nShow the code\ndf['price_per_sqm'] = (df['last_price'] / df['total_area']).astype(int)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'kitchen_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 38: kitchen_total_ratio\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n0.79\n\nAvg\n0.19\n\n0.16 (9%)\n\n\nMissing\n---\n\n95%\n0.31\n\nMode\n0.16\n\n0.13 (7%)\n\n\nDistinct\n66 (&lt;1%)\n\n75%\n0.24\n\nRange\n0.76\n\n0.25 (7%)\n\n\nDuplicates\n23 461 (99.7%)\n\nMedian\n0.17\n\niQR\n0.11\n\n0.14 (6%)\n\n\nZeros\n---\n\n25%\n0.13\n\nstd\n0.07\n\n0.12 (6%)\n\n\nNegative\n---\n\n5%\n0.1\n\nkurt\n2.81\n\n0.15 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.03\n\nskew\n1.18\n\n0.11 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим новую переменную - расстояние до центра километрах.\n\n\nShow the code\ndf['city_centers_nearest_km'] = round(df.city_centers_nearest / 1000)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'city_centers_nearest_km')\n\n\n\n        \n            \n\n\n\n\nTable 39: city_centers_nearest_km\n\n\n\n\n\nValues\n18 036 (77%)\n\nMax\n66\n\nAvg\n14.19\n\n12 (9%)\n\n\nMissing\n5 491 (23%)\n\n95%\n32\n\nMode\n12\n\n15 (9%)\n\n\nDistinct\n61 (&lt;1%)\n\n75%\n16\n\nRange\n66\n\n13 (8%)\n\n\nDuplicates\n23 465 (99.7%)\n\nMedian\n13\n\niQR\n7\n\n14 (7%)\n\n\nZeros\n27 (&lt;1%)\n\n25%\n9\n\nstd\n8.62\n\n16 (7%)\n\n\nNegative\n---\n\n5%\n4\n\nkurt\n4.34\n\n11 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.67\n\n5 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\n3.2 Категоризация данных\n\n\nShow the code\ndf.head(1)\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\nliving_total_ratio\nkitchen_total_ratio\nprice_per_sqm\ncity_centers_nearest_km\n\n\n\n\n0\n20\n13000000\n108.0\n2019-03-07\n3\n2.7\n16.0\n51.0\n8\nне указано\n...\n16028.0\n1.0\n482.0\n2.0\n755.0\nNaN\n0.47\n0.23\n120370\n16.0\n\n\n\n\n1 rows × 26 columns\n\n\n\nСоздадим новую категориальную переменную из этажа.\nСделаем 3 значения - первый, последний и другой\n\n\nShow the code\ndf['floor_position'] = df.apply(lambda x: 'первый' if x['floor'] == 1 else 'последний' if x['floor'] == x['floors_total'] else 'другой', axis=1).astype('category')\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'floor_position')\n\n\n\n        \n            \n\n\n\n\nTable 40: floor_position\n\n\n\n\n\nValues\n23 527 (100%)\n\nдругой (74%)\n\n\nMissing\n---\n\nпоследний (14%)\n\n\nDistinct\n3 (&lt;1%)\n\nпервый (12%)\n\n\nDuplicated origin\n23 524 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим новую категориальную переменную из цены\n\n\nShow the code\npagri_data_tools.quantiles_columns(df.last_price)\n\n\n\n\n\n\n\nTable 41: Quantiles\n\n\n\n\n\nMax\n763 000 000\n\n\n5\n1 860 000\n\n\n25\n3 400 000\n\n\n50\n4 646 000\n\n\n75\n6 790 000\n\n\n95\n15 253 200.0\n\n\nMin\n430 000\n\n\n\n\n\n\n\n\n\n\nShow the code\nlabels = ['эконом', 'комфорт', 'премиум']\nbins = [-np.inf, 4_000_000, 10_000_000, np.inf]\n\n\n\n\nShow the code\ndf['price_segment'] = pagri_data_tools.create_category_column(df.last_price, labels=labels, bins=bins).astype('category')\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'price_segment')\n\n\n\n        \n            \n\n\n\n\nTable 42: price_segment\n\n\n\n\n\nValues\n23 527 (100%)\n\nкомфорт (50%)\n\n\nMissing\n---\n\nэконом (38%)\n\n\nDistinct\n3 (&lt;1%)\n\nпремиум (11%)\n\n\nDuplicated origin\n23 524 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим переменные день недели, месяц и год публикации объявления.\n\n\nShow the code\nweekday_dict = {\n    'Monday': 'Понедельник',\n    'Tuesday': 'Вторник',\n    'Wednesday': 'Среда',\n    'Thursday': 'Четверг',\n    'Friday': 'Пятница',\n    'Saturday': 'Суббота',\n    'Sunday': 'Воскресенье'\n}\nmonth_dict = {\n    1: 'Январь',\n    2: 'Февраль',\n    3: 'Март',\n    4: 'Апрель',\n    5: 'Май',\n    6: 'Июнь',\n    7: 'Июль',\n    8: 'Август',\n    9: 'Сентябрь',\n    10: 'Октябрь',\n    11: 'Ноябрь',\n    12: 'Декабрь'\n}\n\n\n\n\nShow the code\ndf['publication_weekday'] = df['first_day_exposition'].dt.day_name().map(weekday_dict).astype('category')\ndf['publication_month'] = df['first_day_exposition'].dt.month.map(month_dict).astype('category')\ndf['publication_year'] = df['first_day_exposition'].dt.year.astype(str).astype('category')\n# Задаем порядок для weekdays\nweekday_order = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']\ndf['publication_weekday'] = df['publication_weekday'].cat.reorder_categories(weekday_order, ordered=True)\n\n# Задаем порядок для months\nmonth_order = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']\ndf['publication_month'] = df['publication_month'].cat.reorder_categories(month_order, ordered=True)\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'publication_weekday')\n\n\n\n        \n            \n\n\n\n\nTable 43: publication_weekday\n\n\n\n\n\nValues\n23 527 (100%)\n\nЧетверг (18%)\n\n\nMissing\n---\n\nВторник (18%)\n\n\nDistinct\n7 (&lt;1%)\n\nПятница (17%)\n\n\nDuplicated origin\n23 520 (99.9%)\n\nСреда (17%)\n\n\nDupl (modify - origin)\n---\n\nПонедельник (15%)\n\n\nEmpty\n---\n\nСуббота (8%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nВоскресенье (7%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'publication_month')\n\n\n\n        \n            \n\n\n\n\nTable 44: publication_month\n\n\n\n\n\nValues\n23 527 (100%)\n\nФевраль (11%)\n\n\nMissing\n---\n\nМарт (11%)\n\n\nDistinct\n12 (&lt;1%)\n\nНоябрь (10%)\n\n\nDuplicated origin\n23 515 (99.9%)\n\nАпрель (10%)\n\n\nDupl (modify - origin)\n---\n\nОктябрь (9%)\n\n\nEmpty\n---\n\nСентябрь (8%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nИюнь (7%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'publication_year')\n\n\n\n        \n            \n\n\n\n\nTable 45: publication_year\n\n\n\n\n\nValues\n23 527 (100%)\n\n2018 (36%)\n\n\nMissing\n---\n\n2017 (35%)\n\n\nDistinct\n6 (&lt;1%)\n\n2019 (12%)\n\n\nDuplicated origin\n23 521 (99.9%)\n\n2016 (12%)\n\n\nDupl (modify - origin)\n---\n\n2015 (5%)\n\n\nEmpty\n---\n\n2014 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим новую категориальную переменную месяц-год\n\n\nShow the code\n# Словарь для замены месяцев\nmonths_translation = {\n    'Jan': 'Янв',\n    'Feb': 'Фев',\n    'Mar': 'Мар',\n    'Apr': 'Апр',\n    'May': 'Май',\n    'Jun': 'Июн',\n    'Jul': 'Июл',\n    'Aug': 'Авг',\n    'Sep': 'Сен',\n    'Oct': 'Окт',\n    'Nov': 'Ноя',\n    'Dec': 'Дек'\n}\n# Получаем отдельно месяц и год\nmonths = df['first_day_exposition'].dt.strftime('%b').astype('category').cat.reorder_categories(list(months_translation.keys()), ordered=True)\nyears = df['first_day_exposition'].dt.strftime('%y')\nmonths_years = pd.concat([months, years], axis=1)\nmonths_years.columns = ['month', 'year']\n# Создаем список уникальных (год, месяц) и сортируем\nunique_months = months_years.drop_duplicates().sort_values(by=['year', 'month'])\n\n# Создаем список для порядка\nmonth_year_order = []\n\n# Формируем month_year_order на основе уникальных (год, месяц)\nfor _, row in unique_months.iterrows():\n    year = row['year']\n    month = row['month']\n    month_year_order.append(f\"{months_translation[month]}'{str(year)[-2:]}\")\n\n# Заменяем месяцы и соединяем с годом\ndf['publication_month_year'] = months.astype(str).map(months_translation) + \"'\" + years\ndf['publication_month_year'] = df['publication_month_year'].astype('category')\ndf['publication_month_year'] = df['publication_month_year'].cat.reorder_categories(month_year_order, ordered=True)\ndf['publication_month_year']\n\n\n0        Мар'19\n1        Дек'18\n2        Авг'15\n3        Июл'15\n4        Июн'18\n          ...  \n23694    Мар'17\n23695    Янв'18\n23696    Фев'18\n23697    Мар'17\n23698    Июл'17\nName: publication_month_year, Length: 23527, dtype: category\nCategories (55, object): ['Ноя'14' &lt; 'Дек'14' &lt; 'Янв'15' &lt; 'Фев'15' ... 'Фев'19' &lt; 'Мар'19' &lt; 'Апр'19' &lt; 'Май'19']\n\n\nСоздадим новую категориальную переменную из расстояния до центра.\nЧтобы определить границы зон, построим график зависимости цены от расстояния до центра.\n\n\nShow the code\nconfig = dict(\n    df = df[df['locality_name'] == 'Санкт-Петербург']\n    , x = 'city_centers_nearest_km'  \n    , x_axis_label = 'Расстояние до центра, км'\n    , y = 'last_price'\n    , y_axis_label = 'Цена'\n    , title = 'Цена в зависимости от расстояния до центра'\n    , func = 'median'\n    , width = 700\n    , height = 400\n)\npagri_data_tools.line(config)\n\n\n                                                \n\n\nМожно заметить, что на 5 км от центра падение цены замедляется.\nВыберем 5 км как границу для центра.\nИ выберем 20 км как зону окраины\n\n\nShow the code\nlabels = ['Центр', 'Средняя удаленность', 'Окраина']\nbins = [-np.inf, 5, 20, np.inf]\n\n\n\n\nShow the code\ndf.head()\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nliving_total_ratio\nkitchen_total_ratio\nprice_per_sqm\ncity_centers_nearest_km\nfloor_position\nprice_segment\npublication_weekday\npublication_month\npublication_year\npublication_month_year\n\n\n\n\n0\n20\n13000000\n108.0\n2019-03-07\n3\n2.70\n16.0\n51.000000\n8\nне указано\n...\n0.47\n0.23\n120370\n16.0\nдругой\nпремиум\nЧетверг\nМарт\n2019\nМар'19\n\n\n1\n7\n3350000\n40.4\n2018-12-04\n1\nNaN\n11.0\n18.600000\n1\nне указано\n...\n0.46\n0.27\n82920\n19.0\nпервый\nэконом\nВторник\nДекабрь\n2018\nДек'18\n\n\n2\n10\n5196000\n56.0\n2015-08-20\n2\nNaN\n5.0\n34.300000\n4\nне указано\n...\n0.61\n0.15\n92785\n14.0\nдругой\nкомфорт\nЧетверг\nАвгуст\n2015\nАвг'15\n\n\n3\n0\n64900000\n159.0\n2015-07-24\n3\nNaN\n14.0\n98.215511\n9\nне указано\n...\n0.62\n0.13\n408176\n7.0\nдругой\nпремиум\nПятница\nИюль\n2015\nИюл'15\n\n\n4\n2\n10000000\n100.0\n2018-06-19\n2\n3.03\n14.0\n32.000000\n13\nне указано\n...\n0.32\n0.41\n100000\n8.0\nдругой\nкомфорт\nВторник\nИюнь\n2018\nИюн'18\n\n\n\n\n5 rows × 32 columns\n\n\n\n\n\nShow the code\ndf['location_zone'] = pagri_data_tools.create_category_column(df.city_centers_nearest_km, labels=labels, bins=bins, fillnavalue=\"не указано\")\n\n\n\n\nShow the code\npagri_data_tools.info_column(df, 'location_zone')\n\n\n\n        \n            \n\n\n\n\nTable 46: location_zone\n\n\n\n\n\nValues\n23 527 (100%)\n\nСредняя удаленность (55%)\n\n\nMissing\n---\n\nне указано (23%)\n\n\nDistinct\n4 (&lt;1%)\n\nОкраина (11%)\n\n\nDuplicated origin\n23 523 (99.9%)\n\nЦентр (11%)\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\n3.3 Промежуточный вывод\n\nСоздали переменную соотношение жилой и общей площади\nСоздали переменную отношения площади кухни к общей.\nСоздали переменную цена квадратного метра\nСоздали новую переменную - расстояние до центра километрах.\nСоздадим новую категориальную переменную позиция этажа. Сделали 3 значения - первый, последний и другой\nИз цены создали новую категориальную переменную - сегмент цены. Сделали 3 значения - эконом, комфорт, премиум.\n\nСоздали переменные день недели, месяц, год и месяц-год публикации объявления.\nСоздали новую категориальную переменную из расстояния до центра. Сделали значения - центр, окраина, средняя удаленность"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#визуализация-взаимосвязей-переменных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#визуализация-взаимосвязей-переменных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "4. Визуализация взаимосвязей переменных",
    "text": "4. Визуализация взаимосвязей переменных\n\n4.1 Исследование корреляционных связей\nПостроим матрицу корреляции.\n\n\nShow the code\ndf.select_dtypes(include=['category']).columns\n\n\nIndex(['is_apartment', 'studio', 'open_plan', 'floor_position',\n       'price_segment', 'publication_weekday', 'publication_month',\n       'publication_year', 'publication_month_year', 'location_zone'],\n      dtype='object')\n\n\n\n\nShow the code\ntitles_for_axis= dict(\n        \n        total_images = 'число фотографий',\n        last_price = 'цена',\n        total_area = 'общая площадь',\n        rooms = 'число комнат',\n        ceiling_height = 'высота потолков',\n        floors_total = 'всего этажей',\n        living_area = 'жилая площадь',\n        floor = 'этаж',\n        kitchen_area = 'площадь кухни',\n        balcony = 'число балконов',\n        airports_nearest = 'расстояние до аэропорта, м',\n        city_centers_nearest = 'расстояние до центра, м',\n        parks_around3000 = 'число парков',\n        parks_nearest = 'расстояние до парка, м',\n        ponds_around3000 = 'число водоёмов',\n        ponds_nearest = 'расстояние водоёма, м',\n        days_exposition = 'число дней размещения',\n        city_centers_nearest_km = 'расстояние до центра, км',\n        living_total_ratio = 'жилая/общая площадь',\n        kitchen_total_ratio = 'кухня/общая площадь',\n        price_per_sqm = 'цена кв метра',\n        is_apartment = 'является ли апартаментом',\n        studio = 'является ли студией',\n        open_plan = 'открытая ли планировка',\n        floor_position = 'позиция этажа',\n        price_segment = 'секмент цены',\n        publication_weekday = 'день  недели публикации',\n        publication_month = 'месяц публикации',\n        publication_year = 'год публикации',\n        publication_month_year = 'месяц и год публикации',\n        location_zone = 'локация'\n)\n\n\n Вернуться к выводам\n\n\nShow the code\ngen = pagri_data_tools.heatmap_corr_gen(df, part_size=10, titles_for_axis=titles_for_axis)\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nСильная положительная корреляция между жилой площадью и общей площадью\nСильная положительная корреляция между числом комнат и общей площадью\nСильная положительная корреляция между числом комнат и жилой площадью\nУмеренная положительная корреляция между площадью кухни и общей площадью\nУмеренная положительная корреляция между ценой и общей площадью\nУмеренная положительная корреляция между ценой и жилой площадью\nУмеренная положительная корреляция между ценой и площадью кухни\nУмеренная положительная корреляция между ценой и жилой площадью\n\n\n\nShow the code\nnext(gen)\n\n\n                                                \n\n\nНаблюдения:\n\nСильная отрицательная корреляция между отношением площади кухни к общей площади и отношением жилой площади к общей площади\nУмеренная положительная корреляция между числом комнат и отношением жилой площади к общей площади\n\nПостроим модель случайного леса для определения цены и посмотрим какие переменные сильнее всего влияют на решения модели.\n Вернуться к выводам\n\n\nShow the code\ntitle = 'График важности признаков для предсказания цены'\npagri_data_tools.plot_feature_importances_regression(df.drop('price_per_sqm', axis=1), target='last_price', titles_for_axis=titles_for_axis, title=title)\n\n\n                                                \n\n\nНаблюдения:\n\nОбщая площадь является самым значимым признаком для предсказания цены квартиры.\n\nЧисло дней экспозиции находится на втором месте.\n\n\n4.2 Изучение зависимостей между числовыми переменными\nИзучим зависимости между числовыми переменными, используя графики рассеяния.\n Вернуться к выводам\n\n\nShow the code\n\npairs = {('last_price', 'total_area'): {'last_price': [np.int64(430000), np.int64(763000000)], 'total_area': [np.float64(12.0), np.float64(900.0)]}, ('last_price', 'living_area'): {'last_price': [np.int64(430000), np.int64(763000000)], 'living_area': [np.float64(2.0), np.float64(427.55)]}, ('last_price', 'kitchen_area'): {'last_price': [np.int64(430000), np.int64(763000000)], 'kitchen_area': [np.float64(1.3), np.float64(122.57)]}, ('last_price', 'floors_total'): {'last_price': [np.int64(430000), np.int64(763000000)], 'floors_total': [np.float64(1.0), np.float64(60.0)]}, ('last_price', 'city_centers_nearest'): {'last_price': [np.int64(430000), np.int64(763000000)], 'city_centers_nearest': [np.float64(181.0), np.float64(65968.0)]}, ('last_price', 'parks_nearest'): {'last_price': [np.int64(430000), np.int64(763000000)], 'parks_nearest': [np.float64(1.0), np.float64(3190.0)]}, ('total_area', 'rooms'): {'total_area': [np.float64(12.0), np.float64(900.0)], 'rooms': [np.int64(1), np.int64(19)]}, ('total_area', 'city_centers_nearest'): {'total_area': [np.float64(12.0), np.float64(900.0)], 'city_centers_nearest': [np.float64(181.0), np.float64(65968.0)]}, ('rooms', 'living_area'): {'rooms': [np.int64(1), np.int64(19)], 'living_area': [np.float64(2.0), np.float64(427.55)]}}\npagri_data_tools.pairplot_pairs(df, pairs, titles_for_axis=titles_for_axis, horizontal_spacing=0.12, rows=3, cols=3, density_mode='count') #.show(config=dict(displayModeBar=False, dpi=200), renderer=\"png\")\n\n\n                                                \n\n\nНаблюдения:\n\nС ростом цены растет общая площадь, жилая площадь и площадь кухни.\nЕсть небольшая зависимость между ценой и количеством этажей. Чем больше цена, тем меньше этажей.\nЭто скорее всего связано с тем, что старые дома имеют меньше этажей и загородные дома имеют также меньше этажей.\nМожно заметить, что чем ближе к центру или парку, тем дороже стоит квартира.\nЧем больше число комнат, тем больше общая площадь, что логично.\n\nЧем ближе к центру, тем меньше общая площадь. Скорее всего это связано с тем, что в центре больше студий.\n\nЧем больше число комнат, тем больше жилая площадь, что логично.\n\n\n\n4.3 Изучение зависимостей между категориальными переменными\nИзучим распределение долей в категориальных переменных.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric\n    total_images = ['Число фотографий', 'число фотографий', 0],\n    last_price = ['Цена', 'цена', 2],\n    total_area = ['Общая площадь', 'общая площадь', 2],\n    rooms = ['Число комнат', 'число комнат', 0],\n    ceiling_height = ['Высота потолков', 'высота потолков', 2],\n    floors_total = ['Всего этажей', 'количество этажей', 0],\n    living_area = ['Жилая площадь', 'жилая площадь', 2],\n    floor = ['Этаж', 'этаж', 1],\n    kitchen_area = ['Площадь кухни', 'площадь кухни', 2],\n    balcony = ['Число балконов', 'число балконов', 0],\n    airports_nearest = ['Расстояние до аэропорта, м', 'расстояние до аэропорта', 0],\n    city_centers_nearest = ['Расстояние до центра, м', 'расстояние до центра', 0],\n    parks_around3000 = ['Число парков', 'число парков', 0],\n    parks_nearest = ['Расстояние до парка, м', 'расстояние до парка', 0],\n    ponds_around3000 = ['Число водоёмов', 'число водоёмов', 0],\n    ponds_nearest = ['Расстояние до водоёма, м', 'расстояние до водоёма', 0],\n    days_exposition = ['Число дней размещения', 'число дней размещения', 0],\n    city_centers_nearest_km = ['Расстояние до центра, км', 'расстояние до центра', 0],\n    living_total_ratio = ['Жилая/общая площадь', 'жилая/общая площадь', 2],\n    kitchen_total_ratio = ['Кухня/общая площадь', 'кухня/общая площадь', 2],\n    price_per_sqm = ['Цена кв метра', 'цена кв метра', 2],\n    # categorical\n    is_apartment = ['Является ли апартаментом', 'является ли апартаментом', 0],\n    studio = ['Является ли студией', 'является ли студией', 0],\n    open_plan = ['Открытая ли планировка', 'планировки', 0],\n    floor_position = ['Позиция этажа', 'позиции этажа', 1],\n    price_segment = ['Сегмент цены', 'сегмента цены', 1],\n    publication_weekday = ['День недели публикации', 'дня недели публикации', 1],\n    publication_month = ['Месяц публикации', 'месяца публикации', 1],\n    publication_year = ['Год публикации', 'года публикации', 1],\n    publication_month_year = ['Месяц и год публикации', 'месяца и года публикации', 1],\n    location_zone = ['Локация', 'локации', 2]\n)\n\n\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'floor_position'\n    , column_for_legend = 'price_segment'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = True\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ этажах кроме первого и последнего комфорта больше всего.\n\nПосмотрим на распределение количества элементов между группами\n\n\nShow the code\npagri_data_tools.categorical_heatmap_matrix(df, 'floor_position', 'price_segment', titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего квартир комфорт класса с этажом не первым и не последним.\n\n Вернуться к выводам\n\n\nShow the code\npagri_data_tools.categorical_heatmap_matrix(df, 'publication_weekday', 'price_segment', titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ воскресенье и субботу меньше всего публикаций\n\n\n\nShow the code\npagri_data_tools.categorical_heatmap_matrix(df, 'location_zone', 'price_segment', titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего объявлений со средней удаленностью от центра.\n\n\n\n4.4 Анализ временных зависимостей\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'publication_year'\n    , y = 'total_images'\n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True\n    , sort = False\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nЕсть тренд на увеличение количества фотографий по годам.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'publication_month_year'\n    , y = 'last_price'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True     \n    , sort = False                                           \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианная цена квартиры не сильно изменяется со временем\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'publication_month_year'\n    , y = 'total_area'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True   \n    , sort = False                                             \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианная площадь квартир не сильно меняется со временем\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'publication_month_year'\n    , y = 'price_per_sqm'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True     \n    , sort = False                                           \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nМедианная стоимость квадратного метра практически не меняется со временем\n\n\n\n4.5 Изучение зависимостей между числовыми и категориальными переменными\nПосмотрим на взаимосвязи между числовыми и категориальными переменными.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'floor_position'\n    , y = 'rooms'  \n    , category = 'price_segment' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ премиуме среднее количество комнат больше на всех этажах\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'floor_position'\n    , y = 'living_area'  \n    , category = 'price_segment' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУ премиум площадь квартир больше на всех этажах\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'last_price'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианная стоимость квартир выше\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'total_area'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианная площадь квартир больше\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'rooms'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианное количество комнат больше\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'ceiling_height'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианная высота потолков выше.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'floors_total'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСамые высокие дома находятся на средней удаленности от центра\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'location_zone'\n    , y = 'days_exposition'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'median'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = True                                                \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ центре медианное количество дней экспозиции больше.\n\n\n\n4.6 Анализ срезов данных\nИзучим объявления в центре и сравним их с объявлениями в целом.\n\n\nShow the code\ndf[df.location_zone == 'Центр'].head()\n\n\n\n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_total_ratio\nprice_per_sqm\ncity_centers_nearest_km\nfloor_position\nprice_segment\npublication_weekday\npublication_month\npublication_year\npublication_month_year\nlocation_zone\n\n\n\n\n24\n8\n6500000\n97.2\n2015-10-31\n2\nNaN\n3.0\n46.5\n1\nне указано\n...\n0.20\n66872\n2.0\nпервый\nкомфорт\nСуббота\nОктябрь\n2015\nОкт'15\nЦентр\n\n\n35\n6\n15500000\n149.0\n2017-06-26\n5\nNaN\n5.0\n104.0\n4\nне указано\n...\n0.11\n104026\n4.0\nдругой\nпремиум\nПонедельник\nИюнь\n2017\nИюн'17\nЦентр\n\n\n61\n18\n7990000\n74.0\n2017-08-24\n2\nNaN\n4.0\n43.0\n4\nне указано\n...\n0.27\n107972\n4.0\nпоследний\nкомфорт\nЧетверг\nАвгуст\n2017\nАвг'17\nЦентр\n\n\n63\n2\n20000000\n118.0\n2018-09-11\n3\n3.0\n9.0\n68.0\n7\nне указано\n...\n0.14\n169491\n5.0\nдругой\nпремиум\nВторник\nСентябрь\n2018\nСен'18\nЦентр\n\n\n99\n32\n9600000\n90.0\n2017-09-26\n4\nNaN\n5.0\n67.0\n2\nне указано\n...\n0.09\n106666\n3.0\nдругой\nкомфорт\nВторник\nСентябрь\n2017\nСен'17\nЦентр\n\n\n\n\n5 rows × 33 columns\n\n\n\n\n\nShow the code\ndf_sliced = df[df.location_zone == 'Центр']\ngen_slice = pagri_data_tools.info_gen(df_sliced)\ngen = pagri_data_tools.info_gen(df)\n\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'last_price')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'last_price')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 47: last_price\n\n\n\n\n\nValues\n2 475 (100%)\n\nMax\n763 000 000\n\nAvg\n14 750 097.08\n\n8 500 000 (1%)\n\n\nMissing\n---\n\n95%\n35 619 999.0\n\nMode\n---\n\n7 500 000 (1%)\n\n\nDistinct\n834 (34%)\n\n75%\n14 200 000\n\nRange\n761 400 000\n\n8 000 000 (1%)\n\n\nDuplicates\n1 641 (66%)\n\nMedian\n9 500 000\n\niQR\n7 250 000\n\n12 000 000 (1%)\n\n\nZeros\n---\n\n25%\n6 950 000\n\nstd\n26 020 216.07\n\n9 500 000 (1%)\n\n\nNegative\n---\n\n5%\n4 700 000\n\nkurt\n322.93\n\n9 000 000 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1 600 000\n\nskew\n14.31\n\n10 000 000 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 48: last_price\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n763 000 000\n\nAvg\n6 525 185.56\n\n4 500 000 (1%)\n\n\nMissing\n---\n\n95%\n15 253 200.0\n\nMode\n4 500 000\n\n3 500 000 (1%)\n\n\nDistinct\n2 920 (12%)\n\n75%\n6 790 000\n\nRange\n762 570 000\n\n4 000 000 (1%)\n\n\nDuplicates\n20 607 (88%)\n\nMedian\n4 646 000\n\niQR\n3 390 000\n\n4 300 000 (1%)\n\n\nZeros\n---\n\n25%\n3 400 000\n\nstd\n10 836 761.82\n\n4 200 000 (1%)\n\n\nNegative\n---\n\n5%\n1 860 000\n\nkurt\n1309.24\n\n3 600 000 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n430 000\n\nskew\n26.19\n\n3 300 000 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nСреднее и медиана в центре для цены выше почти в 2 раза, чем во всем датафрейме.\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'total_area')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'total_area')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 49: total_area\n\n\n\n\n\nValues\n2 475 (100%)\n\nMax\n631.2\n\nAvg\n95.49\n\n60 (1%)\n\n\nMissing\n---\n\n95%\n197.93\n\nMode\n60\n\n70 (1%)\n\n\nDistinct\n947 (38%)\n\n75%\n112\n\nRange\n619.2\n\n50 (1%)\n\n\nDuplicates\n1 528 (62%)\n\nMedian\n82\n\niQR\n51.95\n\n80 (1%)\n\n\nZeros\n---\n\n25%\n60.05\n\nstd\n58.86\n\n72 &lt;1%\n\n\nNegative\n---\n\n5%\n38.07\n\nkurt\n16.81\n\n110 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12\n\nskew\n3.09\n\n85 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 50: total_area\n\n\n\n\n\nValues\n23 527 (100%)\n\nMax\n900\n\nAvg\n60.29\n\n45 (2%)\n\n\nMissing\n---\n\n95%\n116\n\nMode\n45\n\n42 (2%)\n\n\nDistinct\n2 155 (9%)\n\n75%\n69.7\n\nRange\n888\n\n31 (1%)\n\n\nDuplicates\n21 372 (91%)\n\nMedian\n52\n\niQR\n29.7\n\n60 (1%)\n\n\nZeros\n---\n\n25%\n40\n\nstd\n35.53\n\n44 (1%)\n\n\nNegative\n---\n\n5%\n31\n\nkurt\n48.04\n\n40 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12\n\nskew\n4.78\n\n43 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nОбщая площадь в центре больше, чем во всем датафрейме.\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'ceiling_height')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'ceiling_height')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 51: ceiling_height\n\n\n\n\n\nValues\n1 639 (66%)\n\nMax\n4.9\n\nAvg\n3.14\n\n3 (19%)\n\n\nMissing\n836 (34%)\n\n95%\n3.8\n\nMode\n3\n\n3.2 (9%)\n\n\nDistinct\n130 (5%)\n\n75%\n3.34\n\nRange\n2.5\n\n3.5 (6%)\n\n\nDuplicates\n2 344 (95%)\n\nMedian\n3.1\n\niQR\n0.43\n\n2.7 (5%)\n\n\nZeros\n---\n\n25%\n2.91\n\nstd\n0.35\n\n3.1 (5%)\n\n\nNegative\n---\n\n5%\n2.7\n\nkurt\n1.32\n\n3.3 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n2.4\n\nskew\n0.83\n\n2.8 (4%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 52: ceiling_height\n\n\n\n\n\nValues\n14 443 (61%)\n\nMax\n5\n\nAvg\n2.72\n\n2.5 (24%)\n\n\nMissing\n9 084 (39%)\n\n95%\n3.27\n\nMode\n2.5\n\n2.6 (11%)\n\n\nDistinct\n164 (1%)\n\n75%\n2.8\n\nRange\n4\n\n2.7 (11%)\n\n\nDuplicates\n23 362 (99.3%)\n\nMedian\n2.65\n\niQR\n0.29\n\n3 (8%)\n\n\nZeros\n---\n\n25%\n2.51\n\nstd\n0.27\n\n2.8 (7%)\n\n\nNegative\n---\n\n5%\n2.5\n\nkurt\n6.65\n\n2.55 (7%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.07\n\n2.75 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВысота потолков в центре больше, чем во всем датафрейме\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'balcony')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'balcony')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 53: balcony\n\n\n\n\n\nValues\n931 (38%)\n\nMax\n5\n\nAvg\n0.7\n\n0 (57%)\n\n\nMissing\n1 544 (62%)\n\n95%\n2\n\nMode\n0\n\n1 (24%)\n\n\nDistinct\n6 (&lt;1%)\n\n75%\n1\n\nRange\n5\n\n2 (15%)\n\n\nDuplicates\n2 468 (99.7%)\n\nMedian\n0\n\niQR\n1\n\n4 (2%)\n\n\nZeros\n531 (21%)\n\n25%\n0\n\nstd\n1.0\n\n5 (1%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n3.78\n\n3 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.79\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 54: balcony\n\n\n\n\n\nValues\n12 064 (51%)\n\nMax\n5\n\nAvg\n1.16\n\n1 (35%)\n\n\nMissing\n11 463 (49%)\n\n95%\n2\n\nMode\n1\n\n0 (30%)\n\n\nDistinct\n6 (&lt;1%)\n\n75%\n2\n\nRange\n5\n\n2 (30%)\n\n\nDuplicates\n23 520 (99.9%)\n\nMedian\n1\n\niQR\n2\n\n5 (2%)\n\n\nZeros\n3 677 (16%)\n\n25%\n0\n\nstd\n1.07\n\n4 (2%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n2.51\n\n3 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.24\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ центре меньше балконов, чем во всем датафрейме.\n\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'parks_around3000')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'parks_around3000')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 55: parks_around3000\n\n\n\n\n\nValues\n2 475 (100%)\n\nMax\n3\n\nAvg\n1.03\n\n1 (36%)\n\n\nMissing\n---\n\n95%\n3\n\nMode\n1\n\n0 (35%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n2\n\nRange\n3\n\n2 (18%)\n\n\nDuplicates\n2 471 (99.8%)\n\nMedian\n1\n\niQR\n2\n\n3 (10%)\n\n\nZeros\n873 (35%)\n\n25%\n0\n\nstd\n0.97\n\n\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n-0.64\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.61\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 56: parks_around3000\n\n\n\n\n\nValues\n18 037 (77%)\n\nMax\n3\n\nAvg\n0.61\n\n0 (56%)\n\n\nMissing\n5 490 (23%)\n\n95%\n2\n\nMode\n0\n\n1 (31%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n1\n\nRange\n3\n\n2 (10%)\n\n\nDuplicates\n23 522 (99.9%)\n\nMedian\n0\n\niQR\n1\n\n3 (4%)\n\n\nZeros\n10 027 (43%)\n\n25%\n0\n\nstd\n0.8\n\n\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n0.87\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.23\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ центре больше парков.\n\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'days_exposition')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'days_exposition')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 57: days_exposition\n\n\n\n\n\nValues\n2 063 (83%)\n\nMax\n1 572\n\nAvg\n263.26\n\n90.0 (3%)\n\n\nMissing\n412 (17%)\n\n95%\n885.8\n\nMode\n90.0\n\n60 (3%)\n\n\nDistinct\n697 (28%)\n\n75%\n369.5\n\nRange\n1 569\n\n30 &lt;1%\n\n\nDuplicates\n1 777 (72%)\n\nMedian\n150\n\niQR\n308.5\n\n4 &lt;1%\n\n\nZeros\n---\n\n25%\n61\n\nstd\n286.65\n\n61 &lt;1%\n\n\nNegative\n---\n\n5%\n12.0\n\nkurt\n2.68\n\n89.0 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n3.0\n\nskew\n1.69\n\n9 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 58: days_exposition\n\n\n\n\n\nValues\n20 364 (87%)\n\nMax\n1 580\n\nAvg\n180.74\n\n45.0 (4%)\n\n\nMissing\n3 163 (13%)\n\n95%\n647.85\n\nMode\n45.0\n\n60 (3%)\n\n\nDistinct\n1 139 (5%)\n\n75%\n231\n\nRange\n1 579\n\n7 (1%)\n\n\nDuplicates\n22 387 (95%)\n\nMedian\n95\n\niQR\n186\n\n30 (1%)\n\n\nZeros\n---\n\n25%\n45.0\n\nstd\n219.76\n\n90.0 &lt;1%\n\n\nNegative\n---\n\n5%\n9\n\nkurt\n6.28\n\n4 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.31\n\n3.0 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ центре объявления дольше находятся в экспозиции.\n\n Вернуться к выводам\n\n\nShow the code\nprint('Срез датафрейма')\npagri_data_tools.info_column(df_sliced, 'price_segment')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'price_segment')\n\n\nСрез датафрейма\n\n\n\n        \n            \n\n\n\n\nTable 59: price_segment\n\n\n\n\n\nValues\n2 475 (100%)\n\nкомфорт (52%)\n\n\nMissing\n---\n\nпремиум (45%)\n\n\nDistinct\n3 (&lt;1%)\n\nэконом (3%)\n\n\nDuplicated origin\n2 472 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nВесь датафрейм\n\n\n\n        \n            \n\n\n\n\nTable 60: price_segment\n\n\n\n\n\nValues\n23 527 (100%)\n\nкомфорт (50%)\n\n\nMissing\n---\n\nэконом (38%)\n\n\nDistinct\n3 (&lt;1%)\n\nпремиум (11%)\n\n\nDuplicated origin\n23 524 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения:\n\nВ центре меньше эконома и больше премиум квартир.\n\nПосмотрим на цену квадратного метра в 10 населенных пунктах с наибольшим количеством объявлений.\n\n\nShow the code\nselected_cities = df.groupby('locality_name').size().rename('count').sort_values(ascending=False).to_frame().head(10)\nselected_cities\n\n\n\n\n\n\n\n\n\ncount\n\n\nlocality_name\n\n\n\n\n\nСанкт-Петербург\n15625\n\n\nпосёлок Мурино\n518\n\n\nпосёлок Шушары\n439\n\n\nВсеволожск\n398\n\n\nПушкин\n369\n\n\nКолпино\n338\n\n\nпосёлок Парголово\n327\n\n\nГатчина\n306\n\n\nдеревня Кудрово\n299\n\n\nВыборг\n237\n\n\n\n\n\n\n\n\n\nShow the code\nselected_cities = selected_cities.index\n\n\nПосмотрим на среднюю цену квадратного метра в этих населённых пунктах.\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df[df.locality_name.isin(selected_cities)]\n    , x = 'locality_name'\n    , x_axis_label = 'Название населённого пункта'\n    , y = 'price_per_sqm'\n    , y_axis_label = 'Цена квадратного метра'\n    , title = 'Цена кв метра в зависимости от населенного пункта'\n    , func = 'mean'\n    , width = None\n    , height = None\n    , orientation = 'v'\n)\npagri_data_tools.bar(config)\n\n\n                                                \n\n\nНаблюдения:\n\nСанкт–Петербург, Пушкин и деревня Кудрово имеют самую большую цену квадратного метра.\n\n\n\n4.7 Промежуточный вывод\n\nСильная положительная корреляция между жилой площадью и общей площадью\nСильная положительная корреляция между числом комнат и общей площадью\nСильная положительная корреляция между числом комнат и жилой площадью\nСильная отрицательная корреляция между отношением площади кухни к общей площади и отношением жилой площади к общей площади\nУмеренная положительная корреляция между площадью кухни и общей площадью\nУмеренная положительная корреляция между ценой и общей площадью\nУмеренная положительная корреляция между ценой и жилой площадью\nУмеренная положительная корреляция между ценой и площадью кухни\nУмеренная положительная корреляция между ценой и жилой площадью\nОбщая площадь является самым значимым признаком для предсказания цены квартиры. Число дней экспозиции находится на втором месте.\nС ростом цены растет общая площадь, жилая площадь и площадь кухни.\nЕсть небольшая зависимость между ценой и количеством этажей. Чем больше цена, тем меньше этажей.\nЭто скорее всего связано с тем, что старые дома имеют меньше этажей и загородные дома имеют также меньше этажей.\nМожно заметить, что чем ближе к центру или парку, тем дороже стоит квартира.\nЧем больше число комнат, тем больше общая площадь.\n\nЧем больше число комнат, тем больше жилая площадь.\n\nВ воскресенье и субботу меньше всего публикаций\nБольше всего объявлений со средней удаленностью от центра.\nЕсть тренд на увеличение количества фотографий по годам.\nМедианная цена квартиры не сильно изменяется со временем\nМедианная площадь квартир не сильно меняется со временем\nМедианная стоимость квадратного метра практически не меняется со временем\nВ премиуме среднее количество комнат больше на всех этажах\nУ премиум площадь квартир больше на всех этажах\nВ центре медианная стоимость квартир выше\nВ центре медианная площадь квартир больше\nВ центре медианное количество комнат больше\nВ центре медианная высота потолков выше.\nСамые высокие дома находятся на средней удаленности от центра\nВ центре медианное количество дней экспозиции больше.\nСреднее и медиана в центре для цены выше почти в 2 раза, чем во всем датафрейме.\nОбщая площадь в центре больше, чем во всем датафрейме.\nВысота потолков в центре больше, чем во всем датафрейме\nВ центре меньше балконов, чем во всем датафрейме.\nВ центре объявления дольше находятся в экспозиции.\nВ центре меньше эконома и больше премиум квартир.\n\nСанкт–Петербург, Пушкин и деревня Кудрово имеют самую большую цену квадратного метра."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#формулирование-и-провера-гипотез",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#формулирование-и-провера-гипотез",
    "title": "Исследование объявлений о продаже квартир",
    "section": "5. Формулирование и провера гипотез",
    "text": "5. Формулирование и провера гипотез\n\n5.1 Формулирование гипотез\nНа основе проведенного анализа данных сформулируем следующие гипотезы:\nГипотеза 1: Нет зависимости между количеством публикаций и днем недели.\nГипотеза 2: Удаленность от центра не влияет на количество публикаций.\nГипотеза 3: Площадь квартир не зависит от времени.\nГипотеза 4: Площадь квартиры не зависит от ценового сегмента.\nГипотеза 5: Количество дней экспозиции не зависит от удаленности от центра.\n\n\n5.2 Проверка гипотез\nПроверим сформулированные гипотезы.\n\n\nShow the code\ntitles_for_axis = dict(\n    total_area = ['Общая площадь', 'общей площади'],\n    price_per_sqm = ['Цена кв метра', 'цены кв метра'],\n    days_exposition = ['Число дней размещения', 'числа дней размещения'],\n)\n\n\nГипотеза 1: Нет зависимости между количеством публикаций и днем недели.\nH0: День недели не влияет на количество объявлений\nH1: День недели влияет на количество объявлений\n\n\nShow the code\ndaily_counts = df['publication_weekday'].value_counts().sort_index()\ndaily_counts\n\n\npublication_weekday\nПонедельник    3591\nВторник        4157\nСреда          3940\nЧетверг        4270\nПятница        3970\nСуббота        1918\nВоскресенье    1681\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.chisquare(daily_counts)\n\n\nХи-квадрат Пирсона\nalpha =  0.05\np-value =  0.0\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что день недели не влияет на количество объявлений, была отклонена. Это указывает на то, что существует статистически значимое влияние дня недели на количество объявлений.\n\nГипотеза 2: Удаленность от центра не влияет на количество публикаций.\nH0: Удаленность от центра не влияет на количество объявлений\nH1: Удаленность от центра влияет на количество объявлений\n\n\nShow the code\nzone_counts = df['location_zone'].value_counts().sort_index()\nzone_counts\n\n\nlocation_zone\nЦентр                   2475\nСредняя удаленность    12998\nОкраина                 2563\nне указано              5491\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.chisquare(zone_counts)\n\n\nХи-квадрат Пирсона\nalpha =  0.05\np-value =  0.0\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что удаленность от центра не влияет на количество объявлений, была отклонена. Это указывает на то, что удаленность от центра оказывает статистически значимое влияние на количество объявлений.\n\nГипотеза 3: Площадь квартир не зависит от времени.\nH0: Площадь квартир не зависит от времени.\nH1: Площадь квартир зависит от времени.\nПосмотрим на распределение площади квартир.\n\n\nShow the code\npagri_data_tools.histogram(df.total_area, titles_for_axis)\n\n\n                                                \n\n\nТак как у нас не нормальное распределение, то используем непараметрический критерий Краскела-Уоллиса.\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.kruskal_df(df[['publication_month_year', 'total_area']])\n\n\nWarning: Sample size is less than 30 for one or more samples. Results may be unreliable.\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  4.573162293436599e-35\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n- Из за малого размера одной из групп нет оснований доверять результату теста.\nГипотеза 4: Площадь квартиры не зависит от ценового сегмента.\nH0: Площадь квартиры не зависит от ценового сегмента.\nH1: Площадь квартиры зависит от ценового сегмента.\nТак как у нас не нормальное распределение, то используем непараметрический критерий Краскела-Уоллиса.\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.kruskal_df(df[['price_segment', 'total_area']])\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  0.0\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n- На уровне значимости 0.05 нулевая гипотеза о том, что площадь квартиры не зависит от ценового сегмента, была отклонена. Это указывает на то, что существует статистически значимое зависимость между площадью квартиры и ценовым сегментом.\nГипотеза 5: Количество дней экспозиции не зависит от удаленности от центра.\nH0: Количество дней экспозиции не зависит от удаленности от центра.\nH1: Количество дней экспозиции зависит от удаленности от центра.\nПосмотрим на распределение количества дней экспозиции.\n\n\nShow the code\npagri_data_tools.histogram(df.days_exposition, titles_for_axis)\n\n\n                                                \n\n\nТак как у нас не нормальное распределение, то используем непараметрический критерий Краскела-Уоллиса.\nУровень значимости alpha выберем 0.05\nТак как у нас есть пропуски, то для проведения теста их удалим.\nБудем полагать, что пропуски носят случайный характер и не повлияют на результат теста.\n\n\nShow the code\npagri_data_tools.kruskal_df(df[['location_zone', 'days_exposition']].dropna())\n\n\nТест Краскела-Уоллиса (H-критерий)\nalpha =  0.05\np-value =  2.135280354786305e-54\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n- На уровне значимости 0.05 нулевая гипотеза о том, что количество дней экспозиции не зависит от удаленности от центра, была отклонена. Это указывает на то, что существует статистически значимая зависимость между количеством дней экспозиции и удаленностью от центра.\n\n\n5.3 Промежуточный вывод\n\nНа уровне значимости 0.05 гипотеза, что есть зависимость между количеством публикаций и днем недели подтвердилась.\n\nНа уровне значимости 0.05 гипотеза, что удаленность от центра влияет на количество публикаций, подтвердилась.\n\nНа уровне значимости 0.05 гипотеза, что площадь квартир не зависит от времени, не подтвердилась.\nНужно учесть, что в одной из групп меньше 30 элементов. Есть основания не доверять результатам.\nНа уровне значимости 0.05 гипотеза, что площадь квартиры зависит от ценового сегмента, подтвердилась.\n\nНа уровне значимости 0.05 гипотеза, что количество дней экспозиции зависит от удаленности от центра, подтвердилась."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#общий-вывод",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#общий-вывод",
    "title": "Исследование объявлений о продаже квартир",
    "section": "6. Общий вывод",
    "text": "6. Общий вывод\nВыводы:\n- Сильная положительная корреляция между жилой площадью и общей площадью\n- Сильная положительная корреляция между числом комнат и общей площадью\n- Сильная положительная корреляция между числом комнат и жилой площадью\n- Сильная отрицательная корреляция между отношением площади кухни к общей площади и отношением жилой площади к общей площади\n- Умеренная положительная корреляция между площадью кухни и общей площадью\n- Умеренная положительная корреляция между ценой и общей площадью\n- Умеренная положительная корреляция между ценой и жилой площадью\n- Умеренная положительная корреляция между ценой и площадью кухни\n- Умеренная положительная корреляция между ценой и жилой площадью\n- Общая площадь является самым значимым признаком для предсказания цены квартиры. Число дней экспозиции находится на втором месте.\n- Есть небольшая зависимость между ценой и количеством этажей. Чем больше цена, тем меньше этажей.\nЭто скорее всего связано с тем, что старые дома имеют меньше этажей и загородные дома имеют также меньше этажей.\n- Можно заметить, что чем ближе к центру или парку, тем дороже стоит квартира.\n- В среднем объявление находится в продаже 180 дней.\n- Чем больше число комнат, тем больше общая площадь.\n- Чем больше число комнат, тем больше жилая площадь.\n- В воскресенье и субботу меньше всего публикаций\n- Больше всего объявлений со средней удаленностью от центра.\n- Есть тренд на увеличение количества фотографий по годам.\n- Медианная цена квартиры не сильно изменяется со временем\n- Медианная площадь квартир не сильно меняется со временем\n- Медианная стоимость квадратного метра практически не меняется со временем\n- В премиуме среднее количество комнат больше на всех этажах\n- У премиум площадь квартир больше на всех этажах\n- В центре медианная стоимость квартир выше\n- В центре медианная площадь квартир больше\n- В центре медианное количество комнат больше\n- В центре медианная высота потолков выше.\n- Самые высокие дома находятся на средней удаленности от центра\n- В центре медианное количество дней экспозиции больше.\n- Среднее и медиана в центре для цены выше почти в 2 раза, чем во всем датафрейме.\n- Общая площадь в центре больше, чем во всем датафрейме.\n- Высота потолков в центре больше, чем во всем датафрейме\n- В центре меньше балконов, чем во всем датафрейме.\n- В центре объявления дольше находятся в экспозиции.\n- В центре меньше эконома и больше премиум квартир.\n- Санкт–Петербург, Пушкин и деревня Кудрово имеют самую большую цену квадратного метра.\nАномалии и особенности в данных:\n- Минимальное значение цены 12 190 является аномальным.\n- В высоте потолков есть пропуски (39 процентов)\n- В высоте потолков много выбросов. Есть значение 100.\n- В количестве этажей есть пропуски (меньше 1 процента)\n- В жилой площади 8 процентов пропусков.\n- В площади кухни 10 процентов пропусков.\n- В числе балконов 49 процентов пропусков. Скорее всего пропуски это отсутствие балкона.\n- В расстоянии до ближайшего аэропорта 23 процента пропусков.\n- В расстоянии до центр города 23 процента пропусков.\n- В колонке с количеством парков рядом 23 процента пропусков.\n- В колонке с расстоянием до ближайшего парка 66 процентов пропусков.\n- В колонке с количеством прудов 23 процента пропусков, скорее всего это отсутствие парков.\n- В колонке с расстоянием до ближайшего пруда 62 процента пропусков.\n- В колонке с количеством дней экспозиции 13 процентов пропусков.\n- В колонке с признаком является ли квартира апартаментом 88 процентов пропусков. Скорее всего эти квартиры не являются апартаментами.\n- В колонке с названием населенного пункта 49 пропущенных значений (меньше 1 процента)\n- Пропуски в колонках с количеством парков рядом, количеством прудов рядом,\nрасстоянием до центра, расстоянием до аэропорта совпадают.\n- Пропуски в количестве этажей совпадают с пропусками в признаке является ли квартира апартаментом.\n- В количестве этаже пропуски зависят от признака является ли квартира студией.\n- Почти все пропуски в квартирах, которые не являются студиями, даже учитывая общее количество пропорций.\n- В студиях в поле площадь кухни одни пропуски.\nРезультаты предобработки данных:\n- Мы выяснили, что 0 комнат указано у студий, либо в открытой планировке, либо у квартир с площадью до 40 кв.,\nпоэтому нули в количестве комнат заменили на 1.\n- В цене была одна запись со значением 12190. Скорее всего не поставили нули, но сложно определить сколько именно нулей не поставили.\nТак как это всего 1 запись, то удалили ее. - Удалили 36 записей (0.2%) с высотой потолка больше 5 метров. Так как таких записей мало, а замена их может исказить анализ.\n- В количестве этажей пропуски удалили, так как определить реальный этаж невозможно, а пропусков мало.\n- Пропуски в жилой площади и в площади кухни обработали с помощью коэффициентов отношения площадей.\nПри этом расчеты провели с учетом количества комнат, чтобы было точнее.\nРезультаты проверки гипотез:\n- Гипотеза 1: Нет зависимости между количеством публикаций и днем недели.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\n- Гипотеза 2: Удаленность от центра не влияет на количество публикаций.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\n- Гипотеза 3: Площадь квартир не зависит от времени.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\n- Гипотеза 4: Площадь квартиры не зависит от ценового сегмента.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\n- Гипотеза 5: Количество дней экспозиции не зависит от удаленности от центра.\nРезультат: на уровне значимости 0.05 гипотеза не подтвердилась.\nРекомендации:\n- Добавить контроль ввода слишком больших и слишком маленьких значений для цены, высоты потолка.\n- Добавить контроль ввода для количества комнат, чтобы исключить ввод нулевых значений.\n- Выяснить почему пропуски в колонках с количеством парков рядом, количеством прудов рядом,\nрасстоянием до центра, расстоянием до аэропорта в одних и тех же строках."
  },
  {
    "objectID": "projects/research_of_food_service_industry/research_of_food_service_industry.html",
    "href": "projects/research_of_food_service_industry/research_of_food_service_industry.html",
    "title": "Исследование рынка заведений общественного питания",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nВ Москве открывается небольшое кафе. Оно оригинальное - гостей должны обслуживать роботы. Проект многообещающий, но дорогой. Было принято решение привлечь инвесторов. Их интересует текущее положение дел на рынке. Необходимо подготовить исследование рынка. Полученные данные помогут понять, стоит ли вкладываться в этот проект.\nЦель:\nОценить потенциал и рентабельность открытия кафе с обслуживанием роботами в Москве и предоставить инвесторам необходимую информацию для принятия обоснованного решения о финансировании проекта.\nИсточники данных:\nОткрытые данные о заведениях общественного питания в Москве.\nУсловия проведения анализа данных:\nГлавные выводы:\nтут помещаем самое главное из общего вывода, примерно до полустраницы, чтобы не было сильно много и при этом указать все главные выводы Будет идеально, елси выводы на похожие темы будут рядом, то есть елси мы имеем несколько выводов о доходе, то лушче поместить их рядом\nРекомендации:"
  },
  {
    "objectID": "projects/research_of_food_service_industry/research_of_food_service_industry.html#загрузка-библиотек",
    "href": "projects/research_of_food_service_industry/research_of_food_service_industry.html#загрузка-библиотек",
    "title": "Исследование рынка заведений общественного питания",
    "section": "Загрузка библиотек ",
    "text": "Загрузка библиотек \n\n\nShow the code\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore\npd.set_option('display.max_columns', None)\npd.options.display.float_format = '{:,.2f}'.format"
  },
  {
    "objectID": "projects/research_of_food_service_industry/research_of_food_service_industry.html#описание-и-изучение-данных",
    "href": "projects/research_of_food_service_industry/research_of_food_service_industry.html#описание-и-изучение-данных",
    "title": "Исследование рынка заведений общественного питания",
    "section": "Описание и изучение данных",
    "text": "Описание и изучение данных\n\nОписание данных\n\nid - идентификатор объекта;\nobject_name - название объекта общественного питания;\nchain - сетевой ресторан;\nobject_type - тип объекта общественного питания;\naddress - адрес;\nnumber - количество посадочных мест.\n\n\n\nИзучение данных\n\nИзучение переменных\nЗагружаем данные и задаем типы данных для столбцов, где это возможно.\n\n\nShow the code\ndtype = {'chain': 'category', 'object_type': 'category'}\ndf = pd.read_csv('https://code.s3.yandex.net/datasets/rest_data.csv', dtype=dtype)\ndf.rename(columns={'object_name': 'name', 'object_type': 'type', 'chain': 'is_chain', 'number': 'seats'}, inplace=True)\ndf.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nid\nname\nis_chain\ntype\naddress\nseats\n\n\n\n\n5138\n26157\nРесторан Баку-Сити\nнет\nресторан\nгород Москва, улица Руставели, дом 14, строение 1\n90\n\n\n6247\n29462\nШкольно-базовая столовая\nнет\nстоловая\nгород Москва, улица Маршала Савицкого, дом 26,...\n200\n\n\n13182\n204427\nПоварская Лавка\nнет\nкафе\nгород Москва, набережная Академика Туполева, д...\n25\n\n\n6798\n27397\nСтоловая при школе 2097\nнет\nстоловая\nгород Москва, Светлогорский проезд, дом 7, кор...\n124\n\n\n3454\n27013\nБега\nнет\nресторан\nгород Москва, Беговая аллея, дом 11\n50\n\n\n\n\n\n\n\nИзучим по отдельности каждый столбец.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df)\ngen.next()\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n15.37k\n6\n6\n---\n---\n\n\n\n\n\n\n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 2: Статистика и гистограмма столбца \"id\"\n\n\n\n\n\nValues\n15.37k (100%)\n\nMax\n223.44k\n\nAvg\n119.72k\n\n151.63k &lt;1%\n\n\nMissing\n---\n\n95%\n215.24k\n\nMode\n---\n\n165.51k &lt;1%\n\n\nDistinct\n15.37k (100%)\n\n75%\n184.26k\n\nRange\n222.60k\n\n183.13k &lt;1%\n\n\nDuplicates\n---\n\n50%\n144.97k\n\niQR\n155.74k\n\n186.22k &lt;1%\n\n\nZeros\n---\n\n25%\n28.52k\n\nstd\n73.04k\n\n180.67k &lt;1%\n\n\nNegative\n---\n\n5%\n21.44k\n\nkurt\n-1.56\n\n180.17k &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n838.00\n\nskew\n-0.23\n\n180.18k &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ идентификаторе объеката все значения уникальны.\n\n\n\nShow the code\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 3: Статистика и гистограмма столбца \"seats\"\n\n\n\n\n\nValues\n15.37k (100%)\n\nMax\n1.70k\n\nAvg\n59.55\n\n0.00 (11%)\n\n\nMissing\n---\n\n95%\n214.00\n\nMode\n0.00\n\n40.00 (5%)\n\n\nDistinct\n315.00 (2%)\n\n75%\n80.00\n\nRange\n1.70k\n\n20.00 (5%)\n\n\nDuplicates\n15.05k (98%)\n\n50%\n40.00\n\niQR\n68.00\n\n30.00 (4%)\n\n\nZeros\n1.62k (11%)\n\n25%\n12.00\n\nstd\n74.74\n\n10.00 (4%)\n\n\nNegative\n---\n\n5%\n0.00\n\nkurt\n51.66\n\n50.00 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.00\n\nskew\n4.44\n\n60.00 (3%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nВ столбце с количеством посадочных мест присутствует 11% нулей.\nКоличество посадочных мест варьируется от 0 до 1 700 мест.\nВ основном количество посадочных мест находится в диапазоне от 12 до 80 мест.\nМаксимальное количество посадочных мест 1700 это вполне может быть правдой. Это могут быть конференс залы или кафе в крупных торговых центрах.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 4: Статистика и топ-10 значений столбца \"name\"\n\n\n\n\n\nValues\n15.37k (100%)\n\nСтоловая (2%)\n\n\nMissing\n---\n\nКафе (2%)\n\n\nDistinct\n10.39k (68%)\n\nШаурма (2%)\n\n\nDuplicated origin\n4.97k (32%)\n\nKFC (1%)\n\n\nDupl (modify - origin)\n550.00 (8%)\n\nШоколадница &lt;1%\n\n\nEmpty\n---\n\nМакдоналдс &lt;1%\n\n\nRAM (Mb)\n2\n\nБургер Кинг &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ столбце с названием объектов только 68 униальных значений. Значит присутствует достаточно объектов с одинаковыми названиями.\nБольше всего объектов с названием “Столовая”, “Шаурма”, “Кафе”.\nПрисутствуют неявные дубликаты в названиях объектов.\n\nЧтобы исключить неявных дубликатов, переведем наименования в нижний регистр и удалить символы ‘,’, ‘«’, ‘»’, ‘(’, ‘)’, ‘“’, ’ ’.\n\n\nShow the code\ndf.name.nunique()\n\n\n10393\n\n\n\n\nShow the code\ndf.name = pagri_data_tools.normalize_string_series(df.name, symbols = ['.', ',', '«', '»', '(', ')', '\"', \"'\", \"`\"])\ndf.name.nunique()\n\n\n9813\n\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 5: Статистика и топ-10 значений столбца \"is_chain\"\n\n\n\n\n\nValues\n15.37k (100%)\n\nнет (81%)\n\n\nMissing\n---\n\nда (19%)\n\n\nDistinct\n2.00 (&lt;1%)\n\n\n\n\nDuplicated origin\n15.36k (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\n81% объектов не является сетевыми ресторанами.\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 6: Статистика и топ-10 значений столбца \"type\"\n\n\n\n\n\nValues\n15.37k (100%)\n\nкафе (40%)\n\n\nMissing\n---\n\nстоловая (17%)\n\n\nDistinct\n9.00 (&lt;1%)\n\nресторан (15%)\n\n\nDuplicated origin\n15.36k (99.9%)\n\nпредприятие быстрого обслуживания (13%)\n\n\nDupl (modify - origin)\n---\n\nбар (6%)\n\n\nEmpty\n---\n\nбуфет (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nкафетерий (3%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nБольше всего объектов имеют тип кафе (40%).\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 7: Статистика и топ-10 значений столбца \"address\"\n\n\n\n\n\nValues\n15.37k (100%)\n\nгород Москва, Ходынский бульвар, дом 4 &lt;1%\n\n\nMissing\n---\n\nгород Москва, Пресненская набережная, дом 2 &lt;1%\n\n\nDistinct\n9.11k (59%)\n\nгород Москва, проспект Мира, дом 211, корпус 2 &lt;1%\n\n\nDuplicated origin\n6.26k (41%)\n\nгород Москва, Кировоградская улица, дом 13А &lt;1%\n\n\nDupl (modify - origin)\n---\n\nгород Москва, площадь Киевского Вокзала, дом 2 &lt;1%\n\n\nEmpty\n---\n\nгород Москва, улица Земляной Вал, дом 33 &lt;1%\n\n\nRAM (Mb)\n4\n\nгород Москва, Мытная улица, дом 74 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ колонке с адресом 59% уникальных значений. Следовательно много объектов имеют одинаковый адрес.\nБольше всего объектов расположено по адресу город Москва, Ходынский бульвар, дом 4.\n\n\n\nИзучение дубликатов\nПосмотрим на дубли во всем датафрейме\n\n\nShow the code\npagri_data_tools.check_duplicated(df)\n\n\n'no duplicates'\n\n\nВ датафрейме полных строк дубликатов нет.\nПосмотрим сколько у нас дублей в каждой колонке\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df)\n\n\n\n\n\n\n\nTable 8: Duplicates\n\n\n\n\n\nname\n4973 (32.36%)\n\n\nis_chain\n15364 (99.99%)\n\n\ntype\n15357 (99.94%)\n\n\naddress\n6258 (40.73%)\n\n\nseats\n15051 (97.95%)\n\n\n\n\n\n\n\n\nУ нас нет столбцов, в которых значения долны быть уникльыми. Поэтом все впорядке.\n\n\nShow the code\npagri_data_tools.check_duplicated(df[['name', 'address']])\n\n\nDuplicated is 207 (1.3%) rows\n\n\n\n\n\n\n\n\n\n\ncount\n\n\nname\naddress\n\n\n\n\n\nкомбинат питания мгту им.н.э.баумана\nгород москва, 2-я бауманская улица, дом 5, строение 1\n11\n\n\nкафе\nгород москва, 1-я останкинская улица, дом 55\n9\n\n\nлиор\nгород москва, шарикоподшипниковская улица, дом 13, строение 3\n9\n\n\nlift\nгород москва, багратионовский проезд, дом 7, корпус 1\n7\n\n\nкафе\nгород москва, тихорецкий бульвар, владение 1, строение 1\n6\n\n\n...\n...\n\n\nгород москва, 19-й километр московской кольцевой автодороги, владение 20, строение 1\n2\n\n\nчайхона №1\nгород москва, кутузовский проспект, дом 57\n2\n\n\nкафе при азс\nгород москва, огородный проезд, дом 7, строение 1\n2\n\n\nкаменев василий владимирович\nгород москва, улица сущёвский вал, дом 5, строение 12\n2\n\n\npho viet\nгород москва, шереметьевская улица, дом 20\n2\n\n\n\n\n153 rows × 1 columns\n\n\n\nНаблюдения:\n\nЕсть объекты с одним названием по одному адресу. Это нормально. В одном торговом центре или университете может быть несколько объектов с одним названием.\n\nПосмотрим есть ли дубликаты одновременно в названии объекта, типе, адресе и количестве посадочных мест.\n\n\nShow the code\npagri_data_tools.check_duplicated(df[['name', 'type', 'address', 'is_chain', 'seats']])\n\n\nDuplicated is 82 (0.5%) rows\n\n\n\n\n\n\n\n\n\n\n\n\n\ncount\n\n\nname\ntype\naddress\nis_chain\nseats\n\n\n\n\n\nлиор\nкафе\nгород москва, шарикоподшипниковская улица, дом 13, строение 3\nнет\n50\n7\n\n\nзакусочная\nзакусочная\nгород москва, люблинская улица, дом 112, строение 3\nнет\n0\n5\n\n\nпавильон «кукуруза»\nзакусочная\nгород москва, люблинская улица, дом 153\nнет\n2\n5\n\n\nбистро\nпредприятие быстрого обслуживания\nгород москва, проспект вернадского, дом 86б, строение 1\nнет\n1\n4\n\n\nбуфет\nбуфет\nгород москва, пятницкое шоссе, дом 18\nнет\n0\n4\n\n\n...\n...\n...\n...\n...\n...\n\n\nкафетерий\nкафетерий\nгород москва, ореховый бульвар, дом 14, корпус 3, строение 4\nнет\n3\n2\n\n\nшаурма\nпредприятие быстрого обслуживания\nгород москва, свободный проспект, дом 33а\nнет\n1\n2\n\n\nбуфет\nбуфет\nгород москва, зоологическая улица, дом 26а\nнет\n20\n2\n\n\nмакдоналдс\nпредприятие быстрого обслуживания\nгород москва, кировоградская улица, дом 13а\nда\n0\n2\n\n\nстоловая «комбинат питания космос»\nстоловая\nгород москва, новозаводская улица, дом 12/11\nнет\n15\n2\n\n\n\n\n65 rows × 1 columns\n\n\n\nНаблюдения:\n\nЕсть 82 объекта (0.5%), у которых одновременно совпадают название объекта, тип, адрес и количество посадочных мест. Отличаются они только id. По адресу “Шарикоподшипниковская улица, дом 13, строение 3” таких объектов целых 7.\n\nПосмотрим на дубли в комбинации колонок.\n\n\nShow the code\ngen = pagri_data_tools.check_duplicated_combinations_gen(df[['name', 'type', 'address', 'is_chain', 'seats']], n=3)\n\n\n\n\nShow the code\nnext(gen)\n\n\nGroup by 2 columns\n\n\n\n\n\n\n\nTable 9: Duplicates in both columns\n\n\n\n\n\n \nname\ntype\naddress\nis_chain\nseats\n\n\n\n\nname\n\n\n\n\n\n\n\ntype\n4 694 (30.5%)\n\n\n\n\n\n\naddress\n225 (1.5%)\n4 030 (26.2%)\n\n\n\n\n\nis_chain\n5 408 (35.2%)\n15 348 (99.9%)\n5 402 (35.2%)\n\n\n\n\nseats\n2 511 (16.3%)\n14 345 (93.4%)\n1 742 (11.3%)\n14 879 (96.8%)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nnext(gen)\n\n\nGroup by 3 columns\n\n\n\n\n\n\n\nTable 10: Duplicates in 3 columns\n\n\n\n\n\nname | type | address\n184\n\n\nname | type | is_chain\n4668\n\n\nname | type | seats\n2040\n\n\nname | address | is_chain\n224\n\n\nname | address | seats\n93\n\n\nname | is_chain | seats\n2501\n\n\ntype | address | is_chain\n3392\n\n\ntype | address | seats\n1268\n\n\ntype | is_chain | seats\n14002\n\n\naddress | is_chain | seats\n1431\n\n\n\n\n\n\n\n\n\n\nИзучение пропусков\nПосмотрим на пропуски в каждом столбце\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df)\n\n\nThere are no missing values\n\n\nОтлично нет столбцов с пропущенными значениями.\n\n\nИзучение выбросов\nИзучим объекты с аномально большим количеством посадочных мест.\nБудем считать, что количество мест больше 500 является аномальным.\n\n\nShow the code\nseries_outliers = pd.Series([df[df.seats &gt; 500]], index=['seats'])\n\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_outliers, \"sample\", \"seats\", \"None\")\n\n\n\n\n\n\n\nTable 11: Sample in seats (0.16%)\n\n\n\n\n\n \nid\nname\nis_chain\ntype\naddress\nseats\n\n\n\n\n12723\n199696\nArena by Soho Family\nнет\nбар\nгород Москва, Кутузовский проспект, дом 36, строение 11\n1700\n\n\n8148\n80291\nБанкетный зал Шелк\nнет\nресторан\nгород Москва, Большой Саввинский переулок, дом 12, строение 10Г\n1500\n\n\n8345\n27750\nСТОЛОВАЯ-БУФЕТ\nнет\nстоловая\nгород Москва, улица Волхонка, дом 15\n1400\n\n\n9064\n19719\nКОМБИНАТ ПИТАНИЯ «УПРАВЛЕНИЕ АКАДЕМСЕРВИС»\nнет\nстоловая\nгород Москва, проспект Вернадского, дом 84, строение 1\n1288\n\n\n3686\n27026\nРУМ СЕРВИС\nнет\nресторан\nгород Москва, площадь Европы, дом 2\n1200\n\n\n4480\n27024\nРУМ СЕРВИС\nнет\nресторан\nгород Москва, Кутузовский проспект, дом 2/1, строение 1\n1200\n\n\n2313\n26560\nРесторан «АЛЬФА»\nнет\nресторан\nгород Москва, Измайловское шоссе, дом 71, корпус А\n1040\n\n\n9955\n171116\nEATALY\nнет\nресторан\nгород Москва, Киевская улица, дом 2\n920\n\n\n5649\n29232\nСТОЛОВАЯ МОСКОВСКИЙ ГУМАНИТАРНЫЙ УНИВЕРСИТЕТ\nнет\nстоловая\nгород Москва, улица Юности, дом 5, строение 1\n760\n\n\n13299\n200905\nWhite Hall\nнет\nресторан\nгород Москва, Ферганская улица, дом 8\n700\n\n\n\n\n\n\n\n\nНаблюдения: - Объекты с количеством посадочных мест больше 1000 являются реальными. Это не является ошибкой.\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_outliers, \"by_category\", \"seats\", \"type\")\n\n\n\n\n\n\n\nTable 12: Share in \"seats\" by category \"type\"\n\n\n\n\n\ntype\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбар\n856\n1\n0.1%\n4.2%\n5.6%\n-1.4%\n\n\nбуфет\n585\n0\n0.0%\n0.0%\n3.8%\n-3.8%\n\n\nзакусочная\n360\n0\n0.0%\n0.0%\n2.3%\n-2.3%\n\n\nкафе\n6099\n1\n0.0%\n4.2%\n39.7%\n-35.5%\n\n\nкафетерий\n398\n0\n0.0%\n0.0%\n2.6%\n-2.6%\n\n\nмагазин (отдел кулинарии)\n273\n0\n0.0%\n0.0%\n1.8%\n-1.8%\n\n\nпредприятие быстрого обслуживания\n1923\n1\n0.1%\n4.2%\n12.5%\n-8.3%\n\n\nресторан\n2285\n14\n0.6%\n58.3%\n14.9%\n43.5%\n\n\nстоловая\n2587\n7\n0.3%\n29.2%\n16.8%\n12.3%\n\n\n\n\n\n\n\n\nНаблюдения: - Объекты с количеством посадочных мест свыше 500 в основном являются столовыми и ресторанами.\nПосмотрим на выбросы используя квантили.\nВыбросами будем считать значения, которые выходят за пределы 5 и 95 квантилей.\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df)\n\n\n\n\n\n\n\nTable 13: Outliers\n\n\n\n\n\nid\n1538 (10.01%)\n\n\nseats\n768 (5.00%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ количестве посадочных мест 5% выбросов. Это может указывать на то, что данные достаточно чистые и не содержат аномалий.\n\n\n\nИзучение отрицательных значений\nИзучим отрицательные значения в каждом столбце.\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df)\n\n\nThere are no negative values\n\n\nОтрицательные значения отсутствуют.\n\n\nИзучение нулевых значений\nИзучим нулевые значения в каждом столбце.\n\n\nShow the code\nseries_zeros = pagri_data_tools.find_columns_with_zeros_values(df)\n\n\n\n\n\n\n\nTable 14: Zeros\n\n\n\n\n\nseats\n1621 (10.55%)\n\n\n\n\n\n\n\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_zeros, \"by_category\", \"seats\", \"type\")\n\n\n\n\n\n\n\nTable 15: Share in \"seats\" by category \"type\"\n\n\n\n\n\ntype\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nбар\n856\n28\n3.3%\n1.7%\n5.6%\n-3.8%\n\n\nбуфет\n585\n68\n11.6%\n4.2%\n3.8%\n0.4%\n\n\nзакусочная\n360\n189\n52.5%\n11.7%\n2.3%\n9.3%\n\n\nкафе\n6099\n310\n5.1%\n19.1%\n39.7%\n-20.6%\n\n\nкафетерий\n398\n113\n28.4%\n7.0%\n2.6%\n4.4%\n\n\nмагазин (отдел кулинарии)\n273\n145\n53.1%\n8.9%\n1.8%\n7.2%\n\n\nпредприятие быстрого обслуживания\n1923\n704\n36.6%\n43.4%\n12.5%\n30.9%\n\n\nресторан\n2285\n45\n2.0%\n2.8%\n14.9%\n-12.1%\n\n\nстоловая\n2587\n19\n0.7%\n1.2%\n16.8%\n-15.7%\n\n\n\n\n\n\n\n\nНаблюдения: - Больше всего доля нулей в количестве посадочных мест в объектах с типом “предприятие быстрого обслуживания”. Меньше всего - в кафе. Скорее всего объекты с нулем количеством посадочных мест являются точками бистро, в которых действительно нет посадочных мест.\n\n\n\nПромежуточный вывод\n\nВ идентификаторе объеката все значения уникальны.\nВ столбце с количеством посадочных мест присутствует 11% нулей.\nКоличество посадочных мест варьируется от 0 до 1 700 мест.\nВ основном количество посадочных мест находится в диапазоне от 12 до 80 мест.\nМаксимальное количество посадочных мест 1700 это вполне может быть правдой. Это могут быть конференс залы или кафе в крупных торговых центрах.\nВ столбце с названием объектов только 68 униальных значений. Значит присутствует достаточно объектов с одинаковыми названиями.\nБольше всего объектов с названием “Столовая”, “Шаурма”, “Кафе”.\nПрисутствуют названия, которые отличаются регистром букв.\n81% объектов не является сетевыми ресторанами.\nБольше всего объектов имеют тип кафе (40%).\nВ колонке с адресом 59% уникальных значений. Следовательно много объектов имеют одинаковый адрес.\nБольше всего объектов расположено по адресу город Москва, Ходынский бульвар, дом 4.\nЕсть объекты с одним названием по одному адресу. Это нормально. В одном торговом центре или университете может быть несколько объектов с одним названием.\nЕсть 82 объекта (0.5%), у которых одновременно совпадают название объекта, тип, адрес и количество посадочных мест. Отличаются они только id. По адресу “Шарикоподшипниковская улица, дом 13, строение 3” таких объектов целых 7.\nОбъекты с количеством посадочных мест больше 1000 являются реальными. Это не является ошибкой.\nОбъекты с количеством посадочных мест свыше 500 в основном являются столовыми и ресторанами.\nВ количестве посадочных мест 5% выбросов. Это может указывать на то, что данные достаточно чистые и не содержат аномалий.\nБольше всего доля нулей в количестве посадочных мест в объектах с типом “предприятие быстрого обслуживания”. Меньше всего - в кафе."
  },
  {
    "objectID": "projects/research_of_food_service_industry/research_of_food_service_industry.html#предобработка-данных",
    "href": "projects/research_of_food_service_industry/research_of_food_service_industry.html#предобработка-данных",
    "title": "Исследование рынка заведений общественного питания",
    "section": "Предобработка данных",
    "text": "Предобработка данных\n\nОбработка выбросов\nПосмотрим где у нас нулевые значения.\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\nseats\n1621 (10.5%)\n\n\n\n\n\n\n\nМы выяснили, что больше всего объектов с нулем посадочных мест это бистро. И так как у многих точек бистро действительно нет посадочных мест, то скорее всего это не является ошибкой, поэтому обрабатывать их не будем.\n\n\nПриведение данных к удобной форме\n\n\nShow the code\ndf.head(1)\n\n\n\n\n\n\n\n\n\nid\nname\nis_chain\ntype\naddress\nseats\n\n\n\n\n0\n151635\nсметана\nнет\nкафе\nгород Москва, улица Егора Абакумова, дом 9\n48\n\n\n\n\n\n\n\nЗаменим названия сетевых объектов на одинаковые, чтобы было удобнее анализировать.\n\n\nShow the code\ndf[df.name.str.contains(\"kfc\")]['name'].unique()\n\n\narray(['kfc', 'кафе kfc', 'ростикс kfc', 'закусочная kfc',\n       'kfc волгоградский', 'пбо kfc покрышкина',\n       'предприятие быстрого обслуживания kfc', 'ресторан kfc', 'пбо kfc',\n       'fridays kfc', 'ресторан быстрого питания kfc'], dtype=object)\n\n\n\n\nShow the code\ndf.name.apply(lambda x: 'kfs' if x.contains(\"kfc\") else x)\n\n\n\n\nShow the code\ndf[df.is_chain=='да'].name.nunique()\n\n\n550\n\n\n\n\nShow the code\nrestaurant_mapping = {\n    'kfc': 'kfc'\n    , 'кфс': 'kfc'\n    , 'кфц': 'kfc'\n    , 'макдоналдс': 'mcdonalds'\n    , 'старбакс': 'starbucks'\n    , 'starbucks': 'starbucks'\n    , 'шоколадница': 'шоколадница'\n    , 'бургер кинг': 'burger king'\n    , 'burger king': 'burger king'\n    , 'burgerking': 'burger king'\n    , 'domino-s': 'dominos pizza'\n    , 'dominos pizza': 'dominos pizza'\n    , 'домино\\'с': 'dominos pizza'\n    , 'domino s': 'dominos pizza'\n    , 'доминос': 'dominos pizza'\n    , 'крошка картошка': 'крошка картошка'\n    , 'крошка-картошка': 'крошка картошка'\n    , 'теремок': 'теремок'\n    , 'милти': 'милти'\n    , 'суши wok': 'суши wok'\n    , 'папа джонс': 'папа джонс'\n    , 'papa johns': 'папа джонс'\n    , 'додо пицца': 'додо пицца'\n    , 'додо-пицца': 'додо пицца'\n    , 'якитория': 'якитория'\n    , 'тануки': 'тануки'\n    , 'subway': 'subway'\n    , 'сабвай': 'subway'\n}\ndef standardize_restaurant_name(name):\n    for key in restaurant_mapping:\n        if key in name.lower():  # Приводим к нижнему регистру для сравнения\n            return restaurant_mapping[key]\n    return name  # Если не найдено, возвращаем оригинальное название\ndf[df.is_chain=='да'].name.apply(standardize_restaurant_name).nunique()\n\n\n479\n\n\n\n\nПромежуточный вывод\n\nНе стали обрабатывать нулевые значения в количестве посадочных мест, так как это вполне могут быть точки бистро без посадочных мест."
  },
  {
    "objectID": "projects/research_of_food_service_industry/research_of_food_service_industry.html#обогащение-данных-и-создание-новых-переменных",
    "href": "projects/research_of_food_service_industry/research_of_food_service_industry.html#обогащение-данных-и-создание-новых-переменных",
    "title": "Исследование рынка заведений общественного питания",
    "section": "Обогащение данных и создание новых переменных",
    "text": "Обогащение данных и создание новых переменных\n\nКатегоризация данных\nСначала пишем все имеющиеся колонки ИИ и просим написать какие новые категориальный переменные можно создать.\nЕсли таблиц много, то идем по одной таблице, закончили с одной идем к следующей.\nДалее в конце можно спросить какие новые категориальные переменные можно создать, учитывая все таблицы.\nКатегориальная переменная, это то за счет чего мы можем разделить наши данные и установить, что есть влияние этого фактора на целевую переменную.\nВАЖНО\nкатегориальные переменные могут быть не только в отдельном столбце.\nКатегориальная переменная может быть разбита на разные столбцы.\nНапример, оценка пользователей и оценка критиков могут быть в отдельных столбцах.\nНужно при предобработке это не забыть привести к категориальному типу, чтобы далее анализировать.\nСмотрим на имеющиеся столбцы в датафрейме и думаем, есть ли у нас категориальная переменная, которая разбита на несколько столбцов.\nКатегория может быть созадана - из нескольких столбцов, когда у нас числовая переменная разбита на несколкьо столбцов - при объединении нескольких таблиц, когда у нас есть несколько таблиц с одинаковыми столбцами - из числовых перменных можно сделать диапазоны возраста, продаж, цен, размера, объема и т.д. - из названий чего-либо можно сдлать категории по длинне названия, цвету вывески, количеству гласных. согласных, количеству позитивных, негативных слов и т.д.\nВАЖНО\nМожно создать категориальную переменную относится к топ 5-10 по какой-то числовой переменной или нет.\nТо есть у нас будет столбец где будет типа топ и не топ (подумать как лучше называть), столбец називаем топ n по такой-то числовой переменной.\nНапример, топ 5 жанров по количеству продаж.\nТогда у нас у каждой записи будет признак относиться к топу или нет, это нам даст возмонсоть на графиках смотреть вклад топ 5-10 в общую картину.\nТаким образом мы получим новый разрез топ 5-10\nВАЖНО\nкатегории можно делать из поведения пользователей и подобное\nУ нас есть активность пользователей и есть раздел куда он заходил, это категории.\nМожно сделать просто категории из имеющихся, это правильно.\nНо важно сделать категории типа - открывал пользователь страницу помощи или нет,\nоткрывал пользователь раздел профиль 5 и более раз, менее 5 и не открывал.\nТут можно придумать много таких категорий.\n\n\nShow the code\n\n# Добавим столбец с названием улиц\nplaces['street']=places['address'].str.split(',').str[1]\n\n# Добавим столбец с режимом работы\nplaces['is_24_7']=places['hours'].str.contains('ежедневно','круглосуточно')\n\nplaces['is_24_7'].mean()\n\nplaces['hours'].str.contains('ежедневно, круглосуточно').mean()\n\n# Для удобства заменим числовые значения в столбце chain на понятную запись\nplaces['chain']=places['chain'].replace({1:'Сетевое', 0:'Несетевое'})\n\n# Для удобства построения графиков дадим сокращенное название округов\nplaces['district_short']=places['district'].replace({'Северный административный округ':'САО', \\\n                                               \"Северо-Восточный административный округ\":\"СВАО\",\\\n                                              \"Северо-Западный административный округ\":\"СЗАО\",\\\n                                              \"Западный административный округ\":\"ЗАО\",\\\n                                              \"Центральный административный округ\":\"ЦАО\",\\\n                                              \"Восточный административный округ\":\"ВАО\",\\\n                                              \"Юго-Восточный административный округ\":\"ЮВАО\",\\\n                                              \"Южный административный округ\":\"ЮАО\",\\\n                                              \"Юго-Западный административный округ\":\"ЮЗАО\"})\n\n\n\nВАЖНО\nКатегория может появится после анализа выбросов, нулевых значений и прочих аномалий.\nНапример, у нас датасет с данными о покупка и мы определили, что часть пользователей совершает слишком большие покупки, мы можем разбить на группы исходя их этого.\nВАЖНО\nследим, чтобы не осталось пропусков в категориальной переменной\nвсе пропуски нужно заменить на что-то типа - не указано\n\n\nShow the code\ndf.columns.isna()sum()\n\n\nЕсли есть пропуски, то добавляем\n\n\nShow the code\n.fillna(\"не указано\").astype('category')\n\n\nВАЖНО\nЕсли у нас много пропусков (болше 20 процентов)\nТо можно создать категориальуню переменную (с пропусками / без пропусков) для каждой колонки с пропусками.\nИ далее на графиках долей и числовых можно будет анализировать.\nПлюс можно будет создать срезы.\nБонусом мы получаем возможность изучать данные в разрезе пропусков в числовой переменной, так как na мы заполним на что-то типа - не указано\nЕсли мы при загрузке данных не смогли изменить типы данных из-за пропусков, то теперь меняем типы данных.\nУ нас могут быть категориальные переменные не только для изучения данных на графиках под другим углом,\nно категориальные переменные можно использовать для изучения среза данных.\nТаким образом думаем какие срезы в датафрейме дадут нам важную информацию. И создаем категориальную переменную для них.\nНапример, у нас в данных есть растояние до центра, мы можем создать новую категориальную переменную и поместить туда катгории растояния до центра.\nИ затем изучить отдельные срезы в данных, например квартиры только в центре.\nДумаем какие категориальные переменные сделать для срезов.\nМогут быть операции разность, сумма отношение с другими переменными, которые дадут новую переменную.\nСмотрим на имеющиеся переменные и думаем какие из этих операций можно применить.\n\nВажно, когда создали новые переменные, особенно числовые, то нужно их изучить через my_info (взять df только с нужными столбцами)\nПосмотреть на гистограммы и стат параметры.\n\n\nЕсли у нас есть категориальная переменная, в которйо больше 3 значений, то нужно подумать а не можем ли мы из нее сделать\nновую категориальную переменную с 2-3 значениями, но тут важно, чтобы это несло смысл. Тут нам может помочь ИИ. И сообразительнсоть. Часто сразу не заментны возможные категории, котоыре несут смысл.\nТут исходим из смысла, наша задача созадть перменную, которая добавит нашему исследованию новый смысл, даст как бы новый разрез, и это улучшит\nкачество наших выводов.\nНапример, у нас столбец семейный стату, и там 6-7 статусов, мы можем собрать их в 2 семейный статус и не семейный статус.\nТут отлично помогает ИИ. Пишешь ему название переменной, униальные значения в ней,\nи просишь придумать возможную новую категориальнуюд переменную из 2-3 значений.\n\n\nВообще при категоризации ИИ очень хорошо помогает, он может дать идеи возможных категорий на оснвое имеющихся значений.\nПоэтому можно все столбцы прогонять через ИИ и смотреть что он предлагает, если есть то , что даст новый разрез нашим данным, то созадем категорийю.\n\n\nВажно, когда мы создаем категории, то всегда смотреть value_counts.\nИ делаем так, чтобы в каждой группе было достаточно элементов, хотя бы больше 30, а лучше больше 100.\nИначе выводы будут некоректные.\nВ идеале, чтобы количество элементов в каждой группе было от 1000. Лучше изменить диапазон и забрать часть данных от другой категории.\n\n\nВажно, когда создаем категориальную переменную, то даем ей тип category\nЧтобы она появилась на графиках (так как идет фильтрация на числовые и категориальные)\nи чтобы места меньше занимала\n\n\nПридумываем какие колонки можно дополнительно сделать из имеющихся.\nНапример у нас есть колонка длительность звонков, и 0 это пропущенный звонок,\nмы можем сделать колонку is_missed, в которой будет true или false\n\n\nСтараемся сделать категориальную колонку с да нет для всех возможных колонок.\nНапример, у нас колонка количество детей и есть 0, 1, 2, 3, 4, 5 мы созадем колнку\nесть дети или нет. 2 значения\nЭто очень полезно, так как мы можем посмотреть это на графиках и проверить гипотезы\nстат тестами.\n\n\nСмотрим на колонки и думаем можно ли из нее сделать колонку с 2 значениями,\nнапример есть и нет что-то\n\n\nОчень важно, когда мы создаем новые колонки, в которых используем несколько дургих, то нужно проверить распределение этой новой переменной, особенно выбросы.\nНапример, у нас начальная и конечная дата сессии и мы считаем длительность сессии. Вот тут нужно посмотреть какая минимальная длительность\nи какая максимальная. Ну и естественно проверить есть ли длительность 0 и меньше нуля.\nТаким образом мы можем найти инсайты уже после создания новых колонок, хотя в изначальных данных этих инсайдов не было видно.\n\n\nОбычная категоризация данных\n\n\nКатегоризация помогает избежать проблемы с разреженными данными, когда у нас есть слишком много групп с небольшим количеством элементов.\nЭто может привести к некорректным выводам и ошибкам в анализе. Категоризация нужна, чтобы образовать группы, в которых достаточно значений для использования статистических методов.\nИ вообще, если в группе 1-10 элементов, например у нас возраст пользователей и 5 человек с возрастом 22, 3 человека с возрастом 23 и так далее.\nМы не можем разбивать по таким группам, так как их размер небльшой и выводы будут некорректные, поэтому нам нужно собрать их в группы,\nчтобы у нас были группы с достаточным размером.\n\n\nЕсли у нас категориальная переменная имеет много значений, то мы не можем номрально с ней работать. &gt; Так как мы не можем построить графики по ним, так как их много и они не числовые. Не можем сравнить их все.\n&gt; Поэтому нам нужно сократить категории.\nНужно посмотреть на данные и подумать можем ли мы разделить их по сегментам рынка или по другим категориям, которые нам помогут.\nМы можем категоризировать на основе и числовых и категориальных столбцов. То есть мы можем из категориальной переменной сделать &gt; другую категориальную, уменьшив или увеличив разбиение.\nдобавление категорий обогощает данные, при чем категории могут формироваться не из одной колонки, а из серии, то есть чтобы попасть &gt; в определенную категорию значения столбцов должно быть такое то, а не только один столбец определяет категорию.\nкатегории могут быть да нет, то есть состоять из двух значений, например, у нас есть данные о рекламе и столбец где она показвалась, &gt; и у нас много много разных устройств. Мы можем разбить на да нет, то есть показвалась реклама по телеку или нет\n\n\nМы можем разбить данные на категории двумя способами\n\n\nразбивать на равные части &gt; подходит, когда &gt; &gt; - диапазон значений является равномерным и имеет линейную структуру &gt; - мы понимаем на какие интервалы хотим разбить данные &gt; - мы хотим разделить диапазон значений на равные части для удобства анализа.\nразбить на основе квантилей &gt; подходит, если &gt; &gt; - диапазон значений имеет неравномерную структуру &gt; - мы не можем понять какие интервалы выбрать &gt; - хотим выделить группы с конкретными характеристиками (например, группы с низким доходом, средним доходом и высоким доходом)\n\n\nВыбираем нужные способ и используем\ncreate_category_column\n\n\nЧтобы посмотреть распределение по квантилям используем pagri_data_tools.quantiles_columns()\n\nНе забываем новые каеториальные переменные делать .astype('category')\n\n\nShow the code\n.astype('category')\n\n\nВАЖНО\nсоздали новую переменную, сразу же изучили ее использу info_gen\nзадаем вопросы и пишем важные наблюдения\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_internet, column='mb_used_cat', mode='column')\ngen.next()\n\n\n\n\nShow the code\ndf['floor_cat'] = df.apply(lambda x: 'первый' if x['floor'] == 1 else 'последний' if x['floor'] == x['floors_total'] else 'другой', axis=1)\n\n\n\n\nShow the code\ndf_visits['is_new_user'] = df_visits['is_new_user'].map({True: 'да', False: 'нет'})\n\n\nПосмотрим на квантили в столбце.\n\n\nShow the code\npagri_data_tools.quantiles_columns(df.sales, list(np.arange(0, 1, 0.05)))\n\n\nМожно так разделить на группы, если других идей нет\n- Дешевые: Заказы ниже Q1.\n- Средние: Заказы между Q1 и Q3.\n- Дорогие: Заказы выше Q3.\n\n\nShow the code\npagri_data_tools.create_category_column()\n\n\n\nСделаем следующие группы\n\n\nдо 30 лет\nот 30 до 40 лет\nот 40 до 50 лет\nот 50 до 60 лет\nстарше 60 лет\n\n\n\nShow the code\nlabels = ['до 30', '30-40', '40-50', '50-60', 'старше 60']\nbins = [-np.inf, 30, 40, 50, 60, np.inf]\n\n\nЕсли нужно пропуски заменить, то добавляем параметр fillnavalue='не укаазано'\n\n\nShow the code\ndf['age_cat'] = pagri_data_tools.create_category_column(df.age, labels=labels, bins=bins)\ndf['age_cat'].value_counts(dropna=False)\n\n\n30-40        5704\n40-50        5241\n50-60        4520\nдо 30        3804\nстарше 60    2132\nName: age_cat, dtype: int64\n\n\nЕсли у нас в таблице числовая переменная разбита на несколько столбцов, то лучше ее объеденить в одни столлбец.\nОбъеденим продажи в одну числовую переменную и создадим категориальную переменную region\n\n\nShow the code\n# Применяем melt для преобразования данных\nvalue_vars = ['na_sales', 'eu_sales', 'jp_sales', 'other_sales']\nmelted_df = pd.melt(df, id_vars=df.columns.difference(value_vars), \n                    value_vars=value_vars,\n                    var_name='region', value_name='sales')\n# Словарь для замены значений\nregion_mapping = {\n    'na_sales': 'Северная Америка',\n    'eu_sales': 'Европа',\n    'jp_sales': 'Япония',\n    'other_sales': 'Другие'\n}\n\n# Замена значений в столбце region\nmelted_df['region'] = melted_df['region'].replace(region_mapping).astype('category')\nmelted_df\n\n\n\n\n\n\n\n\n\ncritic_score\ngenre\nname\nplatform\nrating\nuser_score\nyear_of_release\nregion\nsales\n\n\n\n\n0\n76.00\nSports\nWii Sports\nWii\nE\n80.00\n2006\nСеверная Америка\n41.36\n\n\n1\nNaN\nPlatform\nSuper Mario Bros.\nNES\nне указано\nNaN\n1985\nСеверная Америка\n29.08\n\n\n2\n82.00\nRacing\nMario Kart Wii\nWii\nE\n83.00\n2008\nСеверная Америка\n15.68\n\n\n3\n80.00\nSports\nWii Sports Resort\nWii\nE\n80.00\n2009\nСеверная Америка\n15.61\n\n\n4\nNaN\nRole-Playing\nPokemon Red/Pokemon Blue\nGB\nне указано\nNaN\n1996\nСеверная Америка\n11.27\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n65763\nNaN\nSports\nLMA Manager 2007\nX360\nне указано\nNaN\n2006\nДругие\n0.00\n\n\n65764\nNaN\nAdventure\nHaitaka no Psychedelica\nPSV\nне указано\nNaN\n2016\nДругие\n0.00\n\n\n65765\nNaN\nPlatform\nSpirits & Spells\nGBA\nне указано\nNaN\n2003\nДругие\n0.00\n\n\n65766\nNaN\nSimulation\nWinning Post 8 2016\nPSV\nне указано\nNaN\n2016\nДругие\n0.00\n\n\n65767\n83.00\nSports\nMadden NFL 13\nPS3\nE\n55.00\n2012\nДругие\n0.23\n\n\n\n\n65768 rows × 9 columns\n\n\n\nСоздаем новые переменные из времени\nВАЖНО\nесли у нас год уже есть в таблице и он числовой,\nто переводим его в категориальный тип\nНо важно сначала перевести в строку, а потом в категориальный тип, иначе plotly будет воспринимать как continuous\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_internet, column='mb_used_cat', mode='column')\ngen.next()\n\n\n\n\nShow the code\nweekday_dict = {\n    'Monday': 'Понедельник',\n    'Tuesday': 'Вторник',\n    'Wednesday': 'Среда',\n    'Thursday': 'Четверг',\n    'Friday': 'Пятница',\n    'Saturday': 'Суббота',\n    'Sunday': 'Воскресенье'\n}\nmonth_dict = {\n    1: 'Январь',\n    2: 'Февраль',\n    3: 'Март',\n    4: 'Апрель',\n    5: 'Май',\n    6: 'Июнь',\n    7: 'Июль',\n    8: 'Август',\n    9: 'Сентябрь',\n    10: 'Октябрь',\n    11: 'Ноябрь',\n    12: 'Декабрь'\n}\n\n\n\n\nShow the code\ndf['publication_weekday'] = df['first_day_exposition'].dt.day_name().map(weekday_dict).astype('category')\ndf['publication_month'] = df['first_day_exposition'].dt.month.map(month_dict).astype('category')\ndf['publication_year'] = df['first_day_exposition'].dt.year.astype(str).astype('category')\n# Задаем порядок для weekdays\nweekday_order = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']\ndf['publication_weekday'] = df['publication_weekday'].cat.reorder_categories(weekday_order, ordered=True)\n\n# Задаем порядок для months\nmonth_order = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']\ndf['publication_month'] = df['publication_month'].cat.reorder_categories(month_order, ordered=True)\n\n\n\n\nShow the code\ndf.columns.isna()sum()\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_internet, column='mb_used_cat', mode='column')\ngen.next()\n\n\nДля даты заказа создадим новую категориальную переменную в формате месяц год.\n\n\nShow the code\n# Словарь для замены месяцев\nmonths_translation = {\n    'Jan': 'Янв',\n    'Feb': 'Фев',\n    'Mar': 'Мар',\n    'Apr': 'Апр',\n    'May': 'Май',\n    'Jun': 'Июн',\n    'Jul': 'Июл',\n    'Aug': 'Авг',\n    'Sep': 'Сен',\n    'Oct': 'Окт',\n    'Nov': 'Ноя',\n    'Dec': 'Дек'\n}\n# Получаем отдельно месяц и год\nmonths = df['first_day_exposition'].dt.strftime('%b').astype('category').cat.reorder_categories(list(months_translation.keys()), ordered=True)\nyears = df['first_day_exposition'].dt.strftime('%y')\nmonths_years = pd.concat([months, years], axis=1)\nmonths_years.columns = ['month', 'year']\n# Создаем список уникальных (год, месяц) и сортируем\nunique_months = months_years.drop_duplicates().sort_values(by=['year', 'month'])\n\n# Создаем список для порядка\nmonth_year_order = []\n\n# Формируем month_year_order на основе уникальных (год, месяц)\nfor _, row in unique_months.iterrows():\n    year = row['year']\n    month = row['month']\n    month_year_order.append(f\"{months_translation[month]}'{str(year)[-2:]}\")\n\n# Заменяем месяцы и соединяем с годом\ndf['publication_month_year'] = months.astype(str).map(months_translation) + \"'\" + years\ndf['publication_month_year'] = df['publication_month_year'].astype('category')\ndf['publication_month_year'] = df['publication_month_year'].cat.reorder_categories(month_year_order, ordered=True)\ndf['publication_month_year']\n\n\n\n\nShow the code\ndf.columns.isna()sum()\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_internet, column='mb_used_cat', mode='column')\ngen.next()\n\n\nДля верменных переменных нужно делать не только отедльно месяц, год.\nНо и делать категориальную переменную обрезая время.\nТо есть мы созадем переменную\nЯнв’23\nНо нужно подумать, нужна ли нам будет именно временная переменная, или достаточно категории,\nесли будет нужна временная, то создаем обрезанную переменную datetime используя .dt.round()\nЕсли нужно перевести в категорильный упорядоченный тип\n\n\nShow the code\ncohort_lifetime_order = list(map(str, range(100)))[:df_cohort['cohort_lifetime'].nunique()]\ndf_cohort['cohort_lifetime'] = df_cohort['cohort_lifetime'].astype(str).astype('category').cat.reorder_categories(cohort_lifetime_order, ordered=True)\n\n\n\nКатегоризация с использованием лемматизации\n\n\nЕсли у нас есть столбец и мы хотим его лематизировать, то используем функцию\nlemmatize_column\n\n\nЧтобы создать лемы для словаря категоризации, можно посмотреть имеющиеся предложения и использовать\nm = Mystem()\nm.lemmatize('образованием')\n\n\n\nShow the code\nm = Mystem()\nm.lemmatize('образованием')\n\n\n\n\nShow the code\npagri_data_tools.lemmatize_column()\n\n\n\n\nShow the code\ncategorization_dict = {\n    'недвижимость': ['жилье', 'недвижимость']\n    , 'образование': ['образование']\n    , 'автомобиль': ['автомобиль', 'машина']\n    , 'свадьба': ['свадьба'] \n}\n\n\n\n\nShow the code\ndf['purpose_new'] = pagri_data_tools.categorize_column_by_lemmatize(df.purpose, categorization_dict, use_cache=True)\ndf['purpose_new'].value_counts(dropna=False)\n\n\nнедвижимость    10779\nавтомобиль       4288\nобразование      3997\nсвадьба          2337\nName: purpose_new, dtype: int64\n\n\n\nЕсли нужно, уддалим старую колонку\n\n\n\nShow the code\ndf = df.drop('purpose', axis=1).rename(columns={'purpose_new': 'purpose'})\ndf.head(1)\n\n\n\n\n\n\n\n\n\nchildren\ndob_years\neducation\nfamily_status\ngender\nincome_type\ndebt\ntotal_income\npurpose\ndob_cat\ntotal_income_cat\n\n\n\n\n0\n1\n42\nвысшее\nженат / замужем\nF\nсотрудник\n0\n253876\nНедвижимость\n40-50\n200-500 тыс\n\n\n\n\n\n\n\n\nС помощью лематизации мы можем сократить количество категорий.\n\n\nНапример мы можем выделить группы:\n\n\nоперации с автомобилем (ключевое слово - автомобиль)\nоперации с недвижимостью (ключевые слова: жилье, недвижимость)\nпроведение свадьбы (ключевое слово: свадьба)\nполучение образования (ключевое слово: образование)\n\n\nИспользуем функцию\ncategorize_column_by_lemmatize\n\n\n\nShow the code\npagri_data_tools.categorize_column_by_lemmatize()\n\n\nИз времени также можно сделать категориальный переменные, например, создать переменную для времени заправки, если больше 1 минуты, то долгая заправка, иначе короткая и так далее.\nВАЖНО подумать какие переменные мы можем создать не только категориальные, но и числовые и временные.\nНапример, обрезание времени, чтобы получить дату по часам и прочее,\n\nЕсли мы хотим преобразовать категории в числа, то мы можем использовать\n\n\nlable encoding &gt; Заменяем быквы числами. Хорошо работает, когда у нас порядковые категориальные переменные.\n&gt; Не забываем про порядок, если у нас алфавитный порядок наших категорий соотвествует числовому, то ок,\n&gt; если нет, то нам нужно самим определить порядок чисел, чтобы они соответствовали категориям в нужном порядке.\none hot encoding &gt; Если у нас категориальная переменная не упорядочиваемая, то лучше использовать one hot encoding, чтобы разница между числами не вносила шум,\n&gt; так как черный и белый и красный цвет закодированные 1, 2, 3 вносят смысл количества, но они не имеют этого свойства.\ntarget encoding &gt; замена категориальной переменной на каую-то статистику по одной из категорий внутри этой переменной.\n&gt; Например у нас категориальная переменная это наличие задержки. Значение задержан / незадержан. Мы кодируем их как 0 и 1. Далее мы берем и считаем по каждой группе (для задержан и для незадержан)\n&gt; статистику, например, среднее и получаем столбец, где вместо каждой буквы будет ее среднее.\n&gt; Тут важно делать регуляризацию. Так как маленькие группы могут иметь сильно зашумленные статистики, так как если у нас\n&gt; группа из 5 значений, то среди них может быть легко экстремальное одно и оно сбивает статистику, поэтому добавляем штраф всем статистикам.\n&gt; Регуляризация это что-то похожее на сглаживание.\n&gt; Как это делается &gt; &gt; - берем считаем среднее по таргету (целевой переменной, то есть той, по которой мы счтаем статистику) всей таблице (то есть не делим на категории) &gt; - Далее используем следующую формулу для сглаженного значения среднего по конкретной группе:\n&gt; (среднее по группе _ количество элементов в группе + среднее по таргету без учета категорий _ размер регуляризирующей группы) / (количество элементов в категории + размер регуляризирующей группы)\n&gt; Количество элементов в регуляризационнной группе выбирает эмперически. То есть это количество элементов, которым мы сглаживаем.\n&gt; Смысл в том, что мы берем сколько-то элементов с занчением для всех категорий и сглаживаем им наши отдельные категории. &gt; - Размер регуляризирующей группы обычно выбирают с помощью grid search, то есть берут цикл для размера этой группы и считают результат модели для каждого размера,\n&gt; и потом выбирают тот размер, для которого результат лучше. &gt; &gt; target_encoding_linear\n&gt; target_encoding_bayes\n\n\n\nShow the code\npagri_data_tools.target_encoding_linear()\npagri_data_tools.target_encoding_bayes()\n\n\n\nИспользование кластеризации для категоризации\n\n\nМожно понизить размерность до 3\nи построить 3 д график\nПо этому графику посмотреть есть ли у нас возможные кластеры\nЕсли есть, то выделить их\nПричем для понижения размерности можно брать все столбцы, а можно только часть.\n\n\n\nОбъединение данных\nСначала все одниаковый по смыслу поля в разных таблицах приводим к одному названию.\nВажно\nВсе новые таблицы начинаем с df_ чтобы потом не нужно было искать навзание\nвводишь df_ и далее будет список переменных таблиц\nВАЖНО\nПеревести id всех сущностей в числа и чтобы уникальность сохранилась.\nЭто нужно для анализа на графиках, чтобы можно было для них аггрегировать по count и nunique\nЕсли будет много новых таблиц, то созадем подразделы\n- без аггрегации - с аггрегацией\nНе забываем про ИИ\nПишем ему задание типа такого -\nпишем какие таблицы у нас есть, название таблицы, поля таблицы с описанием полей.\nи спрашиваем какие новые таблицы можно создать, чтобы проанализировать данные.\nКакие аггрегации сделать и так далее.\nВот пример\nу меня есть таблица users с полями - user_id - уникальный идентификатор пользователя - first_name - имя пользователя далее пишем все имеющиеся поля есть таблица calls с полями - id - уникальный номер звонка - call_date - дата звонка и так далее описываем все таблицы и поля\nПишем цель анализа, можно скопировать из описания и цели И далее пишем что нужно - это pandas dataframes какие таблицы я могу из них сделать для будущего анализа, чтобы подробно все проанализировать, что с чем объеденить, какую аггрегацию выбрать, расскажи подробно и как можно больше\nВот структурированный подход к выбору таблиц для объединения при анализе данных:\n\nНачните с бизнес-задачи:\n\n\nЧетко определите, какой анализ вам нужно провести\nКакие метрики вы хотите получить\nКакие гипотезы проверить\n\n\nСоздайте карту данных:\n\n\nВыпишите все доступные датафреймы\nДля каждого датафрейма укажите ключевые поля\nОтметьте связи между таблицами (общие ключи)\n\n\nВыберите основную таблицу:\n\n\nОпределите центральную сущность анализа (например, пользователь или транзакция)\nВыберите таблицу с этой сущностью как базовую\n\n\nОпределите необходимые признаки:\n\n\nСоставьте список всех нужных переменных для анализа\nОтметьте, в каких таблицах они находятся\nИсключите таблицы с избыточной информацией\n\n\nСпланируйте последовательность объединения:\n\n\nНачните с основной таблицы\nДобавляйте только те таблицы, которые содержат нужные признаки\nУчитывайте гранулярность данных (уровень агрегации)\n\n\nСоздание таблиц без аггрегации\nОЧЕНЬ ВАЖНО когда мы соединяем несколько таблиц в одну, то нужно добавить метку откуда мы берем данные, если это не один источник просто в разных таблицах.\nПо сути разные таблицы это категориальная переменная, и общая метрика которую мы соберем из разных фреймов, должна быть изучена в разрезе этой категории тоже.\nИ также важно посмотреть структуру метрики по этой новой категории.\nНужно внимательно посмотреть на таблицы и подумать есть ли у нас такая ситуация.\nПри чем это может быть не очевидно.\nНапример, у нас информация о звонках, сообщениях и так далее.\nДаже тут можно создать категориальную переменную (сообщение, звонок и так далее).\nВсе что можно сделать категориальной переменной, нужно обязательно сделать.\nЧаще всего у нас будет таблица фактов и таблица измерений.\nИ наша задача добавить категории к таблице фактов для дальнейшего анализа.\nДумаем какие метрики нам нужно обхеденить в один датафрейм, чтобы потом проанализировать.\nОбычно мы берем датафрейм где есть числовая переменная, которую мы хотим проанализировать и к этому\nдатафрейму добавляем категориальные переменные из других датафреймов.\nТакже можно добавлять числовые перменные для анализа корреляции.\nВсе новые созданные таблицы записываем в temp.ipynb\nСначала думаем какие таблицы соеденить для анализа без аггрегации.\nЧтобы проанализировать не аггрегированные данные.\nТут нужно изучить размеры таблицы и какие зависимости нам было бы полезно изучить.\nДалее посчитать сколько будет строк в случии объединения без аггрегации и если памяти хватает, то делаем.\nНапример, у нас есть таблицы тарифом, сообщений, пользователей, звонков.\nОбъеденить в один фрейм мы их не можем, но мы можем создать отдельные фреймы для сообщений, звонков и трафика без аггрегации.\nИ потом уже отдельно их изучить в dash app.\nСоздадим дополнительные таблицы для анализа\nСоздадим отдельные таблицы для анализа выручки для звонков, сообщений и интернета.\n\n\nShow the code\nprint('len of df_calls = ', len(df_calls))\nprint('len of df_messages = ', len(df_messages))\nprint('len of df_internet = ', len(df_internet))\n\n\nlen of df_calls =  202607\nlen of df_messages =  123036\nlen of df_internet =  149396\n\n\n\n\nShow the code\ncalls_users = df_calls.merge(df_users, on='user_id', how='left')\nmessages_users = df_messages.merge(df_users, on='user_id', how='left')\ninternet_users = df_internet.merge(df_users, on='user_id', how='left')\n\n\n\n\nShow the code\nprint('len of calls_users = ', len(calls_users))\nprint('len of messages_users = ', len(messages_users))\nprint('len of internet_users = ', len(internet_users))\n\n\nlen of calls_users =  202607\nlen of messages_users =  123036\nlen of internet_users =  149396\n\n\nДобавим информацию о тарифах\n\n\nShow the code\ncalls_full = calls_users.merge(df_tariffs, left_on='tariff', right_on='tariff_name', how='left')\nmessages_full = messages_users.merge(df_tariffs, left_on='tariff', right_on='tariff_name', how='left')\ninternet_full = internet_users.merge(df_tariffs, left_on='tariff', right_on='tariff_name', how='left')\n\n\n\n\nShow the code\nprint('len of calls_full = ', len(calls_full))\nprint('len of messages_full = ', len(messages_full))\nprint('len of internet_full = ', len(internet_full))\n\n\nlen of calls_full =  202607\nlen of messages_full =  123036\nlen of internet_full =  149396\n\n\nКоличество строк не изменилось, все хорошо.\nВот так нужно подумать и создать все нужные таблицы без аггрегации.\n\n\nСоздание таблиц с аггрегацией\nОЧЕНЬ ВАЖНО когда мы соединяем несколько таблиц в одну, то нужно добавить метку откуда мы берем данные, если это не один источник просто в разных таблицах.\nПо сути разные таблицы это категориальная переменная, и общая метрика которую мы соберем из разных фреймов, должна быть изучена в разрезе этой категории тоже.\nИ также важно посмотреть структуру метрики по этой новой категории.\nВАЖНО\nвниметльно выбираем функции для аггрегации.\nДумаем какая аггрегирующая метрика нам нужна. Возможно нужно несколько, то используем несколько .agg(mb_used=('mb_used', 'sum'), mb_used_avg=('mb_used', 'mean'))\nДумаем нужно ли считать\nmean, median, count, nunique, sum\nНужно хорошо подумать какие аггрегационные метрики нам будут нужны для анализа на графиках.\nТак как без аггрегации мы в dash app сами выбираем аггрегацию, а тут аггрегация уже сделана, поэтому нам нужно выбрать аггрегацию заранее.\nВАЖНО\nХорошо думаем по каким каетгориям нужно саггрегировать данные, чтобы сравнить категории.\nНапример, у нас заказы и расходы на макретинг. Мы хотим не просто сравнить источники по выручке или расходам, а хотим посмотреть выручку минус расходы.\nДля этого нужно каждого пользователя привязать к источнку (например по первому входу с какого источника он пришел)\nИ далее добавить в таблицу, где нет источнкика колонку для каждого пользователя с истончиком и аггрегировать данные и обхеденить по источнику Вот в таких ситуациях нужно аггрегировать по источнику, объеденять таблицы и рассчитывать метрки (выручка, прибыль и прочие)\nВАЖНО\nчтобы дальше при анашизе не было путаницы, аггрегированные метрики называем с префикосом аггрегации, например, avg_age, sum_revenue\nИ не забываем, что если мы рассчитали несколько аггрегирующих метрик в agg,\nто нужно все их изучить в info_gen\nВАЖНО\nЕсли мы можем сделать аггрегацию по нескольким столбцам (то есть группируем по нескольим столбцам),\nТо не забываем сделать аггрегацию для каждого столбца отдельно.\nТак как в dash app у нас будет автомтаически групироваться по категории и браться, например, среднее занчение.\nИ если исходный датафрейм у нас был сгруппирован, например, по месяцу и пользователям, то в итоге у нас будет среднее значение за месяц по пользователям.\nПоэтому нам нужно сделать отдельно аггрегацию по месяцу.\nНужно подумать как лучше создавать аггрегированные таблицы.\nСначала нужно определтиь какие уровни аггрегации нам нужны для анализа.\nНаприммер, средняя выручка за день по месяцам, нам нужно чтобы изначально в dash app шла таблица с аггрегацией по дням.\nИ так все таблицы. Поэтому очень важно правильно выбирать уровень аггрегации.\nДалее переходим к созаднию аггрегированных таблиц.\nСтруктура объединения с аггрегацией\n\nОпределение целей анализа\n\n\nФормулировка вопросов: Начните с четкого понимания, какие вопросы вы хотите ответить с помощью агрегации. Например, хотите ли вы узнать средний доход по регионам или общее количество продаж по месяцам?\nИдентификация ключевых метрик: Определите, какие метрики будут важны для вашего анализа (например, сумма, среднее, количество, максимум, минимум и т.д.).\n\n\nАнализ исходных данных\n\n\nИзучение структуры данных: Посмотрите на каждый из датафреймов, которые вы хотите объединить. Определите, какие переменные есть в каждом из них и какие из них могут быть использованы для агрегации.\nОпределение типов данных: Убедитесь, что типы данных в ваших переменных соответствуют тому, что вы хотите агрегировать (например, числовые данные для суммирования).\n\n\nОпределение уровня агрегации\n\n\nГруппировка по уровням: Решите, на каком уровне вы хотите агрегировать данные. Например, вы можете агрегировать данные по месяцам, кварталам или годам, в зависимости от ваших целей.\nМногоуровневая агрегация: Если необходимо, подумайте о многоуровневой агрегации, когда данные агрегируются сначала по одному критерию, а затем по другому (например, сначала по регионам, затем по категориям товаров).\nПримеры:\nПо времени (день/месяц/год)\nПо объекту (пользователь/продукт/регион)\nПо комбинации измерений\n\n\nКлассификация полей\n\n\nМетрики (что агрегируем)\nАтрибуты (характеристики объектов)\nГруппировочные поля (по ним агрегируем)\n\n\nВыбор агрегационных функций для каждого типа данных:\n\n\nЧисловые: sum, mean, max, min, count\nКатегориальные: mode, count, nunique\nВременные: first, last, max, min\n\nПомним, что аггрегировать можно не только по строкам,\nможно использовать pivot_table для аггрегации по столбцам.\nВажно не сделать таблицы аггрегации, которые у нас уже потенциально есть в неаггрегированном виде.\nТо есть мы создаем аггрегации только для тех ситуаций, когда у нас нет этого без аггрегации.\nТут важно определить по каким полям мы будем аггрегировать данные.\nИ выбрать таблицы, которые нам нужно объеденить, чтобы изучить зависимости их полей.\nТаблиц может быть много, так как если у нас данных много, то нам нужно будет аггрегировать их перед соединением.\nНужно подумать какие аггрегации нам нужны для анализа и для каждой сделать отдельный датафрейм и добавить нужные категориальные\nперменные из других датафреймов.\nТо есть если у нас данных сильно много, то мы думаем как аггрегировать числовую перменную и уже к аггрегированной таблице джойним другие с категориями.\nКогда у нас в двух таблицах разные названия столбцвов, то нужно стандартизировать названия, чтобы они совпадали.\nЕсли мы используем не inner соединение. Так как при внешенм соединение в итоговой таблице будут пропуски, где нет совпадений.\nИ если мы не приведем названия столбцов к одному виду, то у нас получиться, что в одном и другом столбце, по которому мы соединяли,\nбудут пропуски. И если нам далее нужно будет соединять с другой таблицей по этому полю, то мы не сможем это сделать.\nИ для расчетов также это портит все.\nПоэтому нужно всегда приводить названия столбцов к одному виду.\nЕсли мы не хотим менять название столбца в исходной таблице, то мы можем прям в merge переименовать таблицу\ndf_revenue_by_month = df_revenue_by_month.merge(df_tariffs.rename(columns={'tariff_name': 'tariff'}), on='tariff')\nВАЖНО\nЕсли мы можем создать таблицу без аггрегации, то не нужно создавать аггрегированные, так как мы можем в процессе изучения\nв dash app строить разные аггрегации и изучать в разрезах.\nАггрегация нужна, когда мы не можем объеденить таблицы из-за размера например, и тогда нам нужно уже думать до построения графиков\nкакие аггрегации сделать для объединнения таблиц.\nИ придется делать много разных таблиц, которые нам нужно изучить. Это минус аггрегации. Так как мы не можем автоматизироваать процесс.\nЕсли нам нужно для каждого пользователя найти источник, с которого он первый раз зашел, то делаем так\n\nПроверка соответствия:\nЕсли у нас в разных таблицах есть значения, которые дожны быть одинакоые,\nто нужно проверить, что значения в одном столбце соответствуют значениям в другом столбце.\n\n\n\nShow the code\ndf['column_name1'].equals(df['column_name2'])\n\n\n\nОбоготить данные можно следующими способами\n\n\nвзять поле нашей таблицы и найти дополнительные данные в интернете или ещё где-то и потом связать с нашей колонкой по этому полю &gt; Самое просто это дата, если у нас есть дата, то мы можем много разной доп информации внести в наши данные связывая по дате.\n&gt; Также, например, у нас есть какие-то коды чего-то, мы ищем информацию по этим кодам и находим табличку с доп инфой по этим кодам и можем обоготить ими\n&gt; нашу таблицу. Например, у нас города или страны, мы можем по ним также внести доп инфу из какого-то источника, которая нам поможет.\n&gt; Вообще любое поле нашей таблицы это потенцильная нить для обогощения. Главное понять с чем полезным мы можем соеденить\n&gt; через конкретное поле, чтобы получить больше полезной информации для анализа, по сути для детализации наших зависимостей или для поиска\n&gt; новых зависимостей и инсайтов в них.\n&gt; Процесс следующий - мы берем каждую колонку нашего дата сета и думаем, с чем через нее мы можем связать и если придумываем, то идешь ищем эту информацию и\n&gt; в итоге соединяем.\nМожно пойти от обратного. Сначал подумтаь какие данные нам могут помочь и поискать их в интернете например, а потом уже думать как их соеденить с нашими &gt; данными. Оба способа лучше делать одновременно.\n\n\nКаждый раз, когда мы работаем с дата сетом, мы должны понять что является сущностью этого дата сета.\nНапример событие, человек и прочее.\nДалее нам нужно поянть а можем ли мы его идентифицировать по текущим данным (не всегда есть уникальный ай ди).\nЕсли не можем, то нужно думта как обогатить данные, чтобы четко идентифицировать сущности\n\n\nЧто нужно обязательно првоерить после соединения\n\n\nесли мы соединяем по полю, которое уникально в обеих таблицах &gt; - количество строк в левом датафрейме равно количеству строк в итоговом &gt; - параметры каждого дата сета не изменились (если мы соединили правильно, то итоговые суммы по столбцам не должны измениться) &gt; - используем df.sum(numeric_only=True) для каждой таблицы до соединения и для общей таблицы и сравниваем значения &gt; - можно использвоать df.describe также до и после объединения и сравнивать параметры\nесли у нас в одной из колонок для соединения не уникальные значения (то есть для одной строки в левой таблице будет несколько в итоговй) &gt; - Сначала группируем таблицы, чтобы поле для соединения в обеих таблицах было уникальное &gt; и применяем предыдущий шаг с количеством строк в левой и итоговой и суммой значений в левой и итоговой одинаковой &gt; - Если нам нужно соеденить без группировки (но это редко может быть, поэтому нужно подумать точно ли не моежм сгруппировать)\n&gt; тогда нет выбора и остаются только следующие варианты\n&gt; - если в левой таблице уникальные записи в колонке, по которйо соединяем\n&gt; - тогда считаем сколько было записей в левой таблице в колонке для соединения и сравниваем с количеством уникальных записей в итоговой\n&gt; они должны совпадать, но тут важно в итоговой брать уникальные записи - есил и в левой и правой нет уникальных - тут считаем сколько уникальных в левой до и сколько уникальных в итоговой, должно совпадать\n\n\nЕсли у нас что-то не сходится после соединения таблиц, то нужно внимально изучить это.\nТут может быть инсайт (кто-то не правильно вносит информацию, какие-то значения неверные или кто-то что-то хотел спрятать, не указать и прчоее).\nКогда видим нестыковки после соединения таблиц, то должна загораться красная лампочка. Это потенциальный инсайт, баг, который мы можем найти и сообщить, чтобы его починили.\n\n\nпомним, что метод соединения inner стоит по умолчанию в merge\n\n\nВ колонках, по которым будем соеднить, проверяем, нет ли пропусков, пропуски нужно заменить нулями.\nИначе будет либо ошибка, либо пропуски сджойнятся с пропусками\n\n\nПроблема справочников\nПри объединение таблиц важно помнить про то, что в разных таблицах не только названия столбцов может быть разное,\nно и одно значение может быть записано по разному в разных таблицах, например, названия профессий, названия городов,\nимя в одной таблице на русском, а в другой на английском, номер телефона с черточкой или плюсом и без черточки или плюса.\nПоэтому не забываем привести все значения таблиц к нижнему регистру, чтобы не было проблем разными регистрами для одного слова\n\n\nПроблема временных зон\nВ одной таблице может быть выгрузка по местному времени, а в другом по московскому\n\n\nПроблема курсов валют\nРазыне системы могут брать курс за разные промежутки вермени, например, одна система берет курс в гугле (раз в час обновляется),\nа другая система берет курс в ЦБ (обновляется раз в сутки)\nИ поэтому итоговые резултаты могут не состыковаться, поэтому, когда видим курсы валют, то нужно убедиться. что они взяты из одного испточника\nи за один промежуток времени\n\n\nКогда мы работаем с данными, нам важно четко идентифицировать клиентов, событие или другую сущность, с которой мы работаем.\nИначе у нас будет шум, так как мы одного и того же клиента учтем более одного раза.\n\n\nКак можно обоготить данные, чтобы лучше идентифицировать сущности\n\n\nДобавить для клиента email, телефон, устройство, 4 цифры карты и другое, что может помочь его идентифицировать &gt; Это важно так как у клиента могут быть разные телефоны, устройства, карты, но все это вместе поможет его идентифицировать точнее\nДобавить для события локацию, погоду, связанные событие, праздники, что поможет нам идентифицировать событие\n\nВсе новые созданные переменные помещаем в temp.ipynb\n\n\n\nРасчет метрик\nОЧЕНЬ ВАЖНО\nобязательно создать метрику количество всех сущностей, которые есть в датафреймах.\nТак как в анализе категорий мы сравниваем количество в категориях.\nА нам также очень важно посмотреть количество не категоризированных сущностей.\nНужно подумать как лучше это сделать. В dash app есть функция cnt, главное не забыть ее использовать.\nНо это суммарное, нужно ещё среднее или медианное значение. Если количество применимо к ним. Например количество пользователей, количество заказов, количество товаров и т.д. И также важно смотреть суммарное и среднее / медианное значение. И важно назвать не как было например user_id, а назвать понятнее users_cnt или типа того, чтобы не запутаться на графиках.\nОчень важно давать четкое и понятное детализированное название переменным.\nЭто очень сильно помогает далее при анализе.\nОЧЕНЬ ВАЖНО когда мы соединяем несколько таблиц в одну, то нужно добавить метку откуда мы берем данные, если это не один источник просто в разных таблицах.\nПо сути разные таблицы это категориальная переменная, и общая метрика которую мы соберем из разных фреймов, должна быть изучена в разрезе этой категории тоже.\nИ также важно посмотреть структуру метрики по этой новой категории.\nВАЖНО\nСтроим временные графики не только по месяцам, важно построить и по дням.\nДля всех метрик желательно, чтобы посмотреть как метрика меняется со временем.\nТак как если мы построим только аггрегировав по месяцам, то можем потерять важные колебания и инсайты.\nТакже на графике временных изменений метрик, рисуем линию срднего (моды, медианы, что подходит больше всего) и подписываем значение.\nТак будет видно колебание вокруг средннего значения.\nЕсли у нас данных сильно много и по дням сильно много данных на графике, то просто берем за последний год, полгода или три месяца.\nВАЖНО\nизучаем отдельно каждую новую метрики через info_gen\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df_users, column='age_cat', mode='column')\ngen.next()\n\n\nВАЖНО\nПосле каждого объединения таблиц (merge or join) нужно проверить, есть ли NaN значения в результирующем датафрейме, чтобы убедиться, что данные корректно объединены.\n\n\nShow the code\ndf.isna().sum()\n\n\nВАЖНО\nКогда создали новую переменную, то записываем ее в temp.ipynb название переменной и описание\nЧтобы далее когда нужно будет добавлять в title_for_axis не нужно бьло искать\nСначала все одниаковый по смыслу поля в разных таблицах приводим к одному названию.\nЕсли метрик много, то можно создать подразделы для них.\nНиже примерные названия подразделов.\nНазвания метрик могут повторяться в разных разделах ниже.\nЭто нормально, так как многие разделы имеют общее.\nНужно выбрать разделы, которые лушче подходят для конкретнго проекта.\nЕсли метрик не много, то просто созадем их в одном разделе\nКаждую новую метрику можно просто выделить начало создания жирным шрифтом\nВАЖНО\nдля неаггригированных данных создаем новую категориальную переменную новый или нет пользователй (считаем для каждого пользователя его первый месяц и сравниваем с текущим месяцем)\nи также при аггрегации создаем вместе с mau считаем new_user_cnt\nсколько времени в среднем проходит с момента первого посещения сайта до совершения покупки.\nИспользуйте данные, чтобы рассчитать метрики отдельно за сентябрь, октябрь и ноябрь: 1. Количество сессий (визитов). 2. MAU. 3. DAU. 4. Revenue. 5. ARPU. 6. ARPPU. 7. Session / user. 8. Количество целевых действий (целевое действие — событие, за которое получен доход).\nДополнительно рассчитайте показатель LTV на пользователя за период три месяца: с сентября по ноябрь.\nДополнительно можно расчитать долю новых покупателей, долю новых пользователей за период\ncogs (cost of good sold) - стоимость оказания услуги или товара (себестоймость 1 продажи или услуги)\n1cogs - особенные затраты на 1 сделку (например, покупки по промокоду, тестовые периоды пользования услугой, мы при этом бесплатно оказываем всю услугу или часть)\ncogs и 1cogs не имеют отношения к маркетингу\nВАЖНО\nпри расчетах следующих метрик, нужно убедиться что поле в знаменателе не имеет нулей\nВАЖНО\nдля когортного анализа колиества чего-то лучше делать отношение с начальным, как в retention.\nТогда удобно сравнивать динамику.\nКакие ещё метрики стоит считать\nВАЖНО: почти все эти метрики расчитываются на определнном периоде, поэтому нужно это всегда уточнять - $ = $\n\n\\(\\text{CPA} = \\frac{\\text{Marketing costs}}{\\text{Users acquisition}}\\)\n\\(APC = \\frac{Orders}{Buyers}\\)\n$ = $\n$ = $\n\\(\\text{ROMI} = \\frac{\\text{LTV}}{\\text{CARC}} * 100\\)\n$ = $\n$ = $\n\\(\\text{ARPU} = \\text{ARPPU} * \\frac{\\text{Buyers}}{\\text{users}} = \\text{ARPPU} * \\text{C1}\\)\n$ = {}*{} $\n\\(\\text{gross profit} = \\text{Users} * ((\\text{AOV} - \\text{cogs}) * \\text{APC} - \\text{1cogs}) * С1 - \\text{CPA}\\)\n\\(Margin(\\%) = \\frac{AOV - COGS}{AOV}\\)\n\\(Margin(\\%) = \\frac{Revenue - Costs}{Revenue} = \\frac{Margin}{Revenue}\\)\n\\(\\text{Costs} = {\\text{Marketing Costs}} + {\\text{COGS}}*{\\text{Orders}} + {\\text{1st COGS}}* {\\text{Buyers}} +  {\\text{fix COGS}}\\)\n\\(\\text{Monthly Sticky Factor} = \\frac{\\text{DAU}}{\\text{MAU}}\\)\n\\(\\text{Weekly Sticky Factor} = \\frac{\\text{DAU}}{\\text{WAU}}\\)\n\\(ASL = \\frac{\\text{total session time by period}}{\\text{number of sessions by period}}\\)\n\nСпособы расчета LTV\nВАЖНО: LTV расчитываются на определнном периоде, поэтому нужно это всегда уточнять и ARPU тогда должна быть расчитана на этот же период и\nlifetime долен иметь изменрение такого же периода (то есть если ARPU за месяц, то lifetime в месяцах)\nЛучше всего считать LTV через когорты, тогда нам не нужен lifetime\nРасчет через валовую прибыль - \\(\\text{LTV} = \\text{margin rate} * \\frac{\\text{Total revenue by period}}{\\text{total users by period}}\\) - \\(\\text{LTV} = \\text{margin rate} * \\text{ARPU} * \\text{Lifetime}\\) - $ = * $\nРасчет через выручку: - \\(\\text{LTV} = \\frac{\\text{Total revenue by period}}{\\text{total users by period}}\\) - \\(\\text{LTV} = \\text{ARPU} * \\text{Lifetime}\\) - \\(\\text{LTV} = \\text{AOV} * \\text{APC}\\)\nЧтобы рассчитать lifetime, нужно узнать Churn Rate за определенный период, который будет размерностью lifetime, то есть период должен быть таким же как в расчете ARPU\n$ = $\nLtv лучше считать по когортам\nИ когда составили матрицу когорт, то уже успреднить каждый месяц жизни и потом суммировать все месяца (именно так, вертикально усредняем, горизонтально суммируем)\nВ иделае считать не просто среднее значение по когортам, а средневзвешенное.\nТо есть если мы хотим посчитать среднее значение по всем когортам какого-то показателя, то мы не просто суммируем все значения в когортах и делим на\nчисло когорт, мы взвешиваем какждое значение когорты.\nЕсить 2 способа - умножать значение каждой когорты на ее размер и потом всю эту сумму разделить на общий размер всех когорт - сразу дать веса каждой когорты, то есть определить долю каждой когорты в общем.\nБерем размер когорты и делим на размер всех когорт. И потом умнажаем значения в когортах на коэффиценты.\nВАЖНО\nдля всех метрик, считаем среднее (или мода или медиана) за все время, изображаем на графике во времени и в идеале строим когортный анализ.\nТо есть у нас должно быть аггрегированное за все время значение, разбитое во времени и разбитое по когортам.\nПродуктовые метрики, которые полезно считать\n- MAU, DAU, WAU\nза весь период, динамика во времени по периодам - сколько раз за день пользователи в среднем заходят на сайт. график, отражающий изменения метрики во времени. Сколько сессий в день можно нести два смысла - сколько всего сессий в среднем проходит в день\nпокажет среднюю нагрузку в день на сервис - сколько в среднем совершает сессий 1 пользователь в день\nпокажет поведение посетителей на платформе (как часто они в днеь появляются)\n- сколько времени пользователи проводят на сайте. график во времени\n- продолжительность типичной пользовательской сессии за весь период. Чтобы выбрать подходящую среднюю меру, постройте график распределения. График во времени\n- рисуем гистограму или violine - вычисляем все средние меры и выбираем наиболее подходящую из них и приводим число\nЕсли среднее, мода и медина примерно равны, то можно брать среднее.\nНо если они разные, то нужно подумать какое лучше взять и обосновать выбор.\nКак всегда пишем причины, почему выбрали эту метрику.\nТут важно какой вопрос, если вопрос сколько обычно длиться одна сессия, и у нас ненормальное распределение длительностей сессий,\nто среднее значение будет некоректно, так как обычно в данном случае это будет мода, так как среднее будет\nсмещенно вправо, елси у нас экспоненциальное распределение времени.\nВот этот момент очень важен.\nТак как среднее введет в заблуждение.\nОбычно сессия длить как раз модальное значение.\n- Рассчитайте Retention Rate, применяя когортный анализ. Покажите изменения метрики во времени на графике. Найдите средний Retention Rate на второй месяц «жизни» когорт.\n- расчитываем retention rate, для этого - необходимо сделать когортный анализ по времени (по месяцам или неделям или дням и тп)\nЧтобы сделать когортный анализ, мы по одной оси откладываем даты, а по второй оси откладываем номер месяца,\nтаким образом мы получим для одной даты разные значения retention rate черзе 1, 2, 3, 4 и так далее месяцев\nБудет динамика по месяцам от стартового месяца.\nТакже дополнительно можно сделать тепловую карту времени и какой-нибудь каетгории (например возраст, пол польователей),\nretention rate можно считать просто относительно предыдущего месяца (тут уже не будет динамики по месяцам)\nОтвет среднее значение, тепловая карта выводы  \nДля описания тенденции, берем среднее значение за первый период (после нулевого) и смотрим как дальше относительно этого значения  \nидут изменения\nМетрики электронной коммерции - сколько времени в среднем проходит с момента первого посещения сайта до совершения покупки. график во времени\nНужно ответить на 2 вопроса - Через сколько времени после первого посещения пользователь совершил первую покупку?\n- В какую по счету сессию люди начинают покупать? Ответом будет среднее значение метрики (обоих вариантов) и выводы\nДополнительно можно попробовать построить бар чар и посмотреть эти значения в разрезе какой-то категории - AOV. Применяя когортный анализ или другой метод, рассчитайте среднее количество покупок на одного покупателя за определённый период, например за 6 месяцев. график во времени то есть сколько в среднем один покупатель делает покупок за период\nДля выбора периода нужно понять какой период нам лучше подходит, например если у нас данные за год,\nто период 6 месяцев будет нормально. - Суммируем все покупки за все периоды и делим на количество покупателей, которое было в нулевой период\nБерем суммирем все покупки за первые 6 месяцев всех пользователей и\nделим на общее число пользователей в начале периода (в первый месяца)\nВажно уточнение за какой период\nДля расчета показателей за период X месяцев можно использовать только данные\n- по когортам, которые взаимодействуют с компанией в течении X месяцев или более\n- за первые X месяцев жизни когорт\n- Рассчитайте средний чек, применяя группировку по времени совершения покупки. Когортный анализ не подходит — он может исказить расчёты. Постройте график, отражающий изменения метрики во времени. - Выясните, как меняется LTV на покупателя по когортам. Помните, что LTV — накопительная метрика. Рассчитайте средний LTV по когортам за 6 месяцев; в расчёт включайте когорты, «прожившие» не менее 6 месяцев. Маржинальность сервиса — 100%. Отразите изменения метрики во времени на графике; В финансовом менеджменте ответ на вопрос когда, также важен как ответ на вопрос сколько.\nТут важно указывать за какой промежуток, так как LTV считается за период и еденица периода должна идти в ответе.\nНапример, 3 y.e. это неверно\nправильно будет 3 y.e./год\nТут у нас еденица расчета ltv это год\nДля выбора периода нужно понять какой период нам лучше подходит, например если у нас данные за год,\nто период 6 месяцев будет нормально. И нельзя сравнивать ltv за разные периоды.\nЕсли мы выбрали год, то мы берем отсечку год от первого сессии и считаем сколько всего люди все потратили за это время\nи делим на количество людей в первый период.\nОчень частая ошибка считать сначала среднее по разным периодам (например среднее людей, которые прожили месяц, потом 2 и так далее),\nа потом усреднять эти значения.\nТут нужно суммировать все доходы от всех и разделить на количество пользователей на старте.\nКогорты это хорошо, но их нужно считать отдельно и не выводить из них общее среднее для всех.\nЧтобы проверить правильно ли мы рассчитали LTV можно сравнить его с\nLTV = среднее число покупок за выбранный период на одного пользователя * средний чек\nДо этого мы как раз посчитали среднее число покупок за период на одного пользователя и средний чек.\nМаркетинговые метрики\n- Посчитайте общую сумму расходов на маркетинг. Выясните, как траты распределены по источникам. Визуализируйте изменения метрик во времени; (значит нужно изучить как данные по расходам в всего изменяются во времени)\nОтвет среднее занчение, график, выводы (можно сравнить с общей прибылью и можно cac сравнить с ltv)\nграфик затрат на маркетинг не только по периодам, но ещё график затрат по источникам (бар плот и heatmap)\nи сделать вывод какие источники самые затратные, какие менее затратные\n- Рассчитайте средний CAC на одного покупателя для всего проекта и для каждого источника трафика. Отразите изменения метрик на графиках Важно, что метрика рассчитывается по покупателям, поэтому нам нужно использовать только тех, кто совершил хотя бы одну покупку\nСложность в том, что пользователи заходят с разных источников.\nВозможные решения этой проблемы\n- вычислить в какую именно сессию была совершена покупка и привязать ее именно к этому источнику (с которого эта сессия произошла) - привязать пользователя к тому источнику, с которого он чаще заходил\n- привязать пользователя к источнику, с которого он первый раз зашел на сервис\nэтот метод предпочтительнее\nОтвет - среднее значение метрики в целом и по разным источникам\nтаблица средних значений метрики по источника или/и график (бар плот) выводы - Рассчитайте ROMI по когортам в разрезе источников. Сравните окупаемость за одинаковые периоды жизни когорт. Обратите внимание, что клиенты, пришедшие из разных источников, могут иметь разный LTV. Постройте графики, отражающие изменения метрик во времени.\nОкупаемость считаем не от выручки, а от LTV (в целом и по источникам)\nНе забывать про сопостовляемый период (как с LTV) Ответ - среднее значение метрики, таблица средних значений метрики по источникам и графики (бар плот и heatmap)\nВАЖНО\nВсе метрики нужно посмотреть в разрезе разных параметров (которые есть, например, по платформам, полу пользователй и другим категориям) и сделать выводы,\nо том как параметр влияет на каждую метрику. Посмотреть как они меняются во времени.\nВАЖНО\nЕсли нам нужно выбрать главные метрики, которые нужно изучить, если у нас слишком много метрик или мало времени,\nто собираем все метрики в датафрейм и строим матрицу корреляций.\nИ берем те метрики, которые имеют наибольшую корреляцию с целевой метрикой, чаще всего выручкой (60-70+)\nВАЖНО\nВыводы должны не просто описывать графики, а содержать рекомендации.\nИ общий вывод должен включить все метрики, которые мы получили (числами).\nИ сделать вывод основываясь на всех полученных метриках, а не просто сказать, что вот этот канал лушче других.\nТо есть в какой канал рекламы лучше направить больше выручки, какая категория больше приносит выручки (можно сделать предоложения почему). И итоговый вывод это всегда рекомендация что можно сделать, чтобы улучшить сервис, основываясь на полученных данных.\nВАЖНО\nСначал смотрим общую картину. Общую выручку, общие расходы, рентабельность и другие бизнес метрики, а потом уже спускаемся к детальным метрикам.\nХорошая проверка, это когда мы сначала просто смотрим выручку и расходы и получаем вывод о окупаемости сервиса.\nА потом когда разобрали по метрикам, то результат должен сходиться, не должно быть так, что выручка - расходы говорит, что все плохо,\nа выводы по метрикам, что все хорошо.\nЧто можно дополнительно посчитать\n\nнакопительная сумма продаж\n\nостаток на балансе (количество пришедших едениц минус количество ушедших)\n\nнакопительный остаток\n\nсоздание категориальной переменной новый / постоянный клиент. Считаем для каждого клиента дату первой покупки, если текущая дата\nравна минимальной, то это новый. Также можно добавить, что если прошло больше N дней, то тоже новый.\n\n\nПроизводные метрики\nТут пишем разные производные метрики из имеющихся переменных.\nТут будут те метрики, которые нельзя отнести к остальным подразделам метрик.\n\n\nКлючевые показатели эффективности (KPI)\nФинансовые KPI\n\nВыручка — общий доход от продаж товаров или услуг.\nПрибыль — разница между доходами и расходами.\nРентабельность — отношение прибыли к выручке или к активам.\nКоэффициент ликвидности — способность компании покрыть свои краткосрочные обязательства.\nСебестоимость продаж — общие затраты на производство товаров или услуг.\n\nОперационные KPI\n\nПроизводительность — количество продукции, произведенной за единицу времени.\nУровень запасов — количество товаров на складе в данный момент времени.\nВремя выполнения заказа — время, необходимое для обработки и доставки заказа.\nКачество продукции — процент бракованных изделий или уровень удовлетворенности клиентов.\n\nМаркетинговые KPI\n\nСтоимость привлечения клиента (CAC) — затраты на привлечение одного клиента.\nКонверсия — процент пользователей, совершивших целевое действие (например, покупку).\nВозврат на инвестиции в маркетинг (ROMI) — прибыль, полученная от маркетинговых кампаний.\nТрафик на сайт — количество посетителей на сайте.\n\nKPI для HR\n\nТекучесть кадров — процент сотрудников, покинувших компанию за определенный период.\nУровень удовлетворенности сотрудников — измеряется через опросы и анкетирования.\nСреднее время найма — время, необходимое для заполнения вакансии.\nПроцент выполнения целей сотрудников — доля сотрудников, достигших своих KPI.\n\nKPI для обслуживания клиентов\n\nУровень удовлетворенности клиентов (CSAT) — измеряется через опросы после обслуживания.\nЧистый промоутерский балл (NPS) — измеряет лояльность клиентов.\nВремя ответа на запросы — среднее время, необходимое для ответа на запросы клиентов.\nПроцент решенных проблем с первого обращения — доля запросов, решенных при первом контакте.\n\n\n\nФинансовые метрики.\n\nВыручка\nПрибыль\nРентабельность\nОперационные расходы\nКэш-флоу\n\n\n\nМаркетинговые метрики\n\nСтоимость привлечения клиента (CAC)\nПожизненная ценность клиента (LTV)\nКонверсия\nROI (возврат на инвестиции)\nОхват и вовлеченность\n\n\n\nОперационные метрики.\n\nЭффективность процессов\nВремя выполнения заказа\nУровень запасов\nПроизводительность труда\nУровень дефектов\n\n\n\nМетрики пользовательского опыта.\n\nУдовлетворенность клиентов (CSAT)\nЧистый промоутерский балл (NPS)\nВремя на сайте\nПоказатель отказов\nКоличество активных пользователей\n\n\n\nМетрики продаж\n\nОбъем продаж\nСредний размер сделки\nТемп роста продаж\nДоля рынка\nУровень удержания клиентов\n\n\n\nМетрики производительности\n\nВремя выполнения задач\nЭффективность использования ресурсов\nУровень производительности сотрудников\nКачество продукции\nВремя простоя\n\n\n\nМетрики веб-аналитики\n\nПосещения\nУникальные посетители\nВремя на странице\nКонверсии по каналам\nИсточники трафика\n\n\n\nМетрики социальных медиа\n\nПодписчики\nВовлеченность (лайки, комментарии, репосты)\nОхват постов\nТемп роста подписчиков\nАнализ упоминаний бренда\n\n\n\nМетрики HR\n\nУровень текучести кадров\nУдовлетворенность сотрудников\nВремя на заполнение вакансий\nЭффективность обучения\nУровень вовлеченности сотрудников\n\n\n\nМетрики качества\n\nУровень удовлетворенности клиентов\nКоличество жалоб\nСоответствие стандартам\nВремя на исправление дефектов\nПоказатели качества продукции\n\n\n\nМетрики продукта\nФинансовые метрики:\n\nВыручка: общий доход от продаж.\nLTV (Lifetime Value): пожизненная ценность клиента, показывающая, сколько дохода приносит клиент за все время взаимодействия с продуктом.\nCAC (Customer Acquisition Cost): стоимость привлечения одного клиента.\nARPU (Average Revenue Per User): средний доход на пользователя.\n\nМетрики вовлеченности:\n\nDAU (Daily Active Users): количество уникальных пользователей, которые взаимодействуют с продуктом ежедневно.\nWAU (Weekly Active Users): количество уникальных пользователей за неделю.\nMAU (Monthly Active Users): количество уникальных пользователей за месяц.\nRetention Rate: процент пользователей, которые продолжают использовать продукт после определенного периода.\n\nМетрики конверсии:\n\nConversion Rate: процент пользователей, которые выполняют целевое действие (например, покупка, регистрация).\nChurn Rate: процент пользователей, которые перестают использовать продукт за определенный период.\n\nМетрики качества:\n\nNPS (Net Promoter Score): показатель лояльности клиентов, основанный на их готовности рекомендовать продукт.\nCSAT (Customer Satisfaction Score): уровень удовлетворенности клиентов продуктом. Метрики использования:\nAverage Session Duration: среднее время, проведенное пользователем в приложении или на сайте.\nBounce Rate: процент пользователей, которые покидают сайт после просмотра только одной страницы.\n\nМетрики роста:\n\nGMV (Gross Merchandise Value): общий объем продаж товаров через платформу.\nMonthly Recurring Revenue (MRR): ежемесячный повторяющийся доход, особенно важен для подписочных моделей.\n\n\n\nЭкономические метрики\n\nтут будут расчеты экономических метрик\n\n\nЕсли расчет метрик является важным аспектом вашего исследования и требует подробного описания, то создание отдельной главы будет лучшим решением.\nЕсли в этом разделе будет немного расчетов, то можно сделать расчеты метрик разделом предобработки данных\n\n\nРасчитываем разные метрики на основе имеющихся данных и тех, которыми смогли обогатить данные\n\n\nВажно следить за количеством недель в году, если мы создаем столбец месяца.\nПроверять чтобы у нас не появлялась неделя дополнительная, из за того, что мы захватили предыдущий год\n\nФинансовые метрики:\n\nВыручка: общий доход от продаж товаров или услуг.\nПрибыль: разница между выручкой и затратами, показывающая финансовый результат деятельности.\nРентабельность: отношение прибыли к выручке, выраженное в процентах, что позволяет оценить эффективность использования ресурсов.\n\nМетрики затрат:\n\nСебестоимость: общие затраты на производство и продажу товаров или услуг.\nОперационные расходы: затраты, связанные с основной деятельностью компании, включая зарплаты, аренду и коммунальные услуги.\n\nМетрики ликвидности:\n\nТекущая ликвидность: отношение текущих активов к текущим обязательствам, показывающее способность компании покрывать краткосрочные долги.\nКоэффициент быстрой ликвидности: более строгий показатель ликвидности, исключающий запасы из текущих активов.\n\nМетрики эффективности:\n\nROE (Return on Equity): доходность собственного капитала, показывающая, насколько эффективно компания использует средства акционеров.\nROA (Return on Assets): доходность активов, отражающая, как эффективно используются все активы компании для генерации прибыли.\n\nМетрики роста:\n\nТемпы роста выручки: процентное изменение выручки за определенный период, показывающее динамику бизнеса.\nТемпы роста прибыли: процентное изменение прибыли, что позволяет оценить финансовую устойчивость и развитие компании.\n\nМетрики инвестиционной привлекательности:\n\nP/E (Price to Earnings Ratio): соотношение цены акции к прибыли на акцию, используемое для оценки стоимости компании.\nEV/EBITDA (Enterprise Value to Earnings Before Interest, Taxes, Depreciation, and Amortization): показатель, который помогает оценить стоимость компании относительно ее операционной прибыли.\n\n\n\n\nПромежуточный вывод\nЧтобы собрать все наблюдения используем это\nнужно поставить _pagristart_ где начало и _pagriend_ где конец\nНе забываем удалить метки _pagristart_ и _pagriend_\n\n\nShow the code\nimport IPython\nnotebook_path = \"/\".join(\n        IPython.extract_module_locals()[1][\"__vsc_ipynb_file__\"].split(\"/\"))\npagri_data_tools.collect_observations(notebook_path, '/home/pagri/git_repos/pagri-projects/quarto/projects/prospective_tariff_for_telecom/temp_for_report.ipynb')"
  },
  {
    "objectID": "projects/research_of_food_service_industry/research_of_food_service_industry.html#визуализация-взаимосвязей-переменных",
    "href": "projects/research_of_food_service_industry/research_of_food_service_industry.html#визуализация-взаимосвязей-переменных",
    "title": "Исследование рынка заведений общественного питания",
    "section": "Визуализация взаимосвязей переменных",
    "text": "Визуализация взаимосвязей переменных\nСначала пишем ИИ все наши таблицы и названия переменных, которые были и которые создали.\nИ спрашиваем какие зависимости нужно изучить. Пишем напиши подробный список.\nДалее это вставляем в temp.ipynb и когда будем изучать то смотрим.\nИ в конце убедиться, что мы это все изучили. Если нет, то отедльно строим графики для этого.\nТакже в процессе сами думаем какие зависимости стоит изучить,\nкогда ИИ нам напишет список.\nВАЖНО\nКогда смотрим графики и не видим явных различий, то нельзя сразу пропускать график, нужно подумать важная ли это зависимость для нас.\nЕсли нам это важно и значения не прям идеально ровно расположены, то сохраняем график и сразу пишем в temp.ipynb для гипотезы вывод. Гипотезы формулируем для случаев, когда на графике нет явных различие числовой переменной по категории.\nЕсли различия явные, то нет смысла проводить тест.\nВАЖНО\nСезонность это не только, когда покупают шорты летом, также сезонностью может быть какие-то события, которые влияют на продажи.\nНапример, вышел фильм, где актер был в шляпе и прочее. Также сезоность может быть редкой, например, во время олимпиады увеличивается спрос на спорт товары.\nВажно, когда мы видим на графике аномалию, то подумать сезоность ли это. С чем это связано.\nАналитик не просто константирует факт, он ищет причину и выдвигает гипотезы.\nВАЖНО\nСмотрим и общую картину и по каждой нужно категории отедльно и делаем это за один проход, чтобы снова не проходить все данные.\nИ в такой последовательности мы можем сравнить общую картину и по каждой категории отдельно и сделать более точные выводы. В итоге будет график общей ситуации и далее графики по каждой категории.\nПричем нужно определить, что для нас важно, что нужно отобразить в любом случае, даже если нет явных зависимостей.\nА остальное сохраняем только то, что представляет интерес.\nСхема следующая - Нужно выбрать важные категории и числовые переменные, которые мы хотим изучить отдельно.\n- Когда изучаем графики, то изучаем всю картину целиком и затем изучаем отдельно каждую категорию.\nВАЖНО\nКогда мы анализируем данные и у нас в категории болше 10 значений, то по возможности нужно брать топ 5-10 значений на графиках.\nНас в основном интересует топ 5-10 значений, а не все значения.\nБывают исключения, но чаще всего нам интересно оп 5-10 значений.\nИ тогда анализировать графики будет проще. И выводы можно будет сделать точнее.\nВАЖНО\nЕсли у нас было несколько таблиц и мы создали общую из нескольких, то изучать нужно общую.\nИли как минимуму общую тоже, так как будет ошибкой, изучить только исходые таблицы.\nВАЖНО\nНе далать выводы только по абсолютным значениям, если они зависят от других значений.\nНапример, у нас 2 отдела продавали машины, один отдел продал 100 машин, другой 1000 машин.\nКазалось бы второй отдел справился лучше. Но если мы учтем, что у первого отдела было 500 машин, а у второго 100 000, то первый отдел продал больше машин в долевом выражении.\n\nСравнительный анализ распределений числовых переменных по категориям\nБерем каждую числовую переменную и строим накладывающиеся гистограммы для всех категорий.\nИ так повторяем для всех числовых переменных.\nВАЖНО\nСтроим накладывющиеся гистограммы или боксплты / violin для всех числовых переменных.\nНужно изучить все числовые переменные и сравнить их распределения и сделать выводы какие лучше и прочее.\nВАЖНО\nсмотрим на выбросы\nМы могли при изучении отдельных столбцов не заметить их, если заметили, то возвращаемся в изучение и предобработку и изучаем их дополнительно\nВАЖНО\nкатегориальные переменные могут быть не только в отдельном столбце.\nКатегориальная переменная может быть разбита на разные столбцы.\nНапример, оценка пользователей и оценка критиков могут быть в отдельных столбцах.\nНужно при предобработке это не забыть привести к категориальному типу, чтобы далее анализировать.\nВАЖНО\nЕсли создали категориальную переменную есть пропуск или нет, то тут по ней тоже смотрим накладывающиеся гистограммы\nВАЖНО\nналоженные гистограммы нужно сделать не только для категориальных переменных.\nУ нас могут быть 2 числовые переменные, которые мы решили не соединятьь через melt\nНо они имеют похожую природу. Для таких случаев тоже нужно сделать гистограммы.\nВАЖНО\nКогда посторили боксплоты - сравниваем медианы, квартили, делаем выводы - сравниваем количество выбросво - сравниваем размахи внутри квартилей - сравниваем iqr - смотрим пересекаются ли irq у разных категорий, если не пересекаются, то это говорит о существенном отличии.\nСормируем словарь для подписей осей и названий графиков.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column ['Именительный падеж', 'для кого / чего']\n    avg_score = ['Средняя оценка', 'средней оценки']\n    # categorical column ['Именительный падеж', 'для кого / чего']\n    # Распределение долей по городу и тарифу с нормализацией по городу\n    , genre = ['Жанр', 'жанра']\n)\n\n\nСтроим накладывающиеся гистограммы для нужных числовых переменных в рарзрезе нужных категорий\nв histograms_stacked есть mode со значениямиstep и normal\nЕсли у нас категория имеет мало значений, то можно normal\nЕсли у нас категория имеет много значений, то step\nЕсли у нас числовая переменная разбита на несколько столбцов, то сначала мелтим ее\n\n\nShow the code\n# Применяем melt для преобразования данных\nvalue_vars = ['critic_score', 'user_score']\nmelted_df = pd.melt(df, # id_vars=df.columns.difference(value_vars), \n                    value_vars=value_vars,\n                    var_name='score_type', value_name='score')\n# Словарь для замены значений\nregion_mapping = {\n    'critic_score': 'Оценка критиков',\n    'user_score': 'Оценка пользователей',\n}\n# Замена значений в столбце region\nmelted_df['score_type'] = melted_df['score_type'].replace(region_mapping).astype('category')\n\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , cat_var = 'genre'\n    , num_var = 'avg_score'\n    , top_n=3\n    , lower_quantile=0\n    , upper_quantile=1\n    , bins=20\n    , line_width=3\n    , opacity = 0.6\n)\npagri_data_tools.histograms_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\nСтроим накладывающиеся боксплоты для нужных числовых переменных в рарзрезе нужных категорий\n\n\nShow the code\nconfig = dict(\n    df = df\n    , cat_var = 'genre'\n    , num_var = 'avg_score'\n    , top_n='all'\n)\npagri_data_tools.boxplots_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\nСтроим накладывающиеся violin для нужных числовых переменных в рарзрезе нужных категорий\n\n\nShow the code\nconfig = dict(\n    df = df\n    , cat_var = 'genre'\n    , num_var = 'avg_score'\n    , top_n='all'\n)\npagri_data_tools.violins_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n\n\nИсследование корреляционных связей\nСледим за правильным порядком переменных полученных из времени\nЧтобы подготовить title_for_axis, пишем ии так\nзапомни - total_images = [‘Число фотографий’, ‘числа фотографий’, 0], - тут первый элемент списка это общая форма и с большой буквы, второй элемент это форма первого элемента при ответе на вопрос Чего и третий элеент списка это род элемента (0 - средний род, 1 - мужской род, 2 женский род) понятно?\nи далее даем список нужных названий колонок в таком виде\nДля корреляций достаточно просто указать название без рода и склонения\nСормируем словарь для подписей осей и названий графиков.\n\n\nShow the code\n\ntitles_for_axis= dict(\n        total_images = 'Число фотографий',\n        last_price = 'Цена',\n        total_area = 'Общая площадь',\n        rooms = 'Число комнат',\n        ceiling_height = 'Высота потолков',\n        floors_total = 'Всего этажей',\n        living_area = 'Жилая площадь',\n        floor = 'Этаж'\n)\n\n\nВАЖНО\nпроверить, что все категориальные переменные по прежнему имеют категориальный тип, чтобы при анализе они не поетрялись\nВАЖНО\nИзучаем корреляцию на всем периоде данных и на отдельных периодах (например последние N лет, месяцев, дней)\nТакже нужно посмотреть корреляцию в определенные периоды, для этого разбить нарпимер, на кварталы, сезоны или по другим категориям.\nИ посмотреть корреляции в каждом срезе.\n\n\nShow the code\ndf.dtypes\n\n\n\n\nShow the code\nfor key, df in dict(\n            df_users = df_users\n            , df_calls = df_calls\n            , df_messages = df_messages\n            , df_internet = df_internet\n            , df_tariffs = df_tariffs\n            , df_calls_full = df_calls_full\n            , df_messages_full = df_messages_full\n            , df_internet_full = df_internet_full\n            , df_by_userid_month = df_by_userid_month\n            , df_arpu = df_arpu).items():\n    print(key)\n    display(df.dtypes)\n\n\n\nТоп n значений одного столбца по значениям в другом Сделать функцию, чтобы в столбцах, где бльше 20 уникльных значений посмотреть топ n значений по другой колонке.\nНапример, топ 10 покупателей по сумме покупок и прочее.\nИдея в том, что если в столбце до 20 уникальных значений, то мы проанализируем комбинации с другими стобцами на графиках.\nА вот если у нас столбец не числовой и в нем больше 20 уникальных значений, то на графике мы не сможем понять топ n.\n\n\nИзучаем топ n значений в категориальных столбцах датафрейма, где значений больше порогового, по значению в столбце value_column.\nТут можно делать разные топы, использовать разные функции.\nЗадача изучить то, что мы не сможем изучить на графиках из-за болшого количества занчений в категориальной переменной,\nпоэтому мы берем топ n значений.\n\n\n\nShow the code\ngen = pagri_data_tools.top_n_values_gen()\nnext(gen)\n\n\n\nЧтобы сравнить метрики между собой мы можем - использовать корреляционный анализ (Пирсена, Спирмена, Кенделла)\n\n\nheatmap_corr(df)\n\n( r = 1 ): Полная положительная линейная зависимость.\n( 0.7 &lt; r &lt; 1 ): Сильная положительная линейная зависимость.\n( 0.3 &lt; r ): Умеренная положительная линейная зависимость.\nЕсли числовых переменных не много и они входят на один график, то просто строим график\nВАЖНО\nПосмотреть корреляцию в каждой категории категориальной переменной.\nТо есть задача взять категориальную переменную и посмотреть корреляцию для каждой категории отедльно.\nЭто важно, так как во всех категориях суммарно может затеряться зависимости.\nНе нужно все их помещать в отчет, наша задача найти важные существенные зависимости и их уже пометсить в отчет.\nНо чтобы их найти, нужно смотреть не только на картину в целом, но изучить корреляции в каждой категории.\nПосмотрим на коэффициенты корреляции между числовыми переменными.\n\n\nShow the code\npagri_data_tools.heatmap_corr(df, titles_for_axis=titles_for_axis)\n\n\nЛучше лишние ячейки убирать, если есть возможность\n\n\nShow the code\npagri_data_tools.heatmap_corr(df_by_userid_month[['sessions_per_day', 'calls_per_day']])\n\n\nЕсли нужно быстро просмотреть, то проганяем в цикле\n\n\nShow the code\nfor key, df in dict(\n            df_users = df_users\n            , df_calls = df_calls\n            , df_messages = df_messages\n            , df_internet = df_internet\n            , df_tariffs = df_tariffs\n            , df_calls_full = df_calls_full\n            , df_messages_full = df_messages_full\n            , df_internet_full = df_internet_full\n            , df_by_userid_month = df_by_userid_month\n            , df_arpu = df_arpu).items():\n    print(key)\n    display(pagri_data_tools.heatmap_corr(df))\n\n\nЕсли переменных много и нужно разделить на части, то используем эту функцию\n\n\nShow the code\ngen = pagri_data_tools.heatmap_corr_gen(df, part_size=10, titles_for_axis=titles_for_axis)\nnext(gen)\n\n\n\nИспользование регрессии и случайного леса для определения влияния переменных\n\n\nКоэффициенты регрессии позволяют оценить влияние каждой переменной на целевую переменную, учитывая влияние других переменных,\nв то время как важные компоненты в случайном лесе позволяют оценить важность каждой переменной для предсказания целевой переменной.\n\n\nИспользуем регрессиию\n\n\nЧтобы построить регрессию и посмотреть стат значимость и коэффициенты удобно использовать модуль statsmodel\n\n\nVIF означает Variance Inflation Factor (Фактор инфляции дисперсии). Это статистическая метрика,\nиспользуемая для обнаружения мультиколлинеарности (сильной корреляции) между предикторами (фичами) в линейной регрессии.\n\n\nОбычно, VIF интерпретируется следующим образом:\n\nVIF &lt; 5: слабая мультиколлинеарность\n5 ≤ VIF &lt; 10: умеренная мультиколлинеарность\nVIF ≥ 10: сильная мультиколлинеарность\n\n\n\nСмотрим R2 (коэффициент детерминации) - использовать коэффициенты у регресси Мы строим регрессию и смотрим, у каких метрик больше коэффициенты. Таким образом мы поймем какие метрики сильнее зависят с целевой.\nВажно, чтобы независимые переменные некоррелировали по отдельности и вместе (мультиколлиниарность).\nПо отдельности смотрим матрицу корреляции.\nЧтобы определить коррелириуют ли вместе, береме независимые переменные,\nи перебираем их выбирая одну из них целевой и смотрим R2.\nЕсли R2 большой, то значит эта метрика (которая целевая на этом шаге) хорошо описывается другими и ее можно выбросить. Также не забываем поправки на гетероскедостичность (HC0, HC1, HC2, HC3) в статпакетах.\nНам нужно ответить на следующие вопросы - Влияет ли метрика на целевую? Оцениваем коэффициенты в уравнении регресси у каждой метрики.\n- Как влияет метрика на целевую? Смотрим R2 (коэффициент детерминации). И определяем какая часть целевой переменной определяется независимыми метриками.\n- Коэффициенты при метриках в уравнении статистически значим? При какаом уровне значимости? Смотрим в стат пакете p value для каждого коэффициента, что нам говорит значим ли этот коэффициент.\nТо есть мы не просто смотрим его абсолютное значение, а учитываем p value.\n- Дайте содержательную интерпретацию коэффицентам? При увеличении метрики k на 1, целевая метрика увеличивается на \\(b_{k} * 1\\) То есть нужно перевести коэффициенты в реальное сравнение, насколько увелчисться целевая метрика при изменении определенной метрики на 1 - Найдите 95 процентный доверительный интервал. В стат пакете смотрим значение и оно говорит, что если мы многократно повторим ноши вычисления с новыми данными, то 95 процентов наших\nполученных коэффицентов будут лежать в этом диапазоне.\n\n\nСтроим модель и изучаем результат\nlinear_regression_with_vif\n\n\n\nShow the code\npagri_data_tools.linear_regression_with_vif()\n\n\n\nИспльзовать коэффициенты у классификацию\nСтроим случайный лес какие метрики сильнее всего влияют на решения модели.\nplot_feature_importances_classifier\nplot_feature_importances_regression\n\n\nТут нужно подумать как использовать категориальные переменные тоже\nНужно их перевести в one hot encoding или подобное, чтобы также проверить силу их влияния на целевую перменную\n\n\n\nShow the code\ntitles_for_axis = dict(\n    debt = 'долга'\n    , children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\ntitle = 'График важности признаков для предсказания цены'\npagri_data_tools.plot_feature_importances_classifier(df, target='debt', titles_for_axis=titles_for_axis, title=title)\npagri_data_tools.plot_feature_importances_regression()\n\n\n\nНа основе полученных данных формулируем гипотезы, которые будем проверять в блоке проверки гипотез\n\n\nиспользуем быблиотеку shap, чтобы определить метрики, которые лучше других помогают предсказывать целевую перемменную\n\nДобавить в dash app возможность сохранять код для ячейки с фильтром (срезом данных).\nТо есть у нас есть фильтр, мы хотим посмотреть срез данных и фильтруем данные.\nИ если увидели что-то важное, то мы сохраняем код для создания графика с этими x, y, category и фильтром.\nТо есть в коде сначала будет фильтрация датафрейма и потом создание графика в 2 строки.\nважно мы не пишем все наблюдения, а только те, которые могут быть важны для анализа, то есть мы смотрим, задаем вопросы данным и\nи если ответ важен, то мы записываем наблюдения)\nВАЖНО\nКогда мы видим таблицу или график, то мы придумываем вопросы к результату.\nВсе возможные вопросы (как, почему, зачем, сколько, как долго, быстро ли, медленно ли, важно ли это, из-за чего это и прочие вопрсоы) И отвечая на эти вопросы мы получаем наблюдения и выводы И чтобы задавать правильные вопросы, мы должны сначала подумать о физике параметров, которые мы видим.\nЕсли у нас много значений в переменной, то мы агрегируем данные и можем построить бары.\nНо если мы агрегируем данные по переменной, в которой много значений и нам это нужно.\nТо мы не сможем построить бары, и тогда мы строим гистограмму. То есть мы берем, например, для каждой заправки считаем среднее время заправки и так как у нас много заправок,\nно мы хотим визуализировать среднее время по ним, и не агрегировать по другому параметру, то мы можем испльзовать гистограмму.\nВ данном случае гистограмма своего рода агрегация в бины, то есть мы получаем как бы новую переменную из бинов, в каждом бине будет агрегированы данные.\nЭто работает, когда нам нужно просто посмотреть колечество, так как в бинах будет количество. Таким образом мы получаем сколько у нас заправок имеют определенное среднее вермя заправки.\n\nПро размер графиков\nСтандартный размер графиков width=600, height=400\nДля более сложных графиков, когда требуется больше места для отображения данных, можно использовать размеры width=800, height=600 или width=1000, height=800\n\n\nСравнивать количество элементов нужно в абсолютных и относительных величинах.\nКогда мы сравниваем только в абсолютных величинах, мы не учитываем размеры групп.\nВ одной группе может быть элементов больше чем в другой и тогда сравнение будет не совсем точным.\nЕсли у нас 2 категориальные переменные, то мы можем сравнивать отностельные величины\nпо одной переменной, а можем по другой.\nЭто как сравнивать суммарный возраст в группах, это не дает полной картины и мы сравниваем средний возраст,\nчтобы размер группы не влиял.\n\n\nВАЖНО Анализ графиков и выводы для них должны полностью перекрывать постановку задачи и цель.\nЭто значит, что если цель проанализировать зависимость наличия долга, то мы в идеале должны проанализировать\nвлиянеие каждой переменной на наличие долга (числовой и категориальной)\nКончено нужно проанализировать все возможные зависимости.\nНо все зависимости с переменной в постновке задачи мы обязаны проверить и дать выводы. И о наличии и об отсутствие.\nВажные выводы делаем не только о наличие интересных моментов, но и об отсутствие.\n\n\nСначала раздел графиков\nНа основе графиков формируются гипотезы (например, у нас у мужчин зп больше) И после раздела графиков идет раздел проверки гипотез. Тут мы првоеряем разные гипотезы новые и те, что увидели на графиках.\nЭто правильная последовательность сначала изучили графики и потом на основе их сформировали гипоетзы Перед разделом про графики идет раздел с корреляцией и поиском главных компонет случайного леса.\nМы выбиарем переменную, для которой мы далее хотим посмотреть разыне зависимости и указываем ее целевой для сучайного леса\nИ смотрим какие фичи сильнее влияют.\nИ теперь можем построить графики с целевой перменно и этими главными фичами и в выводе можно указать про то что это важные компоненты случаного леса\n\n\nНа основе полученных данных формулируем гипотезы, которые будем проверять в блоке проверки гипотез\n\n\n\nИзучение зависимостей между числовыми переменными\nПостроим графики рассеяния и изучим зависимости.\nВАЖНО\nИзучаем зависимости между числовыми переменными без фильтрации и с фильтрацией.\nТо есть нужно взять и пройти по каждой категории и посмотреть на зависимости в каждой категории.\nВозможно даже в комбинации категорий.\nТак как в общей картинке зависимости могут затеряться.\nВАЖНО смотрим на выбросы\nМы могли при изучении отдельных столбцов не заметить их, если заметили, то возвращаемся в изучение и предобработку и изучаем их дополнительно\n\n\nShow the code\npairs = {('total_images', 'last_price'): None, ('total_images', 'floors_total'): {'total_images': [-2.15, 22.45], 'floors_total': [0.51, 28.54]}, ('total_images', 'kitchen_area'): {'total_images': [-1.04, 28.44], 'kitchen_area': [-0.6, 59.26]}, ('total_images', 'parks_nearest'): {'total_images': [np.int64(0), np.int64(50)], 'parks_nearest': [np.float64(1.0), np.float64(3190.0)]}, ('total_images', 'ponds_around3000'): {'total_images': [np.int64(0), np.int64(50)], 'ponds_around3000': [np.float64(0.0), np.float64(3.0)]}, ('total_images', 'living_total_ratio'): {'total_images': [np.int64(0), np.int64(50)], 'living_total_ratio': [np.float64(0.02), np.float64(1.0)]}, ('total_images', 'kitchen_total_ratio'): {'total_images': [np.int64(0), np.int64(50)], 'kitchen_total_ratio': [np.float64(0.03), np.float64(0.79)]}, ('total_images', 'price_per_sqm'): {'total_images': [np.int64(0), np.int64(50)], 'price_per_sqm': [np.int64(7962), np.int64(1907500)]}, ('last_price', 'living_area'): {'last_price': [np.int64(430000), np.int64(763000000)], 'living_area': [np.float64(2.0), np.float64(427.55)]}}\npagri_data_tools.pairplot_pairs(df, pairs, coloring=True, horizontal_spacing=0.12, rows=3, cols=3).show(config=dict(displayModeBar=False, dpi=200), renderer=\"png\")\n# если нужно интерактивый график, то\npagri_data_tools.pairplot_pairs(df, pairs, coloring=True, horizontal_spacing=0.12, rows=3, cols=3)\n\n\nЧтобы в dash app выбрать нужные пары для scatterplot\nставим _gen_ в месте где хотим чтобы появились ячейки с кодом для постройки графиков\nдалее используем pagri_dash.scatterplot_analysis_dash\n\n\nShow the code\n_gen_ \n\n\nВАЖНО\nубираем лишние колонки, которые нам не нужно изучать, например, id, и другие числовые переменные, которые будут только тратить место в dash app\n\n\nShow the code\ndf_by_userid_month.drop(['user_id', 'messages_included'], axis=1)\n\n\n\n\nShow the code\nimport sys\nsys.path.append('/home/pagri/git_repos/pagri_private_modules')\nimport pagri_dash\npagri_dash.scatterplot_analysis_dash(df, \"path/to/notebook/for/save\")\n\n\n\n\nИзучение зависимостей между категориальными переменными\n\nЧтобы автоматически генерировались подписи осей и заголовок графика для категориальных, временных и числовых с категориальными зависимостейь , нужно заполшнить такой словарь.\nПервый элемент списка - это подпись оси\nВторой элемент списка - это как это название будет отображаться в заголовке графика\nДля числовых столбцов также указывается род, чтобы правильно выбрать (Середнее, средний, средняя) (0 - средний род, 1 - мужской род, 2 - женский род)\n\nВАЖНО построить распределение количества по категориальным переменным без разбивки по другим категориям.\nТо есть например, посмотреть количество новых пользователей по месяцам, по кородам и так далее.\nИ так все количества, и не только категориальные.\nЭто важно, так как по этим графикам будет видна общая динамика без разбивки на категории.\nИ плюс всякие user_id и прочее в dash app не отображается, поэтому нужно это изучить отдельно.\nВАЖНО\nДобавить возможность выбирать 1 col и 2 cols как это в app dash числовые и категориальные\nТак как часто полезно посмотреть на распределение количества только в одной категории.\n\n\nShow the code\nf'Среднее / Медианное / Суммарное {numeric} в зависимости от {category} и {category}'  \n\n\nВАЖНО\ntitles_for_axis далее будет один для всех разделов\nпоэтому если нужно добавить, то возвращаемся и добавляем сюда, чтобы была одна переменная\nБывает полезно посмотреть сравнение по месяцам, дням, годам униклальных значений и всех занчений.\nПодумать есть ли у нас подобные ситуации, для которох можно постриоть такой график\n\n\nShow the code\n#Рассмотрим количество выпущенных игр за весь период наблюдений и сравним количество всего и уникальных игр\nsum_un=df.pivot_table(index='year_of_release', values='name', aggfunc=lambda x: len(x.unique())) #Количество выпускаемых игр\nsum_total=df.pivot_table(index='year_of_release', values='name', aggfunc='count') #Количество выпускаемых игр с учетом релиза на разных платформах\ngraph=sum_un.merge(sum_total, left_index=True, right_index=True)\nfig = px.line(graph)\nfig\n\n\nСормируем словарь для подписей осей и названий графиков.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column ['Именительный падеж', 'мменительный падеж с маленькой буквы', 'род цифорой']\n    # (0 - средний род, 1 - мужской род, 2 - женский род[) (Середнее образовние, средний доход, средняя температура) )\n    # для функций count и nunique пишем - Количество &lt;чего / кого количество&gt; - и также с маленькой буквы, цифра 0 в качестве рода\n    age = ['Возраст', 'возраст', 1]\n    , using_duration = ['Длительность использования', 'длительность использования', 2]\n    , mb_used = ['Объем интернет трафика', 'объем интернет трафика', 1]\n    , revenue = ['Выручка', 'выручка', 2]\n    # categorical column ['Именительный падеж', 'для кого / чего', 'по кому чему']\n    # Распределение долей по городу и тарифу с нормализацией по городу\n    , city = ['Город', 'города', 'городу']\n    , tariff = ['Тариф', 'тарифа', 'тарифу']\n    , is_active = ['активный ли клиент', 'активности клиента', 'активности клиента']\n)\n\n\nВажно когда мы смотрем очередной график, то задавать не только вопросы к данным, но и думать как можно отфильтровать\nданные, чтобы сделать дополнительные полезные выводы.\nТо есть мы фильтруем данные и потом эти графики поместим в раздел с анализом срезов.\nЧтобы в dash app выбрать нужные пары для scatterplot\nставим _gen_ в месте где хотим чтобы появились ячейки с кодом для постройки графиков\nдалее используем pagri_dash.scatterplot_analysis_dash\n\n\nShow the code\n_gen_ \n\n\nКак правильно писать выводы для нормализации по col и row: В dash app нормализация идет по значениям в легенде,\nНапример, у нас по index - город, а по столбцам - тарифы. - нормализация по index (в dash будет row)\nПри нормализации по индексам вы получаете долю пользователей каждого тарифа в каждом городе относительно общего числа пользователей в этом городе. то есть если по оси город, а в легенде название тарифа, то нормализация будет по тарифам.\nИ мы сравниваем А если в легенде город, то нормализация идет по городам, и мы сравниваем по городам.\nИ можно сделать такие выводы\n- В Москве 60% пользователей выбирают тариф “Ультра”, что указывает на его популярность среди москвичей. - В Санкт-Петербурге 70% пользователей предпочитают тариф “Смарт”, что может говорить о том, что данный тариф более привлекателен для жителей этого города. то ессть при нормализации по городу, мы получаем долю пользователей тарифа в городе.\n- нормализация по столбцам (в dash будет col)\nПри нормализации по столбцам вы получаете долю пользователей каждого города для каждого тарифа относительно общего числа пользователей, выбравших этот тариф. А когда мы нормализуем по тарифу, то мы получаем долю пользователей города в тарифе.\n- Из всех пользователей, выбравших тариф “Ультра”, 40% приходятся на Москву, что может указывать на то, что этот тариф пользуется спросом именно в этом городе. - Из всех пользователей, выбравших тариф “Смарт”, 50% находятся в Санкт-Петербурге, что может свидетельствовать о том, что данный тариф более популярен среди петербуржцев. - Нормализация по всем значениям (в dash all)\nПри нормализации по всем значениям вы получаете долю пользователей каждого тарифа в каждом городе относительно общего числа пользователей всех тарифов в обоих городах. - В общем числе всех пользователей (Москва и Санкт-Петербург) 30% выбирают тариф “Ультра”, что может указывать на его общую популярность. - Тариф “Смарт” составляет 20% от общего числа пользователей, что показывает, что он менее популярен по сравнению с тарифом “Ультра” на уровне всей выборки.\nСначала смотрим 1_cat, чтобы записать распределение по 1 категории.\nНе забываем делеть swap_cols чтобы изучить обе категориальные переменные.\nЗаписываем, если есть различия в долях в категории.\nОЧЕНЬ ВАЖНО\nЕсли много значений и бары сливаютсю, то включаем heatmap\nВАжно не забывать, что heatmap для этого и нужен.\n\n\nShow the code\nimport sys\nsys.path.append('/home/pagri/git_repos/pagri_private_modules')\nimport pagri_dash\npagri_dash.category_analysis_dash(df, 'df', \"path/to/notebook/for/save\")\n\n\n\nСтроим матрицу тепловой карты для категориальных переменных и изучаем зависимости\n\nЧтобы в dash app выбрать нужные пары для scatterplot\nставим _gen_ в месте где хотим чтобы появились ячейки с кодом для постройки графиков\nдалее используем pagri_dash.scatterplot_analysis_dash\n\n\nShow the code\n_gen_ \n\n\n\n\nShow the code\nimport sys\nsys.path.append('/home/pagri/git_repos/pagri_private_modules')\nimport pagri_dash\npagri_dash.categorical_heatmap_matrix_dash(df, 'df', \"/home/pagri/git_repos/pagri-projects/quarto/projects/housing-ads-investigation/temp.ipynb\")\n\n\n\nПосмотрим на распределение количества элементов между группами\n\n\nНужно подумать как отобразить не только процент от всего количества, но и пороцент в группе\nТо есть у нас есть значение в ячейке, сумма всех, сумма по категории на оси x и сумма по категории на оси Y\nВот нужно как-то отобразить процент от суммы, процент от одной категории и от другой категории\n\n\n\nShow the code\n12 (0.5% of total, 20% of row, 15% of col) \n\n\n\nМожно сделать кнопки, чтобы можно было подсветку делать внури колонок и строк\n\n\nМожно сделать кнопки (процент от общего) (процент от тут указывается название оси x) (аналогично для второй оси)\n\n\n\nShow the code\npagri_data_tools.categorical_graph_analys_gen()\n\n\n\nСтроим treemap\ntreemap\ntreemap_dash\napp = treemap_dash(df)\nif __name__ == '__main__':\n   app.run_server(debug=True)\n\nВАЖНО\nна treemap очень хорошо заметно выделяющиеся цепочки категорий по количеству.\nВажно посмотреть по 3 и более категорий в ряд,\nне нужно сильна всматриваться, задача заметить категории которые выделяются (будет явно больше прямоугольник)\nИ если нашли выделяющиеся важные категории, то сохраняем график и делаем выводы.\n\n\nShow the code\npagri_data_tools.treemap()\n\n\n\n\nShow the code\napp = pagri_data_tools.treemap_dash(df)\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\n\nСтроим parallel_categories\nparallel_categories\nparallel_categories_dash\napp = treemap_dash(df)\nif __name__ == '__main__':\n   app.run_server(debug=True)\n\n\n\nShow the code\npagri_data_tools.parallel_categories()\n\n\n\n\nShow the code\napp = pagri_data_tools.parallel_categories_dash(df)\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\n\nСтроим Sankey\nsankey\nsankey_dash\napp = treemap_dash(df)\nif __name__ == '__main__':\n   app.run_server(debug=True)\n\n\n\nShow the code\npagri_data_tools.sankey()\n\n\n\n\nShow the code\napp = pagri_data_tools.sankey_dash(df)\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\n\n\nИзучение зависимостей между числовыми и категориальными переменными\nПостроим графики для числовых переменных в разрезе категорий.\nдобавить слайдер как доп переменную и анимация будет сразу\n\n\nShow the code\ndf = px.data.gapminder()\n\nfig = px.bar(df, x=\"continent\", y=\"pop\", color=\"continent\",\n  animation_frame=\"year\", animation_group=\"country\", range_y=[0,4000000000], width=900, height=500)\nfig.show()\n\n\nВажно когда мы смотрем очередной график, то задавать не только вопросы к данным, но и думать как можно отфильтровать\nданные, чтобы сделать дополнительные полезные выводы.\nТо есть мы фильтруем данные и потом эти графики поместим в раздел с анализом срезов.\n\nМожно добавить кнопку среднее и количество\nЧтобы можно было посмотртеть распределение по количеству, когда смотрить среднее.\n\n\n\nShow the code\n_gen_ \n\n\nДобавить в hover количество элементов в группе,\nчтобы понимать размер группы.\nДобавить возможность перескакивать комбинации.\nЕсли много колонок, то комбинаций очень много и часть может быть просто не нужна для анализа.\nИзучаем следующим образом\n- смотрим на график и определяем есть ли взаимодейсвие (то есть отличаются ли значения в разных группах, это будет видно как разная высота баров) - если разницы в барах нет, или она минимальная, то сразу можно пропускать - если разница есть, то думаем важна ли для нас ээта комбинация столбцов - если нет, то пропускаем - если да, то пишем наблюдения и сохраняем\nНе забываем смотреть 1_cat чтобы изучить отдельную категорию.\nТо есть график появлился, смотрим на обе категории и на числовую переменную и думаем, нужно ли нам по отдельности изучить\nкаждую категориальную переменную c числовой. Если уже изучили, то не изучаем. Нужно подумать как сохранять уже изученые комбинации, чтобы не повторяться (может в dash app добавить всплывающее окно, для графиков, для которых уже был вывод, что уже было)\nВАЖНО\nЕсли много переменных, и не все они нужны для анализа,\nто смотрим df.columns, выбираем нужные и в dash передаем датафрейм с нужными колонками.\nВАЖНО\nне забываем смотреть sum для переменных типа выручки\nВАЖНО\nid это такая же числовая переменная, как и все остальные, но ее нужно аггрегировать, используя\ncount и nunique\nВАЖНО\nдля графика heatmap\nважно смотреть по какой колоноке больше значений и ее делать по оси X\nТак как ширина графика больше высоты\nВАЖНО\nЕсли на графика 2 категориальной переменной, то хороший размер 1000 на 450 (width на height)\nЕсли на графике 1 категориальной переменной, то хороший размер 600 на 400 (width на height)\nЕсли у нас только 1 категорилаьная переменная, то добавляем временную и прям эту строку передаем в\nnumeric_category_analysis_dash\n\n\nShow the code\ndf.assign(temp=pd.Series(1, index=df.index).astype('category'))\n\n\n\n\nShow the code\nimport sys\nsys.path.append('/home/pagri/git_repos/pagri_private_modules')\nimport pagri_dash\npagri_dash.numeric_category_analysis_dash(df, 'df', \"/home/pagri/git_repos/pagri-projects/quarto/projects/housing-ads-investigation/temp.ipynb\")\n\n\n\n\nАнализ временных зависимостей\nИзучим графики, представляющие различные временные переменные.\nЭто раздел нужен, чтобы изучить тредны, сезонность и определить какие категории уже свое отжили, а какие перспективные.\nКакие категории падают по продажам, может нужно с этим что-то сделать и так далее. Смотрим на графики с временными зависимостями и отвечаем на такие вопросы: - Есть ли категории, которые присутствуют не все время? Например, у нас продажи игр и есть категория платформы, мы построили график суммарных продаж по платформам и по годам. И видим, что явно\nзаметно, что платформа живет определенное время, так как есть пик продаж и потом продаж мало. - Есить ли тренды, сезонность, циклы? - Какие категории были популярны в прошлом, какие начинают становится популярными, какие показывают устойчивость долгое время - Какие категории будут популяны ближайшее время исходя из того в какой-момент времени они находятся сейчас и какие результаты показывали в прошлом и показывают сейчас.\nОЧЕНЬ ВАЖНО\nОбязательно смотрим heatmap для для всех числовых переменных в разрезе категорий по годам.\nЭтот график отлично показывает участки, когда категория была активно, динамику во времени и прочее.\nПо оси X идет время а по оси Y идет категория, и тогда каждая полоска это динами во времени, если например, у нас продажи,\nто будет четко видно где спад, а где подъем, когда мы подкрашиваем значения.\nПроходим и из предыдущих разделов копируем все графики с временными переменными и вставляем сюда.\nКогда мы хотим изучить верменную зависимость, то нам нуно создать новые переменные с обрезанными (trunc or round) значениям, чтобы можно было сгруппировать используя groupby or pivot_table\nпо этой обрезанной переменной и применить функцию агрегации и построить график, например, среднее время заправки на азс по часам.\nВот когда мы работаем с временем, нам нужно думать какие переменные создать, обрезая текущее время.\n\nСтроим когортный анализ, если есть возможность\n\n\nЕсли у нас есть даты, то мы можем посмотреть не просто абсолютные значения на каждую дату какой-то метрики,\nа посмотреть относительные значения относительно предыдущего значения.\nДля этого нужно составить таблицу, в которой будет изменение в процентах относительно предыдущего значения.\nИ затем визуализировать для каждой даты динамику этого показателя\n\nВАЖНО\nЕсли у нас есть время, то нужно посмотреть среднее время жизни определенных продуктов и прочее.\nТут важно, чтобы категории не жили все время, которое у нас есть в данных, иначе у всех будет одно время.\nЭто нужно делатЬ, если у нас есть категориальная переменная, занчения которой не всегда присутствуют. Например, у нас данные по годам продаж игр. Нужно взять продажи по годам и выбрать период, когда они активно продавались.\nЭто можно сделать через квантили или через 2-3 std.\nПосчитать средене по всем играм.\nТакже у нас могут быть категории, например, платформы, тогда мы можем сагрегировать по платформам и посмотреть среднее время жизни платформы.\nПостроим график времени жизни платформы\n\n\nShow the code\nplatform_lt = df.groupby('platform').agg({'year_of_release':'nunique'})\npx.bar(platform_lt, x=platform_lt.index, y='year_of_release')\n\n\nПосчитаем общее среднее время жизни платформы\n\n\nShow the code\nprint('Среднее время жизни платформы', df.groupby('platform').agg({'year_of_release':'nunique'}).mean())\n\n\nИ так мы можем делать со всеми категориальными переменнми, если у нас есть временная переменная.\nСхема такая - мы группируем по категорилаьной переменной и считаем уникльное количество нужных нам временных периодов. - строим график - считаем общее среднее время жизни\nИ далее мы получаем временной интервал (среднее время жизни), который мы можем использовать для фильтрации.\nТо есть нам нужно определить перспективные направления в определенной категориальной перменной.\nУ нас сейчас нарпимер, 2015 год. Мы выяснили что среднее время жизни категории 5 лет.\nТогда мы смотрим сколько на момент 2015 года прожила каждая категория. И далее считаем сколько ей осталось ещё жить.\nСортируем по времени оставшейся жизни. В итоге получаем топ переспективных категорий.\nОбщая схема такая - Выбираем категориальную переменную, в которой нам нужно определить перспективные категории. - Строим график для каждой категории ее вермени жизни. Делаем выводы. - Считаем среднее время жизни платформ (в идеале если есть другие категории, которые разделют категории на общие, то использовать расчет внутри подгруп). - Далее Берем актуальные на данный момент категории и считаем сколько они прожили к данному моменту. - Вычитаем среднее время жизни всех платформ и строим график топ по оставшемуся времени жизни. - Делаем выводы, какие категории будут лучше ближайшее время.\nВАЖНО\nЕсли нам нужно определить перспективные категории в будущем,\nто нужно использовать среднее время жизни категории. И взять период от текущего момента минус среднее время жизни.\nИ изучить именно этот период. Так мы получим более точные результаты.\nДля выбранного периода строим данные по количеству проданных копий, например, по сумме выручки.\nСтроим боксплоты или vilon рядом за этот временной период и сравниваем, какие категории дали лучше результаты.\nИ делаем выводы.\nТаким образом важно изучить общие данные и данные за среднее время жизни категории отложенного от текущего момента назад.\nВАЖНО\nЧтобы определить самую перспективную категорию, нужно взять отрезок времени от текущего минус среднее время жизни.\nИ построить например, график общих продаж по годам в разрезе категории. Таким образом мы увидим у кого прибыль расте, а у кого падает.\nИ так как мы значем среденее время жизни, то мы можем уже делать выводы о будущем.\nВАЖНО\nВообще очень важно на графиках, с временными зависимостями смотреть конечную дату и делать выводы, какие категории уже на спаде, а какие сейчас актуальны.\nЭто можно понять по графику суммарных продаж по годам, суммарной выручки по годам, количествую новых пользователей по годам и так далее.\nНужно делать, например, такие выводы:\nЭти платформы относительно молоды (3-5 лет), свой пик они уже прошли и не показывают потенциальных перспектив роста продаж, но их продажи пока выше остальных и какое-то время они способны продержаться на плаву и заполнить нишу на рынке игровых платформ, ведь геймеры никуда не делись. Мы не видим платформ моложе либо с тенденцией роста к концу 2016 года, поэтому есть смысл сделать ставки на эти три: большинство крупных проектов подошли к своему завершению, и между ними и новыми разработками, которые возможно скоро появятся на рынке, будет явный провал, который надо переждать для “поддержания штанов”\nТаким образом, смотрим на график (это моежт быть и бары, лини и heatmap в зависимости от количества категорий),\nи изучаем динамику. Пишем выводы, что данные категории уже не актуальны, что определенные категории набирают оброты, что другие категории показывают лучшую устойчивость..\nНапример - - Жанр А был популярен до Х года, но последнее время потерял популярность, это видно по суммарным продажам и количеству новых пользователей. - Жанр Б показвает устойчивый рост, что говрит о том, что он ещё будет определенное время популярным. - Жанр В только появился на рынке и показывает хорошие результаты, то есть он может быть перспективным. И так делаем выводы по каждой категории.\nСуть в том, чтобы проанализировать динамику во времени.\nДля этого и создается раздел анализ временных зависимостей, чтобы изучить тредны, сезонность и определить какие категории уже свое отжили, а какие перспективные.\nКакие категории падают по продажам, может нужно с этим что-то сделать и так далее.\nВАЖНО\nпройти просмотреть все графики и где нужно изменить тип на линии\nЕсли на графике динамика чего-то то линия лучше баров.\nЕсли идет сравнение то бары лучше.\nВАЖНО\nПройти просмотреть все графики\nГде только 1 категориальная переменная сделать горизонтальную ориентацию\nВАЖНО\nПройти просмотреть все графики и где нужно проставить числа над барами\n\n\nВАЖНО\n\nБерем все датафреймы, которые анализировали.\n\nИ по очереди выводим все колонки, с указанием категориальная, числовая или другая.\n\nСобираем все выводы от графиков.\nИ внимательно думаем, какие зависимости мы пропустили.\n\nСтроим их\n\n\n\nShow the code\ndf_by_userid_month.dtypes\n\n\n\n\nАнализ срезов данных\nВАЖНО\nПосмотреть графики для каждой категории в нужных категориальных переменных. Например, у нас категориальная переменная регион.\nНужно посмотреть все зависимости для каждого региона отдельно и отобразить графики.\nСхема следующая - Нужно выбрать важные категории и числовые переменные, которые мы хотим изучить отдельно.\n- Когда изучаем графики, то изучаем всю картину целиком и затем изучаем отдельно каждую категорию.\nВАЖНО\nНе нужно для всех категорий строитьотдельные графики.\nТут логика следующая: - Если на одном графике помещются данные по всем топ 5 категорий и можно сразу увдиеть результат по отдельным категоирям, то нет смысла строить отдельно.\n- Если же мы смотрим на график и нам охота посмотреть ситуацию по отдельной категории, то лучше простроить ее отдельно.\n- Нужно смотреть по ситуации и в зависимости от того, насколько разбивка по категориям на одном графике показывает ситуацию.\nВАЖНО\nесли у нас по условию задачи нужно сравнить что-то, то нужно построить наложенные гистограамы (в виде каги) каждой категории.\nТо есть если мы сравниваем тарифы, то нужно наложить гистограммы выручки, количества сообщений, звонков, гигабайт и так далее.\nТаким образом мы не только сравниваем аггрегирующие метрики на графике, разбивая метрику по категории, но и\nстроим накладывающиеся гистограммы по каждой категории. Это очено важно, так как дает более глубокое сравнение.\nВообще если есть время, то в идеале построить накладывющиеся гистограммы для всех важных числовых метрик по всем важным категориям.\nТо есть берем метрику и категориальную переменную и строим гистограмму.\nНужно сделать отдельную функцию.\nВАЖНО\nЕсли у нас есть странные значения, например нулевая длительность звонков, или что-то подобное,\nто это также является срезом, который нужно изучить. Не только при предобработке, когда мы смотрели это по категориям.\nТут мы не только смотрим по категориям на графиках, но ещё и смотрим все метрики и графики для этого среза или срезов.\nТаким образом выбросы, пропуски и любые аномальные занчения, которые можно объеденить в группу, являются срезом.\nИ этот срез нужно отдельно изучить, построив все графики, которые строили для общего датафрейма.\nВАЖНО\nЕсли у нас много пропусков (болше 20 процентов)\nТо можно создать категориальуню переменную (с пропусками / без пропусков) для каждой колонки с пропусками.\nИ изучить срезы отдельно. То есть сравнить их.\nВАЖНО\nВажно изучать топ N чего-то. Так как нас интересует увеличение результатов, и именно эти топ n уже показали результаты и нужно это изучить. И сделать выводы.\nСмотрим на категориальные переменные и числовые переменные в разделе, где мы их изучали.\nОтбираем нужные категории и числовые переменные. Категории мы также можем отобрать и в разделе изучения категорий, когда изучаем доли. То есть выбираем топ N не только по числовой переменной,\nно и по количествую в категориальной переменной. То есть мы изучим отедльно самые распространенные категории. Выбрать топ 5 значений категориальной переменной по нужной количественной переменной.\nИ посмотреть их отдельно на одном графике вместе (то есть фильтруем 5 значений категориальной переменной по топ числовой переменной).\nИ каждую по отдельности.\nПричем смотрим и распределения и средние значения и суммы по определенной числовой переменной. Схема такая - когда изучаем общие данные, выбираем категории и числовые переменные, которые можно изучить через топ N. - и в этом разаделе уже смотрим их по отдельности. Даже если мы до этого изучили всю картину и были графики, где эти категории уже есть в разрезе,\nто для лучшего понимания картины тут тоже строим графики, но уже для выбранных категорий и далее по отдельности. Можно и распределения построить.\nЗадача проанализировать чем эти топ N категории отличаются от остальных.\nНапример у нас данные о продажах игр.\nМы построили график суммарных продаж и увидели, что определнное количество игр имеют болше результат чем другие (не обязательно 5, может быть и 2, 3, тут лучше ориентироваться на то, насколько выбранные отличаются от остальных, наша задача отобрать те, которые явно выделяются).\nИ так повторяем для всех важных категорий и числовых переменных.\nСуть в том, чтобы проаназировать как ведут себя лидеры.\nТакже можно и изучить топ с самыми худшими результатами.\nСрезы нужно обязательно сравнить со всем датафреймом.\nТо есть мы например, изучили центр города и нужно сделать выводы основываясь на сравнении центра и всего города.\nНужно создать 2 генератора и параллельно идти, чтобы сначала выводился срез, а потом уже целый датафрейм.\nТут наша задача не изучать выбросы, дубли и прочее.\nТут задача найти отличия среза от всего датафрейма.\nВозможно лучше прйти все колонки так попарно, а потом выбрать только те, которые имеют отличия.\nИ построить только их.\nВАЖНО\nЕслиу нас есть временные переменные, то важно посмотреть графики за последние 10, 5, 3 или 1 год, в зависимости от задачи.\nТак как важно проанализировать не только всю историю, но и последнее время, так как именно это время актуально.\nБерем строим графики, например, суммарные продажи по жанрам за последние 3-5 лет и так далее.\nСрезы нужны не только чтобы изучить отдельно часть данных, важно сравнивать срез со всем датафреймом.\nНужно подумать какие срезы будет полезно сравнить со всем датафреймом.\nИ провести сравнительный анализ. И поместить в отчет то, что имеет отличия и важно для выводов.\nЧасто когда есть пользователи, то нужно изучить срезы активные и не активные пользователи.\nИ постараться понять что отличает не активных.\nсделать приложение dash чтобы можно было выбирать колонки для анализа,\nчтобы можно было фильтровать по всем категориальным переменным,\nчтобы были слайдеры для фильтрации по числовым переменным, чтобы можно было выбирать типы графиков и строить разные графики.\nЭто не генератор, а это для ad-hoc анализа.\nТо есть мы подумали что интересно будет изучить этот срез и эти переменные и изучили.\nА потом можно подумать как это автоматиировать, чтобы в цикле строились нужные графики.\nАнализ срезов состоит из анализа срезов из одного значения, то есть мы выбираем конкретное значени и по нему фильтруем.\nи анализа срезов из нескольких переменных, когда мы выбираем несколько значений для среза или даже несколько переменных и в них выбираем определенные значения.\nАнализ срезов по одному значению мы просто фильтруем по нему и смотрим результат функции info_gen или ‘info_column’\nА анализ срезво по нескольким значениям или переменным будет результатом анализа графиков в dash app.\nТо есть мы в процессе анализа фильтруем данные и после работы в dahs app мы фильтрованные графики помещаюем в этот раздел.\nЧтобы разделить срезы и полный анализ.\nВАЖНО\nЧтобы изучить активных и неактивных пользователей, нужно создать признак ‘is_acitve’\nИ внимательно посмотреть на графики с временными зависимостями, где во времени идет сранвение по ‘is_active’\nТаким образом мы как бы посмотрим в прошлое, как вели себя пользователи, которые стали неактивными, и как вели себя активные пользователи\nНужно подумать как лучше изучать срезы.\nВ данном разделе лучше изучить срезы отдельных значений, то есть отдельный город, отдельный пол и прочее.\nТо есть мы фильтруем по одному значению и его изучаем в функцией info\nА изучение срезов данных, которые состоят из набора значений (например изучить цену в топ 10 городах), это уже будет сделано\nв анализе графиков.\nТут мы изучаем подготовленный набор данных в разрезе разных категориальных переменных.\nЗадача посмотреть на отдельные срезы и найти закономерности в данных.\nНапример у нас есть данные о продажах квартир, мы создали новые категориальные перменные, обогатили данные\nИ теперь хотим посмотреть какое распределение цены только в центре, или какая площадь квартир возле парков и прочее.\nТо есть мы тут изучаем отдельно переменные в разрезе категорий, то есть строим срезы.\nВАжно, что тут мы изучаем отедльные переменные, срезы в зависимостях переменных будем строить в разаделе визуализации.\nОпределить цель. Прежде чем начинать анализ срезов, важно четко определить, какие вопросы вы хотите ответить или какие гипотезы хотите проверить. Это может включать: - Сравнение различных групп (например, по возрасту, полу, региону). - Изучение влияния определенных факторов на целевую переменную. - Выявление аномалий или неожиданных паттернов в данных.\nВыбор переменных для срезов. Выберите переменные, по которым вы хотите сделать срезы. Это могут быть как категориальные, так и количественные переменные. Примеры: - Категориальные переменные: пол, категория товара, регион, уровень образования. - Количественные переменные: возраст, доход, количество покупок (то есть мы можем просто взять срез с зарплатой до 100 тысяч и прочее, не обязательно иметь категорию для создания срезов, причем у нас может быть категория доходов, но срез мы можем взять в другом диапазоне).\nВажно когда мы выбрали параметры по которым хотим сделать срез, то далее нужно выбрать условие по которому мы будем создавать срез.\nСрез это фильтрация или группировка, то есть должна быть либо функция аггрегации или значения по которым мы будем фильтровть.\nНапример мы для среза выбрали параметр города. Теперь нам нужно отобрать города для среза.\nМы выбираем параметр количество объявлений (все зависит от цели, можно было выбрать и количество населения, значение других параметров, все что поможет нам создать топ) И далее по нему фильтруем или аггрегируем.\nСрезы данных можно создавать различными способами. Вот несколько подходов: - Фильтрация данных: Используйте условия для выбора подмножеств данных.\nНапример, выберите только тех клиентов, которые находятся в определенном регионе или имеют доход выше определенного порога.\n- Группировка данных: Используйте функции группировки (например, groupby в pandas для Python) для агрегирования данных по выбранным переменным.\nЭто позволяет вам получить сводные статистики по группам. - Кросс-табуляция: Для категориальных переменных создайте кросс-таблицы, чтобы увидеть взаимосвязи между переменными.\nАнализ срезов. После создания срезов данных проведите анализ: - Статистический анализ: Рассчитайте основные статистики (среднее, медиана, стандартное отклонение) для каждой группы или среза. Это поможет вам понять, как различаются группы по ключевым показателям. - Визуализация: Постройте графики для визуального представления данных. Это могут быть:\nГистограммы для распределения количественных переменных.\nСтолбчатые графики для сравнения категориальных переменных.\nЯщики с усами (boxplots) для визуализации разброса и выявления аномалий.\n- Сравнительный анализ: Сравните срезы между собой. Например, как различается средний доход мужчин и женщин или как меняется поведение клиентов в зависимости от региона.\nЕсли мы для среза выбрали одно значение (например конкретный город), то мы просто посмотреть результат функцииinfo и проанализировать его\nНо если мы выбрали для среза набор значений, то нам нужно уже построить графики для сравнения стат параметров или других аггреигующих параметров\nдля каждого занчения в срезе. То есть нам нужно выбрать параметры по которым мы будем сравнивать значения в срезе.\nФильруем датасет по определенному значению и далее либо изучаем по отедльным столбцам, либо по всем испоьзуя генератор\nТо есть мы изучаем срез по одному значению\nСозадем 2 генератора (или больше, если хотим сравнить несколько срезов), для среза и всего датафрейма и идем изучаем их вместе.\nНужно сделать отдельный генератор, чтобы в нем не было информации про пропуски, нули и прочее,\nИ организовать так, чтобы было удобно сравнивать.\nТакже гистограммы нужно сделать на одном графике, чтобы накладывлись друг на друга и сделать прозрачность.\nЭто очень удобно и если гистограммы будут накладываться друг на друга, то можно будет увидеть сразу отличия средних и мод на графике.\nВ идеале сделать, чтобы были не столбцы, а типа каги, то есть линия со ступеньками, так удобнее сравнивать гистограммы.\nОЧЕНЬ ВАЖНО\n- в наблюдения пишем обязательно диапазон значений столбца.\nРынок жилья представлен объектами общей площадью от 12 до 900 кв.м. - пишем медианное занчение и по гистограмме и по квантилям определяем оснвоной диапазон.\nВ основном это жилье от 30 до 100 кв.м. с пиком в сегменте 30-75 кв.м\nЭто все нужно, чтобы потом сформулировать вот такой вывод (в оснвоном выводе отчета), то есть мы для разных столбцов пишем диапазоны,\nосновной дипазаон, медианы, моды, а потом уже собираем это в 1 или несколько выводов,\nНапример.\nРынок жилья представлен объектами общей площадью от 12 до 900 кв.м. В основном это жилье от 30 до 100 кв.м. с пиком в сегменте 30-75 кв.м. В жилой площади квартиры преобладает диапазон 15-50 кв.м. Размер площади кухни-от 5 до 15 кв.м., с пиком 9 кв.м. Это стандартные небольшие квартиры эконом-класса. Подавляющее большинство квартир- 1-3 комнатные, с высотой потолка 2,6-2,7 м., но встречаются редкие варианты до 19 комнат и высотой потолка до 20 кв.м. (либо ошибка, либо свободная планировка с возможностью многоуровневости).\nВ итоге мы сраним диапазоны, моды, медианы в срезе и во всем датафйреме.\nБыло бы идеально определить отличия в срезе и в общей картине, не просто сухими цифрами,\nа собрать все наблюдения вместе и расписать это в подобном виде-\nРынок недвижимости центральной части города представлен несколько более широким по площади диапазоном : основная масса- это жилье от 30 до 150 кв.м с пиком в сегменте 45-80 кв.м. При этом жилая площадь занимает большую долю, чем среднестатистическая квартира: в центре СПб большое количество домов старой застройки, в которой пространство “сдвинуто” в пользу жилой площади. Особенностью этой части города является то, что большинство квартир, предлагаемых на продажу,- 2-3 комнатные: здесь в общей массе достаточно низкая доля 1-комнатного жилья и выше доля 4-комнатных квартир. Наибольшее количество предложений в абсолютном выражении (цена за объект) приходится на диапазон 5-15 млн.руб. с пиком 5-8 млн.руб.(маленькие квартиры эконом-класса), но есть и уникальные объекты стоимостью до 35 млн.руб. Стоимость квадратного метра недвижимости в основном варьируется от 70 до 150 тыс.руб. с пиком в 100 тыс.руб. Наряду с типовыми предложениями на продажу выставлено жилье со стоимостью 1 кв.м. до 266 тыс.руб за кв.м. В целом цены жилья центра города выше по цене, чем аналогичное в других районах.\n\n\nShow the code\ndf_sliced = df[df.location_zone == 'Центр']\ngen_slice = pagri_data_tools.info_gen(df_sliced)\ngen = pagri_data_tools.info_gen(df)\n\n\n\n\nShow the code\nnext(gen_slice)\nnext(gen)\n\n\nЕсли есть что-то важное и есть отличия, по которым можно сделать выводы, то строим отдельно в отчет\n\n\nShow the code\nprint('Центр города')\npagri_data_tools.info_column(df_sliced, 'last_price')\nprint('Весь датафрейм')\npagri_data_tools.info_column(df, 'last_price')\n\n\nНаблюдения:\n- пишем тут наблюдения\nВАЖНО\nСравниваем не только отдельные столбцы с общей картиной.\nНужно взять срез и посмотреть на корреляцию, зависимости между числовыми, категориальными и т.д.\nКак это делали для всего датафрейма, только в укороченной версии, то есть можно взять общей картины, что мы нашли интересного\n(то есть взять названия столбцов) и посмотреть на эти же графики, но уже в срезах.\nЕсли есть время, то можно и полностью прогнать все необходимые срезы по всем столбцам как для всего датафрейма.\nПолезно изучить топ определенного столбца.\nТо есть нам нужно выбрать параметр по которому мы отберем топ значений для категорий.\nЗатем выбрать параметр для которого мы будем считать топ значений (числовая переменная) И построить топ.\nНапример, топ цен квартир в 10 городах с максимальным количеством объявлений.\n\n\nShow the code\nselected_cities = df.groupby('locality_name').size().rename('count').sort_values(ascending=False).to_frame().head(10)\nselected_cities\n\n\n\n\nShow the code\nselected_cities = selected_cities.index\n\n\n\n\nShow the code\nconfig = dict(\n    df = df[df.locality_name.isin(selected_cities)]\n    , x = 'locality_name'\n    , x_axis_label = 'Название населённого пункта'\n    , y = 'price_per_sqm'\n    , y_axis_label = 'Цена квадратного метра'\n    , title = 'Цена кв метра в зависимости от населенного пункта'\n    , func = 'mean'\n    , width = None\n    , height = None\n    , orientation = 'v'\n)\npagri_data_tools.bar(config)\n\n\n\n\nКогортный анализ\nИзучим данные по когортам.\nВАЖНО\nпри когортном анализе мы строим матрицу, но обязательно посчитать среднее по когортам.\nТо есть берем например 6 месяцев (или другое количество lt, чтобы было достаточно когорт проживших такое время)\nИ усредняем по когортам. В итоге мы получим динамику метрики по времени жизни средней когорты.\nИ также нужно посчитать просто среднее значение. И можно делать выводы, используя все эти значения.\n\nНе забывать про когортный анализ. Если у нас есть параметр, по которому мы можем наши данные разбить на когорты, то\nнужно разложить на когорты и посмотреть динамику по когортам.\nКогорты это например, пользователи пришедшие в одни день или месяц.\nЕсли мы объеденим пользователей в когорты и посмотрим динамику какого-то параметра по месяцам например, то увидим как изменяется.\nТут также нужно помнить, что если значение например за 3 месяц больше значения за 4 месяц, то это ничего не значит само по себе.\nТак как мы имеем дело с выборкой, то нам нужно проверить статистически значимая это разница.\nТут нам понядобятся стат тесты.\n\nДля когортного анализа нам нужно - сгруппировать по временному периоду - выбрать нужные метрики (одна или несколько), которые мы хотим расчитать для каждой когорты - аггрегировать данные по когортам и рассчитать аггрегированные метрики - если хотим посмотреть в разрезе каких-то категорий, то к аггрегации по когортам добавляем аггрегацию по этим категориям\nПри чем этими каетегориями могут быть не только время прощедшее с регистрации.\nДля каких метрик можно строить когортный анализ - выручка, количество заказов, количество клиентов, количество транзакций, средний чек, arpu, arppu и другие метрики - mau, dau, wau, retention rate, churn rate и другие метрики\nЕсли мы группируем по времени прощелшем с регистрации (или другой даты, по которой создана когорта), то периоды будут lifetime.\nИ можно сказать так - Retention Rate на нулевой месяц lifetime составит 100%\nВАЖНО\nперед словом lifetime должна идти еденица измерения (день, месяц, год)\nRetantion rate и Churn rate можно считать относительно стартовой даты\nchurn rate = (активные в текущем месяце / активные в начальный месяц - 1) * 100\nА можно считать относительно предыдущего месяца\nchurn rate = (активные в текущем месяце / активные в предыдущий месяц - 1) * 100\n\n\nShow the code\nfirst_activity_date = user_activity.groupby(['user_id'])['activity_date'].min()\nfirst_activity_date.name = 'first_activity_date'\nuser_activity = user_activity.join(first_activity_date,on='user_id') \n\n\nЧтобы группировать когорты по неделям, лучше всего использовать день начала недели, его можно рассчитать так\nПолучим день начала недели, за которую произошло событие. Он станет идентификатором недели.\n\n\nShow the code\n# unit использоуется для подстраховки\nuser_activity['activity_week'] = pd.to_datetime(\n    user_activity['activity_date'], unit='d'\n) - pd.to_timedelta(user_activity['activity_date'].dt.dayofweek, unit='d')\nuser_activity['first_activity_week'] = pd.to_datetime(\n    user_activity['first_activity_date'], unit='d'\n) - pd.to_timedelta(\n    user_activity['first_activity_date'].dt.dayofweek, unit='d'\n) \n\n\nТеперь для каждой строки датафрейма посчитаем lifetime\n\n\nShow the code\nuser_activity['cohort_lifetime'] = (\n    user_activity['activity_week'] - user_activity['first_activity_week']\n)\nuser_activity['cohort_lifetime'] = user_activity[\n    'cohort_lifetime'\n] / np.timedelta64(1, 'W')\nuser_activity['cohort_lifetime'] = user_activity['cohort_lifetime'].astype(\n    'int'\n) \n\n\nСгруппируем данные по когорте и lifetime. Посчитаем для каждой когорты количество активных пользователей на определённую «неделю жизни»:\n\n\nShow the code\ncohorts = user_activity.groupby(['first_activity_week','cohort_lifetime']).agg({'user_id':'nunique'}).reset_index() \n\n\nНайдём исходное количество пользователей в когорте. Возьмём их число на нулевую неделю:\n\n\nShow the code\n\ninitial_users_count = cohorts[cohorts['cohort_lifetime'] == 0][\n    ['first_activity_week', 'user_id']\n]\ninitial_users_count = initial_users_count.rename(columns={'user_id':'cohort_users'}) \ncohorts = cohorts.merge(initial_users_count,on='first_activity_week') \n\n\nрассчитаем Retention Rate\n\n\nShow the code\ncohorts['retention'] = cohorts['user_id']/cohorts['cohort_users'] \n\n\nНайти Churn Rate просто — достаточно определить, на сколько пользователей в когорте становится меньше в сравнении с предыдущим периодом. Чтобы рассчитать этот показатель, вызовем метод pct_change() (от англ. percentage change, «процентное изменение»). Он позволяет вычислить процентное изменение значения в столбце относительно предыдущей строки датафрейма. Если применить его с группировкой, метод сработает внутри группы.\nПо умолчанию он сравнивает значения в строках, что полезно для анализа временных рядов. Вы можете указ ить ось для вычисления изменения по столбцам или задать период для расчета.\n\n\nShow the code\npd.DataFrame().pct_change()\n\n\n\n\nShow the code\ncohorts['churn_rate'] = cohorts.groupby(['first_activity_week'])['user_id'].pct_change() \n\n\nТакже нужно построить churn rate относителльно стартового периода.\n(текущее / стартовое - 1) * 100\nПоведенческие когорты\nЭто когортный анализ в разрезе каких-то категорий.\nСуть в том, что нам нужно разбить пользователей на когорты (по сути тут просто категории) и для каждой из них сделать когортный анализ,\nто есть создать когорты уже по времени действия для каждой категории и потом сравнить результаты\nЧтобы провести поведенческий анализ, необходимо разделить пользователй по какому-то признаку и для каждой группы построить когортную матрицу,\nили просто столбец (если мы просто хотим для каждой когорты получить аггрегированную метрики без разбивки по какой-то категории)\nи далее визуализировать. Если матрица, то используем heatmap, если столбец, то используем barplot.\nНапример, у нас есть логи пользователей и категориальная переменная их действий (то есть где была активность)\nСформируем поведенческую когорту по типу события help.\nПо каждому пользователю выделим дату совершения первого события и добавим её к датафрейму events:\n\n\nShow the code\nmin_event_datetime = events.groupby(['user_id'])['event_datetime'].min()\nmin_event_datetime.name = 'min_event_datetime'\nevents = events.join(min_event_datetime,on='user_id') \n\n\nСформируем пользовательскую когорту на основе события, совершаемого в первую неделю жизни пользователя в сервисе. Нужно рассчитать параметр, который позволит для каждого события определить, через какое время после первого события оно произошло. Создадим новый столбец time_to_event, содержащий время между событием и первым событием пользователя:\n\n\nShow the code\nevents['time_to_event'] = events['event_datetime'] - events['min_event_datetime'] \n\n\nНужны лишь события типа help и только те, у которых после первого события прошло меньше 7 дней. Обратите внимание на применение среза по timedelta: можно просто указать количество дней. Это работает и с другими единицами измерения времени. Например, с минутами.\n\n\nShow the code\nfiltered_events = events[(events['event_type'] == 'help') & (events['time_to_event'] &lt; '7 days')]\n\n\nСгруппируем датафрейм по пользователям и подсчитаем количество совершённых действий:\n\n\nShow the code\ncount_events_by_users = filtered_events.groupby(['user_id']).agg({'event_datetime':'count'}).reset_index() \n\n\nНайдём медианное количество переходов в «Помощь» за первую неделю:\n\n\nShow the code\nprint(count_events_by_users['event_datetime'].median()) \n\n\nРазделим пользователей по целевому поведению, установив 5 обращений как рубеж:\n\n\nShow the code\ncount_events_by_users['is_target_behavior'] = (\n    count_events_by_users['event_datetime'] &gt; 5\n)\n\nuser_ids_with_target_behavior = count_events_by_users[\n    count_events_by_users['is_target_behavior']\n]['user_id'].unique()\nuser_ids_without_target_behavior = count_events_by_users[\n    ~count_events_by_users['is_target_behavior']\n]['user_id'].unique() \n\n\n\n\nShow the code\nevents.loc[\n    events['user_id'].isin(user_ids_with_target_behavior),\n    'is_in_behavioral_cohort',\n] = 'yes'\nevents.loc[\n    events['user_id'].isin(user_ids_without_target_behavior),\n    'is_in_behavioral_cohort',\n] = 'no'\nevents['is_in_behavioral_cohort'] = events['is_in_behavioral_cohort'].fillna(\n    'no_behavior'\n) \n\n\nПосмотрим, как разделилось число пользователей между группами:\n\n\nShow the code\nprint(events.groupby('is_in_behavioral_cohort')['user_id'].nunique()) \n\n\nПроанализируем, как для каждой поведенческой когорты изменяется Retention Rate с течением времени. Выделим недельные когорты и подсчитаем относительную неделю lifetime пользователя в мобильном приложении:\n\n\nShow the code\nevents['event_week'] = pd.to_datetime(\n    events['event_datetime'].dt.date\n) - pd.to_timedelta(events['event_datetime'].dt.dayofweek, unit='d')\nevents['min_event_week'] = pd.to_datetime(\n    events['min_event_datetime'].dt.date\n) - pd.to_timedelta(events['min_event_datetime'].dt.dayofweek, unit='d')\n\nevents['cohort_lifetime'] = events['event_week'] - events['min_event_week']\nevents['cohort_lifetime'] = events['cohort_lifetime'] / np.timedelta64(1, 'W')\nevents['cohort_lifetime'] = events['cohort_lifetime'].astype(int) \n\n\nСоздадим функцию расчёта и вывода Retention Rate в зависимости от lifetime:\n\n\nShow the code\ndef printRetentionRate(df):\ncohorts = df.groupby(['min_event_week','cohort_lifetime'],as_index=False).agg({'user_id':'nunique'}).sort_values(['min_event_week','cohort_lifetime'])\n\ninital_users_count = cohorts[cohorts['cohort_lifetime'] == 0][['min_event_week','user_id']]\ninital_users_count = inital_users_count.rename(columns={'user_id':'cohort_users'})\n\ncohorts = cohorts.merge(inital_users_count,on='min_event_week')\n\ncohorts['retention'] = cohorts['user_id']/cohorts['cohort_users']\n\n\nprint (cohorts.groupby(['cohort_lifetime'])['retention'].mean())\ncohorts.groupby(['cohort_lifetime'])['retention'].mean().plot.bar() \n\n\nИ теперь для каждой категории проведем когортный анализ и сравним категории между собой.\n\n\nShow the code\nprintRetentionRate(events[events['is_in_behavioral_cohort'] == 'no_behavior']) \nprintRetentionRate(events[events['is_in_behavioral_cohort'] == 'yes']) \nprintRetentionRate(events[events['is_in_behavioral_cohort'] == 'no']) \n\n\nПримеры вывыодов для когортного анализа когортной матрицы\nПосле первого месяца количество покупателей в когорте снижается.\nВ некоторых когортах число покупателей периодически начинает расти. Например, в когорте 2010-12-01.\nКоличество покупателей уменьшается во всех когортах в декабре 2011. Возможно, это связано с сезонностью.\nПользователи когорты декабря 2010 года продолжают составлять большую долю покупателей даже спустя год. В ноябре 2011 года их 445.\nОтслеживание абсолютных показателей по месяцам позволяет исследовать изменения с течением времени. А также заметить общие черты в поведении всех когорт — например, обнаружить сезонное снижение числа пользователей. Можно сделать и вывод о доле каждой когорты в общем количестве покупателей месяца.\nЕсли мы строим когорты по месяцам, то количество дней в месяцах разное и при делениии на np.timedelta64(1, ‘M’) могут быть дробные числа, поэтому округляем до целого числа.\n\n\nShow the code\norders_grouped_by_cohorts['cohort_lifetime'] = orders_grouped_by_cohorts[\n    'cohort_lifetime'\n] / np.timedelta64(1, 'M')\norders_grouped_by_cohorts['cohort_lifetime'] = (\n    orders_grouped_by_cohorts['cohort_lifetime'].round().astype('int')\n)\n\n\nОставим в данных о месяце первого заказа только год и месяц:\n\n\nShow the code\norders_grouped_by_cohorts['first_order_month'] = orders_grouped_by_cohorts[\n    'first_order_month'\n].dt.strftime('%Y-%m') \n\n\nВАЖНО\nкогортную матирцу изучаем целиком, делаем выводы, а потом находим значение метрик средней когорты,\nдля этого просто береме среднее занчение для каждого периода жизни когорты, то есть у нас есть певый месяц жизни для всех когорт,\nэто столбик в матрице чаще всего, вот мы его успредняем и в итоге у нас будет значение lifetime и значение метрики.\n\n\nRFM анализ\n\n\nShow the code\nrfm_analysis = pd.DataFrame()\n# Recency (from calls)\nrecency = calls.groupby('user_id')['call_date'].max()\n# Frequency\nfrequency = calls.groupby('user_id')['id'].count()\n# Monetary (можно использовать duration или mb_used как прокси)\nmonetary = calls.groupby('user_id')['duration'].sum()\n\n\n\n\nПромежуточный вывод\nЧтобы собрать все наблюдения используем это\nнужно поставить _pagristart_ где начало и _pagriend_ где конец\nНе забываем удалить метки _pagristart_ и _pagriend_\n\n\nShow the code\nimport IPython\nnotebook_path = \"/\".join(\n        IPython.extract_module_locals()[1][\"__vsc_ipynb_file__\"].split(\"/\"))\npagri_data_tools.collect_observations(notebook_path, '/home/pagri/git_repos/pagri-projects/quarto/projects/prospective_tariff_for_telecom/temp_for_report.ipynb')\n\n\nВАЖНО\nпройти и отсортировать графики с одинаковыми числовыми переменными\nТо есть, чтобы 1 числовая переменная в разрезе разных категорий шли подряд.\nТо есть чтобы все графики с выручкой шли подряд, чтобы все графики по количеству звонков в разрезе разных категорий шли подряд.\nВАЖНО\nподумать для каждого раздела в визуализации (временные, числовые, категориальные и числовые с категориальными)\nкакие закономерности не проверил.\nубедиться, что все зависимости, которые были в задании изучили.\nЭто самый важный моменты, тут лучше остановится и тщательно подумать,\nтак как могут быть изучены не все зависимости.\nВАЖНО\nУбедиться, что сетки по осям стоят где нужно, часто для вертикальных или горизонатльных графиков лишняя сетка вдоль баров\nОЧЕНЬ ВАЖНО\nКогда построили все графики и собрали все выводы, то проходим снова и смотрим все графика, зная все выводы, и думаем какие выводы ещё можно сделать.\nТак как в этом случае можно сделать выводы, на основе уже имеющихся, их объединяя или даже заметить что-то новое."
  },
  {
    "objectID": "projects/research_of_food_service_industry/research_of_food_service_industry.html#формулирование-и-провера-гипотез",
    "href": "projects/research_of_food_service_industry/research_of_food_service_industry.html#формулирование-и-провера-гипотез",
    "title": "Исследование рынка заведений общественного питания",
    "section": "Формулирование и провера гипотез",
    "text": "Формулирование и провера гипотез\n\nФормулирование гипотез\nВАЖНО\nКогда смотрим графики и не видим явных различий, то нельзя сразу пропускать график, нужно подумать важная ли это зависимость для нас.\nЕсли нам это важно и значения не прям идеально ровно расположены, то сохраняем график и сразу пишем в temp.ipynb для гипотезы вывод. Гипотезы формулируем для случаев, когда на графике нет явных различие числовой переменной по категории.\nЕсли различия явные, то нет смысла проводить тест.\nВАЖНО\nЕсли у нас числовая перменная разбита на 2 столбца, то также нужно проверить гипотезы.\nВАЖНО\nэто редко бывает, но нужно об этом помнить\nКогда мы хотим проверить какую-то гипотезу на основе среднего или другой статистики, то нужно подумать нет ли сильного разделения на группы\nпо какой-нибудь категориальной переменной.\nЕсли у нас есть такое разделение, то нужно использовать стратифицированную выборку.\nТо есть мы должны взять выборку из каждой группы пропорционально её размеру.\nСчитаем коэффициенты каждой группы (ее размер делим на количество всей выборки) и умнажаем их на количество нужных элементов.\nТо есть мы из каждой страты возьмем прпорциональное количество элементов.\nНарпимер, мы хотим сравнить средние значения дохода в двух компаниях.\nИ берем по 100 сотрудников из каждой. Без стратификации у нас редкие сотрудники могут не попасть.\nПоэтому мы берем категориальную переменную (например должность) и делим выборку на группы. И из каждой берем пропорциональное количество элементов.\nСмотрим выводы раздела визуализации взаимосвязей и из них формулируем гипотезы.\nИ далее думаем какие гипотезы можно ещё проверить, которых у нас нет в выводах.\nНа основе проведенного анализа данных сформулирем следующие гипотезы:\n\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок.\n\nГипотеза 2: У мужчин средний доход выше\n\nГипотеза 3: Цель получения кредита не зависит от среднего ежемесяченого доход\n\nГипотеза 4: Средний доход по семейному статусу одинаковый, но у вдовцов отличается\n\nГипотеза 5: У должников в среднем больше детей\n\nГипотеза 6: У должников средний возраст ниже\n\nГипотеза 7: Медианный доход у должников и не должников не отличаетс\n\n\nНе забываем что гипотезы можно проверять и между 2 категориальными переменными.\nПроверять есть ли между ними зависимости.\nТакже если мы на графиках определили, что есть между 2 категориальными перменными связь, то тут можем это проверить\n\n\n\nПроверка гипотез\nВАЖНО\nпринято в выводе писать положительный результат\nто есть пишем что гипотеза подтвердилась и указваем какая гипотеза.\nТо если мы опровергли нулевую гипотезу, то пишем альтернативную гипотезу и пишем что она подтвердилась.\nЕсли у нас нет оснований отвергнуть нулевую гипотезу, то пишем нулевую гипотезу и пишем что нет оснований ее отвергнуть.\nТо есть если мы отвергаем, то формулируем вывод как положительный, чтобы не было путаницы, а если нет оснований, то так и пишем.\n\nАлгоритм проверки статистических гипотез\n\n\nпостановка задачи &gt; - Сформулировать, что мы хотим узнать о выборках с точки зрения бизнес задачи (равны ли средние доходы в группах) &gt; - перевод бизнес-вопроса на язык статистики: средний доход в группах - проверка равенства средних значений\nформулировка гипотез &gt; - формулировка нулевой гипотезы - с т.зр. равенства стат прараметров оцениваемых выборок\n&gt; (Н0: Средние траты клиентов по группе А равны средним тратам клинентов по группе В) &gt; - формулировка альтернативной гипотезы - с точки зрения неравенства параметров\n&gt; (Н1: Средние траты клиентов по группе А не равны средним тратам клинентов по группе В)\nвыбор критерия alpha (почему 0.05 или 0.01) &gt; - цена ошибки первого рода (при большой цене ошибки - в мед исследованиях, потенциальном ущербе ) - значение может быть больше, например 0.1 &gt; - в ежедневных бизнес задачах, обычно - 0.05\nанализ распределения &gt; - визуальная оценка &gt; - следим за выбросами &gt; - проверка гипотез о типе распредеделения (например критерий Шапиро-Уилка) &gt; - если распределение не нормальное и размер выборки достаточный (больше 30-50 элементов)\n&gt; может быть использован t-test именно для проверки гипотезы о равенстве средних.\n&gt; Согласно ЦПТ (центральная предельная теорема) средние этих выборок будут распределены нормально. См. статью Зотова\nвыбор критерия &gt; - при оценке равенства средних T-test или Welch T-test (если есть сомнения, то лучше Уэлча) &gt; - при рвенстве дисперсий используем обычный т тест &gt; - если дисперсии в выборках разные, то используем т теста Уэлча\nполучение результата &gt; - расчет p-value\nинтерпретация p-value &gt; - сравнение p-value и alpha &gt; - если альфа &gt; p-value - отвергаем нулевую гипотезу &gt; - если альфа &lt; p-value - не можем отвергнуть нулевую гипотезу\n\n\nКакая у нас задача\n\n\nИсследовать взаимосвязь между 2 переменными &gt; - обе переменные наминативные &gt; - Хи-квадрат Пирсона (не чувствителен к гетероскедастичности) (нормальность не обязательна) &gt; - обе переменные количественные &gt; - Коэффициент корреляции Пирсона (параметрика) (чувствителен к выбросам) (только непрерывные переменные) &gt; - Коэффициент корреляции Спирмена (чувствителен к выбросам) / Кендалла (менее чувствителен к выбросам) (непараметрика) (непрерывные переменные и порядковые категориальные переменные) &gt; - одна переменная номинативная (принимает 2 занчения), вторая количественная &gt; - значения &gt; - Т-критерий Стьюдента (параметрика) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) &gt; - если дисперсии равны (тест левена, барлета) и количество в группах равно (тест на равенство пропорций), то используем обычный т тест (эта формула более точно даст результат для этого случая) &gt; - если дисперсии не равны (тест левена, барлета) или количество в группах не равно (тест на равенство пропорций), то используем тест Уэлча (эта формула использует больше неопределенности и лучше подходит для этого случая) &gt; - U-критерий Манна-Уитни (непараметрика) (нормальность не обязательна) (не чувствителен к гетероскедастичности) &gt; Если тестируемая фича полностью сдвигает выборку на некий коэффициент theta или масштабирует выборку на некий параметр theta (theta &gt; 0),\n&gt; то критерий Манна-Уитни применим &gt; - доли &gt; - Z тест для долей (параметрика) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) &gt; - Chi-square тест для долей (непараметрика) (нормальность не обязательна) (не чувствителен к гетероскедастичности)\nИсследовать взаимосвязь между несколькими переменными &gt; - Дисперсионный анализ (параметрика) (дисперсии в группах должны быть примерно равны) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) &gt; - Welch’s ANOVA (устройчив к разной дисперсии в группах) (требует более больших размеров групп для точных результатов) (желательно нормальность) (чувствителен к выбросам) (не чувствителен к гетероскедастичности) &gt; - Критерий Краскела-Уоллиса (непараметрика) (нормальность не обязательна) (не чувствителен к гетероскедастичности) &gt; - Тест Тьюки (если anova или Краскела-Уоллиса нашил различия) (дисперсии в группах должны быть примерно равны) (параметрика) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности)\nПроверить на равенство дисперсий в группах перед anova &gt; - Levene’s test (не требует нормальность) (менее чувствительный) &gt; - Bartlett’s test (требует нормальность) (более чувствительный)\n\nСормируем словарь для подписей осей и названий гистограм.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количества детей']\n    , age = ['Возраст', 'возраста']\n    , total_income = ['Ежемесячный доход', 'ежемесячного дохода']    \n)\n\n\nПримеры для разных критериев\n\n2 категориальные переменные и мы хотим сравнить количество в каждой группе.\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок\n\nH0: Наличие детей не влияет на возврат кредита в срок.\nH1: Наличие детей влияет на возврат кредита в срок.\n\nТак как у нас обе переменных категориальные, то воспользуемся критерием хи-квадрат Пирсона.\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значнеий в каждой группе\nДля параметрических тестов в каждой группе должно быть больше 30 элементов, а для не параметрических тестов больше 10 значений.\n\n\nShow the code\ndf_by_userid_month['age_cat'].value_counts()\n\n\nage_cat\nстарше 60    855\nдо 30        751\n40-50        587\n50-60        532\n30-40        489\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.chi2_pearson(df.has_child, df.debt)\n\n\nХи-квадрат Пирсона\nalpha =  0.05\np-value =  1.724356890544321e-05\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\nНа уровне значимости 0.05 нулевая гипотеза о том, что наличие детей не влияет на возврат кредита в срок, была отклонена. Это свидетельствует о том, что существует статистически значимое влияние наличия детей на возврат кредита в срок.\n\n\nОдна категориальная переменная и мы хотим проверить отличается ли количество в одной категориальной переменной, то используем chisquare\nОн проверяет, насколько наблюдаемое распределение категориальной переменной отличается от ожидаемого равномерного распределения.\nГипотеза 1: Нет зависимости между количеством публикаций и днем недели.\nH0: День недели не влияет на количество объявлений\nH1: День недели влияет на количество объявлений\n\n\nShow the code\ndaily_counts = df['publication_weekday'].value_counts().sort_index()\ndaily_counts\n\n\npublication_weekday\nПонедельник    3591\nВторник        4157\nСреда          3940\nЧетверг        4270\nПятница        3970\nСуббота        1918\nВоскресенье    1681\nName: count, dtype: int64\n\n\nУбедимся, что у нас достаточно значнеий в каждой группе\nДля параметрических тестов в каждой группе должно быть больше 30 элементов, а для не параметрических тестов больше 10 значений.\n\n\nShow the code\ndf_by_userid_month['age_cat'].value_counts()\n\n\nage_cat\nстарше 60    855\nдо 30        751\n40-50        587\n50-60        532\n30-40        489\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.chisquare(daily_counts)\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что день недели не влияет на количество объявлений, была отклонена. Это указывает на то, что существует статистически значимое влияние дня недели на количество объявлений.\n\n\n\nКатегориальная с 2 значениями и числовая переменная (тест манна уитни)\nГипотеза 2: У мужчин средний доход выше\nH0: У мужчин средний доход не выше, чем у женщин\nH1: У мужчин средний доход выше, чем у женщин\nпосмотрим на распределение\n\n\nShow the code\npagri_data_tools.histogram(df.total_income, titles_for_axis)\n\n\nДелаем вывод о распределении.\nВыбираем критерий для проверки гипотезы.\nОпределяем уровнь значимости\nЕсли распределение не нормальное или много выбросов или просто нет уверености, что параметрика будет хрошо работать, то используем\nтест манна уитни\nУ нас значительные выбросы в доходе нужно использовать непараметрический тест\nИспользуем критерий Манна-Уитни\nАльтернатива будет - больше\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значнеий в каждой группе\nДля параметрических тестов в каждой группе должно быть больше 30 элементов, а для не параметрических тестов больше 10 значений.\n\n\nShow the code\ndf_by_userid_month['age_cat'].value_counts()\n\n\nage_cat\nстарше 60    855\nдо 30        751\n40-50        587\n50-60        532\n30-40        489\nName: count, dtype: int64\n\n\n\n\nShow the code\nmale = df[df.gender=='M']['total_income']\nfemale = df[df.gender=='F']['total_income']\n\n\nЕсли используем альтернативу, то отсчет идет от первого аргумента функции.\nТо есть он должен быть больше или меньше, исходя из постановки гипотезы. И исходя из этого выбераем параметр alternative.\n\n\nShow the code\npagri_data_tools.mannwhitneyu(male, female, alternative='l')\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что у мужчин средний доход не выше, чем у женщин, была отклонена. Это указывает на то, что доход мужчин статистически значимо выше, чем у женщин.\n\n\n\nКатегориальная с 2 значениями и числовая переменная (т тест)\nЕсли используем ттест, то сначала проводим тест на проверку дисперсии\nРаспределение близко к нормальному, поэтому будем использовать тест ANOVA\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: Дисперсия оценок критиков в разных категориях продаж не отличается.\nH1: Дисперсия оценок критиков в разных категориях продаж отличается.\nИспользуем тест Левена\n\n\nShow the code\nyes = df[df.debt=='есть']['age']\nno = df[df.debt=='нет']['age']\n\n\n\n\nShow the code\npagri_data_tools.levene([yes, no])\n\n\n\n\nShow the code\npagri_data_tools.levene_df(df[['sales_cat', 'critic_score']])\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\nЕсли используем альтернативу, то отсчет идет от первого аргумента функции.\nТо есть он должен быть больше или меньше, исходя из постановки гипотезы. И исходя из этого выбераем параметр alternative.\n\n\nShow the code\npagri_data_tools.ttest_ind(yes, no, equal_var=False, alternative='s')\n\n\nПостроим доверительный интервал\n\n\nShow the code\npagri_data_tools.confint_t_2samples(yes, no, equal_var=False, alternative='s')\n\n\n\n\nКатегориальная переменная, у которой больше 2 значений и числовая (ANOVA)\nГипотеза 4: Средний доход по семейному статусу не отличается\nH0: Средний ежемесячный доход не различается между группами по семейному статусу\nH1: Средний ежемесячный доход различается между группами по семейному статусу\nпосмотрим на распределение\n\n\nShow the code\npagri_data_tools.histogram(df.total_income, titles_for_axis)\n\n\nДелаем вывод о распределении.\nВыбираем критерий для проверки гипотезы.\nОпределяем уровнь значимости\nПредположения ANOVA: - Данные должны быть нормально распределены. - Дисперсии в группах должны быть равны (гомоскедастичность). - Наблюдения должны быть независимыми.\nЕсли хоть одно из этого не выполняется, то лучше использовать kruskal\nЕсли распределение не нормальное или много выбросов или просто нет уверености, что параметрика будет хрошо работать, то используем\nтест манна уитни\nЕсли эти предположения выполняются, то используем тест ANOVA\nЕсли используем anova, то сначала проводим тест на проверку дисперсии\nANOVA уже учитывает множественное тестирование в своей структуре.\nПоэтому поправка Бонферрони не нужна.\nНо если после anova мы хотим сравнить отдельные пары, то будет множественное сравнение, и поправка Бонферрони нужна.\nЕсли используем anova, то сначала проводим тест на проверку дисперсии\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: У должников и не должников дисперсия не отличается\nH1: У должников и не должников дисперсия отличается\nИспользуем тест Левена\n\n\nShow the code\ngropu_a = df[df.debt=='a']['age']\ngropu_b = df[df.debt=='b']['age']\ngropu_c = df[df.debt=='c']['age']\n\n\n\n\nShow the code\npagri_data_tools.levene([gropu_a, gropu_b, gropu_c])\n\n\n\n\nShow the code\npagri_data_tools.levene_df(df[['sales_cat', 'critic_score']])\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значнеий в каждой группе\nДля параметрических тестов в каждой группе должно быть больше 30 элементов, а для не параметрических тестов больше 10 значений.\n\n\nShow the code\ndf_by_userid_month['age_cat'].value_counts()\n\n\nage_cat\nстарше 60    855\nдо 30        751\n40-50        587\n50-60        532\n30-40        489\nName: count, dtype: int64\n\n\nЕсли дисперсии не отличаютс, то проводим обычный ANOVA\n\n\nShow the code\npagri_data_tools.anova_oneway_df(df[['family_status', 'total_income']])\n\n\nЕсли гипотеза о равенстве дисперсий была отклонена, то используем ANOVA Welch.\n\n\nShow the code\npagri_data_tools.anova_oneway_welch_df(df[['family_status', 'total_income']])\n\n\nЕсли нулевая гипотеза отклонилась, то можно определить в каких парах есть различия.\nМожно использовать множественное сравнение и т тест или мана уитни, но обязательно использовать поправку бонферони.\nИли можно использовать тест Тьюки.\nИспользуем тест Тьюки, чтобы определить различия между группами\nУровень значимости alpha выберем 0.05\nтест Тьюки уже учитывает множественное тестирование в своей структуре.\nПоэтому поправка Бонферрони не нужна.\n\n\nShow the code\npagri_data_tools.tukey_hsd_df(df[['family_status', 'total_income']])\n\n\nСмотрим в каких парах гипотеза отвергается\nВидим, что гипотеза отвергается в парах где есть вдова / вдовец\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средний ежемесячный доход не различается между группами по семейному статусу, была отклонена.\nЭто указывает на то, что семейный статус оказывает статистически значимое влияние на ежемесячный доход.\n\n\n\nКатегориальная переменная, у которой больше 2 значений и числовая (Kruskal-Wallis)\nЕсли распределение не нормальное или много выбросов или просто нет уверености, что параметрика будет хрошо работать, то используем непараметрические методы.\nИспользуем критерий Краскела-Уоллиса\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значнеий в каждой группе\nДля параметрических тестов в каждой группе должно быть больше 30 элементов, а для не параметрических тестов больше 10 значений.\n\n\nShow the code\ndf_by_userid_month['age_cat'].value_counts()\n\n\nage_cat\nстарше 60    855\nдо 30        751\n40-50        587\n50-60        532\n30-40        489\nName: count, dtype: int64\n\n\nкритерий Краскела-Уоллиса уже учитывает множественное тестирование в своей структуре.\nПоэтому поправка Бонферрони не нужна.\nНо если после критерия Краскела-Уоллиса мы хотим сравнить отдельные пары, то будет множественное сравнение, и поправка Бонферрони нужна.\n\n\nShow the code\npagri_data_tools.kruskal_df(df[['family_status', 'total_income']])\n\n\nЕсли нулевая гипотеза отклонилась, то можно определить в каких парах есть различия.\nМожно использовать множественное сравнение и т тест или мана уитни, но обязательно использовать поправку бонферони.\nИли можно использовать тест Тьюки.\nИспользуем тест Тьюки, чтобы определить различия между группами\nУровень значимости alpha выберем 0.05\nтест Тьюки уже учитывает множественное тестирование в своей структуре.\nПоэтому поправка Бонферрони не нужна.\n\n\nShow the code\npagri_data_tools.tukey_hsd_df(df[['family_status', 'total_income']])\n\n\nСмотрим в каких парах гипотеза отвергается\nВидим, что гипотеза отвергается в парах где есть вдова / вдовец\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средний ежемесячный доход не различается между группами по семейному статусу, была отклонена.\nЭто указывает на то, что семейный статус оказывает статистически значимое влияние на ежемесячный доход.\n\n\n\nБутстреп (категориальная переменная имеет 2 значения)\nЕсли мы не хотим использовать параметрику или не параметрику или нам нужно проверить гипотезу не по среднему, например, медиана или какой-то перцинтиль,\nто используем бутстреп\nЕсли категориальная переменная имеет 2 занчения.\nВместо теста манна уитни, когда нет уверености в т тесте, можно использовать бутстреп\nГипотеза 7: Медианный доход у должников и не должников не отличается\nH0: Медианный доход у должников и не должников не отличается\nH1: Медианный доход у должников и не должников отличается\nИспользуем бутстреп для проверке гипотезы\nУровень значимости alpha выберем 0.05\nКогда мы сравниваем две группы в бутстрепе, мы можем просто посмотреть, находится ли 0 внутри доверительного интервала, чтобы определить, существует ли статистически значимое различие между группами.\nЕсли 0 лежит вне доверительного интервала, то мы можем сказать, что существует статистически значимое различие между группами.\n\n\nShow the code\nyes = df[df.debt=='есть']['total_income']\nno = df[df.debt=='нет']['total_income']\n\n\n\n\nShow the code\nfig = pagri_data_tools.bootstrap_diff_2sample(yes, no, stat_func=np.median)\n\n\n\n\nShow the code\nfig.show()\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что медианный доход у должников и не должников не отличается, была отклонена.\nЭто указывает на то, что существует статистически значимая разница между медианным доходом должников и не должников.\n95 % доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34)\n\n\n\nБутстреп (категориальная переменная больше 2 значений)\nКогда у нас больше двух групп, способ определения результата по позиции нуля от разности внутри или вне доверительного интервала не работает, поскольку мы имеем несколько доверительных интервалов для каждой пары сравнений.\nЧтобы сравнить средние значения зарплаты между тремя и более группами, мы можем использовать бутстрэп. Алгоритм бутстрэпа будет следующим:\n\nСоздаем выборку с заменой из исходных данных.\nВычисляем средние значения зарплаты для каждой группы в выборке.\nВычисляем разности средних между группами (например, разность между Молодым и Взрослым, между Взрослым и Старым и т.д.).\nПовторяем шаги 1-3 many times (например, 1000 раз).\nСтроим гистограмму распределения разностей средних, полученных на шаге 3.\nОпределяем p-value\n\nПоправка Бонферрони заключается в том, что для значимости результата необходимо, чтобы p-value для каждого сравнения было меньше уровня значимости, разделенного на количество сравнений. Например, если уровень значимости равен 0.05, а мы делаем три сравнения, то необходимо, чтобы p-value для каждого сравнения было меньше 0.05/3 = 0.0167.\nВ случае использования бутстрэпа, мы можем применить поправку Бонферрони следующим образом:\n\nВычисляем разности средних для каждой пары сравнений.\nВычисляем p-value для каждой пары сравнений, используя гистограмму распределения разностей средних.\nПрименяем поправку Бонферрони, разделяя уровень значимости на количество сравнений.\nЕсли p-value для какой-либо пары сравнений меньше поправленного уровня значимости, то считаем, что различие между группами статистически значимо.\n\nВ нашем примере, если мы применяем поправку Бонферрони, то необходимо, чтобы p-value для каждого сравнения было меньше 0.05/3 = 0.0167. Если мы получили следующие результаты:\n\nРазность между Молодым и Взрослым: 8000 (p-value: 0.01)\nРазность между Взрослым и Старым: 3000 (p-value: 0.04)\nРазность между Молодым и Старым: 11000 (p-value: 0.001)\nТогда мы можем заключить, что средняя зарплата у Старых статистически значимо выше, чем у Молодых и Взрослых (поскольку p-value для этого сравнения меньше поправленного уровня значимости). Для остальных сравнений мы не можем сделать выводы о статистической значимости, поскольку p-value больше поправленного уровня значимости.\n\n\nДля проверки дисперсии\n\n\n\nShow the code\npagri_data_tools.levene_df\npagri_data_tools.levene\npagri_data_tools.bartlett_df\npagri_data_tools.bartlett\n\n\n\nВыбираем критерий\n\n\n\nShow the code\npagri_data_tools.chi2_pearson\npagri_data_tools.ttest_ind_df\npagri_data_tools.ttest_ind\npagri_data_tools.mannwhitneyu_df\npagri_data_tools.mannwhitneyu\npagri_data_tools.proportion_ztest_1sample\npagri_data_tools.proportions_ztest_2sample\npagri_data_tools.proportions_ztest_column_2sample\npagri_data_tools.proportions_chi2\npagri_data_tools.proportions_chi2_column\npagri_data_tools.anova_oneway_df\npagri_data_tools.anova_oneway\npagri_data_tools.tukey_hsd_df\npagri_data_tools.anova_oneway_welch_df\npagri_data_tools.kruskal_df\npagri_data_tools.kruskal\npagri_data_tools.bootstrap_diff_2sample # важно, сохраняем fig и в следующей ячейке делаем fig.shwo(), иначе на google colab работает некорректно\n\n\n\nЕсли отклоняем гипотезу, то строим доверитлеьный интервал\n\n\n\nShow the code\npagri_data_tools.confint_t_2samples\npagri_data_tools.confint_t_2samples_df\npagri_data_tools.confint_proportion_ztest_2sample\npagri_data_tools.confint_proportion_ztest_column_2sample\npagri_data_tools.confint_proportion_2sample_statsmodels\npagri_data_tools.confint_proportion_coluns_2sample_statsmodels\n\n\n\nСделать опцию в бутстреп функции, чтобы строился только доверительный интервал\n\n\nТакже сделать функцию для доверилеьных интервалов для мана уитни через\nthe Hodges-Lehmann estimation, which provides a point estimate and a confidence interval for the difference in medians.\n\n\n\nShow the code\nimport pingouin as pg\n\n# Perform the Mann-Whitney U test and calculate the confidence interval\nmw_test = pg.mwu(x, y, tail='two-sided', confidence=0.95)\n\n# Print the results\nprint(mw_test)\n\n\n\n\nShow the code\nimport numpy as np\nfrom scipy import stats\n\n# Perform the Mann-Whitney U test\nu_stat, p_value = stats.mannwhitneyu(x, y, alternative='two-sided')\n\n# Calculate the Hodges-Lehmann estimation\nhl_est = np.median(np.array([x_i - y_j for x_i in x for y_j in y]))\n\n# Calculate the confidence interval\nci = stats.t.interval(0.95, len(x) + len(y) - 2, loc=hl_est, scale=stats.sem(np.array([x_i - y_j for x_i in x for y_j in y])))\n\n# Print the results\nprint('Hodges-Lehmann estimation:', hl_est)\nprint('Confidence interval:', ci)\n\n\n\nПодход следуюищй - мы до раздела проверка гипотез, когда изучаем данные (разделы пропусков, выбросов, дубликатов, зависиместей между перменными и графики),\nто мы делаем выводы и формируем наблюдеия.\nВот эти наблюдения и выводы нужно проверить в проверке гипотез.\nИ потом в основном выводе уже писать не просто, что у нас мужчин больше чем женьшин, а писать, что на уровен значисомти таком то у нас мужчина больше чем\nженщин с таким то доверительным интервалом.\nТаким образом выводы по вомзожности должны проходить через этап проверки гипотез, тогда эти выводы становятся более существенными.\n\n\nГипотезы появляются, когда мы задаем вопросы данным. Мы изучили данные, преобработали и теперь начинаем задавать вопросы.\nВыдвигаем гипотезу (заметили что-то необычное и хотим проверить), далее формулируем ее и далее проверяем.\nНе забываем формулировать гипотезы словами. Пишем что является гипотезой H0, а что гипотезой H1\nФормулируем все гипотезы, которые хотим проверить. Если будет 100 гипотез, то все 100 нужно сформулировать и потом проверить и сделать вывод.\nГипотезы могут быть и простыми вопросами без гипотез H0 и H1, такие гипотезы мы проверяем графиками или анализируя таблицу.\nВосновном, когда мы собиаремся применить стат аппарат для проверки гипотезы, то мы должны записать ее через H0 и H1.\n\n\nОтличная статья про доверительные интервалы для разных статистик\nhttps://habr.com/ru/articles/807051/\n\n\nBootstrapping\n\n\nВ бутстрепе, если мы хотим сравнить две выборки, то нельзя смотреть\nгде находится исходная разница средних в бутстрапированной выборке\nТак как мы берем бутстреп из наших выборок и впролне реально.что наша разность\nбудет близка к с реднему бутстропированной выборки\nПоэтому p value нужно определять по месту нуля в бутстропированной выборке\n\n\nПосмотрим p value для 0 (если различий нет, то разница должна быть 0) Для этого посчитаем cdf для + и - среднего, чтобы получить 2 значения cdf а теперь возьмем минимум и умножим на 2, так как альт гипотеза у нас.что просто не равно 0, значит и справа и слева\n\n\n\nShow the code\nEstimating the power of a non-parametric test using bootstrapping involves simulating the testing process multiple times to estimate the probability of rejecting the null hypothesis. Here's a general outline of the steps:\n\n**Specify the null and alternative hypotheses **: Define the null and alternative hypotheses for your test. For example, the null hypothesis might be that the two groups have the same distribution, and the alternative hypothesis might be that the two groups have different distributions.\n\nGenerate simulated data: Generate simulated data that reflects the null hypothesis. For example, you could generate two groups of random data from the same distribution.\n\nPerform the Mann-Whitney U test: Perform the Mann-Whitney U test on the simulated data to obtain a p-value.\n\nRepeat steps 2-3 many times: Repeat steps 2-3 many times (e.g., 1000 times) to generate a distribution of p-values under the null hypothesis.\n\nEstimate the power: Estimate the power of the test by calculating the proportion of times the p-value is below a certain significance level (e.g., 0.05) when the alternative hypothesis is true. To do this, you'll need to generate simulated data that reflects the alternative hypothesis and repeat steps 2-4.\n\n\n\n\n\nПромежуточный вывод\nЧтобы собрать все наблюдения используем это\nнужно поставить _pagristart_ где начало и _pagriend_ где конец\nНе забываем удалить метки _pagristart_ и _pagriend_\n\n\nShow the code\nimport IPython\nnotebook_path = \"/\".join(\n        IPython.extract_module_locals()[1][\"__vsc_ipynb_file__\"].split(\"/\"))\npagri_data_tools.collect_observations(notebook_path, '/home/pagri/git_repos/pagri-projects/quarto/projects/prospective_tariff_for_telecom/temp_for_report.ipynb')\n\n\n\nНа уровне значимости 0.05 гипотеза, что есть зависимость между количеством публикаций и днем недели подтвердилась.\n\nНа уровне значимости 0.05 гипотеза, что удаленность от центра влияет на количество публикаций, подтвердилась."
  },
  {
    "objectID": "projects/research_of_food_service_industry/research_of_food_service_industry.html#общий-вывод",
    "href": "projects/research_of_food_service_industry/research_of_food_service_industry.html#общий-вывод",
    "title": "Исследование рынка заведений общественного питания",
    "section": "Общий вывод",
    "text": "Общий вывод\nВАЖНО\nпроверить, что результат проверки гипотез учтен в выводах.\nТо есть если у нас был промежуточный вывод, но проверка гипотез опровергла этот вывод, то нужно изменить вывод на противоположный.\nПроходим собираем все промежуточные выводы, вставляем сюда и выбираем важные.\nВАЖНО\nиз промежуточных выводов в изучении данных собрать подобные выводы:\n- Рынок жилья представлен объектами общей площадью от 12 до 900 кв.м. В основном это жилье от 30 до 100 кв.м. с пиком в сегменте 30-75 кв.м. В жилой площади квартиры преобладает диапазон 15-50 кв.м. Размер площади кухни-от 5 до 15 кв.м., с пиком 9 кв.м. Это стандартные небольшие квартиры эконом-класса. Подавляющее большинство квартир- 1-3 комнатные, с высотой потолка 2,6-2,7 м., но встречаются редкие варианты до 19 комнат и высотой потолка до 20 кв.м. (либо ошибка, либо свободная планировка с возможностью многоуровневости). - Цены на квартиры в основном находятся в диапазоне 2.5-15 млн.руб. с пиком в области 3-5 млн.руб.(небольшие квартиры эконом-класса), но есть и уникальные объекты стоимостью до 763 млн.руб. Стоимость квадратного метра недвижимости варьируется от 50-130 тыс.руб. с пиком в 90-100 тыс.руб. Наряду с типовыми предложениями на продажу выставлено жилье премиум-класса со стоимостью 1 кв.м. до 1.9 млн.руб. - Общее время продажи жилой недвижимости-до 1618 дней. Половина квартир продается за период до 94 дней, а среднее значение по всему массиву данных -185 дней. При этом можно увидеть, что пик продаж приходится на 45-60 день с момента публикации. Исходя из расчета выбросов можно сказать, что продажи прошли аномально быстро, если сделки были оформлены в период до 16 дней и слишком долго, если до оформления сделки свыше 1134 дней.\nЭто важно, так как дает представление о данных в сжатой и удобной форме.\nА далее уже идут выводы о зависимостях.\nНе забываем ставить 2 пробела после Выводы и другие для quarto\nПосле каждой строки поставить либо перенос, либо 2 пробела для quarto\nтак как когда следующая строка начинается с дефиса и jupyter это понимает и делает новую строку,\nто quarto не сделает новую строку\nВыводы:\n\nДолги есть у людей с разным доходом.\n\nУ должников в среднем больше детей.\n\nУ должников среднее количество детей больше у женщин, а у не должников срднее количество детей больше у мужчин\n\nУ должников средний возраст немного ниже для всех категорий семейного положения.\n\nМедианный доход у должников и не должников практически не отличается\n\nДолжники имеют ниже средний возраст как мужчины так и женщины. Ситуация сохраняется во всех группах дохода.\n\nЦель получения кредита практически не зависит от среднего ежемесяченого дохода.\n\n92 % клиентов не имеют долга.\n\nЛюди от 30 до 50 лет имеют самый высокий средний доход.\n\nБольше всего кредит берут на цели, связанные с недвижимостью, кроме людей в гражданском браке\n\nЛюди в гражданском браке чаще берут кредит на свадьбу\n\nЖенщины чаще возвращают кредит.\n\nАнализ значимости признаков для модели случайного леса показал, что доход является самым значимым признаком для предсказания задолженности.\n\n58 % клиентов либо женаты, либо замужем. 19 % в гражданском браке. Можно сделать вывод что большинство в браке.\n\nБольшинство клиентов женщины (66 процентов).\n\nТолько 5 процентов клиентов моложе 25 лет. Основная часть клиентов старше 30 лет.\n\nЧем меньше количество детей, тем больше значений с высоким доходом.\n\nБолшая часть женатых имеет доход 100-200 тыс\n\nНа всех уровнях образоания, кроме ученой степени, доход у мужчин выше.\n\nУ мужчин, которые в браке или были в браке, количество детей больше, чем у женщин в той же категории.\n\nАномалии и особенности в данных:\n\nВ датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\n\nВ столбце с количеством детей есть отрицательные значения. 47 штук. Меньше 1 процента от всего датафрейма. Также есть клиенты с 20 детьми.\n\nКолонока общий трудовой стаж содержит 74 % отрицаетльных значений. А также максимальное количество дней стажа больше 400 тысяч дней, это больше 1000 лет.\n\nВ колонке возраста 101 нулевое значени.\n\nКолонка дохода имеет слишком много знаков после запятой.\n\nВ колонке с образованием присутствуют одни и те же знчения с разными регистрами. При этом в колонке с id образования все впрорядке.\n\nРезультаты предобработки данных:\n\nУдалили колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nКолонка со стажем имеет совершенно некорректные данные. Чтобы не внести искажение в анализ, удалим эту колонку.\n\nРезультаты проверки гипотез:\n\nГипотеза 1: Средняя выручка с пользователя не зависит от возрастной группы.\nРезультат: На уровне значимости 0.05 гипотеза была отклонена.\nЭто указывает на то, что возрастная группа оказывает статистически значимое влияние на среднюю выручку с пользователя.\nГипотеза 2: Средняя выручка между тарифами Smart и Ultra не отличается.\nРезультат: На уровне значимости 0.05 гипотеза была отклонена.\nЭто указывает на то, что выручка от тарифа Smart статистически значимо выше, чем от тарифа Ultra.\nГипотеза 3: Средняя выручка с пользователя не зависит от месяца.\nРезультат: На уровне значимости 0.05 гипотеза была отклонена.\nЭто указывает на то, что месяц оказывает статистически значимое влияние на среднюю выручку с пользователя.\nГипотеза 4: Средняя выручка пользователей из Москвы не отличается от выручки пользователей из других регионов.\nРезультат: На уровне значимости 0.05 нет оснований отвергнуть гипотезу.\n\nРекомендации:\n\nДобавить контроль данных, чтобы не дублировались значения с разными регистрами в колонке с образованием.\nДобавить уникальный идентификатор клиента, чтобы избежать дублирования строк.\nДобавить проверку на отрицательные значения и на слишком болшьшие значения в количестве детей при загрузке данных.\nВыяснить откуда возникают отрицательные значения в трудовом стаже и добавить контроль ввода невалидных данных.\nВыяснить причину нулевых значений в колонке возраста и добавить проверку на нулевые значения при загрузке данных.\nВыяснить причину большого количества знаков после запятой в колонке дохода.\n\nВАЖНО\nячейки далее лучше удалить до обработки ноутбука, чтобы не было ошибок\nКопировать что нужно можно из шаблона\n\nЧто нужно сообщить в выводе\n\n\nинформацию о том, что удалось подтвердить гипотезы (тут пишем только те, которые удалось подтвердить)\nвсю информацию о датасете, которые важны. Дубликаты, которые несут практическую пользу и рекомендации по ним, пропуски также с рекомендациями &gt; и остальные моменты по данным и рекомендации. Тут важно указывать именно найденные аномалии, которые имеют практическую пользу, которые нужно исправить и прочее.\n&gt; Пишем, что были найдены выбросы, они были связаны возможно с тем то и тем то.\nи в конце обязательно call to action &gt; написать что необходимо сделать с этими результатами\n\n\nСоветы по оформлению общего выывод\n\n\nне нужно вставлять таблицы и графики в вывод. &gt; В выводе пишем словами самое важное и практически полезное, что мы получили, причем в порядке убывания важности.\n&gt; И когда мы пишем, что увидели то-то, то приводим гиперссылку на график или результат ячейки, где это получено.\n&gt; Так будет компактный вывод и при необходимости человек сможет быстро перейти и посмотреть график или таблицу\n\nУдалось подтвердить гипотезу о влиянии различных характеристик клиента на факт погашения кредита в срок. Каждый из рассмотренных параметров оказывает влияние на надёжность заёмщика. Рассмотренные факторы по-разному влияют на надёжность заёмщиков. Например, семейное положение оказалось более значимым фактором, чем уровень дохода.\n\nВ ходе анализа исходного набора данных было проведено (были устранены пропуски в двух колонках с числовыми значениями - ‘total_income’ и ‘days_employed’).\nПосле устранения явных и скрытых дупликатов и удаления оставшихся после обогащения пропусков объем датасета сократился на 0.05%\nБыли устранены выбросы в колонках ‘days_employed’ и ‘children’: в первом случае выбросы возникли в результате системной ошибки (данные были внесены в часах, а не в днях); во втором случае ошибка, вероятнее всего была допущена людьми, вносившими данные в систему\n…\n\nНеобходимо\n\n\nЗапросить в отделе по работе с клиентами информацию о возможности брать кредит без подтверждения дохода.\nСообщить коллегам, занимающимся выгрузкой о наличие дубликатов, если вопрос не разрешится, запросить индентификационный номер клиента к датасету.\nПрописать в задаче на поставку данных формат данных (пол только F и M, положительные значения). Приложить информацию о найденных аномалиях.\n\n\nСначала проверяем орфографические ошибки\n\n\nShow the code\nimport IPython\nnotebook_path = \"/\".join(\n        IPython.extract_module_locals()[1][\"__vsc_ipynb_file__\"].split(\"/\"))\npagri_data_tools.correct_notebook_text(notebook_path)\n\n\nЗатем создаем номера у глав и оглавление\n\nЧтобы добавить номера глав и ссылки для оглавления и сделать оглавлнеие\nоглавление добавиться в начало ноутбука\n\n\nСначала можно в режиме draft сделать пробный варант, проверить и потом уже запустить в режиме final\n\n\n\nShow the code\nimport IPython\nnotebook_path = \"/\".join(\n        IPython.extract_module_locals()[1][\"__vsc_ipynb_file__\"].split(\"/\"))\npagri_data_tools.make_headers_link_and_toc(notebook_path)\n\n\nДалее создаем ссыки на выводы и аномалии\nВыбираем нужные выводы и нужный порядок выводов и добавляем их в список выводов и используем эту функцию\n\n\nShow the code\nimport IPython\nnotebook_path = \"/\".join(\n        IPython.extract_module_locals()[1][\"__vsc_ipynb_file__\"].split(\"/\"))\nconclusions = [\n    'С ноября 2017 по март 2018 тратилось много денег на компаню с id 3.'\n    , 'Сумма заказа варируется от 0 до 2633.28 у.е.'\n]\npagri_data_tools.add_conclusions(notebook_path, conclusions)\n\n\n\nЧтобы было удобно искать где вставить якорь для ссылки, названия выводов и аномалий должно точно совпадать\nв итоговом списке аномалий и выводов и в тех местах (то есть в наблюдениях под ячейками), куда мы будем помещать ссылки\n\n\nЧтобы сделать ссылки на выводы и аномалии, нужно\nв тех местах, куда хотим переходить по ссылке вставить текст выводов или аномалий (берем прямо из основных выводов)\nвыводы должны начинаться с _conclusion_\nаномалии должны начинаться с _anomalies_\nПримеры:\n\nОкончательный текст выводов можно будет потом исправить в выводах всего отчета и поместить их в начало,\nважно, выводы не менять до момента, пока мы не создадим ссылки на них.\nЧтобы автомтика не нарушилась.\nЗатем можно будет исправить уже сам текст выводов и это не нарушит ссылки.\n\n\nShow the code\n==== _anomalies_ В столбце с количеством детей есть отрицательные значения. 47 штук. \n\n\n\nМожно в одной ячейке и выводы и аномалии, с обеих ссылок будет переходить сюда, но назад будет возвращаться только в одно место,\nв то, которое было первым в ячейке\n\nВАЖНО\nразобраться почему когда рядом ставишь 2 вывода или аномалии или 1 вывод плюс 1 аномалия (вместе 2), то появляется\n2 ссылки на оглавление\nДелаем так - Из всех выводов в выбираем те, которые хотим поместить в начале отчета - Собриаем их в отдельном файле (чтобы удобно было копировать) Можно использовать clipboard history - Добавляем в начало вывода conclusiions\n- Далее по одному выводу полностью копируем, вставляем в поиск и удаляем в начале conclusions\nпри этом в буфере обмена с conclusions - Переходим в нужное место через поиск и вставляем.\n\n\nShow the code\n==== _conclusion_ Только 5 процентов клиентов моложе 25 лет. Основная часть клиентов старше 30 лет.\n==== _anomalies_ В колонке возраста 101 нулевое значени.\n\n\nВАЖНО\nПроийти просмотреть чтобы не было 2 раза близко “к оглавлению”\nэто может быть из-за того что у нас ссылки на выводы рядом с названием главы или раздела\nИли просто могут быть 2 выводы рядом.\n\nСодеражние выводов и аномалий появится в начале ноутбука\nтакже 2 режима draft и final\n\n\nПодумать как сделать удобнее создание выводов\nПока лучше сначала взять выводы из наблюдений и выбрать из них наиболее важные и интересные, не меняя их.\nДалее берем этот список и поиском находим ячейку с этим выводом и перед графиком помещаем\nconclusion и сам вывод\n\n\nЧтобы был нужный порядок в списке выводов и аномалий в начале отчета, нужно передвать словарь со списками выводов и аномалий.\nПеременная order принимает словарь, где ключи conclusions и anomalies, а значения это соответствующие списки\n\n\nПримеры списков\n\n\n\nShow the code\norder = dict(\n            conclusions =[ 'Женщины чаще возвращают кредит, чем мужчины.']\n            , anomalies = ['В датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.  ']\n)\n\n\nСтавим переносы для булитов там, где их нет\n\n\nShow the code\nimport IPython\nnotebook_path = \"/\".join(\n        IPython.extract_module_locals()[1][\"__vsc_ipynb_file__\"].split(\"/\"))\npagri_data_tools.check_observes_new_line(notebook_path, mode='final')\n\n\nВАЖНО\nне забываме перенести рекомендации в начало после аномалий\nПорядок - главные выводы - аномалии в данных - рекомендации\nЕсли сильно нужно, создаем ссыки на гипотезы\n\nВ главе гипотез для каждой гипоетзы, куда будем переходить из оглавления, в начале перед гипотезой ставим hypothesis и пробел\n\n\n\nShow the code\n==== _hypotsis_ **Гипотеза 1: Название гипотезы**\n\n\n\nВыполняем следующую функцию и в начале отчета появится список гипотез с ссылками\nДалее нужно добавить результат гипотез вручную\n\n\n\nShow the code\npagri_data_tools.add_hypotheses_links_and_toc()\n\n\nФинальное размещение ноутбука на git hub с ссылкой на google colab\n\nКомитим на гит хаб финальную версию ноутбука.\nСоздаем на гит хаб readme файл проекта, в котором в начале идет ссылка на google colab\nДалее ее открываем и переходим на google colab\nВыполняем все ячейки, смотрим все ли правильно отобразилось.\nДалее в меню File выбираем сохранить копию на гит хаб.\nНе меняем имя, тогда все содержимое ноутбука сохраниться на гит хаб."
  },
  {
    "objectID": "projects/research_on_video_game_sales/research_on_video_game_sales.html",
    "href": "projects/research_on_video_game_sales/research_on_video_game_sales.html",
    "title": "Исследование продаж компьютерных игр",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nИнтернет-магазин ‘Стримчик’ разрабатывает стратегию на 2017 год для повышения продаж компьютерных игр, основываясь на анализе исторических данных о продажах, оценках пользователей и экспертов, жанрах и платформах. Анализ позволит выявить закономерности, которые помогут определить потенциально популярные продукты и эффективно спланировать рекламные кампании.\nЦель:\nОпределить ключевые факторы, влияющие на успешность продаж компьютерных игр, установить взаимосвязи между ними и объемами продаж, а также проанализировать изменения этих показателей в зависимости от платформ, регионов продвижения и исторического периода.\nИсточники данных:\nИсторические данные из открытых источников о продажах игр, включая оценки пользователей и экспертов, а также информацию о жанрах и платформах.\nГлавные выводы:\n- В основном критики ставят оценки от 60 до 79.\n- В освновном пользователи ставят оценки от 6.4 до 8.2.\n- Пользователи ставят более высокую оценку, чем критики.\n- На момент 2016 года самые актуальные платформы - PS4, XOne, 3DS.\n- Игры с годами выпуска 1996-1998 имеют самые высокие средние оценки и мало выбросов.\n- Игры жанра role playing получают более высокую оценку.\n- Игры на платформе DC имеют саму высокую среднюю оценку.\n- Игры из категории где много продаж имеют в среднем оценку выше чем другие категории количества проданных копий\n- Умеренная положительная корреляция между оценкой критиков и оценкой пользователей.\n- В жанре Misc больше всего игр на платформе DS.\n- Во всех жанрах средних оценок критиков больше всего.\n- Во всех жанрах средних оценок пользователей болше всего.\n- Критики ставят больше средних оценок.\n- Пользователи ставят больше средних оценок.\n- Игры во всех жантрах, кроме Role-Playing, в Северной Америке продавались лучше.\n- Игры в жанре Role-Playing в Японии продавались лучше, чем в других регионах.\n- С низким рейтингом игры значительно хуже продаются.\n- В жанрах shooter и racing болше продавалось игр с высокой оценкой.\n- В Северной Америке больше всего продаж на платформах X360 и PS2.\n- Жанр Role-Playing имеет самую высокую среднюю оценку.\n- Жанры только для взрослых и для детей и взрослых имеют самые высокие средние оценки.\n- Суммарное количество проданных копий выше у рейтинга для всех.\n- Больше всего суммарных продаж у жанра спорт и рейтинга для всех Также высокие продажи игр в жанре shooter с рейтингом для взрослых и в жанре action с рейтингом для взрослых\n- До 2008-2009 года происходил рост продаж, а затем начинается снижение.\n- До 2000 года почти все игры без рейтинга.\n- Начиная с 1996 года по 2000 год средняя оценка упала примерно с 85 до 70. И далее колеблется около 70.\n- Игры в жанре Action и Shooter до 2014 года не падали в продажах, в отличии от других жанров, которые начали падать в продажах с 2010-2011 годов.\n- Суммарное количество продаж расло до 2008 года, затем снижалось.\n- Рост продаж до 2008 года в Северной Америке был более бурный, чем в других регионах.\n- С 2008 года продажи в Северной Америке снижались быстрее, чем в дургих регионах, и к 2014 году сравнялись с Европой.\n- С 1996 до 1999 сильно выделяются продажи без рейтинга критиков\nАномалии и особенности в данных:\n- В столбце с годом выпуска 2 % пропусков.\n- В столбце с оценкой критиков 51% пропущенных значений.\n- В столбце с оценкой пользователей 55% пропущенных значений.\n- Значение 0 в оценке пользователей является аномалией.\n- В столбце с названием игры есть 2 пропущенных значения (менее 1%).\n- В столбце с жанром игры 2% пропусков.\n- В рейтинге 40% пропусков.\n- У игры Madden NFL 13 есть дубли, но все параметры совпадают в дублях, кроме количества проданных копий. Возможно часть проданных копий засчиталась отдельно.\n- Пропуски в одних и тех же строках в названии игры и в жанре.\n- Почти все пропуски в рейтинге находятся в тех же строках, что и пропуски в оценке критиков и оценке пользователей.\n- Большинство пропусков в столбцах оценка пользователей и оценка критиков находятся в одних и тех же строках.\n- Процент выбросов во всех колонках, кроме года выпуска, находится в диапазоне 0-5%. Это может указывать на то, что данные достаточно чистые и не содержат значительных аномалий.\n- Процент выбросов во всех колонках примерно одинаковый, что может свидетельствовать об однородности данных.\nРекомендации:"
  },
  {
    "objectID": "projects/research_on_video_game_sales/research_on_video_game_sales.html#загрузка-библиотек",
    "href": "projects/research_on_video_game_sales/research_on_video_game_sales.html#загрузка-библиотек",
    "title": "Исследование продаж компьютерных игр",
    "section": "Загрузка библиотек ",
    "text": "Загрузка библиотек \n\n\nShow the code\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore\npd.set_option('display.max_columns', None)\npd.options.display.float_format = '{:,.2f}'.format"
  },
  {
    "objectID": "projects/research_on_video_game_sales/research_on_video_game_sales.html#описание-и-изучение-данных",
    "href": "projects/research_on_video_game_sales/research_on_video_game_sales.html#описание-и-изучение-данных",
    "title": "Исследование продаж компьютерных игр",
    "section": "1. Описание и изучение данных",
    "text": "1. Описание и изучение данных\n\n1.1 Описание данных\n\nName - название игры\nPlatform - платформа\nYear_of_Release - год выпуска\nGenre - жанр игры\nNA_sales - продажи в Северной Америке (миллионы проданных копий)\nEU_sales - продажи в Европе (миллионы проданных копий)\nJP_sales - продажи в Японии (миллионы проданных копий)\nOther_sales - продажи в других странах (миллионы проданных копий)\nCritic_Score - оценка критиков (максимум 100)\nUser_Score - оценка пользователей (максимум 10)\nRating - рейтинг от организации ESRB (англ. Entertainment Software Rating Board). Эта ассоциация определяет рейтинг компьютерных игр и присваивает им подходящую возрастную категорию.\n\n\n\n1.2 Изучение данных\n\n1.2.1 Изучение переменных\nЗагружаем данные и задаем типы данных для столбцов, где это возможно.\n\n\nShow the code\ndtype = {'Platform': 'category', 'Genre': 'category', 'Rating': 'category'}\ndf = pd.read_csv('https://code.s3.yandex.net/datasets/games.csv', dtype=dtype)\ndf.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nName\nPlatform\nYear_of_Release\nGenre\nNA_sales\nEU_sales\nJP_sales\nOther_sales\nCritic_Score\nUser_Score\nRating\n\n\n\n\n609\nSpace Invaders\n2600\nNaN\nShooter\n2.36\n0.14\n0.00\n0.03\nNaN\nNaN\nNaN\n\n\n12182\nFIFA Soccer 06\nGBA\n2,005.00\nSports\n0.05\n0.02\n0.00\n0.00\nNaN\ntbd\nE\n\n\n7100\nBuzz! Junior: RoboJam\nPS2\n2,007.00\nMisc\n0.11\n0.09\n0.00\n0.03\nNaN\nNaN\nNaN\n\n\n16385\nKamaitachi no Yoru 2: Tokubetsu Hen\nPSP\n2,006.00\nAdventure\n0.00\n0.00\n0.01\n0.00\nNaN\nNaN\nNaN\n\n\n12356\nTonka Rescue Patrol\nGC\n2,003.00\nAction\n0.05\n0.01\n0.00\n0.00\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nПриведем названия колонок к нижнему регистру.\n\n\nShow the code\ndf.columns = [col.lower() for col in df.columns]\n\n\nСтолбец с оценками пользователей имеет тип object. Это странно. Изучим для начала этот столбец.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df, column='user_score', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 1: Статистика и топ-10 значений столбца \"user_score\"\n\n\n\n\n\nValues\n10 014 (60%)\n\ntbd (24%)\n\n\nMissing\n6 701 (40%)\n\n7.8 (3%)\n\n\nDistinct\n96 (1%)\n\n8 (3%)\n\n\nDuplicated origin\n16 618 (99.4%)\n\n8.2 (3%)\n\n\nDupl (modify - origin)\n---\n\n8.3 (3%)\n\n\nEmpty\n---\n\n8.5 (3%)\n\n\nRAM (Mb)\n1\n\n7.5 (3%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nЕсть странное значение tbd, которое не является числом. И таких значений 24 %.\n\ntbd означает “to be determined” - “будет определено позже”\nТак как нам нужен этот столбец в числовом виде, то заменим tbd на на. И заменим тип данных на числовой.\n\n\nShow the code\ndf.user_score.isna().sum()\n\n\nnp.int64(6701)\n\n\n\n\nShow the code\n(df.user_score == 'tbd').sum()\n\n\nnp.int64(2424)\n\n\n\n\nShow the code\ndf['user_score'] = df['user_score'].replace('tbd', pd.NA)\ndf['user_score'] = pd.to_numeric(df['user_score'])\n\n\n\n\nShow the code\ndf.user_score.isna().sum()\n\n\nnp.int64(9125)\n\n\n\n\nShow the code\n(df.user_score == 'tbd').sum()\n\n\nnp.int64(0)\n\n\nИзучим каждый столбец отдельно.\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df)\ngen.next()\n\n\n\n\n\n\n\nTable 2: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n16 715\n11\n2\n---\n---\n\n\n\n\n\n\n\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 3: Статистика и гистограмма столбца \"year_of_release\"\n\n\n\n\n\nValues\n16 446 (98%)\n\nMax\n2 016\n\nAvg\n2 006.48\n\n2 008 (9%)\n\n\nMissing\n269 (2%)\n\n95%\n2 015\n\nMode\n2 008\n\n2 009 (9%)\n\n\nDistinct\n37 (&lt;1%)\n\n75%\n2 010\n\nRange\n36\n\n2 010 (8%)\n\n\nDuplicates\n16 677 (99.8%)\n\nMedian\n2 007\n\niQR\n7\n\n2 007 (7%)\n\n\nZeros\n---\n\n25%\n2 003\n\nstd\n5.88\n\n2 011 (7%)\n\n\nNegative\n---\n\n5%\n1 996\n\nkurt\n1.77\n\n2 006 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1 980\n\nskew\n-0.97\n\n2 005 (6%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nИгры имеют год выпуска от 1980 до 2016 года.\nОсновная часть игр имеет год выпуска от 2003 до 2010 года.\nБольше всего игр 2008 года.\nВ столбце с годом выпуска 2 % пропусков.\n\n\n\nShow the code\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 4: Статистика и гистограмма столбца \"na_sales\"\n\n\n\n\n\nValues\n16 715 (100%)\n\nMax\n41.36\n\nAvg\n0.26\n\n0 (27%)\n\n\nMissing\n---\n\n95%\n1.06\n\nMode\n0\n\n0.02 (3%)\n\n\nDistinct\n402 (2%)\n\n75%\n0.24\n\nRange\n41.36\n\n0.03 (3%)\n\n\nDuplicates\n16 313 (98%)\n\nMedian\n0.08\n\niQR\n0.24\n\n0.04 (3%)\n\n\nZeros\n4 508 (27%)\n\n25%\n0\n\nstd\n0.81\n\n0.01 (3%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n648.57\n\n0.05 (3%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n18.77\n\n0.06 (3%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nВ столбце с продажами в Северной Америке есть нули (27%). По видимому для этих игр не было продаж в Северной Америке.\nКоличество проданных игр в Северной Америке лежит в диапазоне от 0 до 41.36 млн.\nВ основном количество проданных игр в Северной Америке находится в диапазоне от 0 до 0.24 млн.\n\n\n\nShow the code\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 5: Статистика и гистограмма столбца \"eu_sales\"\n\n\n\n\n\nValues\n16 715 (100%)\n\nMax\n28.96\n\nAvg\n0.15\n\n0 (35%)\n\n\nMissing\n---\n\n95%\n0.62\n\nMode\n0\n\n0.01 (9%)\n\n\nDistinct\n307 (2%)\n\n75%\n0.11\n\nRange\n28.96\n\n0.02 (8%)\n\n\nDuplicates\n16 408 (98%)\n\nMedian\n0.02\n\niQR\n0.11\n\n0.03 (6%)\n\n\nZeros\n5 870 (35%)\n\n25%\n0\n\nstd\n0.5\n\n0.04 (4%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n755.52\n\n0.05 (3%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n18.85\n\n0.06 (2%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nВ столбце с продажами в Европе есть нули (35%). По видимому для этих игр не было продаж в Европе.\nКоличество проданных игр в Европе лежит в диапазоне от 0 до 28.96 млн.\nВ основном количество проданных игр в Европе находится в диапазоне от 0 до 0.11 млн.\n\n\n\nShow the code\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 6: Статистика и гистограмма столбца \"jp_sales\"\n\n\n\n\n\nValues\n16 715 (100%)\n\nMax\n10.22\n\nAvg\n0.08\n\n0 (63%)\n\n\nMissing\n---\n\n95%\n0.36\n\nMode\n0\n\n0.02 (4%)\n\n\nDistinct\n244 (1%)\n\n75%\n0.04\n\nRange\n10.22\n\n0.01 (4%)\n\n\nDuplicates\n16 471 (99%)\n\nMedian\n0\n\niQR\n0.04\n\n0.03 (3%)\n\n\nZeros\n10 514 (63%)\n\n25%\n0\n\nstd\n0.31\n\n0.04 (2%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n194.27\n\n0.05 (2%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n11.21\n\n0.06 (2%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nВ столбце с продажами в Японии есть нули (63%). По видимому для этих игр не было продаж в Японии.\nКоличество проданных игр в Японии лежит в диапазоне от 0 до 10.22 млн.\nВ основном количество проданных игр в Японии находится в диапазоне от 0 до 0.4 млн.\n\n\n\nShow the code\ngen.next('dual')\n\n\n\n            \n                \n\n\n\n\nTable 7: Статистика и гистограмма столбца \"other_sales\"\n\n\n\n\n\nValues\n16 715 (100%)\n\nMax\n10.57\n\nAvg\n0.05\n\n0 (39%)\n\n\nMissing\n---\n\n95%\n0.2\n\nMode\n0\n\n0.01 (21%)\n\n\nDistinct\n155 (1%)\n\n75%\n0.03\n\nRange\n10.57\n\n0.02 (10%)\n\n\nDuplicates\n16 560 (99.1%)\n\nMedian\n0.01\n\niQR\n0.03\n\n0.03 (6%)\n\n\nZeros\n6 601 (39%)\n\n25%\n0\n\nstd\n0.19\n\n0.04 (4%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n1054.90\n\n0.05 (3%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n24.58\n\n0.06 (2%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n            \n                \n                    \n                            \n            \n            \n\n\nНаблюдения:\n\nВ столбце с продажами в других странах есть нули (39%). По видимому для этих игр не было продаж в других странах.\nКоличество проданных игр в других странах лежит в диапазоне от 0 до 10.57 млн.\nВ основном количество проданных игр в других странах находится в диапазоне от 0 до 0.03 млн.\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 8: Статистика и гистограмма столбца \"critic_score\"\n\n\n\n\n\nValues\n8 137 (49%)\n\nMax\n98\n\nAvg\n68.97\n\n70 (3%)\n\n\nMissing\n8 578 (51%)\n\n95%\n89\n\nMode\n70\n\n71 (3%)\n\n\nDistinct\n82 (&lt;1%)\n\n75%\n79\n\nRange\n85\n\n75 (3%)\n\n\nDuplicates\n16 632 (99.5%)\n\nMedian\n71\n\niQR\n19\n\n78 (3%)\n\n\nZeros\n---\n\n25%\n60\n\nstd\n13.94\n\n73 (3%)\n\n\nNegative\n---\n\n5%\n43\n\nkurt\n0.14\n\n80 (3%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n13\n\nskew\n-0.61\n\n76 (3%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ столбце с оценкой критиков 51% пропущенных значений.\nОценка критиков лежит в диапазоне от 13 до 98.\nВ основном критики ставят оценки от 60 до 79.\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 9: Статистика и гистограмма столбца \"user_score\"\n\n\n\n\n\nValues\n7 590 (45%)\n\nMax\n9.7\n\nAvg\n7.13\n\n7.8 (4%)\n\n\nMissing\n9 125 (55%)\n\n95%\n8.9\n\nMode\n7.8\n\n8 (4%)\n\n\nDistinct\n95 (1%)\n\n75%\n8.2\n\nRange\n9.7\n\n8.2 (4%)\n\n\nDuplicates\n16 619 (99.4%)\n\nMedian\n7.5\n\niQR\n1.8\n\n8.3 (3%)\n\n\nZeros\n1 (&lt;1%)\n\n25%\n6.4\n\nstd\n1.5\n\n8.5 (3%)\n\n\nNegative\n---\n\n5%\n4.1\n\nkurt\n1.72\n\n7.5 (3%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n-1.25\n\n7.9 (3%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ столбце с оценкой пользователей 55% пропущенных значений.\nОценка пользователей варьируется от 0 до 9.7.\nВ основном пользователи ставят оценки от 6.4 до 8.2\nЗначение 0 в оценке пользователей явно является аномалией.\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 10: Статистика и топ-10 значений столбца \"name\"\n\n\n\n\n\nValues\n16 713 (99.9%)\n\nNeed for Speed: Most Wanted &lt;1%\n\n\nMissing\n2 (&lt;1%)\n\nRatatouille &lt;1%\n\n\nDistinct\n11 559 (69%)\n\nLEGO Marvel Super Heroes &lt;1%\n\n\nDuplicated origin\n5 155 (31%)\n\nFIFA 14 &lt;1%\n\n\nDupl (modify - origin)\n2 (&lt;1%)\n\nMadden NFL 07 &lt;1%\n\n\nEmpty\n---\n\nLEGO The Hobbit &lt;1%\n\n\nRAM (Mb)\n1\n\nFIFA Soccer 13 &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ столбце с названием игры есть 2 пропущенных значения (менее 1%)\nТоп 5 самых встречающихся игр: Need for Speed: Most Wanted, Ratatouille, LEGO Marvel Super Heroes, FIFA 14, Madden NFL 07\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 11: Статистика и топ-10 значений столбца \"platform\"\n\n\n\n\n\nValues\n16 715 (100%)\n\nPS2 (13%)\n\n\nMissing\n---\n\nDS (13%)\n\n\nDistinct\n31 (&lt;1%)\n\nPS3 (8%)\n\n\nDuplicated origin\n16 684 (99.8%)\n\nWii (8%)\n\n\nDupl (modify - origin)\n---\n\nX360 (8%)\n\n\nEmpty\n---\n\nPSP (7%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nPS (7%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nБольше всего игр на платформах PS2 и DS (по 13% от общего числа игр).\n\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 12: Статистика и топ-10 значений столбца \"genre\"\n\n\n\n\n\nValues\n16 713 (99.9%)\n\nAction (20%)\n\n\nMissing\n2 (&lt;1%)\n\nSports (14%)\n\n\nDistinct\n12 (&lt;1%)\n\nMisc (10%)\n\n\nDuplicated origin\n16 702 (99.9%)\n\nRole-Playing (9%)\n\n\nDupl (modify - origin)\n---\n\nShooter (8%)\n\n\nEmpty\n---\n\nAdventure (8%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nRacing (7%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nУ нас отображаются не все значения жанров, посмотрим на полный список.\n Вернуться к выводам\n\n\nShow the code\npagri_data_tools.value_counts_table(df, 'genre', chunk_size = 6, tables_in_row = 2)\n\n\n\n\n\n\n\nTable 13: value counts for \"genre\"\n\n\n\n\n\nAction\n3 369 (20.16%)\n|\nRacing\n1 249 (7.47%)\n\n\nSports\n2 348 (14.05%)\n|\nPlatform\n888 (5.31%)\n\n\nMisc\n1 750 (10.47%)\n|\nSimulation\n873 (5.22%)\n\n\nRole-Playing\n1 498 (8.96%)\n|\nFighting\n849 (5.08%)\n\n\nShooter\n1 323 (7.92%)\n|\nStrategy\n683 (4.09%)\n\n\nAdventure\n1 303 (7.8%)\n|\nPuzzle\n580 (3.47%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ столбце с жанром игры 2% пропусков.\n\nБольше всего игр в жанре Action.\n\n Вернуться к выводам\n\n\nShow the code\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 14: Статистика и топ-10 значений столбца \"rating\"\n\n\n\n\n\nValues\n9 949 (60%)\n\nE (40%)\n\n\nMissing\n6 766 (40%)\n\nT (30%)\n\n\nDistinct\n8 (&lt;1%)\n\nM (16%)\n\n\nDuplicated origin\n16 706 (99.9%)\n\nE10+ (14%)\n\n\nDupl (modify - origin)\n---\n\nEC &lt;1%\n\n\nEmpty\n---\n\nK-A &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nRP &lt;1%\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nВ рейтинге 40% пропусков.\nБольше всего игр с рейтингами E (40%) и T(30%).\n\n\n\n1.2.2 Изучение дубликатов\nПосмотрим на дубли во всем датафрейме\n\n\nShow the code\npagri_data_tools.check_duplicated(df)\n\n\n'no duplicates'\n\n\nВ датафрейме полных строк дубликатов нет.\nПосмотрим сколько у нас дублей в каждой колонке\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df)\n\n\n\n\n\n\n\nTable 15: Duplicates\n\n\n\n\n\nname\n5155 (30.84%)\n\n\nplatform\n16684 (99.81%)\n\n\nyear_of_release\n16677 (99.77%)\n\n\ngenre\n16702 (99.92%)\n\n\nna_sales\n16313 (97.59%)\n\n\neu_sales\n16408 (98.16%)\n\n\njp_sales\n16471 (98.54%)\n\n\nother_sales\n16560 (99.07%)\n\n\ncritic_score\n16632 (99.50%)\n\n\nuser_score\n16619 (99.43%)\n\n\nrating\n16706 (99.95%)\n\n\n\n\n\n\n\n\nУ нас нет столбцов, в которых значения долны быть уникальными. Поэтом все в порядке.\nПосмотрим на дубли в комбинации колонок с названием игры, жанром и платформой.\n\n\nShow the code\ngen = pagri_data_tools.check_duplicated_combinations_gen(df[['name', 'platform', 'genre']], n=3)\n\n\n\n\nShow the code\nnext(gen)\n\n\nGroup by 2 columns\n\n\n\n\n\n\n\nTable 16: Duplicates in both columns\n\n\n\n\n\n \nname\nplatform\ngenre\n\n\n\n\nname\n\n\n\n\n\nplatform\n5 &lt; 1%\n\n\n\n\ngenre\n5 151 (30.8%)\n16 421 (98.2%)\n\n\n\n\n\n\n\n\n\nНаблюдения:\n\nВ паре платформа и название игры всего 5 дубликатов.\nВ парах жанр/название игры и жанр/платформа много дубликатов.\n\nПосмотрим на строки с дублями в названии игры и платформе\n\n\nShow the code\ndf[df[['name', 'platform']].duplicated(keep=False)].sort_values(by=['name', 'platform'])\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n604\nMadden NFL 13\nPS3\n2,012.00\nSports\n2.11\n0.22\n0.00\n0.23\n83.00\n5.50\nE\n\n\n16230\nMadden NFL 13\nPS3\n2,012.00\nSports\n0.00\n0.01\n0.00\n0.00\n83.00\n5.50\nE\n\n\n5972\nNeed for Speed: Most Wanted\nPC\n2,005.00\nRacing\n0.02\n0.23\n0.00\n0.04\n82.00\n8.50\nT\n\n\n11715\nNeed for Speed: Most Wanted\nPC\n2,012.00\nRacing\n0.00\n0.06\n0.00\n0.02\n82.00\n8.50\nT\n\n\n1190\nNeed for Speed: Most Wanted\nX360\n2,012.00\nRacing\n0.62\n0.78\n0.01\n0.15\n83.00\n8.50\nT\n\n\n1591\nNeed for Speed: Most Wanted\nX360\n2,005.00\nRacing\n1.00\n0.13\n0.02\n0.10\n83.00\n8.50\nT\n\n\n1745\nSonic the Hedgehog\nPS3\n2,006.00\nPlatform\n0.41\n0.06\n0.04\n0.66\n43.00\n4.10\nE10+\n\n\n4127\nSonic the Hedgehog\nPS3\nNaN\nPlatform\n0.00\n0.48\n0.00\n0.00\n43.00\n4.10\nE10+\n\n\n659\nNaN\nGEN\n1,993.00\nNaN\n1.78\n0.53\n0.00\n0.08\nNaN\nNaN\nNaN\n\n\n14244\nNaN\nGEN\n1,993.00\nNaN\n0.00\n0.00\n0.03\n0.00\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nПосмотрим на пропуски по 3 колонки вместе\n\n\nShow the code\nnext(gen)\n\n\nGroup by 3 columns\n\n\n\n\n\n\n\nname | platform | genre\n5\n\n\n\n\n\nПосмотрим на дубликаты одновременно в названии игры, жанре и платформе\n\n\nShow the code\npagri_data_tools.check_duplicated(df[['name', 'platform', 'genre']])\n\n\nDuplicated is 5 (0.0%) rows\n\n\n\n\n\n\n\n\n\n\n\ncount\n\n\nname\nplatform\ngenre\n\n\n\n\n\nNaN\nGEN\nNaN\n2\n\n\nsonic the hedgehog\nPS3\nPlatform\n2\n\n\nmadden nfl 13\nPS3\nSports\n2\n\n\nneed for speed: most wanted\nPC\nRacing\n2\n\n\nX360\nRacing\n2\n\n\n\n\n\n\n\nПосмотрим на строки датафрейма с этими дубликатами\n Вернуться к выводам\n\n\nShow the code\ndf[df[['name', 'platform', 'genre']].duplicated(keep=False)].sort_values(by=['name', 'platform', 'genre'])\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n604\nMadden NFL 13\nPS3\n2,012.00\nSports\n2.11\n0.22\n0.00\n0.23\n83.00\n5.50\nE\n\n\n16230\nMadden NFL 13\nPS3\n2,012.00\nSports\n0.00\n0.01\n0.00\n0.00\n83.00\n5.50\nE\n\n\n5972\nNeed for Speed: Most Wanted\nPC\n2,005.00\nRacing\n0.02\n0.23\n0.00\n0.04\n82.00\n8.50\nT\n\n\n11715\nNeed for Speed: Most Wanted\nPC\n2,012.00\nRacing\n0.00\n0.06\n0.00\n0.02\n82.00\n8.50\nT\n\n\n1190\nNeed for Speed: Most Wanted\nX360\n2,012.00\nRacing\n0.62\n0.78\n0.01\n0.15\n83.00\n8.50\nT\n\n\n1591\nNeed for Speed: Most Wanted\nX360\n2,005.00\nRacing\n1.00\n0.13\n0.02\n0.10\n83.00\n8.50\nT\n\n\n1745\nSonic the Hedgehog\nPS3\n2,006.00\nPlatform\n0.41\n0.06\n0.04\n0.66\n43.00\n4.10\nE10+\n\n\n4127\nSonic the Hedgehog\nPS3\nNaN\nPlatform\n0.00\n0.48\n0.00\n0.00\n43.00\n4.10\nE10+\n\n\n659\nNaN\nGEN\n1,993.00\nNaN\n1.78\n0.53\n0.00\n0.08\nNaN\nNaN\nNaN\n\n\n14244\nNaN\nGEN\n1,993.00\nNaN\n0.00\n0.00\n0.03\n0.00\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nНаблюдения:\n\nУ игры Madden NFL 13 все параметры совпадают в дублях, кроме количества проданных копий.\nВозможно часть проданных копий засчиталась отдельно.\nВ игре Need for Speed: Most Wanted у дублей разные года выпуска, поэтому это не дубли.\n\n\n\n1.2.3 Изучение пропусков\nИзучим пропуски в каждом столбце.\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df)\n\n\n\n\n\n\n\nTable 17: Missings\n\n\n\n\n\nname\n2 (0.01%)\n\n\nyear_of_release\n269 (1.61%)\n\n\ngenre\n2 (0.01%)\n\n\ncritic_score\n8578 (51.32%)\n\n\nuser_score\n9125 (54.59%)\n\n\nrating\n6766 (40.48%)\n\n\n\n\n\n\n\n\nПосмотрим на строки с пропусками в названии игры и в жанре.\n Вернуться к выводам\n\n\nShow the code\ndf[df['name'].isna() | df['genre'].isna()]\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n659\nNaN\nGEN\n1,993.00\nNaN\n1.78\n0.53\n0.00\n0.08\nNaN\nNaN\nNaN\n\n\n14244\nNaN\nGEN\n1,993.00\nNaN\n0.00\n0.00\n0.03\n0.00\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nНаблюдения:\n\nПропуски в одних и тех же строках в названии игры и в жанре.\n\nУ нас примерно одинаковое количество пропусков в оценке критиков и в оценке пользователей.\nПроверим гипотезу, что пропуски в одних и тех же строках.\n\n\nShow the code\ngen = pagri_data_tools.check_na_combinations_gen(df[['critic_score', 'user_score', 'rating']], n=3)\n\n\n Вернуться к выводам\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 18: Missings in both columns\n\n\n\n\n\n \ncritic_score\nuser_score\nrating\n\n\n\n\ncritic_score\n\n\n\n\n\nuser_score\n&lt; 87.7% / ^ 93.3%\n\n\n\n\nrating\n&lt; 98.8% / ^ 77.9%\n&lt; 98.7% / ^ 73.2%\n\n\n\n\n\n\n\n\n\nНаблюдения:\n\nБольшинство пропусков в столбцах оценка пользователей и оценка критиков находятся в одних и тех же строках.\nБольшинство пропусков в столбцах рейтинг и оценка критиков находятся в одних и тех же строках.\nБольшинство пропусков в столбцах рейтинг и оценка пользователей находятся в одних и тех же строках.\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 19: Missings simultaneously in 3 columns\n\n\n\n\n\ncritic_score | user_score | rating\n6 667 (39.9% of all)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nПочти все пропуски в рейтинге находятся в тех же строках, что и пропуски в оценке критиков и оценке пользователей.\n\nПосмотрим на строки датафрейма с пропусками в одних и тех же строках\n\n\nShow the code\ndf_na_in_both_columns = pagri_data_tools.check_na_in_both_columns(df, ['critic_score', 'user_score'])\ndf_na_in_both_columns.sample(10)\n\n\n8005 (47.89% of all)(93.32% of critic_score) (87.73% of user_score) rows with missings simultaneously in ['critic_score', 'user_score']\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n14740\nMega Minis Volume 2\nPSP\n2,011.00\nMisc\n0.00\n0.02\n0.00\n0.01\nNaN\nNaN\nNaN\n\n\n8086\nMoon\nPS\n1,997.00\nAdventure\n0.00\n0.00\n0.17\n0.01\nNaN\nNaN\nNaN\n\n\n9289\nNHL Breakaway 98\nPS\n1,996.00\nSports\n0.08\n0.05\n0.00\n0.01\nNaN\nNaN\nNaN\n\n\n5696\nWarCraft II: The Dark Saga\nPS\n1,997.00\nStrategy\n0.18\n0.12\n0.00\n0.02\nNaN\nNaN\nNaN\n\n\n12667\nQuiz! Hexagon II\nDS\n2,010.00\nMisc\n0.00\n0.00\n0.06\n0.00\nNaN\nNaN\nNaN\n\n\n3362\nNew Play Control! Pikmin 2\nWii\n2,009.00\nStrategy\n0.11\n0.13\n0.33\n0.02\nNaN\nNaN\nNaN\n\n\n3686\nFIFA Soccer 07\nXB\n2,006.00\nSports\n0.16\n0.35\n0.00\n0.04\nNaN\nNaN\nNaN\n\n\n5575\nBust-A-Move '99\nPS\n1,997.00\nPuzzle\n0.18\n0.12\n0.00\n0.02\nNaN\nNaN\nNaN\n\n\n2924\nHannah Montana: The Movie\nDS\n2,009.00\nAdventure\n0.38\n0.25\n0.00\n0.07\nNaN\nNaN\nE\n\n\n12513\nCrazy Chicken Tales\nWii\n2,009.00\nAction\n0.06\n0.00\n0.00\n0.00\nNaN\nNaN\nE10+\n\n\n\n\n\n\n\nДобавим ещё столбце с рейтингом и посмотрим сколько пропусков во всех трех столбцах.\n\n\nShow the code\ndf_na_in_both_columns = pagri_data_tools.check_na_in_both_columns(df, ['critic_score', 'user_score', 'rating'])\ndf_na_in_both_columns.sample(10)\n\n\n6667 (39.89% of all)(77.72% of critic_score) (73.06% of user_score) (98.54% of rating) rows with missings simultaneously in ['critic_score', 'user_score', 'rating']\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n6357\nThoroughbred Breeder II\nSNES\n1,994.00\nSimulation\n0.00\n0.00\n0.27\n0.00\nNaN\nNaN\nNaN\n\n\n8379\nNickToons: Racing\nPS\n2,001.00\nRacing\n0.09\n0.06\n0.00\n0.01\nNaN\nNaN\nNaN\n\n\n13594\nGo Go Ackman 3\nSNES\n1,995.00\nPlatform\n0.00\n0.00\n0.04\n0.00\nNaN\nNaN\nNaN\n\n\n14145\nZenkoku Dekotora Matsuri\nWii\n2,008.00\nRacing\n0.00\n0.00\n0.03\n0.00\nNaN\nNaN\nNaN\n\n\n10296\nHexen: Beyond Heretic\nPS\n1,997.00\nShooter\n0.06\n0.04\n0.00\n0.01\nNaN\nNaN\nNaN\n\n\n362\nCroc: Legend of the Gobbos\nPS\n1,997.00\nPlatform\n1.57\n1.79\n0.00\n0.20\nNaN\nNaN\nNaN\n\n\n15031\nJikkyou Powerful Pro Yakyuu 12 Ketteiban\nGC\n2,005.00\nSports\n0.00\n0.00\n0.02\n0.00\nNaN\nNaN\nNaN\n\n\n12854\nSaki: Zenkoku-hen\nPSV\n2,015.00\nMisc\n0.00\n0.00\n0.06\n0.00\nNaN\nNaN\nNaN\n\n\n13758\nShiren the Wanderer 4 - God's Eye and the Demo...\nPSP\n2,012.00\nRole-Playing\n0.00\n0.00\n0.04\n0.00\nNaN\nNaN\nNaN\n\n\n1520\nMega Man Battle Network 3 Blue / White Version\nGBA\n2,002.00\nRole-Playing\n0.39\n0.02\n0.85\n0.03\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n1.2.4 Изучение выбросов\nПосмотрим на выбросы используя квантили.\nВыбросами будем считать значения, которые выходят за пределы 5 и 95 квантилей.\n Вернуться к выводам\n\n\nShow the code\nseries_outliers = pagri_data_tools.detect_outliers_quantile(df)\n\n\n\n\n\n\n\nTable 20: Outliers\n\n\n\n\n\nyear_of_release\n1209 (7.23%)\n\n\nna_sales\n829 (4.96%)\n\n\neu_sales\n829 (4.96%)\n\n\njp_sales\n822 (4.92%)\n\n\nother_sales\n787 (4.71%)\n\n\ncritic_score\n709 (4.24%)\n\n\nuser_score\n677 (4.05%)\n\n\n\n\n\n\n\n\nНаблюдения:\n\nПроцент выбросов во всех колонках, кроме года выпуска, находится в диапазоне 0-5%. Это может указывать на то, что данные достаточно чистые и не содержат значительных аномалий.\nПроцент выбросов во всех колонках примерно одинаковый, что может свидетельствовать об однородности данных.\n\n\n\n1.2.5 Изучение отрицательных значений\nПосмотрим есть ли у нас отрицательные значения.\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df)\n\n\nThere are no negative values\n\n\nОтлично. Отрицательных значений нет.\n\n\n1.2.6 Изучение нулевых значений\nИзучим нулевые значения в каждом столбце.\n\n\nShow the code\nseries_zeros = pagri_data_tools.find_columns_with_zeros_values(df)\n\n\n\n\n\n\n\nTable 21: Zeros\n\n\n\n\n\nna_sales\n4508 (26.97%)\n\n\neu_sales\n5870 (35.12%)\n\n\njp_sales\n10514 (62.90%)\n\n\nother_sales\n6601 (39.49%)\n\n\nuser_score\n1 (0.01%)\n\n\n\n\n\n\n\n\nОдин пользователь поставил оценку 0. Посмотрим на эту запись.\n\n\nShow the code\nseries_zeros['user_score']\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n2835\nMy Little Pony: Pinkie Pie's Party\nDS\n2,008.00\nAdventure\n0.66\n0.00\n0.00\n0.06\nNaN\n0.00\nE\n\n\n\n\n\n\n\nНичего особенного не обнаружено.\nНули в количестве продаж это нормально.\n\n\n\n1.3 Промежуточный вывод\n\nВ столбце с годом выпуска 2 % пропусков.\nВ столбце с оценкой критиков 51% пропущенных значений.\nВ столбце с оценкой пользователей 55% пропущенных значений.\nВ столбце с названием игры есть 2 пропущенных значения (менее 1%)\nВ столбце с жанром игры 2% пропусков.\n\nВ рейтинге 40% пропусков.\nЗначение 0 в оценке пользователей явно является аномалией.\nПроцент выбросов во всех колонках, кроме года выпуска, находится в диапазоне 0-5%. Это может указывать на то, что данные достаточно чистые и не содержат значительных аномалий.\nПроцент выбросов во всех колонках примерно одинаковый, что может свидетельствовать об однородности данных.\nПочти все пропуски в рейтинге находятся в тех же строках, что и пропуски в оценке критиков и оценке пользователей.\nБольшинство пропусков в столбцах оценка пользователей и оценка критиков находятся в одних и тех же строках.\nПропуски в одних и тех же строках в названии игры и в жанре.\nЕсть странное значение tbd, которое не является числом. И таких значений 24 %.\nИгры имеют год выпуска от 1980 до 2016 года.\nОсновная часть игр имеет год выпуска от 2003 до 2010 года.\nБольше всего игр 2008 года.\nВ столбце с продажами в Северной Америке есть нули (27%). По видимому для этих игр не было продаж в Северной Америке.\nКоличество проданных игр в Северной Америке лежит в диапазоне от 0 до 41.36 млн.\nВ основном количество проданных игр в Северной Америке находится в диапазоне от 0 до 0.24 млн.\nВ столбце с продажами в Европе есть нули (35%). По видимому для этих игр не было продаж в Европе.\nКоличество проданных игр в Европе лежит в диапазоне от 0 до 28.96 млн.\nВ основном количество проданных игр в Европе находится в диапазоне от 0 до 0.11 млн.\nВ столбце с продажами в Японии есть нули (63%). По видимому для этих игр не было продаж в Японии.\nКоличество проданных игр в Японии лежит в диапазоне от 0 до 10.22 млн.\nВ основном количество проданных игр в Японии находится в диапазоне от 0 до 0.4 млн.\nВ столбце с продажами в других странах есть нули (39%). По видимому для этих игр не было продаж в других странах.\nКоличество проданных игр в других странах лежит в диапазоне от 0 до 10.57 млн.\nВ основном количество проданных игр в других странах находится в диапазоне от 0 до 0.03 млн.\nОценка критиков лежит в диапазоне от 13 до 98.\nВ основном критики ставят оценки от 60 до 79.\nОценка пользователей варьируется от 0 до 9.7.\nВ основном пользователи ставят оценки от 6.4 до 8.2\nТоп 5 самых встречающихся игр: Need for Speed: Most Wanted, Ratatouille, LEGO Marvel Super Heroes, FIFA 14, Madden NFL 07\nБольше всего игр на платформах PS2 и DS (по 13% от общего числа игр).\nБольше всего игр в жанре Action.\nБольше всего игр с рейтингами E (40%) и T(30%)."
  },
  {
    "objectID": "projects/research_on_video_game_sales/research_on_video_game_sales.html#предобработка-данных",
    "href": "projects/research_on_video_game_sales/research_on_video_game_sales.html#предобработка-данных",
    "title": "Исследование продаж компьютерных игр",
    "section": "2. Предобработка данных",
    "text": "2. Предобработка данных\nСохраним исходный датафрейм в переменную df_origin, чтобы была возможность вернуться к нему\n\n\nShow the code\ndf_origin = df.copy()\n\n\n\n2.1 Обработка выбросов\nПосмотрим где у нас нулевые значения\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\nna_sales\n4508 (27.0%)\n\n\neu_sales\n5870 (35.1%)\n\n\njp_sales\n10514 (62.9%)\n\n\nother_sales\n6601 (39.5%)\n\n\nuser_score\n1 (0.0%)\n\n\n\n\n\n\n\nУдалим одну строку, где оценка пользователя равна 0.\n\n\nShow the code\ndf.shape[0]\n\n\n16715\n\n\n\n\nShow the code\ndf = df[(df.user_score != 0)]\ndf.shape[0]\n\n\n16714\n\n\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n\n\n\n\n\n\nzeros\n\n\n\n\nna_sales\n4508 (27.0%)\n\n\neu_sales\n5869 (35.1%)\n\n\njp_sales\n10513 (62.9%)\n\n\nother_sales\n6601 (39.5%)\n\n\n\n\n\n\n\nНе осталось столбцов, в которых не должно быть нулей.\n\n\n2.2 Обработка пропусков\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\nname\n2 (0.0%)\n\n\nyear_of_release\n269 (1.6%)\n\n\ngenre\n2 (0.0%)\n\n\ncritic_score\n8577 (51.3%)\n\n\nuser_score\n9125 (54.6%)\n\n\nrating\n6766 (40.5%)\n\n\n\n\n\n\n\nТак как пропусков в столбцах с названием игры, жанром и годом выпуска мало и мы не можем восстановить с хорошей точностью эти значения,\nто удалим их.\n\n\nShow the code\ndf.shape[0]\n\n\n16714\n\n\n\n\nShow the code\ndf = df.dropna(subset='name')\ndf.shape[0]\n\n\n16712\n\n\n\n\nShow the code\ndf = df.dropna(subset='genre')\ndf.shape[0]\n\n\n16712\n\n\n\n\nShow the code\ndf = df.dropna(subset='year_of_release')\ndf.shape[0]\n\n\n16443\n\n\nВ рейтинге заменим пропуски на значение ‘не указано’\n\n\nShow the code\ndf.rating.value_counts(dropna=False)\n\n\nrating\nNaN     6676\nE       3920\nT       2905\nM       1536\nE10+    1393\nEC         8\nK-A        3\nAO         1\nRP         1\nName: count, dtype: int64\n\n\n\n\nShow the code\ndf['rating'] = df['rating'].cat.add_categories(['не указано'])\ndf['rating'] = df['rating'].fillna('не указано')\n\n\n\n\nShow the code\ndf.rating.value_counts(dropna=False)\n\n\nrating\nне указано    6676\nE             3920\nT             2905\nM             1536\nE10+          1393\nEC               8\nK-A              3\nAO               1\nRP               1\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n\n\n\n\n\n\nmissed\n\n\n\n\ncritic_score\n8460 (51.5%)\n\n\nuser_score\n8981 (54.6%)\n\n\n\n\n\n\n\nПропуски в остальных колонках удалять или заменять нельзя, так как их слишком много, и мы исказим данные.\n\n\n2.3 Обработка дубликатов\nОбъединим задублированные строки для игры Madden NFL 13\n\n\nShow the code\ndf.shape[0]\n\n\n16443\n\n\n\n\nShow the code\ndf[df[['name', 'platform', 'genre']].duplicated(keep=False)].sort_values(by=['name', 'platform', 'genre'])\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n604\nMadden NFL 13\nPS3\n2,012.00\nSports\n2.11\n0.22\n0.00\n0.23\n83.00\n5.50\nE\n\n\n16230\nMadden NFL 13\nPS3\n2,012.00\nSports\n0.00\n0.01\n0.00\n0.00\n83.00\n5.50\nE\n\n\n5972\nNeed for Speed: Most Wanted\nPC\n2,005.00\nRacing\n0.02\n0.23\n0.00\n0.04\n82.00\n8.50\nT\n\n\n11715\nNeed for Speed: Most Wanted\nPC\n2,012.00\nRacing\n0.00\n0.06\n0.00\n0.02\n82.00\n8.50\nT\n\n\n1190\nNeed for Speed: Most Wanted\nX360\n2,012.00\nRacing\n0.62\n0.78\n0.01\n0.15\n83.00\n8.50\nT\n\n\n1591\nNeed for Speed: Most Wanted\nX360\n2,005.00\nRacing\n1.00\n0.13\n0.02\n0.10\n83.00\n8.50\nT\n\n\n\n\n\n\n\n\n\nShow the code\nindices_to_combine = [604, 16230]\n\n# Группируем строки по индексам и объединяем значения\ncombined_row = df.loc[indices_to_combine].groupby(['name', 'platform', 'genre'], as_index=False, observed=True).agg({\n    'na_sales': 'sum',\n    'eu_sales': 'sum',\n    'other_sales': 'sum',\n    'jp_sales': 'sum',\n    'critic_score': 'first',\n    'user_score': 'first',\n    'rating': 'first',\n    'year_of_release': 'first'\n})\n\n# Обновляем DataFrame, удаляя объединенные строки и добавляя новую\ndf = pd.concat([df.drop(indices_to_combine), combined_row], ignore_index=True)\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n16442\n\n\n\n\nShow the code\ndf.tail(1)\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n16441\nMadden NFL 13\nPS3\n2,012.00\nSports\n2.11\n0.23\n0.00\n0.23\n83.00\n5.50\nE\n\n\n\n\n\n\n\nСтроки правильно объединились.\n\n\n2.4 Приведение данных к удобной форме\nЗаменим кодировку рейтинга на более понятную и объединим похожие категории, так как группы с малым количеством игр статистически незначимы.\n\n\nShow the code\ndf.rating.value_counts(dropna=False)\n\n\nrating\nне указано    6676\nE             3919\nT             2905\nM             1536\nE10+          1393\nEC               8\nK-A              3\nAO               1\nRP               1\nName: count, dtype: int64\n\n\n\n\nShow the code\ndf.rating = df.rating.astype(str).map({'E': 'для всех', 'T': 'подростковый', 'M': 'взрослый', 'E10+': 'для всех от 10 лет '\n                           , 'EC': 'раннее детство', 'K-A': 'для всех', 'AO': 'взрослый'\n                           , 'RP': 'не указано', 'не указано': 'не указано'}).astype('category')\ndf.rating.value_counts()\n\n\nrating\nне указано             6677\nдля всех               3922\nподростковый           2905\nвзрослый               1537\nдля всех от 10 лет     1393\nраннее детство            8\nName: count, dtype: int64\n\n\nКатегория ‘раннее детство’ имеет всего 8 элементов, но объединить ее мы с другими не можем.\nПереведем оценку пользователей в 100-бальную шкалу, чтобы можно было сравнить с рейтингом критиков.\n\n\nShow the code\ndf.user_score = df.user_score * 10\n\n\nПереведем год выпуска в категориальный тип, чтобы анализировать в разрезе года.\nУбедимся, что в столбце нет дробных чисел.\n\n\nShow the code\n(df.year_of_release % 1 != 0).sum()\n\n\nnp.int64(0)\n\n\n\n\nShow the code\nordered_years = pd.CategoricalDtype(categories=[str(int(year)) for year in sorted(df['year_of_release'].unique())], ordered=True)\n\n\n\n\nShow the code\ndf.year_of_release = df.year_of_release.astype(int).astype(str).astype(ordered_years) \ndf.head(1)\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n0\nWii Sports\nWii\n2006\nSports\n41.36\n28.96\n3.77\n8.45\n76.00\n80.00\nдля всех\n\n\n\n\n\n\n\nОценки пользователей и критиков мы не можем перевести в целый тип из-за пропусков.\n\n\n2.5 Промежуточный вывод\n\nЗаменили кодировку рейтинга на более понятную и объединим похожие категории.\nОценку пользователей перевели в 100-балльную систему, чтобы можно было сравнивать с рейтингом критиков.\nГод выпуска игры перевели в категориальный тип данных.\nУдалили одну строку, где оценка пользователя равна 0.\nУдалили пропуски в столбцах с названием игры, жанром и годом выпуска, так как их мало и мы не можем восстановить с хорошей точностью эти значения.\nВ рейтинге заменили пропуски на значение ‘не указано’\nОбъединили задублированные строки для игры Madden NFL 13."
  },
  {
    "objectID": "projects/research_on_video_game_sales/research_on_video_game_sales.html#обогащение-данных-и-создание-новых-переменных",
    "href": "projects/research_on_video_game_sales/research_on_video_game_sales.html#обогащение-данных-и-создание-новых-переменных",
    "title": "Исследование продаж компьютерных игр",
    "section": "3. Обогащение данных и создание новых переменных",
    "text": "3. Обогащение данных и создание новых переменных\n\n3.1 Создание новых числовых переменных\nСоздадим новую числовую переменную из оценок пользователей и оценок критиков.\nПосчитаем среднюю оценку между оценкой критиков и пользователей.\n\n\nShow the code\ndf.head(1)\n\n\n\n\n\n\n\n\n\nname\nplatform\nyear_of_release\ngenre\nna_sales\neu_sales\njp_sales\nother_sales\ncritic_score\nuser_score\nrating\n\n\n\n\n0\nWii Sports\nWii\n2006\nSports\n41.36\n28.96\n3.77\n8.45\n76.00\n80.00\nдля всех\n\n\n\n\n\n\n\n\n\nShow the code\ndf['avg_score'] = df[['user_score', 'critic_score']].mean(axis=1)\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df, column='avg_score', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 22: Статистика и гистограмма столбца \"avg_score\"\n\n\n\n\n\nValues\n8 550 (52%)\n\nMax\n97\n\nAvg\n69.32\n\n78 (2%)\n\n\nMissing\n7 892 (48%)\n\n95%\n87\n\nMode\n78\n\n74 (2%)\n\n\nDistinct\n163 (1%)\n\n75%\n79\n\nRange\n95\n\n71 (2%)\n\n\nDuplicates\n16 278 (99.0%)\n\nMedian\n71.5\n\niQR\n17\n\n70 (2%)\n\n\nZeros\n---\n\n25%\n62\n\nstd\n13.48\n\n76 (2%)\n\n\nNegative\n---\n\n5%\n43.5\n\nkurt\n1.16\n\n75 (2%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n2\n\nskew\n-0.97\n\n68 (2%)\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\nНаблюдения:\n\nСредняя оценка лежит в диапазоне от 2 до 97.\nВ основном средняя оценка находится в диапазон от 62 до 79.\n\n\n\n3.2 Категоризация данных\nОбъединим продажи в одну числовую переменную и создадим категориальную переменную region\n\n\nShow the code\n# Применяем melt для преобразования данных\nvalue_vars = ['na_sales', 'eu_sales', 'jp_sales', 'other_sales']\ndf = pd.melt(df, id_vars=df.columns.difference(value_vars), \n                    value_vars=value_vars,\n                    var_name='region', value_name='sales')\n# Словарь для замены значений\nregion_mapping = {\n    'na_sales': 'Северная Америка',\n    'eu_sales': 'Европа',\n    'jp_sales': 'Япония',\n    'other_sales': 'Другие'\n}\n\n# Замена значений в столбце region\ndf['region'] = df['region'].replace(region_mapping).astype('category')\ndf.head(1)\n\n\n\n\n\n\n\n\n\navg_score\ncritic_score\ngenre\nname\nplatform\nrating\nuser_score\nyear_of_release\nregion\nsales\n\n\n\n\n0\n78.00\n76.00\nSports\nWii Sports\nWii\nдля всех\n80.00\n2006\nСеверная Америка\n41.36\n\n\n\n\n\n\n\nДля оценки критиков и оценки пользователей создадим новые категориальные переменные.\n\n\nShow the code\nlabels = ['низкая', 'средняя', 'высокая']\nbins = [-np.inf, 50, 80, np.inf]\n\n\n\n\nShow the code\ndf['critic_score_cat'] = pagri_data_tools.create_category_column(df.critic_score, labels=labels, bins=bins, fillnavalue='не укаазано')\ndf['critic_score_cat'].value_counts(dropna=False)\n\n\ncritic_score_cat\nне укаазано    33840\nсредняя        21520\nвысокая         6972\nнизкая          3436\nName: count, dtype: int64\n\n\n\n\nShow the code\ndf['user_score_cat'] = pagri_data_tools.create_category_column(df.user_score, labels=labels, bins=bins, fillnavalue='не укаазано')\ndf['user_score_cat'].value_counts(dropna=False)\n\n\nuser_score_cat\nне укаазано    35924\nсредняя        17856\nвысокая         9036\nнизкая          2952\nName: count, dtype: int64\n\n\nПосмотрим на квантили в столбце продажи.\n\n\nShow the code\npagri_data_tools.quantiles_columns(df.sales, list(np.arange(0, 1, 0.1)))\n\n\n\n\n\n\n\nTable 23: Quantiles\n\n\n\n\n\nMax\n41.36\n\n\n90\n0.31\n\n\n80\n0.13\n\n\n70\n0.07\n\n\n60\n0.03\n\n\n50\n0.01\n\n\n40\n0\n\n\n30\n0\n\n\n20\n0\n\n\n10\n0\n\n\n0\n0\n\n\nMin\n0\n\n\n\n\n\n\n\n\nСоздадим новую категориальную переменную из количества проданных копий.\n\n\nShow the code\ndf.isna().sum()\n\n\navg_score           31568\ncritic_score        33840\ngenre                   0\nname                    0\nplatform                0\nrating                  0\nuser_score          35924\nyear_of_release         0\nregion                  0\nsales                   0\ncritic_score_cat        0\nuser_score_cat          0\ndtype: int64\n\n\n\n\nShow the code\nlabels = ['мало', 'средне', 'много']\nbins = [-np.inf, 0.01, 0.2, np.inf]\ndf['sales_cat'] = pagri_data_tools.create_category_column(df.sales, labels=labels, bins=bins)\ndf['sales_cat'].value_counts(dropna=False)\n\n\nsales_cat\nмало      33093\nсредне    23268\nмного      9407\nName: count, dtype: int64\n\n\n\n\nShow the code\ngen = pagri_data_tools.info_gen(df, column='sales_cat', mode='column')\ngen.next()\n\n\n\n            \n                \n\n\n\n\nTable 24: Статистика и топ-10 значений столбца \"sales_cat\"\n\n\n\n\n\nValues\n65 768 (100%)\n\nмало (50%)\n\n\nMissing\n---\n\nсредне (35%)\n\n\nDistinct\n3 (&lt;1%)\n\nмного (14%)\n\n\nDuplicated origin\n65 765 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n                \n                    \n                \n                      \n            \n            \n\n\n\n\n3.3 Промежуточный вывод\n\nОбъединили продажи в одну числовую переменную и создатели категориальную переменную регион.\nДля оценок критиков и пользователей создадим новые категориальные переменные.\nСоздали новую категориальную переменную из количества проданных копий.\nСоздали новую числовую переменную из оценок пользователей и оценок критиков, усреднив их.\nСредняя оценка лежит в диапазоне от 2 до 97.\nВ основном средняя оценка находится в диапазон от 62 до 79."
  },
  {
    "objectID": "projects/research_on_video_game_sales/research_on_video_game_sales.html#визуализация-взаимосвязей-переменных",
    "href": "projects/research_on_video_game_sales/research_on_video_game_sales.html#визуализация-взаимосвязей-переменных",
    "title": "Исследование продаж компьютерных игр",
    "section": "4. Визуализация взаимосвязей переменных",
    "text": "4. Визуализация взаимосвязей переменных\n\n4.1 Сравнительный анализ распределений числовых переменных по категориям\nСформируем словарь для подписей осей и названий графиков.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column ['Именительный падеж', 'для кого / чего']\n    avg_score = ['Средняя оценка', 'средней оценки']\n    , critic_score = ['Оценка критиков', 'оценки критиков']\n    , user_score = ['Оценка пользователей', 'оценки пользователей']\n    , score = ['Оценка', 'оценки']\n    , sales = ['Количество проданных копий', 'количества проданных копий']\n    # categorical column ['Именительный падеж', 'для кого / чего']\n    # Распределение долей по городу и тарифу с нормализацией по городу\n    , genre = ['Жанр', 'жанра']\n    , platform = ['Платформа', 'платформы']\n    , rating = ['Рейтинг', 'рейтинга']\n    , region = ['Регион', 'региона']\n    , critic_score_category = ['Категория оценки критиков', 'категории оценки критиков']\n    , user_score_cat = ['Категория оценки пользователей', 'категории оценки пользователей']\n    , sales_cat = ['Категория продаж', 'категории продаж']\n    , year_of_release = ['Год выпуска', 'года выпуска']\n    , score_type = ['Тип оценки', 'типа оценки']\n)\n\n\nПосмотрим на распределения числовых переменных в зависимости от категориальной переменной.\n\n\nShow the code\n# Применяем melt для преобразования данных\nvalue_vars = ['critic_score', 'user_score']\nmelted_df = pd.melt(df, # id_vars=df.columns.difference(value_vars), \n                    value_vars=value_vars,\n                    var_name='score_type', value_name='score')\n# Словарь для замены значений\nregion_mapping = {\n    'critic_score': 'Оценка критиков',\n    'user_score': 'Оценка пользователей',\n}\n# Замена значений в столбце region\nmelted_df['score_type'] = melted_df['score_type'].replace(region_mapping).astype('category')\n\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = melted_df\n    , cat_var = 'score_type'\n    , num_var = 'score'\n    , top_n='all'\n    , sort = True\n    , mode = 'normal'\n    , box = True\n    , width=1000\n    , height=500\n    , barmode = 'overlay'\n)\npagri_data_tools.histograms_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nПользователи ставят более высокую оценку, чем критики.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , cat_var = 'year_of_release'\n    , num_var = 'avg_score'\n    , top_n='all'\n    , height=600\n    , sort = True\n    , mode = 'step'\n)\npagri_data_tools.violins_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nИгры с годами выпуска 1996-1998 имеют самые высокие средние оценки и мало выбросов.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , cat_var = 'genre'\n    , num_var = 'avg_score'\n    , top_n='all'\n    , height=600\n)\npagri_data_tools.violins_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nИгры жанра role-playing получают более высокую оценку.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , cat_var = 'platform'\n    , num_var = 'avg_score'\n    , top_n='all'\n    , height=600\n)\npagri_data_tools.violins_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nИгры на платформе DC имеют саму высокую среднюю оценку.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , cat_var = 'sales_cat'\n    , num_var = 'avg_score'\n    , top_n='all'\n    , height=600\n)\npagri_data_tools.violins_stacked(config=config, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nИгры из категории, где много продаж имеют в среднем оценку выше, чем другие категории количества проданных копий.\n\n\n\n4.2 Исследование корреляционных связей\nСформируем словарь для подписей осей и названий графиков.\n\n\nShow the code\ntitles_for_axis = dict(\n    avg_score = 'Средняя оценка'\n    , critic_score = 'Оценка критиков'\n    , user_score = 'Оценка пользователей'\n    , sales = 'Количество проданных копий'\n)\n\n\nПосмотрим на коэффициенты корреляции между числовыми переменными.\n Вернуться к выводам\n\n\nShow the code\npagri_data_tools.heatmap_corr(df, titles_for_axis=titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nУмеренная положительная корреляция между оценкой критиков и оценкой пользователей.\n\n\n\n4.3 Изучение зависимостей между числовыми переменными\nПостроим графики рассеяния и изучим зависимости.\n\n\nShow the code\npairs = {('user_score', 'critic_score'): None}\n\npagri_data_tools.pairplot_pairs(df, pairs, coloring=True, rows=1, cols=1, titles_for_axis=titles_for_axis, bins=50, height=600, width=650)\n\n\n                                                \n\n\nНаблюдения:\n\nЧем больше оценка пользователей, тем больше продажи критиков.\n\n\n\n4.4 Изучение зависимостей между категориальными переменными\nСформируем словарь для подписей осей и названий графиков.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column ['Именительный падеж', 'мменительный падеж с маленькой буквы', 'род цифорой']\n    # (0 - средний род, 1 - мужской род, 2 - женский род[) (Середнее образовние, средний доход, средняя температура) )\n    # для функций count и nunique пишем - Количество &lt;чего / кого количество&gt; - и также с маленькой буквы, цифра 0 в качестве рода\n    avg_score = ['Средняя оценка', 'средняя оценка', 2]\n    , critic_score = ['Оценка критиков', 'оценка критиков', 2]\n    , user_score = ['Оценка пользователей', 'оценка пользователей', 2]\n    , sales = ['Количество проданных копий', 'количество проданных копий', 0]\n    # categorical column ['Именительный падеж', 'для кого / чего']\n    # Распределение долей по городу и тарифу с нормализацией по городу\n    , genre = ['Жанр', 'жанра']\n    , platform = ['Платформа', 'платформы']\n    , rating = ['Рейтинг', 'рейтинга']\n    , region = ['Регион', 'региона']\n    , year_of_release = ['Год выпуска', 'года выпуска']\n    , critic_score_cat = ['Категория оценки критиков', 'категории оценки критиков']\n    , user_score_cat = ['Категория оценки пользователей', 'категории оценки пользователей']\n    , sales_cat = ['Категория продаж', 'категории продаж']\n)\n\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_x = 'genre'\n    , column_for_y = 'platform'  \n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = False   \n    , sort_axis = True    \n    , sort_legend = True   \n    , top_n_trim_legend = 20                        \n)\npagri_data_tools.heatmap_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ жанре Action больше всего игр на платформах PS3, PS2, DS и X360\nВ жанре Sport явно выделяется платформа PS2\nВ жанре Misc выделяется платформа DS\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'genre'\n    , column_for_legend = 'critic_score_cat'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 1000\n    , height = 450\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВо всех жанрах средних оценок критиков больше всего\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'genre'\n    , column_for_legend = 'user_score_cat'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 1000\n    , height = 450\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВо всех жанрах средних оценок пользователей больше всего.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'genre'\n    , column_for_legend = 'sales_cat'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 1000\n    , height = 450\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВо всех жанрах больше всего игр из категории с малым количеством продаж.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'region'\n    , column_for_legend = 'sales_cat'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 1000\n    , height = 450\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ Северной Америке больше всего игр из категории со средним количеством проданных копий.\nВ Японии в количестве игр явно выделяется категория с малым количеством продаж.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'genre'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего игр в жанре Action и Sport.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'platform'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 900\n    , height = 700\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего игр на платформах PS2 и DS.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'rating'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего игр с рейтингом для всех и для подростков.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'critic_score_cat'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nКритики ставят больше средних оценок.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'user_score_cat'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nПользователи ставят больше средних оценок.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'sales_cat'\n    , barmode = 'group'\n    , orientation = 'h'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False      \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего игр с категорией ‘мало продаж’.\n\n\n\n4.5 Изучение зависимостей между числовыми и категориальными переменными\nПостроим графики для числовых переменных в разрезе категорий.\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'genre'\n    , y = 'sales'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False       \n    , sort_axis = True    \n    , sort_legend = True     \n    , width = 600\n    , height = 400                                                                  \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего продаж игр с жанром Action.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'genre'\n    , y = 'sales'  \n    , category = 'region' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True  \n    , width = 1000\n    , height = 450                                                                     \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nИгры во всех жанрах, кроме Role-Playing в Северной Америке продавались лучше.\nИгры в жанре Role-Playing в Японии продавались лучше, чем в других регионах.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'critic_score_cat'\n    , y = 'sales'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False       \n    , sort_axis = True    \n    , sort_legend = True     \n    , width = 600\n    , height = 400                                                                  \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nС низким рейтингом игры значительно хуже продаются.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'region'\n    , y = 'sales'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False       \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400                                                                     \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего продаж было в Северной Америке.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'genre'\n    , y = 'sales'  \n    , category = 'critic_score_cat' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True        \n    , width = 1000\n    , height = 450                                                               \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ жанрах shooter и Racing больше продавалось игр с высокой оценкой.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , column_for_x = 'platform'\n    , column_for_y = 'region' \n    , column_for_value = 'sales' \n    , orientation = 'h'\n    , func = 'sum'\n    , text = False    \n    , sort_axis = True    \n    , sort_legend = True     \n    , top_n_trim_legend = 20   \n    , decimal_places = 0                                               \n)\npagri_data_tools.heatmap(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ Северной Америке больше всего продаж на платформах X360 и PS2.\nВ Японии больше продаж на платформах DS.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'sales_cat'\n    , y = 'critic_score'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False       \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400                                                                     \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСредняя оценка критиков выше у игр, которые много продавались.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'region'\n    , y = 'sales'  \n    , category = 'critic_score_cat' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True           \n    , width = 1000\n    , height = 450                                                            \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ Японии много продаж игр, которые не имеют оценки критиков.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'genre'\n    , y = 'avg_score'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False       \n    , sort_axis = True    \n    , sort_legend = True    \n    , width = 600\n    , height = 400                                                                  \n)\nfig = pagri_data_tools.bar(config, titles_for_axis)\nfig.update_layout(title_text = 'Средняя оценка в зависимости от жанра')\n\n\n                                                \n\n\nНаблюдения:\n\nЖанр Role_Playing имеет самую высокую среднюю оценку.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'platform'\n    , y = 'avg_score'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = True    \n    , sort_legend = True      \n    , width = 1000\n    , height = 450                                                                  \n)\nfig = pagri_data_tools.bar(config, titles_for_axis)\nfig.update_layout(title_text = 'Средняя оценка в зависимости от платформы')\n\n\n                                                \n\n\nНаблюдения:\n\nИгры на платформе DC имеет самую высокую среднюю оценку.\nИгры на многих платформах не имеют оценок.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'platform'\n    , y = 'sales'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False       \n    , sort_axis = True    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nПлатформа PS2 имеет больше всего суммарно проданных копий\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'rating'\n    , y = 'avg_score'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False       \n    , sort_axis = True    \n    , sort_legend = True   \n    , width = 600\n    , height = 400                                                                      \n)\nfig = pagri_data_tools.bar(config, titles_for_axis)\nfig.update_layout(title_text = 'Средняя оценка в зависимости от рейтинга')\n\n\n                                                \n\n\nНаблюдения:\n\nЖанры только для взрослых и для детей и взрослых имеют самые высокие средние оценки.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'rating'\n    , y = 'sales'  \n    , barmode = 'group'\n    , orientation = 'h'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = True\n    , showgrid_y = False       \n    , sort_axis = True    \n    , sort_legend = True   \n    , width = 600\n    , height = 400                                                                      \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСуммарное количество проданных копий выше у рейтинга для всех.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , column_for_x = 'genre'\n    , column_for_y = 'rating' \n    , column_for_value = 'sales' \n    , orientation = 'v'\n    , func = 'sum'\n    , text = False    \n    , sort_axis = True    \n    , sort_legend = True                                                           \n)\npagri_data_tools.heatmap(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nБольше всего суммарных продаж у жанра спорт и рейтинга для всех. Также высокие продажи игр в жанре shooter с рейтингом для взрослых и в жанре action с рейтингом для взрослых.\n\n\n\n4.6 Анализ временных зависимостей\nИзучим графики, представляющие различные временные переменные.\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'year_of_release'\n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nДо 2008-2009 год происходил рост продаж, а затем пошло снижение.\n\n Вернуться к выводам\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'year_of_release'\n    , column_for_legend = 'rating'  \n    , barmode = 'stack'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nДо 2000 года почти все игры без рейтинга.\nНачиная с 2010 года количество игр без рейтинга значительно выше чем игр с рейтингом.\n\n\n\nShow the code\n\nconfig = dict(\n    df = df\n    , column_for_axis = 'year_of_release'\n    , column_for_legend = 'sales_cat'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , normalized_mode = 'all'\n    , text = False\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True      \n    , sort_axis = False    \n    , sort_legend = True    \n\n)\npagri_data_tools.bar_categories(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nС 2005 по 2011 год всплеск продаж игр и при этом сильнее всего продавались игры из категории с малым количеством продаж.\n\n Вернуться к выводам\n\n\nShow the code\ndf['year_of_release'].dtype\n\n\nCategoricalDtype(categories=['1980', '1981', '1982', '1983', '1984', '1985', '1986',\n                  '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n                  '1994', '1995', '1996', '1997', '1998', '1999', '2000',\n                  '2001', '2002', '2003', '2004', '2005', '2006', '2007',\n                  '2008', '2009', '2010', '2011', '2012', '2013', '2014',\n                  '2015', '2016'],\n, ordered=True, categories_dtype=object)\n\n\n\n\nShow the code\nconfig = dict(\n    df = df[df['year_of_release'] &gt; '1990']\n    , column_for_x = 'genre'\n    , column_for_y = 'year_of_release' \n    , column_for_value = 'sales' \n    , orientation = 'v'\n    , func = 'sum'\n    , show_text = True    \n    , sort_legend = False   \n    , decimal_places = 0                                                  \n)\npagri_data_tools.heatmap(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nВ 1985 году был всплеск продаж в жанре Platform.\nИгры в жанре Action и Shooter до 2014 года не падали в продажах, в отличии от других жанров, которые начали падать в продажах с 2010-2011 годов.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df[df['year_of_release'] &gt; '1990']\n    , column_for_x = 'platform'\n    , column_for_y = 'year_of_release' \n    , column_for_value = 'sales' \n    , orientation = 'v'\n    , func = 'sum'\n    , show_text = True    \n    , sort_legend = False   \n    , decimal_places = 0  \n    , top_n_trim_axis = 20\n    , top_n_trim_from_axis = 'start'\n)\npagri_data_tools.heatmap(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nНа момент 2016 года самые актуальные платформы - PS4, XOne, 3DS.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'year_of_release'\n    , y = 'sales'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nСуммарное количество продаж росло до 2008 года, затем снижалось.\n\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'year_of_release'\n    , y = 'avg_score'  \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'mean'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nДо 1996 года оценок часто не было.\nНачиная с 1996 года по 2000 год средняя оценка упала примерно с 85 до 70. И далее колеблется около 70.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'year_of_release'\n    , y = 'sales'  \n    , category = 'region' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nРост продаж до 2008 года в Северной Америке был более бурный, чем в других регионах.\nС 2008 года продажи в Северной Америке снижались быстрее чем в других регионах и к 2014 году сравнялись с Европой.\n\n Вернуться к выводам\n\n\nShow the code\nconfig = dict(\n    df = df\n    , x = 'year_of_release'\n    , y = 'sales'  \n    , category = 'critic_score_cat' \n    , barmode = 'group'\n    , orientation = 'v'\n    , func = 'sum'\n    , xaxis_show = True\n    , yaxis_show = True\n    , showgrid_x = False\n    , showgrid_y = True       \n    , sort_axis = False    \n    , sort_legend = True                                                                   \n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\n                                                \n\n\nНаблюдения:\n\nС 1996 до 1999 сильно выделяются продажи без рейтинга критиков.\n\n\n\n4.7 Промежуточный вывод\n\nПользователи ставят более высокую оценку, чем критики.\nИгры с годами выпуска 1996-1998 имеют самые высокие средние оценки и мало выбросов.\nИгры жанра role-playing получают более высокую оценку.\nИгры на платформе DC имеют саму высокую среднюю оценку.\nИгры из категории, где много продаж имеют в среднем оценку выше, чем другие категории количества проданных копий.\nУмеренная положительная корреляция между оценкой критиков и оценкой пользователей.\n\nЧем больше оценка пользователей, тем больше продажи критиков.\nВ жанре Action больше всего игр на платформах PS3, PS2, DS и X360\nВ жанре Sport явно выделяется платформа PS2\nВ жанре Misc выделяется платформа DS\nВо всех жанрах средних оценок критиков больше всего\nВо всех жанрах средних оценок пользователей больше всего.\nВо всех жанрах больше всего игр из категории с малым количеством продаж.\nВ Северной Америке больше всего игр из категории со средним количеством проданных копий.\nВ Японии в количестве игр явно выделяется категория с малым количеством продаж.\nБольше всего игр в жанре Action и Sport.\nБольше всего игр на платформах PS2 и DS. Больше всего игр с рейтингом для всех и для подростков.\nКритики ставят больше средних оценок.\nПользователи ставят больше средних оценок.\nБольше всего игр с категорией ‘мало продаж’.\nБольше всего продаж игр с жанром Action.\nИгры во всех жанрах, кроме Role-Playing в Северной Америке продавались лучше.\nИгры в жанре Role-Playing в Японии продавались лучше, чем в других регионах.\nС низким рейтингом игры значительно хуже продаются.\nБольше всего продаж было в Северной Америке.\nВ жанрах shooter и Racing больше продавалось игр с высокой оценкой.\nВ Северной Америке больше всего продаж на платформах X360 и PS2.\nВ Японии больше продаж на платформах DS.\nСредняя оценка критиков выше у игр, которые много продавались.\nВ Японии много продаж игр, которые не имеют оценки критиков.\nЖанр Role_Playing имеет самую высокую среднюю оценку.\nИгры на платформе DC имеет самую высокую среднюю оценку.\nИгры на многих платформах не имеют оценок.\nПлатформа PS2 имеет больше всего суммарно проданных копий\nЖанры только для взрослых и для детей и взрослых имеют самые высокие средние оценки.\nСуммарное количество проданных копий выше у рейтинга для всех.\nБольше всего суммарных продаж у жанра спорт и рейтинга для всех. Также высокие продажи игр в жанре shooter с рейтингом для взрослых и в жанре action с рейтингом для взрослых.\nДо 2008-2009 год происходил рост продаж, а затем пошло снижение.\nДо 2000 года почти все игры без рейтинга.\nНачиная с 2010 года количество игр без рейтинга значительно выше чем игр с рейтингом.\nС 2005 по 2011 год всплеск продаж игр и при этом сильнее всего продавались игры из категории с малым количеством продаж.\nВ 1985 году был всплеск продаж в жанре Platform.\nИгры в жанре Action и Shooter до 2014 года не падали в продажах, в отличии от других жанров, которые начали падать в продажах с 2010-2011 годов.\nСуммарное количество продаж росло до 2008 года, затем снижалось.\nДо 1996 года оценок часто не было.\nНачиная с 1996 года по 2000 год средняя оценка упала примерно с 85 до 70. И далее колеблется около 70.\nРост продаж до 2008 года в Северной Америке был более бурный, чем в других регионах.\nС 2008 года продажи в Северной Америке снижались быстрее чем в других регионах и к 2014 году сравнялись с Европой.\nС 1996 до 1999 сильно выделяются продажи без рейтинга критиков."
  },
  {
    "objectID": "projects/research_on_video_game_sales/research_on_video_game_sales.html#формулирование-и-провера-гипотез",
    "href": "projects/research_on_video_game_sales/research_on_video_game_sales.html#формулирование-и-провера-гипотез",
    "title": "Исследование продаж компьютерных игр",
    "section": "5. Формулирование и провера гипотез",
    "text": "5. Формулирование и провера гипотез\n\n5.1 Формулирование гипотез\nНа основе проведенного анализа данных сформулируем следующие гипотезы:\n\nГипотеза 1: Средняя оценка критиков не зависит от категории продаж.\n\nГипотеза 2: Средняя оценка пользователей не зависит от категории продаж.\n\nГипотеза 3: Средняя оценка критиков не зависит от жанра.\n\nГипотеза 4: Средняя оценка пользователей не зависит от жанра.\n\nГипотеза 5: Средняя оценка критиков не зависит от рейтинга.\n\nГипотеза 6: Средняя оценка пользователей не зависит от рейтинга.\n\n\n\n5.2 Проверка гипотез\nСформируем словарь для подписей осей и названий гистограмм.\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    critic_score = ['Средняя оценка критиков', 'средней оценки критиков']\n    , user_score = ['Средняя оценка пользователей', 'средней оценки пользователей']\n)\n\n\nГипотеза 1: Средняя оценка критиков не зависит от категории продаж.\nH0: Средняя оценка критиков не зависит от категории продаж\nH1: Средняя оценка критиков зависит от категории продаж\nПосмотрим на распределение средней оценки критиков.\n\n\nShow the code\npagri_data_tools.histogram(df.critic_score, titles_for_axis)\n\n\n                                                \n\n\nРаспределение близко к нормальному, поэтому будем использовать тест ANOVA\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: Дисперсия оценок критиков в разных категориях продаж не отличается.\nH1: Дисперсия оценок критиков в разных категориях продаж отличается.\nИспользуем тест Левена\n\n\nShow the code\npagri_data_tools.levene_df(df[['sales_cat', 'critic_score']].dropna())\n\n\nТест Левена\nalpha =  0.05\np-value =  2.8713986913197406e-44\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значений в каждой группе\n\n\nShow the code\ndf['sales_cat'].value_counts()\n\n\nsales_cat\nмало      33093\nсредне    23268\nмного      9407\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.anova_oneway_welch_df(df[['sales_cat', 'critic_score']].dropna())\n\n\nОднофакторный дисперсионный анализ Welch\nalpha =  0.05\np-value =  0.0\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nИспользуем тест Тьюки, чтобы определить различия между группами\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.tukey_hsd_df(df[['sales_cat', 'critic_score']].dropna())\n\n\nMultiple Comparison of Means - Tukey HSD, FWER=0.05\n===================================================\ngroup1 group2 meandiff p-adj  lower   upper  reject\n---------------------------------------------------\n  мало  много  10.2229   0.0  9.7272 10.7187   True\n  мало средне     2.35   0.0    1.96    2.74   True\n много средне  -7.8729   0.0 -8.3672 -7.3787   True\n---------------------------------------------------\n\n\nГипотезы отвергаются во всех парах.\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка критиков не зависит от категории продаж, была отклонена.\nЭто указывает на то, что категория продаж оказывает статистически значимое влияние на оценку критиков.\n\nГипотеза 2: Средняя оценка пользователей не зависит от категории продаж.\nH0: Средняя оценка пользователей не зависит от категории продаж\nH1: Средняя оценка пользователей зависит от категории продаж\nПосмотрим на распределение средней оценки пользователей.\n\n\nShow the code\npagri_data_tools.histogram(df.user_score, titles_for_axis)\n\n\n                                                \n\n\nРаспределение близко к нормальному, поэтому будем использовать тест ANOVA\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: Дисперсия оценок пользователей в разных категориях продаж не отличается.\nH1: Дисперсия оценок пользователей в разных категориях продаж отличается.\nИспользуем тест Левена\n\n\nShow the code\npagri_data_tools.levene_df(df[['sales_cat', 'user_score']].dropna())\n\n\nТест Левена\nalpha =  0.05\np-value =  3.620866432110824e-37\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значений в каждой группе\n\n\nShow the code\ndf['sales_cat'].value_counts()\n\n\nsales_cat\nмало      33093\nсредне    23268\nмного      9407\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.anova_oneway_welch_df(df[['sales_cat', 'user_score']].dropna())\n\n\nОднофакторный дисперсионный анализ Welch\nalpha =  0.05\np-value =  1.5511068759635309e-89\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nИспользуем тест Тьюки, чтобы определить различия между группами\nУровень значимости alpha выберем 0.05\n\n\nShow the code\npagri_data_tools.tukey_hsd_df(df[['sales_cat', 'user_score']].dropna())\n\n\nMultiple Comparison of Means - Tukey HSD, FWER=0.05\n===================================================\ngroup1 group2 meandiff p-adj  lower   upper  reject\n---------------------------------------------------\n  мало  много   4.5394   0.0  3.9814  5.0973   True\n  мало средне   1.4481   0.0  0.9966  1.8996   True\n много средне  -3.0913   0.0 -3.6417 -2.5409   True\n---------------------------------------------------\n\n\nГипотезы отвергаются во всех парах.\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка пользователей не зависит от категории продаж, была отклонена.\nЭто указывает на то, что категория продаж оказывает статистически значимое влияние на оценку пользователей.\n\nГипотеза 3: Средняя оценка критиков не зависит от жанра.\nH0: Средняя оценка критиков не зависит от жанра.\nH1: Средняя оценка критиков зависит от жанра.\nМы уже выяснили, что распределение средней оценки близко к нормальному, поэтому будем использовать тест ANOVA.\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: Дисперсия оценок критиков в разных жанрах не отличается.\nH1: Дисперсия оценок критиков в разных жанрах отличается.\nИспользуем тест Левена\n\n\nShow the code\npagri_data_tools.levene_df(df[['genre', 'critic_score']].dropna())\n\n\nТест Левена\nalpha =  0.05\np-value =  2.0623954030951693e-34\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значений в каждой группе\n\n\nShow the code\ndf['genre'].value_counts()\n\n\ngenre\nAction          13228\nSports           9220\nMisc             6884\nRole-Playing     5924\nShooter          5184\nAdventure        5168\nRacing           4904\nPlatform         3512\nSimulation       3428\nFighting         3348\nStrategy         2692\nPuzzle           2276\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.anova_oneway_welch_df(df[['genre', 'critic_score']].dropna())\n\n\nОднофакторный дисперсионный анализ Welch\nalpha =  0.05\np-value =  8.596275083665125e-193\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка критиков не зависит от жанра, была отклонена.\nЭто указывает на то, что жанр оказывает статистически значимое влияние на оценку критиков.\n\nГипотеза 4: Средняя оценка пользователей не зависит от жанра.\nH0: Средняя оценка пользователей не зависит от жанра.\nH1: Средняя оценка пользователей зависит от жанра.\nМы уже выяснили, что распределение средней оценки близко к нормальному, поэтому будем использовать тест ANOVA.\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: Дисперсия оценок пользователей в разных жанрах не отличается.\nH1: Дисперсия оценок пользователей в разных жанрах отличается.\nИспользуем тест Левена\n\n\nShow the code\npagri_data_tools.levene_df(df[['genre', 'user_score']].dropna())\n\n\nТест Левена\nalpha =  0.05\np-value =  1.2966490648775887e-63\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значений в каждой группе\n\n\nShow the code\ndf['genre'].value_counts()\n\n\ngenre\nAction          13228\nSports           9220\nMisc             6884\nRole-Playing     5924\nShooter          5184\nAdventure        5168\nRacing           4904\nPlatform         3512\nSimulation       3428\nFighting         3348\nStrategy         2692\nPuzzle           2276\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.anova_oneway_welch_df(df[['genre', 'user_score']].dropna())\n\n\nОднофакторный дисперсионный анализ Welch\nalpha =  0.05\np-value =  6.347739936602555e-156\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка пользователей не зависит от жанра, была отклонена.\nЭто указывает на то, что жанр оказывает статистически значимое влияние на оценку пользователей.\n\nГипотеза 5: Средняя оценка критиков не зависит от рейтинга.\nH0: Средняя оценка критиков не зависит от рейтинга.\nH1: Средняя оценка критиков зависит от рейтинга.\nМы уже выяснили, что распределение средней оценки близко к нормальному, поэтому будем использовать тест ANOVA.\nПроверим гипотезу, что дисперсии в группах не отличаются\nH0: Дисперсия оценок критиков для разных рейтингов не отличается.\nH1: Дисперсия оценок критиков для разных рейтингов отличается.\nИспользуем тест Левена\n\n\nShow the code\npagri_data_tools.levene_df(df[['rating', 'critic_score']].dropna())\n\n\nТест Левена\nalpha =  0.05\np-value =  6.560512459586399e-13\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nТак как дисперсия в группах разная, будем использовать тест Уэлча.\nУровень значимости alpha выберем 0.05\nУбедимся, что у нас достаточно значений в каждой группе\n\n\nShow the code\ndf['rating'].value_counts()\n\n\nrating\nне указано             26708\nдля всех               15688\nподростковый           11620\nвзрослый                6148\nдля всех от 10 лет      5572\nраннее детство            32\nName: count, dtype: int64\n\n\n\n\nShow the code\npagri_data_tools.anova_oneway_welch_df(df[['rating', 'critic_score']].dropna())\n\n\nОднофакторный дисперсионный анализ Welch\nalpha =  0.05\np-value =  1.952974701861071e-70\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка критиков не зависит от рейтинга, была отклонена.\nЭто указывает на то, что рейтинг оказывает статистически значимое влияние на оценку критиков.\n\n\n\n5.3 Промежуточный вывод\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка пользователей не зависит от категории продаж, была отклонена.\nЭто указывает на то, что категория продаж оказывает статистически значимое влияние на оценку пользователей.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка критиков не зависит от категории продаж, была отклонена.\nЭто указывает на то, что категория продаж оказывает статистически значимое влияние на оценку критиков.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка критиков не зависит от жанра, была отклонена.\nЭто указывает на то, что жанр оказывает статистически значимое влияние на оценку критиков.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка пользователей не зависит от жанра, была отклонена.\nЭто указывает на то, что жанр оказывает статистически значимое влияние на оценку пользователей.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка критиков не зависит от рейтинга, была отклонена.\nЭто указывает на то, что рейтинг оказывает статистически значимое влияние на оценку критиков."
  },
  {
    "objectID": "projects/research_on_video_game_sales/research_on_video_game_sales.html#общий-вывод",
    "href": "projects/research_on_video_game_sales/research_on_video_game_sales.html#общий-вывод",
    "title": "Исследование продаж компьютерных игр",
    "section": "6. Общий вывод",
    "text": "6. Общий вывод\nВыводы:\n\nИгры имеют год выпуска от 1980 до 2016 года.\nОсновная часть игр имеет год выпуска от 2003 до 2010 года.\nБольше всего игр 2008 года.\nКоличество проданных игр в Северной Америке лежит в диапазоне от 0 до 41.36 млн.\nВ основном количество проданных игр в Северной Америке находится в диапазоне от 0 до 0.24 млн.\nКоличество проданных игр в Европе лежит в диапазоне от 0 до 28.96 млн.\nВ основном количество проданных игр в Европе находится в диапазоне от 0 до 0.11 млн.\nКоличество проданных игр в Японии лежит в диапазоне от 0 до 10.22 млн.\nВ основном количество проданных игр в Японии находится в диапазоне от 0 до 0.4 млн.\nКоличество проданных игр в других странах лежит в диапазоне от 0 до 10.57 млн.\nВ основном количество проданных игр в других странах находится в диапазоне от 0 до 0.03 млн.\nОценка критиков лежит в диапазоне от 13 до 98.\nВ основном критики ставят оценки от 60 до 79.\nОценка пользователей варьируется от 0 до 9.7.\nВ основном пользователи ставят оценки от 6.4 до 8.2\nТоп 5 самых встречающихся игр: Need for Speed: Most Wanted, Ratatouille, LEGO Marvel Super Heroes, FIFA 14, Madden NFL 07\nБольше всего игр на платформах PS2 и DS (по 13% от общего числа игр).\nБольше всего игр в жанре Action.\nБольше всего игр с рейтингами E (40%) и T(30%).\nПользователи ставят более высокую оценку, чем критики.\nИгры с годами выпуска 1996-1998 имеют самые высокие средние оценки и мало выбросов.\nИгры жанра role-playing получают более высокую оценку.\nИгры на платформе DC имеют саму высокую среднюю оценку.\nИгры из категории, где много продаж имеют в среднем оценку выше, чем другие категории количества проданных копий.\nУмеренная положительная корреляция между оценкой критиков и оценкой пользователей.\n\nВ жанре Action больше всего игр на платформах PS3, PS2, DS и X360\nВ жанре Sport явно выделяется платформа PS2\nВ жанре Misc больше всего игр на платформе DS\nВо всех жанрах средних оценок критиков больше всего\nВо всех жанрах средних оценок пользователей больше всего.\nВо всех жанрах больше всего игр из категории с малым количеством продаж.\nВ Северной Америке больше всего игр из категории со средним количеством проданных копий.\nВ Японии в количестве игр явно выделяется категория с малым количеством продаж.\nБольше всего игр в жанре Action и Sport.\nБольше всего игр на платформах PS2 и DS.\nБольше всего игр с рейтингом для всех и для подростков.\nКритики ставят больше средних оценок.\nПользователи ставят больше средних оценок.\nБольше всего игр с категорией ‘мало продаж’.\nБольше всего продаж игр с жанром Action.\nИгры во всех жанрах, кроме Role-Playing в Северной Америке продавались лучше.\nИгры в жанре Role-Playing в Японии продавались лучше, чем в других регионах.\nС низким рейтингом игры значительно хуже продаются.\nБольше всего продаж было в Северной Америке.\nВ жанрах shooter и Racing больше продавалось игр с высокой оценкой.\nВ Северной Америке больше всего продаж на платформах X360 и PS2.\nВ Японии больше продаж на платформах DS.\nСредняя оценка критиков выше у игр, которые много продавались.\nВ Японии много продаж игр, которые не имеют оценки критиков.\nЖанр Role_Playing имеет самую высокую среднюю оценку.\nИгры на платформе DC имеет самую высокую среднюю оценку.\nИгры на многих платформах не имеют оценок.\nПлатформа PS2 имеет больше всего суммарно проданных копий\nЖанры только для взрослых и для детей и взрослых имеют самые высокие средние оценки.\nСуммарное количество проданных копий выше у рейтинга для всех.\nБольше всего суммарных продаж у жанра спорт и рейтинга для всех. Также высокие продажи игр в жанре shooter с рейтингом для взрослых и в жанре action с рейтингом для взрослых.\nДо 2008-2009 год происходил рост продаж, а затем пошло снижение.\nДо 2000 года почти все игры без рейтинга.\nНачиная с 2010 года количество игр без рейтинга значительно выше чем игр с рейтингом.\nС 2005 по 2011 год всплеск продаж игр и при этом сильнее всего продавались игры из категории с малым количеством продаж.\nВ 1985 году был всплеск продаж в жанре Platform.\nИгры в жанре Action и Shooter до 2014 года не падали в продажах, в отличии от других жанров, которые начали падать в продажах с 2010-2011 годов.\nСуммарное количество продаж росло до 2008 года, затем снижалось.\nДо 1996 года оценок часто не было.\nНачиная с 1996 года по 2000 год средняя оценка упала примерно с 85 до 70. И далее колеблется около 70.\nРост продаж до 2008 года в Северной Америке был более бурный, чем в других регионах.\nС 2008 года продажи в Северной Америке снижались быстрее чем в других регионах и к 2014 году сравнялись с Европой.\nС 1996 до 1999 сильно выделяются продажи без рейтинга критиков.\n\nАномалии и особенности в данных:\n\nВ столбце с годом выпуска 2 % пропусков.\nВ столбце с оценкой критиков 51% пропущенных значений.\nВ столбце с оценкой пользователей 55% пропущенных значений.\nВ столбце с названием игры есть 2 пропущенных значения (менее 1%)\nВ столбце с жанром игры 2% пропусков.\n\nВ рейтинге 40% пропусков.\nУ игры Madden NFL 13 все параметры совпадают в дублях, кроме количества проданных копий.\nВозможно часть проданных копий засчиталась отдельно.\nЗначение 0 в оценке пользователей является аномалией.\nПроцент выбросов во всех колонках, кроме года выпуска, находится в диапазоне 0-5%. Это может указывать на то, что данные достаточно чистые и не содержат значительных аномалий.\nПроцент выбросов во всех колонках примерно одинаковый, что может свидетельствовать об однородности данных.\nПочти все пропуски в рейтинге находятся в тех же строках, что и пропуски в оценке критиков и оценке пользователей.\nБольшинство пропусков в столбцах оценка пользователей и оценка критиков находятся в одних и тех же строках.\nПропуски в одних и тех же строках в названии игры и в жанре.\n\nРезультаты предобработки данных:\n\nЗаменили кодировку рейтинга на более понятную и объединим похожие категории.\nОценку пользователей перевели в 100-балльную систему, чтобы можно было сравнивать с рейтингом критиков.\nГод выпуска игры перевели в категориальный тип данных.\nУдалили одну строку, где оценка пользователя равна 0.\nУдалили пропуски в столбцах с названием игры, жанром и годом выпуска, так как их мало и мы не можем восстановить с хорошей точностью эти значения.\nВ рейтинге заменили пропуски на значение ‘не указано’\nОбъединили задублированные строки для игры Madden NFL 13.\n\nРезультаты проверки гипотез:\n\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка пользователей не зависит от категории продаж, была отклонена.\nЭто указывает на то, что категория продаж оказывает статистически значимое влияние на оценку пользователей.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка критиков не зависит от категории продаж, была отклонена.\nЭто указывает на то, что категория продаж оказывает статистически значимое влияние на оценку критиков.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка критиков не зависит от жанра, была отклонена.\nЭто указывает на то, что жанр оказывает статистически значимое влияние на оценку критиков.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка пользователей не зависит от жанра, была отклонена.\nЭто указывает на то, что жанр оказывает статистически значимое влияние на оценку пользователей.\nНа уровне значимости 0.05 нулевая гипотеза о том, что средняя оценка критиков не зависит от рейтинга, была отклонена.\nЭто указывает на то, что рейтинг оказывает статистически значимое влияние на оценку критиков.\n\nРекомендации:\n\nДобавить проверку ввода нулевых значений в поле оценки.\nДобавить проверку на дубли одновременно в названии игры, жанре и платформе.\nВыяснить почему так много пропусков в оценках пользователей и критиков."
  }
]