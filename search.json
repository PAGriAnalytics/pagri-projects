[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pavel Grigoryev projects",
    "section": "",
    "text": "Исследование надёжности заёмщиков\n\n\nИсследование влияния семейного положения и количества детей клиента на факт погашения кредита в срок для кредитного отдела банка.\n\n\n\n\n\n\n\n\n\n\nИсследование объявлений о продаже квартир\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html",
    "href": "projects/creditworthiness-research/creditworthiness_research.html",
    "title": "Исследование надёжности заёмщиков",
    "section": "",
    "text": "Автор:\nГригорьев Павел\nОписание проекта:\nЗаказчик - кредитный отдел банка.\nНужно разобраться, влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок.\nВходные данные от банка - статистика о платёжеспособности клиентов.\nРезультаты исследования будут учтены при построении модели кредитного скоринга - специальной системы, которая оценивает способность потенциального заёмщика вернуть кредит банку.\nЦель:\nСоставить рекомендации для кредитного отдела банка, которые будут учтены при построении модели кредитного скоринга.\nОпределить влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок.\n{description}\nИсточники данных:\nСтатистика о платёжеспособности клиентов.\nГлавные выводы:\nАномалии и особенности в данных:\nОглавление\n1. Описание и изучение данных\n   1.1 Описание данных\n   1.2 Изучение данных\n     1.2.1 Изучение переменных\n     1.2.2 Изучение дубликатов\n     1.2.3 Изучение пропусков\n     1.2.4 Изучение выбросов\n   1.3 Промежуточный вывод\n 2. Предобработка данных\n   2.1 Выбор нужных столбцов для дальнейшей работы и нормализация таблицы\n   2.2 Обработка выбросов\n   2.3 Обработка пропусков\n   2.4 Обработка дубликатов\n   2.5 Приведение данных к удобной форме\n   2.6 Категоризация данных\n   2.7 Промежуточный вывод\n 3. Анализ корреляций между переменными\n   3.1 Исследование корреляционных связей\n   3.2 Промежуточный вывод\n 4. Анализ взаимосвязей переменных на графиках\n   4.1 Изучение зависимостей между числовыми переменными\n   4.2 Изучение зависимостей между категориальными переменными\n   4.3 Изучение зависимостей между числовыми и категориальными переменными\n   4.4 Промежуточный вывод\n 5. Формулирование и провера гипотез\n   5.1 Формулирование гипотез\n   5.2 Проверка гипотез\n   5.3 Промежуточный вывод\n 6. Общий вывод\nРекомендации: - Добавить контроль данных, чтобы не дублировались значения с разными регистрами в колонке с образованием. - Добавить уникальный идентификатор клиента, чтобы избежать дублирования строк. - Добавить проверку на отрицательные значения и на слишком большие значения в количестве детей при загрузке данных. - Выяснить откуда возникают отрицательные значения в трудовом стаже и добавить контроль ввода невалидных данных. - Выяснить причину нулевых значений в колонке возраста и добавить проверку на нулевые значения при загрузке данных. - Выяснить причину большого количества знаков после запятой в колонке дохода."
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#загрузка-библиотек",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#загрузка-библиотек",
    "title": "Исследование надёжности заёмщиков",
    "section": "Загрузка библиотек ",
    "text": "Загрузка библиотек \n\n\nShow the code\n# %%capture\n# !pip install dash pingouin pyaspeller kaleido\n\n\n\n\nShow the code\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore\n\n# import httpimport\n# with httpimport.github_repo('PAGriAnalytics', 'pagri_analytics_modules'):\n# import pagri_data_tools\n\n\n\nTraceback (most recent call last):\n\n  File ~/.conda/envs/pagri_conda/lib/python3.12/site-packages/IPython/core/interactiveshell.py:3577 in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n\n  Cell In[2], line 4\n    import pagri_data_tools  # type: ignore\n\n  File ~/git_repos/pagri_analytics_modules/pagri_data_tools.py:7\n    from pagri_graphs import *\n\n  File ~/git_repos/pagri_analytics_modules/pagri_graphs.py:2030\n    , hoverlabel=dict(bgcolor=\"white\"), xaxis=dict(\n    ^\nSyntaxError: invalid syntax"
  },
  {
    "objectID": "projects/creditworthiness-research/creditworthiness_research.html#описание-и-изучение-данных",
    "href": "projects/creditworthiness-research/creditworthiness_research.html#описание-и-изучение-данных",
    "title": "Исследование надёжности заёмщиков",
    "section": "1. Описание и изучение данных",
    "text": "1. Описание и изучение данных\n\n1.1 Описание данных\nвернуться к оглавлению\n\nchildren - количество детей в семье\ndays_employed - общий трудовой стаж в днях\ndob_years - возраст клиента в годах\neducation - уровень образования клиента\neducation_id - идентификатор уровня образования\nfamily_status - семейное положение\nfamily_status_id - идентификатор семейного положения\ngender - пол клиента\nincome_type - тип занятости\ndebt - имел ли задолженность по возврату кредитов\ntotal_income - ежемесячный доход\npurpose - цель получения кредита\n\n\n\n1.2 Изучение данных\n\n1.2.1 Изучение переменных\nвернуться к оглавлению\n\n\nShow the code\ndtype = {\n    \"education\": \"category\",\n    \"education_id\": \"category\",\n    \"family_status\": \"category\",\n    \"family_status_id\": \"category\",\n    \"gender\": \"category\",\n    \"income_type\": \"category\",\n    \"debt\": \"category\",\n}\ndf = pd.read_csv(\"https://code.s3.yandex.net/datasets/data.csv\", dtype=dtype)\ndf.sample(5, random_state=7)\n\n\n\n\n\n\n\n\n\nchildren\ndays_employed\ndob_years\neducation\neducation_id\nfamily_status\nfamily_status_id\ngender\nincome_type\ndebt\ntotal_income\npurpose\n\n\n\n\n4042\n1\n-2885.142188\n50\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\n0\n80236.028323\nприобретение автомобиля\n\n\n19177\n2\n-1803.080913\n36\nСреднее\n1\nженат / замужем\n0\nF\nсотрудник\n0\n163292.220004\nстроительство собственной недвижимости\n\n\n7372\n1\n-305.540665\n27\nСРЕДНЕЕ\n1\nгражданский брак\n1\nF\nсотрудник\n0\n69799.488812\nремонт жилью\n\n\n16245\n1\n-1593.946336\n50\nсреднее\n1\nженат / замужем\n0\nF\nсотрудник\n1\n107486.332934\nна покупку подержанного автомобиля\n\n\n11563\n0\n-1025.402943\n64\nвысшее\n0\nженат / замужем\n0\nM\nгосслужащий\n0\n706401.475790\nпрофильное образование\n\n\n\n\n\n\n\nИзменим название колонки dob_years на более понятное age\n\n\nShow the code\ndf = df.rename(columns={\"dob_years\": \"age\"})\n\n\nИзменим значения в столбце debt на ‘есть’, ‘нет’\n\n\nShow the code\ndf.debt = df.debt.apply(lambda x: \"есть\" if x == \"1\" else \"нет\").astype(\"category\")\n\n\nИзучим отдельно каждую колонку\n\n\nShow the code\ngen = pagri_data_tools.my_info_gen(df)\n\n\n вернуться к оглавлению\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n21 525\n12\n4\n54 (&lt;1%)\n0 (0%)\n\n\n\n\n\n\n\n\nНаблюдения:\n- В датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\nЕсли заменить все пробелы на 1, привести к нижнему регистру, то дополнительно появляется 31 дубликат.\nНужно детальнее изучить дубликаты.\n вернуться к оглавлению"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html",
    "title": "Исследование объявлений о продаже квартир",
    "section": "",
    "text": "Описание проекта:\nПроект направлен на исследование факторов, влияющих на ценообразование на рынке недвижимости в Санкт-Петербурге.\nВ ходе проекта будут выявлены ключевые параметры, которые определяют стоимость квартир.\nПолученные знания будут использованы для создания системы, которая будет отслеживать аномалии и предупреждать о возможных случаях мошенничества.\nАвтор:\nГригорьев Павел\nЦель:\nВыявить ключевые параметры, определяющие стоимость квартир, и разработать рекомендации для создания системы мониторинга,\nкоторая поможет выявлять аномалии в ценах и предупреждать о мошенничестве на рынке недвижимости.\nИсточники данных:\nДанные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктах за несколько лет.\nУсловия проведения анализа днных:\nГлавные выводы:\nтут помещаем самое главное из общего вывода, примерно до полустраницы, чтобы не было сильно много и при этом указать все главные выводы Будет идеально, елси выводы на похожие темы будут рядом, то есть елси мы имеем несколько выводов о доходе, то лушче поместить их рядом - Женщины чаще возвращают кредит, чем мужчины. - Долги присутствуют у людей с разным доходом.\nАномалии и особенности в данных: - В датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\n- В столбце с количеством детей есть отрицательные значения. 47 штук. Меньше 1 процента от всего датафрейма. Также есть клиенты с 20 детьми.\nРекомендации:\n- Добавить контроль данных, чтобы не дублировались значения с разными регистрами в колонке с образованием. - Добавить уникальный идентификатор клиента, чтобы избежать дублирования строк.\nОглавление"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#загрузка-библиотек",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#загрузка-библиотек",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Загрузка библиотек",
    "text": "Загрузка библиотек\n\n\nShow the code\n%load_ext autoreload\n%autoreload 2\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport pagri_data_tools  # type: ignore"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#описание-и-изучение-данных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#описание-и-изучение-данных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Описание и изучение данных",
    "text": "Описание и изучение данных\n\nОписание данных\nПо каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных.\nНапример, расстояние до центра, аэропорта, ближайшего парка и водоёма.\n\nairports_nearest - расстояние до ближайшего аэропорта в метрах (м)\nbalcony - число балконов\nceiling_height - высота потолков (м)\ncityCenters_nearest - расстояние до центра города (м)\ndays_exposition - сколько дней было размещено объявление (от публикации до снятия)\nfirst_day_exposition - дата публикации\nfloor - этаж\nfloors_total - всего этажей в доме\nis_apartment - апартаменты (булев тип)\nkitchen_area - площадь кухни в квадратных метрах (м²)\nlast_price - цена на момент снятия с публикации\nliving_area - жилая площадь в квадратных метрах(м²)\nlocality_name - название населённого пункта\nopen_plan - свободная планировка (булев тип)\nparks_around3000 - число парков в радиусе 3 км\nparks_nearest - расстояние до ближайшего парка (м)\nponds_around3000 - число водоёмов в радиусе 3 км\nponds_nearest - расстояние до ближайшего водоёма (м)\nrooms - число комнат\nstudio - квартира-студия (булев тип)\ntotal_area - площадь квартиры в квадратных метрах (м²)\ntotal_images - число фотографий квартиры в объявлении\n\n\n\nИзучение данных\n\nИзучение переменных\nОставим тип float, так как у нас пропуски в данных и мы не можем преобразовать нужные столбцы в int\n\n\nShow the code\ndtype = {'is_apartment': 'category', 'studio': 'category', 'open_plan': 'category'}\ndf = pd.read_csv('https://code.s3.yandex.net/datasets/real_estate_data.csv', dtype=dtype, sep='\\t'\n                , parse_dates=['first_day_exposition'], date_format='%Y-%m-%dT%H:%M:%S')\ndf.rename(columns={'cityCenters_nearest': 'city_centers_nearest'}, inplace=True)\ndf.sample(5, random_state=7)\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n6029\n7\n4200000.0\n42.00\n2017-12-05\n2\n2.58\n5.0\n28.5\n5\nNaN\n...\n5.00\nNaN\nСанкт-Петербург\n36416.0\n9534.0\n2.0\n446.0\n3.0\n459.0\n18.0\n\n\n21836\n7\n3950000.0\n45.00\n2015-06-10\n2\nNaN\n9.0\n28.0\n7\nNaN\n...\n7.00\n0.0\nСанкт-Петербург\n27880.0\n12138.0\n1.0\n638.0\n1.0\n593.0\n437.0\n\n\n5698\n7\n450000.0\n42.00\n2017-07-31\n2\nNaN\n1.0\n23.0\n1\nNaN\n...\n5.80\nNaN\nгородской посёлок Будогощь\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n233.0\n\n\n9402\n11\n4900000.0\n55.00\n2017-06-19\n2\nNaN\n14.0\n32.0\n14\nNaN\n...\n8.50\n2.0\nСанкт-Петербург\n39931.0\n12834.0\n0.0\nNaN\n0.0\nNaN\n15.0\n\n\n2519\n6\n3511000.0\n39.41\n2018-08-07\n1\n2.65\n27.0\nNaN\n12\nNaN\n...\n11.28\n1.0\nпосёлок Мурино\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n60.0\n\n\n\n\n5 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nИзучим каждую колонку отдельно\n\n\nShow the code\ngen = pagri_data_tools.my_info_gen(df)\nnext(gen)\n\n\n\n\n\n\n\nTable 1: DataFrame\n\n\n\n\n\nRows\nFeatures\nRAM (Mb)\nDuplicates\nDupl (sub - origin)\n\n\n\n\n23 699\n22\n6\n---\n---\n\n\n\n\n\n\n\n\nНаблюдения: - Полных дубликатов в датафрейме нет\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 2: first_day_exposition\n\n\n\n\n\nFirst date\n2014-11-27 00:00:00\n\nZeros\n---\n\nYears missing\n0%\n\n\n\nLast date\n2019-05-03 00:00:00\n\nMissing\n---\n\nMonths missing\n0%\n\n\n\nValues\n23 699 (100%)\n\nDistinct\n1 491 (6%)\n\nWeeks missing\n0%\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\nDuplicates\n22 208 (94%)\n\nDays missing\n8%\n\n\n\n\n\n\n\n\n\n        \n        \n\n\nНаблюдения: - В колонке с датой пропущенных значений нет. - Нет пропущенных годов и месяцев. - 8 процентов дней пропущено\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 3: total_images\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n50\n\nAvg\n9.86\n\n10 (8%)\n\n\nMissing\n---\n\n95%\n20\n\nMode\n10\n\n9 (7%)\n\n\nDistinct\n38 (&lt;1%)\n\n75%\n14\n\nRange\n50\n\n20 (7%)\n\n\nDuplicates\n23 661 (99.8%)\n\nMedian\n9\n\niQR\n8\n\n8 (7%)\n\n\nZeros\n1 059 (4%)\n\n25%\n6\n\nstd\n5.68\n\n7 (6%)\n\n\nNegative\n---\n\n5%\n1\n\nkurt\n-0.34\n\n6 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.26\n\n11 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В колонке с количеством фотографий пропусков нет - 4 процента записей с нулями, это нормально, поскольку у части объявлений нет изображений. - Максимальное количество фотографиий 50. Это многовато, нужно будет это проверить. - Медианное значение 9, похоже на правду. - 7 процентов записей имеют 20 фотографий.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 4: last_price\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n763 000 000\n\nAvg\n6 541 548.77\n\n4 500 000 (1%)\n\n\nMissing\n---\n\n95%\n15 300 000\n\nMode\n4 500 000\n\n3 500 000 (1%)\n\n\nDistinct\n2 978 (13%)\n\n75%\n6 800 000\n\nRange\n762 987 810\n\n4 300 000 (1%)\n\n\nDuplicates\n20 721 (87%)\n\nMedian\n4 650 000\n\niQR\n3 400 000\n\n4 000 000 (1%)\n\n\nZeros\n---\n\n25%\n3 400 000\n\nstd\n10 887 013.27\n\n4 200 000 (1%)\n\n\nNegative\n---\n\n5%\n1 870 000\n\nkurt\n1277.68\n\n3 600 000 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12 190\n\nskew\n25.80\n\n3 300 000 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В цене есть выбросы. - Минимальное занчение 12 190 и максимальное значение 763 млн выглядят подозрительно.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 5: total_area\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n900\n\nAvg\n60.35\n\n45 (2%)\n\n\nMissing\n---\n\n95%\n116\n\nMode\n45\n\n42 (2%)\n\n\nDistinct\n2 182 (9%)\n\n75%\n69.9\n\nRange\n888\n\n60 (1%)\n\n\nDuplicates\n21 517 (91%)\n\nMedian\n52\n\niQR\n29.9\n\n31 (1%)\n\n\nZeros\n---\n\n25%\n40\n\nstd\n35.65\n\n44 (1%)\n\n\nNegative\n---\n\n5%\n31\n\nkurt\n47.52\n\n40 (1%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n12\n\nskew\n4.77\n\n43 (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - Максимальная площадь в 900 квадратов многовато. - Также нужно проверить площадь 12 квадратов\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 6: rooms\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n19\n\nAvg\n2.07\n\n1 (34%)\n\n\nMissing\n---\n\n95%\n4\n\nMode\n1\n\n2 (34%)\n\n\nDistinct\n17 (&lt;1%)\n\n75%\n3\n\nRange\n19\n\n3 (25%)\n\n\nDuplicates\n23 682 (99.9%)\n\nMedian\n2\n\niQR\n2\n\n4 (5%)\n\n\nZeros\n197 (1%)\n\n25%\n1\n\nstd\n1.08\n\n5 (1%)\n\n\nNegative\n---\n\n5%\n1\n\nkurt\n8.69\n\n0 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.52\n\n6 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - Есть квартиры с 0 комнат, возможно так обозначили студии. - Максимальное количество комнад 19 нужно изучить. - Треть квартир с 1 комнатой и треть квартир с двумя комнатами. Четверть с 3 комнатами. - Квартир с 4 и более комант около 6 процентов.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 7: ceiling_height\n\n\n\n\n\nValues\n14 504 (61%)\n\nMax\n100\n\nAvg\n2.77\n\n2.5 (24%)\n\n\nMissing\n9 195 (39%)\n\n95%\n3.3\n\nMode\n2.5\n\n2.6 (11%)\n\n\nDistinct\n183 (1%)\n\n75%\n2.8\n\nRange\n99\n\n2.7 (11%)\n\n\nDuplicates\n23 515 (99.2%)\n\nMedian\n2.65\n\niQR\n0.28\n\n3 (8%)\n\n\nZeros\n---\n\n25%\n2.52\n\nstd\n1.26\n\n2.8 (7%)\n\n\nNegative\n---\n\n5%\n2.5\n\nkurt\n2627.14\n\n2.55 (7%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n41.71\n\n2.75 (6%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В высоте потолков пропуски (39 процентов) - Явный выбрас 100.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 8: floors_total\n\n\n\n\n\nValues\n23 613 (99.6%)\n\nMax\n60\n\nAvg\n10.67\n\n5 (25%)\n\n\nMissing\n86 (&lt;1%)\n\n95%\n25\n\nMode\n5\n\n9 (16%)\n\n\nDistinct\n36 (&lt;1%)\n\n75%\n16\n\nRange\n59\n\n16 (6%)\n\n\nDuplicates\n23 662 (99.8%)\n\nMedian\n9\n\niQR\n11\n\n12 (6%)\n\n\nZeros\n---\n\n25%\n5\n\nstd\n6.6\n\n4 (5%)\n\n\nNegative\n---\n\n5%\n4\n\nkurt\n0.04\n\n10 (5%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n0.94\n\n25 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В количестве этажей есть пропуски (меньше 1 процента) - Максимальное количество этаже 60 нужно проверить. - Больше всего пятиэтажек (25 процентов)\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 9: living_area\n\n\n\n\n\nValues\n21 796 (92%)\n\nMax\n409.7\n\nAvg\n34.46\n\n18 (4%)\n\n\nMissing\n1 903 (8%)\n\n95%\n69\n\nMode\n18\n\n17 (3%)\n\n\nDistinct\n1 782 (8%)\n\n75%\n42.3\n\nRange\n407.7\n\n30 (3%)\n\n\nDuplicates\n21 916 (92%)\n\nMedian\n30\n\niQR\n23.7\n\n16 (2%)\n\n\nZeros\n---\n\n25%\n18.6\n\nstd\n22.03\n\n20 (2%)\n\n\nNegative\n---\n\n5%\n15.2\n\nkurt\n31.36\n\n28 (2%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n2\n\nskew\n3.91\n\n31 (2%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В жилой площади 8 процентов пропусков. - Нужно проверить минимальную и максимальную жилую площади.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 10: floor\n\n\n\n\n\nValues\n23 699 (100%)\n\nMax\n33\n\nAvg\n5.89\n\n2 (14%)\n\n\nMissing\n---\n\n95%\n16\n\nMode\n2\n\n3 (13%)\n\n\nDistinct\n33 (&lt;1%)\n\n75%\n8\n\nRange\n32\n\n1 (12%)\n\n\nDuplicates\n23 666 (99.9%)\n\nMedian\n4\n\niQR\n6\n\n4 (12%)\n\n\nZeros\n---\n\n25%\n2\n\nstd\n4.89\n\n5 (11%)\n\n\nNegative\n---\n\n5%\n1\n\nkurt\n2.33\n\n6 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n1.55\n\n7 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - Больше всего квартир с 1 по 5 этаж. Это логично, учитывая, что у нас больше всего пятиэтажек.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 11: kitchen_area\n\n\n\n\n\nValues\n21 421 (90%)\n\nMax\n112\n\nAvg\n10.57\n\n6 (6%)\n\n\nMissing\n2 278 (10%)\n\n95%\n20\n\nMode\n6\n\n10 (6%)\n\n\nDistinct\n971 (4%)\n\n75%\n12\n\nRange\n110.7\n\n8 (5%)\n\n\nDuplicates\n22 727 (96%)\n\nMedian\n9.1\n\niQR\n5\n\n9 (5%)\n\n\nZeros\n---\n\n25%\n7\n\nstd\n5.91\n\n7 (5%)\n\n\nNegative\n---\n\n5%\n5.5\n\nkurt\n33.76\n\n11 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1.3\n\nskew\n4.21\n\n12 (3%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В площади кухни 10 процентов пропусков.\n- Нужно проверить опять же максимальные и минимальные кухонные площади.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 12: balcony\n\n\n\n\n\nValues\n12 180 (51%)\n\nMax\n5\n\nAvg\n1.15\n\n1 (34%)\n\n\nMissing\n11 519 (49%)\n\n95%\n2\n\nMode\n1\n\n0 (31%)\n\n\nDistinct\n6 (&lt;1%)\n\n75%\n2\n\nRange\n5\n\n2 (30%)\n\n\nDuplicates\n23 692 (99.9%)\n\nMedian\n1\n\niQR\n2\n\n5 (2%)\n\n\nZeros\n3 758 (16%)\n\n25%\n0\n\nstd\n1.07\n\n4 (2%)\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n2.51\n\n3 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.24\n\nnan\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В числе балконов 49 прцоентов пропусков. Скорее всего пропуски это отсутствие балкона.\n- Треть квартир без балковнов, также по трети квартир с 1 и 2 балконами.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 13: airports_nearest\n\n\n\n\n\nValues\n18 157 (77%)\n\nMax\n84 869\n\nAvg\n28 793.67\n\n37 434 &lt;1%\n\n\nMissing\n5 542 (23%)\n\n95%\n51 340\n\nMode\n37 434\n\n21 928 &lt;1%\n\n\nDistinct\n8 275 (35%)\n\n75%\n37 273\n\nRange\n84 869\n\n44 870 &lt;1%\n\n\nDuplicates\n15 423 (65%)\n\nMedian\n26 726\n\niQR\n18 688\n\n39 946 &lt;1%\n\n\nZeros\n1 (&lt;1%)\n\n25%\n18 585\n\nstd\n12 630.88\n\n18 732 &lt;1%\n\n\nNegative\n---\n\n5%\n11 557.4\n\nkurt\n-0.29\n\n37 407 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n0.54\n\n39 140 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В растоянии до ближайшего аэропорта 23 проента пропусков. - 1 нулевое значение\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 14: city_centers_nearest\n\n\n\n\n\nValues\n18 180 (77%)\n\nMax\n65 968\n\nAvg\n14 191.28\n\n8 460 &lt;1%\n\n\nMissing\n5 519 (23%)\n\n95%\n31 671.6\n\nMode\n8 460\n\n20 802 &lt;1%\n\n\nDistinct\n7 642 (32%)\n\n75%\n16 293\n\nRange\n65 787\n\n10 720 &lt;1%\n\n\nDuplicates\n16 056 (68%)\n\nMedian\n13 098.5\n\niQR\n7 055\n\n20 444 &lt;1%\n\n\nZeros\n---\n\n25%\n9 238\n\nstd\n8 608.39\n\n8 434 &lt;1%\n\n\nNegative\n---\n\n5%\n3 541\n\nkurt\n4.36\n\n8 370 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n181\n\nskew\n1.67\n\n10 364 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В растоянии до центар города 23 процента пропусков.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 15: parks_around3000\n\n\n\n\n\nValues\n18 181 (77%)\n\nMax\n3\n\nAvg\n0.61\n\n0 (56%)\n\n\nMissing\n5 518 (23%)\n\n95%\n2\n\nMode\n0\n\n1 (31%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n1\n\nRange\n3\n\n2 (10%)\n\n\nDuplicates\n23 694 (99.9%)\n\nMedian\n0\n\niQR\n1\n\n3 (4%)\n\n\nZeros\n10 106 (43%)\n\n25%\n0\n\nstd\n0.8\n\nnan\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n0.87\n\nnan\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.23\n\nnan\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В колонке с количеством парков рядом 23 процента пропусков.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 16: parks_nearest\n\n\n\n\n\nValues\n8 079 (34%)\n\nMax\n3 190\n\nAvg\n490.8\n\n441 &lt;1%\n\n\nMissing\n15 620 (66%)\n\n95%\n968\n\nMode\n441\n\n173 &lt;1%\n\n\nDistinct\n995 (4%)\n\n75%\n612\n\nRange\n3 189\n\n392 &lt;1%\n\n\nDuplicates\n22 703 (96%)\n\nMedian\n455\n\niQR\n324\n\n456 &lt;1%\n\n\nZeros\n---\n\n25%\n288\n\nstd\n342.32\n\n471 &lt;1%\n\n\nNegative\n---\n\n5%\n95.9\n\nkurt\n12.22\n\n2 102 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.72\n\n541 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В колонке с растоянием до ближайшего парка 66 процентов пропусков.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 17: ponds_around3000\n\n\n\n\n\nValues\n18 181 (77%)\n\nMax\n3\n\nAvg\n0.77\n\n0 (50%)\n\n\nMissing\n5 518 (23%)\n\n95%\n3\n\nMode\n0\n\n1 (31%)\n\n\nDistinct\n4 (&lt;1%)\n\n75%\n1\n\nRange\n3\n\n2 (10%)\n\n\nDuplicates\n23 694 (99.9%)\n\nMedian\n1\n\niQR\n1\n\n3 (8%)\n\n\nZeros\n9 071 (38%)\n\n25%\n0\n\nstd\n0.94\n\nnan\n\n\nNegative\n---\n\n5%\n0\n\nkurt\n0.17\n\nnan\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0\n\nskew\n1.07\n\nnan\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В колонке с количеством прудов 23 прцоента пропусков, скорее всего это отсутствие парков.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 18: ponds_nearest\n\n\n\n\n\nValues\n9 110 (38%)\n\nMax\n1 344\n\nAvg\n517.98\n\n427 &lt;1%\n\n\nMissing\n14 589 (62%)\n\n95%\n976.55\n\nMode\n427\n\n454 &lt;1%\n\n\nDistinct\n1 096 (5%)\n\n75%\n729\n\nRange\n1 331\n\n153 &lt;1%\n\n\nDuplicates\n22 602 (95%)\n\nMedian\n502\n\niQR\n435\n\n433 &lt;1%\n\n\nZeros\n---\n\n25%\n294\n\nstd\n277.72\n\n474 &lt;1%\n\n\nNegative\n---\n\n5%\n93\n\nkurt\n-0.73\n\n564 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n13\n\nskew\n0.22\n\n303 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В колоке с растоянием до ближайшего пруда 62 прцоента пропусков.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 19: days_exposition\n\n\n\n\n\nValues\n20 518 (87%)\n\nMax\n1 580\n\nAvg\n180.89\n\n45.0 (4%)\n\n\nMissing\n3 181 (13%)\n\n95%\n647\n\nMode\n45.0\n\n60 (3%)\n\n\nDistinct\n1 141 (5%)\n\n75%\n232\n\nRange\n1 579\n\n7 (1%)\n\n\nDuplicates\n22 557 (95%)\n\nMedian\n95\n\niQR\n187\n\n30 (1%)\n\n\nZeros\n---\n\n25%\n45.0\n\nstd\n219.73\n\n90.0 &lt;1%\n\n\nNegative\n---\n\n5%\n9\n\nkurt\n6.28\n\n4 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n1\n\nskew\n2.31\n\n3.0 &lt;1%\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В среднем объявление находится в продаже 180 дней, но из за выбросов оно не совсем точно описывает ситуацию. - Лучше использовать медиану. Она составляет 95 дней. - Чаще всего объявления находятся в продаже 45 дней. - В колонке с количеством дней экспозиции 13 процентов пропусков. - Максимальное значение в 1580 дней похоже на выброс.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 20: is_apartment\n\n\n\n\n\nValues\n2 775 (12%)\n\nFalse (98%)\n\n\nMissing\n20 924 (88%)\n\nTrue (2%)\n\n\nDistinct\n2 (&lt;1%)\n\nnan\n\n\nDuplicated origin\n23 696 (99.9%)\n\nnan\n\n\nDupl (modify - origin)\n---\n\nnan\n\n\nEmpty\n---\n\nnan\n\n\nRAM (Mb)\n&lt;1 Mb\n\nnan\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В колоке с признаком является ли квартира аппартаментом 88 процентов пропусков. Скорее всего эти квартиры не являются аппартаментами.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 21: studio\n\n\n\n\n\nValues\n23 699 (100%)\n\nFalse (99%)\n\n\nMissing\n---\n\nTrue &lt;1%\n\n\nDistinct\n2 (&lt;1%)\n\nnan\n\n\nDuplicated origin\n23 697 (99.9%)\n\nnan\n\n\nDupl (modify - origin)\n---\n\nnan\n\n\nEmpty\n---\n\nnan\n\n\nRAM (Mb)\n&lt;1 Mb\n\nnan\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - Студий меньше 1 процента.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 22: open_plan\n\n\n\n\n\nValues\n23 699 (100%)\n\nFalse (100%)\n\n\nMissing\n---\n\nTrue &lt;1%\n\n\nDistinct\n2 (&lt;1%)\n\nnan\n\n\nDuplicated origin\n23 697 (99.9%)\n\nnan\n\n\nDupl (modify - origin)\n---\n\nnan\n\n\nEmpty\n---\n\nnan\n\n\nRAM (Mb)\n&lt;1 Mb\n\nnan\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - Почти все квартиры с открытой планировкой.\n\n\nShow the code\nnext(gen)\n\n\n\n        \n            \n\n\n\n\nTable 23: locality_name\n\n\n\n\n\nValues\n23 650 (99.8%)\n\nСанкт-Петербург (66%)\n\n\nMissing\n49 (&lt;1%)\n\nпосёлок Мурино (2%)\n\n\nDistinct\n364 (2%)\n\nпосёлок Шушары (2%)\n\n\nDuplicated origin\n23 334 (98%)\n\nВсеволожск (2%)\n\n\nDupl (modify - origin)\n---\n\nПушкин (2%)\n\n\nEmpty\n---\n\nКолпино (1%)\n\n\nRAM (Mb)\n2\n\nпосёлок Парголово (1%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nНаблюдения: - В колонке с названием населенного пункта 49 пропущенных значений (меньше 1 процента)\n\n\nИзучение дубликатов\nПосмотрим на дубли во всем датафрейме\n\n\nShow the code\npagri_data_tools.check_duplicated(df)\n\n\n'no duplicates'\n\n\nПолных дубликатов у нас нет.\nПосмотрим сколько у нас дублей в каждой колонке\n\n\nShow the code\nseries_duplicated = pagri_data_tools.find_columns_with_duplicates(df)\n\n\n\n\n\n\n\nTable 24: Duplicates\n\n\n\n\n\ntotal_images\n23661 (99.84%)\n\n\nlast_price\n20721 (87.43%)\n\n\ntotal_area\n21517 (90.79%)\n\n\nfirst_day_exposition\n22208 (93.71%)\n\n\nrooms\n23682 (99.93%)\n\n\nceiling_height\n23515 (99.22%)\n\n\nfloors_total\n23662 (99.84%)\n\n\nliving_area\n21916 (92.48%)\n\n\nfloor\n23666 (99.86%)\n\n\nis_apartment\n23696 (99.99%)\n\n\nstudio\n23697 (99.99%)\n\n\nopen_plan\n23697 (99.99%)\n\n\nkitchen_area\n22727 (95.90%)\n\n\nbalcony\n23692 (99.97%)\n\n\nlocality_name\n23334 (98.46%)\n\n\nairports_nearest\n15423 (65.08%)\n\n\ncity_centers_nearest\n16056 (67.75%)\n\n\nparks_around3000\n23694 (99.98%)\n\n\nparks_nearest\n22703 (95.80%)\n\n\nponds_around3000\n23694 (99.98%)\n\n\nponds_nearest\n22602 (95.37%)\n\n\ndays_exposition\n22557 (95.18%)\n\n\n\n\n\n\n\n\nУ нас нет столбцов, в которых данные должны быть уникальны, поэтому проверять на дубли нечего.\n\n\nИзучение пропусков\nПосмотрим на столбцы, в которых есть пропуски.\n\n\nShow the code\nseries_missed = pagri_data_tools.find_columns_with_missing_values(df)\n\n\n\n\n\n\n\nTable 25: Missings\n\n\n\n\n\nceiling_height\n9195 (38.80%)\n\n\nfloors_total\n86 (0.36%)\n\n\nliving_area\n1903 (8.03%)\n\n\nis_apartment\n20924 (88.29%)\n\n\nkitchen_area\n2278 (9.61%)\n\n\nbalcony\n11519 (48.61%)\n\n\nlocality_name\n49 (0.21%)\n\n\nairports_nearest\n5542 (23.38%)\n\n\ncity_centers_nearest\n5519 (23.29%)\n\n\nparks_around3000\n5518 (23.28%)\n\n\nparks_nearest\n15620 (65.91%)\n\n\nponds_around3000\n5518 (23.28%)\n\n\nponds_nearest\n14589 (61.56%)\n\n\ndays_exposition\n3181 (13.42%)\n\n\n\n\n\n\n\n\nУ нас есть прпоуски в площадях. Посмотрим как они распределены.\nПосмотрим есть ли пропуски сразу во всех площадях.\n\n\nShow the code\ndf_na_in_both_columns = pagri_data_tools.check_na_in_both_columns(df, ['total_area', 'living_area', 'kitchen_area'])\ndf_na_in_both_columns.head()\n\n\n0 (0.00%) rows with missings simultaneously in ['total_area', 'living_area', 'kitchen_area']\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n\n\n0 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nПропусков одновременно во всех столбцах с площадями нет.\nПосмотрим на строки датафрейма, где пропуски во всех площадях.\n\n\nShow the code\nseries_missed['living_area'][['total_area', 'living_area', 'kitchen_area']].sample(10)\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_area\nliving_area\nkitchen_area\n\n\n\n\n23517\n46.0\nNaN\nNaN\n\n\n10914\n60.8\nNaN\nNaN\n\n\n5827\n30.0\nNaN\nNaN\n\n\n10547\n36.0\nNaN\nNaN\n\n\n195\n60.0\nNaN\nNaN\n\n\n6392\n24.0\nNaN\nNaN\n\n\n2986\n46.0\nNaN\nNaN\n\n\n17538\n48.0\nNaN\nNaN\n\n\n20470\n64.8\nNaN\nNaN\n\n\n22015\n70.4\nNaN\nNaN\n\n\n\n\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nУ нас нет пропусков в общей площади. Поэтому мы сможем заменить значения пропусков в площади кухни и жилой площади.\nМожно заметить, что количество пропусков в колонке с количеством парков рядом, количеством прудов рядом совпадает, растоянием до центра, растоянием до аэропорта примерно равны. Выдвигаем гипотезу, что пропуски в одних и тех же строках в обоих столбцах.\nПосмотрим сколько пропусков в обоих колонках вместе\n\n\nShow the code\ndf_na_in_both_columns = pagri_data_tools.check_na_in_both_columns(df, ['airports_nearest', 'city_centers_nearest', 'parks_around3000', 'ponds_around3000'])\ndf_na_in_both_columns.head()\n\n\n5518 (23.28%) rows with missings simultaneously in ['airports_nearest', 'city_centers_nearest', 'parks_around3000', 'ponds_around3000']\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n5\n10\n2890000.0\n30.40\n2018-09-10\n1\nNaN\n12.0\n14.40\n5\nNaN\n...\n9.10\nNaN\nгородской посёлок Янино-1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n55.0\n\n\n8\n20\n2900000.0\n33.16\n2018-05-23\n1\nNaN\n27.0\n15.43\n26\nNaN\n...\n8.81\nNaN\nпосёлок Мурино\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n189.0\n\n\n12\n10\n3890000.0\n54.00\n2016-06-30\n2\nNaN\n5.0\n30.00\n5\nNaN\n...\n9.00\n0.0\nСертолово\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n90.0\n\n\n22\n20\n5000000.0\n58.00\n2017-04-24\n2\n2.75\n25.0\n30.00\n15\nNaN\n...\n11.00\n2.0\nдеревня Кудрово\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n60.0\n\n\n30\n12\n2200000.0\n32.80\n2018-02-19\n1\nNaN\n9.0\nNaN\n2\nNaN\n...\nNaN\nNaN\nКоммунар\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n63.0\n\n\n\n\n5 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nГипотеза подтвердилась: - Пропуски в одних и тех же строках в колонках с количеством парков рядом, количеством прудов рядом совпадает, растоянием до центра, растоянием до аэропорта примерно равны\nПосмотрим как распределены пропуски по категориям в строках, где прпоуски одновременно в этих столбцах.\n\n\nShow the code\ngen = pagri_data_tools.analyze_filtered_df_by_category(df, df_na_in_both_columns, 'df with na')\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 26: Value in \"df with na\" by category \"is_apartment\"\n\n\n\n\n\nis_apartment\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n2725\n621\n22.8%\n11.3%\n11.5%\n-0.2%\n\n\nTrue\n50\n7\n14.0%\n0.1%\n0.2%\n-0.1%\n\n\nnan\n20924\n4890\n23.4%\n88.6%\n88.3%\n0.3%\n\n\n\n\n\n\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 27: Value in \"df with na\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n5461\n23.2%\n99.0%\n99.4%\n-0.4%\n\n\nTrue\n149\n57\n38.3%\n1.0%\n0.6%\n0.4%\n\n\n\n\n\n\n\n\n\n\nShow the code\nnext(gen)\n\n\n\n\n\n\n\nTable 28: Value in \"df with na\" by category \"open_plan\"\n\n\n\n\n\nopen_plan\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23632\n5488\n23.2%\n99.5%\n99.7%\n-0.3%\n\n\nTrue\n67\n30\n44.8%\n0.5%\n0.3%\n0.3%\n\n\n\n\n\n\n\n\nНаблюдения: - Явных зависимостей от категорий не обнаружено\nИзучим пропуски по категориям\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"floors_total\", \"is_apartment\")\n\n\n\n\n\n\n\nTable 29: Share in \"floors_total\" by category \"is_apartment\"\n\n\n\n\n\nis_apartment\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n2725\n0\n0.0%\n0.0%\n11.5%\n-11.5%\n\n\nTrue\n50\n0\n0.0%\n0.0%\n0.2%\n-0.2%\n\n\nnan\n20924\n86\n0.4%\n100.0%\n88.3%\n11.7%\n\n\n\n\n\n\n\n\nНаблюдения: - Пропуски в количестве этажей совпадают с пропусками в признаке является ли квартира апартаментом.\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"floors_total\", \"studio\")\n\n\n\n\n\n\n\nTable 30: Share in \"floors_total\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n83\n0.4%\n96.5%\n99.4%\n-2.9%\n\n\nTrue\n149\n3\n2.0%\n3.5%\n0.6%\n2.9%\n\n\n\n\n\n\n\n\nНаблюдения: - В количестве этаже пропуски зависят от признака является ли квартира студией.\n- Почти все пропуски в квартирах, которые не являются студиями, даже учитвая общее количество пропорций.\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"kitchen_area\", \"studio\")\n\n\n\n\n\n\n\nTable 31: Share in \"kitchen_area\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n2129\n9.0%\n93.5%\n99.4%\n-5.9%\n\n\nTrue\n149\n149\n100.0%\n6.5%\n0.6%\n5.9%\n\n\n\n\n\n\n\n\nНаблюдения: - В студиях в поле площадь кухни одни пропуски.\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_missed, \"by_category\", \"kitchen_area\", \"open_plan\")\n\n\n\n\n\n\n\nTable 32: Share in \"kitchen_area\" by category \"open_plan\"\n\n\n\n\n\nopen_plan\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23632\n2211\n9.4%\n97.1%\n99.7%\n-2.7%\n\n\nTrue\n67\n67\n100.0%\n2.9%\n0.3%\n2.7%\n\n\n\n\n\n\n\n\nНаблюдения: - В студиях в поле площадь кухни одни пропуски.\n\n\nИзучение выбросов\nСначала изучим потенциальные выбросы, которые мы выявили при изучении колонок.\nИзучим выброс с ценой 12190.0\n\n\nShow the code\ndf[df.last_price == 12190]\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n8793\n7\n12190.0\n109.0\n2019-03-20\n2\n2.75\n25.0\n32.0\n25\nNaN\n...\n40.5\nNaN\nСанкт-Петербург\n36421.0\n9176.0\n1.0\n805.0\n0.0\nNaN\n8.0\n\n\n\n\n1 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nНаблюдения:\n- Ничего особенно не обнаружено.\n- Скорее всего ошиблись не поставили нули.\nПосмотрим на выбросы с площадью квартиры.\n\n\nShow the code\ndf[df.total_area &gt; 500]\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n3117\n19\n140000000.0\n631.0\n2019-03-30\n7\nNaN\n5.0\nNaN\n5\nNaN\n...\n60.0\nNaN\nСанкт-Петербург\n25707.0\n4972.0\n0.0\nNaN\n2.0\n210.0\nNaN\n\n\n4237\n1\n50000000.0\n517.0\n2017-10-14\n7\nNaN\n4.0\n332.0\n3\nNaN\n...\n22.0\nNaN\nСанкт-Петербург\n22835.0\n1847.0\n2.0\n477.0\n2.0\n540.0\nNaN\n\n\n5358\n20\n65000000.0\n590.0\n2019-02-14\n15\n3.50\n6.0\n409.0\n3\nNaN\n...\n100.0\nNaN\nСанкт-Петербург\n24447.0\n4666.0\n1.0\n767.0\n0.0\nNaN\n14.0\n\n\n8018\n20\n84000000.0\n507.0\n2015-12-17\n5\n4.45\n7.0\n301.5\n7\nTrue\n...\n45.5\n1.0\nСанкт-Петербург\nNaN\n5735.0\n2.0\n110.0\n0.0\nNaN\n1078.0\n\n\n12859\n20\n140000000.0\n631.2\n2019-04-09\n7\n3.90\n4.0\n322.3\n4\nNaN\n...\n19.5\n1.0\nСанкт-Петербург\n25707.0\n4972.0\n0.0\nNaN\n2.0\n210.0\nNaN\n\n\n15651\n20\n300000000.0\n618.0\n2017-12-18\n7\n3.40\n7.0\n258.0\n5\nNaN\n...\n70.0\nNaN\nСанкт-Петербург\n32440.0\n5297.0\n0.0\nNaN\n2.0\n198.0\n111.0\n\n\n19540\n8\n420000000.0\n900.0\n2017-12-06\n12\n2.80\n25.0\n409.7\n25\nNaN\n...\n112.0\nNaN\nСанкт-Петербург\n30706.0\n7877.0\n0.0\nNaN\n2.0\n318.0\n106.0\n\n\n\n\n7 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nНаблюдения:\n- Не похоже на выбросы. Цена большая, количество комнат болшое. Скорее всего просто большие дорогие квартиры.\n\n\nShow the code\ndf[df.total_area &lt; 15]\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n17961\n3\n1400000.0\n13.0\n2017-12-03\n1\n2.60\n9.0\nNaN\n1\nNaN\n...\nNaN\nNaN\nСанкт-Петербург\n14350.0\n15945.0\n0.0\nNaN\n1.0\n185.0\n410.0\n\n\n19546\n3\n1850000.0\n13.0\n2019-03-11\n1\n3.40\n5.0\nNaN\n2\nFalse\n...\nNaN\nNaN\nСанкт-Петербург\n24915.0\n5483.0\n1.0\n644.0\n0.0\nNaN\n24.0\n\n\n19558\n2\n1686000.0\n13.2\n2018-12-17\n1\nNaN\n5.0\nNaN\n1\nNaN\n...\nNaN\nNaN\nСанкт-Петербург\n19891.0\n4165.0\n1.0\n361.0\n1.0\n155.0\n19.0\n\n\n19642\n5\n1190000.0\n14.0\n2018-07-29\n1\nNaN\n5.0\n11.0\n1\nNaN\n...\n2.0\nNaN\nСанкт-Петербург\n9898.0\n11122.0\n0.0\nNaN\n0.0\nNaN\n4.0\n\n\n19807\n0\n3800000.0\n13.0\n2018-07-04\n1\nNaN\n5.0\n10.0\n3\nNaN\n...\nNaN\nNaN\nСанкт-Петербург\n21302.0\n1242.0\n1.0\n592.0\n3.0\n27.0\n9.0\n\n\n19904\n4\n2400000.0\n12.0\n2017-07-19\n1\n2.55\n5.0\n10.0\n2\nNaN\n...\nNaN\nNaN\nСанкт-Петербург\n21314.0\n964.0\n1.0\n886.0\n2.0\n45.0\n200.0\n\n\n\n\n6 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nНаблюдения:\n- Не похоже на выбросы. Скорее всего это мелко нарезанные студии. Тем более этаж низкий.\nИзучим выброс в высоте потолка.\n\n\nShow the code\ndf[df.ceiling_height &gt; 10].ceiling_height.value_counts()\n\n\n\n\n\n\n\n\n\ncount\n\n\nceiling_height\n\n\n\n\n\n27.0\n8\n\n\n25.0\n7\n\n\n32.0\n2\n\n\n24.0\n1\n\n\n26.0\n1\n\n\n14.0\n1\n\n\n20.0\n1\n\n\n22.6\n1\n\n\n27.5\n1\n\n\n10.3\n1\n\n\n100.0\n1\n\n\n\n\ndtype: int64\n\n\n\n\nShow the code\ndf[df.ceiling_height &gt; 30]\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n3148\n14\n2900000.0\n75.0\n2018-11-12\n3\n32.0\n3.0\n53.0\n2\nNaN\n...\n8.0\nNaN\nВолхов\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n22336\n19\n9999000.0\n92.4\n2019-04-05\n2\n32.0\n6.0\n55.5\n5\nFalse\n...\n16.5\n4.0\nСанкт-Петербург\n18838.0\n3506.0\n0.0\nNaN\n3.0\n511.0\nNaN\n\n\n22869\n0\n15000000.0\n25.0\n2018-07-25\n1\n100.0\n5.0\n14.0\n5\nTrue\n...\n11.0\n5.0\nСанкт-Петербург\n34963.0\n8283.0\n1.0\n223.0\n3.0\n30.0\n19.0\n\n\n\n\n3 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nНаблюдения:\n- Значения от 20 до 32 скорее всего поставили не там запятую.\n- А вот значения 10 и 100 странные.\nИзучим выбросы в количестве этажей\n\n\nShow the code\ndf[df.floors_total &gt; 35]\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n397\n15\n5990000.0\n54.0\n2018-03-22\n2\nNaN\n36.0\n21.4\n28\nNaN\n...\n18.70\n1.0\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\n11.0\n\n\n2253\n12\n3800000.0\n45.5\n2018-06-28\n2\n2.88\n60.0\n27.4\n4\nNaN\n...\n7.40\nNaN\nКронштадт\n67763.0\n49488.0\n2.0\n342.0\n3.0\n614.0\n166.0\n\n\n5807\n17\n8150000.0\n80.0\n2019-01-09\n2\n27.00\n36.0\n41.0\n13\nNaN\n...\n12.00\n5.0\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\n38.0\n\n\n11079\n16\n9200000.0\n75.0\n2019-02-22\n2\n2.70\n36.0\n40.0\n29\nNaN\n...\n12.00\n2.0\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\nNaN\n\n\n16731\n9\n3978000.0\n40.0\n2018-09-24\n1\n2.65\n52.0\n10.5\n18\nNaN\n...\n14.00\nNaN\nСанкт-Петербург\n20728.0\n12978.0\n1.0\n793.0\n0.0\nNaN\n45.0\n\n\n16934\n5\n4100000.0\n40.0\n2017-10-17\n1\n1.75\n37.0\n17.4\n5\nNaN\n...\n8.34\nNaN\nСанкт-Петербург\n18732.0\n20444.0\n0.0\nNaN\n3.0\n80.0\n71.0\n\n\n\n\n6 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nНаблюдения:\n- Так как в Санкт-Петербург есть здания такой высоты, то нет оснований считать это выбросами.\n\n\nИзучение отрицательных значений\nИзучаем отрицательные значения\n\n\nShow the code\nseries_negative = pagri_data_tools.find_columns_with_negative_values(df)\n\n\n\n\n  Negative\n  \n  \n  \n  \n\n\n\nУ нас нет отрицательных значений.\n\n\nИзучение нулевых значений\nИзучаем нулевые значения\n\n\nShow the code\nseries_zeros = pagri_data_tools.find_columns_with_zeros_values(df)\n\n\n\n\n\n\n\nTable 33: Zeros\n\n\n\n\n\ntotal_images\n1059 (4.47%)\n\n\nrooms\n197 (0.83%)\n\n\nbalcony\n3758 (15.86%)\n\n\nairports_nearest\n1 (0.00%)\n\n\nparks_around3000\n10106 (42.64%)\n\n\nponds_around3000\n9071 (38.28%)\n\n\n\n\n\n\n\n\nВсе кроме количества комнат и растояния до ближайщего аэропорта может быть нулями, поэтому удалим их из текущего изучения.\n\n\nShow the code\nseries_zeros = series_zeros.loc[['rooms']]\n\n\nПосмотрим отдельно на нулевое значение в растоянии до аэропорта.\n\n\nShow the code\ndf[df.airports_nearest == 0]\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n21085\n0\n7000000.0\n34.7\n2018-09-23\n1\n2.7\n9.0\n19.8\n3\nNaN\n...\n6.0\n2.0\nСанкт-Петербург\n0.0\n22801.0\n0.0\nNaN\n0.0\nNaN\n60.0\n\n\n\n\n1 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_zeros, \"value_counts\", \"rooms\")\n\n\nValue counts in rooms (0.83%)\n\n\n\n\n\n\n\nTable 34: rooms\n\n\n\n\n\n \ncount\n\n\nrooms\n \n\n\n\n\n0\n197\n\n\n\n\n\n\n\n\nВыдвинем гипотезу, что 0 комнат у студий и однокомнатных.\nПроверим гипотезу по полощади.\nПредположим, что площадь студий и однокомнатных квартир составляет не более 40 м2.\nПосмотрим на выборку из датафрейма\n\n\nShow the code\nseries_zeros['rooms'][['last_price', 'total_area', 'living_area', 'kitchen_area', 'studio', 'open_plan']].query('total_area &gt; 40')\n\n\n\n  \n    \n\n\n\n\n\n\nlast_price\ntotal_area\nliving_area\nkitchen_area\nstudio\nopen_plan\n\n\n\n\n3458\n7400000.0\n73.60\n50.0\nNaN\nTrue\nFalse\n\n\n7237\n2999000.0\n42.63\n25.7\nNaN\nFalse\nTrue\n\n\n10008\n5050000.0\n44.20\n32.2\nNaN\nTrue\nFalse\n\n\n13613\n8100000.0\n58.40\n33.0\nNaN\nTrue\nFalse\n\n\n15319\n5970000.0\n43.30\n28.2\nNaN\nTrue\nFalse\n\n\n16130\n5000000.0\n42.10\n30.0\nNaN\nTrue\nFalse\n\n\n19392\n71000000.0\n371.00\nNaN\nNaN\nFalse\nTrue\n\n\n20082\n16300000.0\n98.40\n60.5\nNaN\nTrue\nFalse\n\n\n21227\n8200000.0\n71.00\n68.0\nNaN\nTrue\nFalse\n\n\n\n\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nНаблюдения:\n- Видим, что почти все квартиры с 0 комнат имеют площадь до 40 кв. - 2 кваритры имеют открытую планировку\n- Можно будет заменить 0 на 1.\n\n\nShow the code\npagri_data_tools.analyze_anomaly_by_category(df, series_zeros, \"by_category\", \"rooms\", 'studio')\n\n\n\n\n\n\n\nTable 35: Share in \"rooms\" by category \"studio\"\n\n\n\n\n\nstudio\ntotal\ncount\ncount_in_total_pct\ncount_in_sum_count_pct\ntotal_in_sum_total_pct\ndiff_sum_pct\n\n\n\n\nFalse\n23550\n59\n0.3%\n29.9%\n99.4%\n-69.4%\n\n\nTrue\n149\n138\n92.6%\n70.1%\n0.6%\n69.4%\n\n\n\n\n\n\n\n\nНаблюдения:\n- Большая часть квартир с нулем комнат являются студиями.\n\n\n\nПромежуточный вывод"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#предобработка-данных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#предобработка-данных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Предобработка данных",
    "text": "Предобработка данных\n\nВыбор нужных столбцов для дальнейшей работы\nСохраним исходный датафрейм в переменную df_origin, чтобы была возможность вернуться к нему\n\n\nShow the code\ndf_origin = df.copy()\n\n\n\n\nОбработка выбросов\nПосле изучения данных отрицательные значения не обнаружены, но есть колонки с нулевыми занчениями, где их быть не должно.\nПосмотрим где у нас нулевые значения\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n  \n    \n\n\n\n\n\n\nzeros\n\n\n\n\ntotal_images\n1059 (4.5%)\n\n\nrooms\n197 (0.8%)\n\n\nbalcony\n3758 (15.9%)\n\n\nairports_nearest\n1 (0.0%)\n\n\nparks_around3000\n10106 (42.6%)\n\n\nponds_around3000\n9071 (38.3%)\n\n\n\n\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nНам нужно обработать нули в количестве комнат и в растоянии до аэропорта.\n\n\nShow the code\ndf[df.airports_nearest == 0]\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n21085\n0\n7000000.0\n34.7\n2018-09-23\n1\n2.7\n9.0\n19.8\n3\nNaN\n...\n6.0\n2.0\nСанкт-Петербург\n0.0\n22801.0\n0.0\nNaN\n0.0\nNaN\n60.0\n\n\n\n\n1 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nТак как это всего одна запись и точно восстановить расстояние невозможно, то лучше удалить ее.\n\n\nShow the code\ndf.shape[0]\n\n\n23699\n\n\n\n\nShow the code\ndf = df[df.airports_nearest != 0]\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23698\n\n\nОбработаем нулевые значения в количестве комнат.\nТак как мы выяснили, что 0 комнат указано у студий и в открытой планеровке, либо у квартир с площадью до 40 кв.,\nто заменим 0 на 1.\n\n\nShow the code\ntt = df.copy()\n\n\n\n\nShow the code\ntt.rooms = tt.rooms.apply(lambda x: 1 if x == 0 else x)\n\n\n\n\nShow the code\ndf.loc[:, 'rooms'] = df.rooms.apply(lambda x: 1 if x == 0 else x)\n\n\nУбедимся, что у нас не осталось нулевых и отрицательных значений где их быть не должно.\n\n\nShow the code\npagri_data_tools.check_negative_value_in_df(df)\n\n\n\n  \n    \n\n\n\n\n\n\nnegative\n\n\n\n\n\n\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\n\n\nShow the code\npagri_data_tools.check_zeros_value_in_df(df)\n\n\n\n  \n    \n\n\n\n\n\n\nzeros\n\n\n\n\ntotal_images\n1058 (4.5%)\n\n\nbalcony\n3758 (15.9%)\n\n\nparks_around3000\n10105 (42.6%)\n\n\nponds_around3000\n9070 (38.3%)\n\n\n\n\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nУ нас в цене есть одна запись со значением 12190. Скорее всего не поставили нули, но сложно определить сколько именно нулей не поставили.\nТак как это всего 1 запись, то удалим ее.\n\n\nShow the code\ndf.shape[0]\n\n\n23698\n\n\n\n\nShow the code\ndf = df[df.last_price != 12190]\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23697\n\n\nОбработаем выбросы в высоте потолков.\nБудем считать, что высота потолков больше 5 метров явялется маловероятным.\nПосмотрим сколько у нас записей с высотой потолка больше 5 метров.\n\n\nShow the code\npagri_data_tools.count_share(df.ceiling_height &gt; 5)\n\n\n'36 (0.2%)'\n\n\nТак как их очень мало и мы не можем обработать эти выбросы, то удалим их.\n\n\nShow the code\ndf.shape[0]\n\n\n23697\n\n\n\n\nShow the code\ndf[df.ceiling_height &gt; 5].shape[0]\n\n\n36\n\n\n\n\nShow the code\ndf = df[~(df.ceiling_height &gt; 5)]\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23661\n\n\n\n\nОбработка пропусков\nПосмотрим где у нас пропуски.\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n  \n    \n\n\n\n\n\n\nmissed\n\n\n\n\nceiling_height\n9118 (38.7%)\n\n\nbalcony\n11468 (48.6%)\n\n\nlocality_name\n48 (0.2%)\n\n\nairports_nearest\n5522 (23.4%)\n\n\ncity_centers_nearest\n5499 (23.3%)\n\n\nparks_around3000\n5498 (23.3%)\n\n\nparks_nearest\n15546 (65.9%)\n\n\nponds_around3000\n5498 (23.3%)\n\n\nponds_nearest\n14529 (61.6%)\n\n\ndays_exposition\n3164 (13.4%)\n\n\n\n\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nМы выяснили, что у нас пропуски в столбцах ‘airports_nearest’, ‘city_centers_nearest’, ‘parks_around3000’, ‘ponds_around3000’\nв одних и тех же строчках.\nТак как количество пропусков болшое, то заменять их нельзя.\nПоэтому оставим их как есть.\nПропуски в высоте потолков мы обрабатывать не можем, так как их сильно много.\nПропуски в количестве этажей удалим, так как их мало.\n\n\nShow the code\ndf.shape[0]\n\n\n23661\n\n\n\n\nShow the code\ndf = df.dropna(subset=['floors_total'])\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23575\n\n\nПропуски в жилой площади и в площади кухни обработаем с помощью коэффициентов отношения площадей.\nПри этом расчитывать будем с учетом количества комнат, чтобы было точнее.\n\n\nShow the code\ndf[['total_area', 'living_area', 'rooms', 'kitchen_area', 'balcony']].sample(5)\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_area\nliving_area\nrooms\nkitchen_area\nbalcony\n\n\n\n\n13287\n35.0\n19.1\n1\n8.2\nNaN\n\n\n17048\n45.9\n30.8\n2\n6.5\nNaN\n\n\n23297\n48.2\n42.2\n2\n6.0\n1.0\n\n\n18227\n72.6\n36.6\n2\nNaN\n0.0\n\n\n18195\n61.3\n33.4\n2\n11.5\n0.0\n\n\n\n\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23575\n\n\n\n\nShow the code\nkitchen_ratio = df.groupby('rooms')['kitchen_area'].transform(\n    lambda x: x.median() / df.loc[x.index, 'total_area'].median() \n    if len(x) &gt;= 30 \n    else df['kitchen_area'].median() / df['total_area'].median()\n)\n\nliving_ratio = df.groupby('rooms')['living_area'].transform(\n    lambda x: x.median() / df.loc[x.index, 'total_area'].median()\n    if len(x) &gt;= 30 \n    else df['living_area'].median() / df['total_area'].median()\n)\n\ndf['kitchen_area'] = df['kitchen_area'].fillna(df['total_area'] * kitchen_ratio)\ndf['living_area'] = df['living_area'].fillna(df['total_area'] * living_ratio)\n\n\n\n\nShow the code\ndf.shape[0]\n\n\n23575\n\n\nПризнак является ли квартира аппартаментом имеет много пропусков.\nОпределить является ли квартира аппартаментом мы не можем, поэтому заменим на значение “не указано”.\n\n\nShow the code\ndf['is_apartment'] = df.is_apartment.astype(str).map({'True': 'да', 'False': 'нет'}).fillna(\"не указано\").astype('category')\n\n\nПропуски в названии населенного пункта мы заменить не можем, и их очень мало, поэтому удалим их.\n\n\nShow the code\ndf = df.dropna(subset=['locality_name'])\n\n\n\n\nShow the code\ndf.shape[0] \n\n\n23527\n\n\n\n\nShow the code\npagri_data_tools.check_missed_value_in_df(df)\n\n\n\n  \n    \n\n\n\n\n\n\nmissed\n\n\n\n\nceiling_height\n9084 (38.6%)\n\n\nis_apartment\n20780 (88.3%)\n\n\nbalcony\n11463 (48.7%)\n\n\nairports_nearest\n5514 (23.4%)\n\n\ncity_centers_nearest\n5491 (23.3%)\n\n\nparks_around3000\n5490 (23.3%)\n\n\nparks_nearest\n15513 (65.9%)\n\n\nponds_around3000\n5490 (23.3%)\n\n\nponds_nearest\n14506 (61.7%)\n\n\ndays_exposition\n3163 (13.4%)\n\n\n\n\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nОстальные пропуски оставим как есть, чтобы не исказить данные.\n\n\nПриведение данных к удобной форме\nИзменим значения в столбцах на более удобные\n\n\nShow the code\ndf.studio = df.studio.astype(str).map({'True': 'да', 'False': 'нет'}).astype('category')\n\n\n\n\nShow the code\ndf.open_plan = df.open_plan.astype(str).map({'True': 'да', 'False': 'нет'}).astype('category')\n\n\nИзменим типы данных на более подходящие.\nУбедимся, что у нас нет дробных чисел в цене.\n\n\nShow the code\n(df.last_price != df.last_price.astype(int)).sum()\n\n\n0\n\n\nПриведем цену к целому типу.\n\n\nShow the code\ndf.last_price = df.last_price.astype(int)\n\n\n\n\nПромежуточный вывод\n\nпишем как обработали данные, например\n\n\nУдалили колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id.\nКолонка со стажем имеет совершенно некорректные данные. Чтобы не внести искажение в анализ, удалим эту колонку.\nУдалили отрицательные значения в колонке с количеством детей, которые составляли 0,2% от общего количества записей в данных."
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#создание-новых-переменных",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#создание-новых-переменных",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Создание новых переменных",
    "text": "Создание новых переменных\n\nКатегоризация данных\n\n\nShow the code\ndf.head(1)\n\n\n\n  \n    \n\n\n\n\n\n\ntotal_images\nlast_price\ntotal_area\nfirst_day_exposition\nrooms\nceiling_height\nfloors_total\nliving_area\nfloor\nis_apartment\n...\nkitchen_area\nbalcony\nlocality_name\nairports_nearest\ncity_centers_nearest\nparks_around3000\nparks_nearest\nponds_around3000\nponds_nearest\ndays_exposition\n\n\n\n\n0\n20\n13000000\n108.0\n2019-03-07\n3\n2.7\n16.0\n51.0\n8\nне указано\n...\n25.0\nNaN\nСанкт-Петербург\n18863.0\n16028.0\n1.0\n482.0\n2.0\n755.0\nNaN\n\n\n\n\n1 rows × 22 columns\n\n    \n      \n  \n    \n      \n  \n    \n  \n    \n    \n  \n\n    \n  \n  \n    \n  \n  \n\n\nСоздадим новую категориальную переменную из этажа.\nСделаем 3 значения - первый, последний и другой\n\n\nShow the code\ndf['floor_position'] = df.apply(lambda x: 'первый' if x['floor'] == 1 else 'последний' if x['floor'] == x['floors_total'] else 'другой', axis=1).astype('category')\n\n\n\n\nShow the code\npagri_data_tools.my_info_column(df, 'floor_position')\n\n\n\n        \n            \n\n\n\n\nTable 36: floor_position\n\n\n\n\n\nValues\n23 699 (100%)\n\nдругой (74%)\n\n\nMissing\n---\n\nпоследний (14%)\n\n\nDistinct\n3 (&lt;1%)\n\nпервый (12%)\n\n\nDuplicated origin\n23 696 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим новую категориальную переменную из цены\n\n\nShow the code\npagri_data_tools.quantiles_columns(df.last_price)\n\n\n\n\n\n\n\nTable 37: Quantiles\n\n\n\n\n\nMax\n763 000 000\n\n\n5\n1 870 000\n\n\n25\n3 400 000\n\n\n50\n4 650 000\n\n\n75\n6 800 000\n\n\n95\n15 300 000\n\n\nMin\n12 190\n\n\n\n\n\n\n\n\n\n\nShow the code\nlabels = ['эконом', 'комфорт', 'премиум']\nbins = [-np.inf, 4_000_000, 10_000_000, np.inf]\n\n\n\n\nShow the code\ndf['price_segment'] = pagri_data_tools.create_category_column(df.last_price, labels=labels, bins=bins).astype('category')\n\n\n\n\nShow the code\npagri_data_tools.my_info_column(df, 'price_segment')\n\n\n\n        \n            \n\n\n\n\nTable 38: price_segment\n\n\n\n\n\nValues\n23 699 (100%)\n\nкомфорт (50%)\n\n\nMissing\n---\n\nэконом (38%)\n\n\nDistinct\n3 (&lt;1%)\n\nпремиум (11%)\n\n\nDuplicated origin\n23 696 (99.9%)\n\n\n\n\nDupl (modify - origin)\n---\n\n\n\n\nEmpty\n---\n\n\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим переменные день недели, месяц и год публикации объявления.\n\n\nShow the code\nweekday_dict = {\n    'Monday': 'Понедельник',\n    'Tuesday': 'Вторник',\n    'Wednesday': 'Среда',\n    'Thursday': 'Четверг',\n    'Friday': 'Пятница',\n    'Saturday': 'Суббота',\n    'Sunday': 'Воскресенье'\n}\nmonth_dict = {\n    1: 'Январь',\n    2: 'Февраль',\n    3: 'Март',\n    4: 'Апрель',\n    5: 'Май',\n    6: 'Июнь',\n    7: 'Июль',\n    8: 'Август',\n    9: 'Сентябрь',\n    10: 'Октябрь',\n    11: 'Ноябрь',\n    12: 'Декабрь'\n}\n\n\n\n\nShow the code\ndf['publication_weekday'] = df['first_day_exposition'].dt.day_name().map(weekday_dict).astype('category')\ndf['publication_month'] = df['first_day_exposition'].dt.month.map(month_dict).astype('category')\ndf['publication_year'] = df['first_day_exposition'].dt.year.astype(str).astype('category')\n\n\n\n\nShow the code\npagri_data_tools.my_info_column(df, 'publication_weekday')\n\n\n\n        \n            \n\n\n\n\nTable 39: publication_weekday\n\n\n\n\n\nValues\n23 699 (100%)\n\nЧетверг (18%)\n\n\nMissing\n---\n\nВторник (18%)\n\n\nDistinct\n7 (&lt;1%)\n\nПятница (17%)\n\n\nDuplicated origin\n23 692 (99.9%)\n\nСреда (17%)\n\n\nDupl (modify - origin)\n---\n\nПонедельник (15%)\n\n\nEmpty\n---\n\nСуббота (8%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nВоскресенье (7%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\nShow the code\npagri_data_tools.my_info_column(df, 'publication_month')\n\n\n\n        \n            \n\n\n\n\nTable 40: publication_month\n\n\n\n\n\nValues\n23 699 (100%)\n\nФевраль (11%)\n\n\nMissing\n---\n\nМарт (11%)\n\n\nDistinct\n12 (&lt;1%)\n\nАпрель (10%)\n\n\nDuplicated origin\n23 687 (99.9%)\n\nНоябрь (10%)\n\n\nDupl (modify - origin)\n---\n\nОктябрь (9%)\n\n\nEmpty\n---\n\nСентябрь (8%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nИюнь (7%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\nShow the code\npagri_data_tools.my_info_column(df, 'publication_year')\n\n\n\n        \n            \n\n\n\n\nTable 41: publication_year\n\n\n\n\n\nValues\n23 699 (100%)\n\n2018 (36%)\n\n\nMissing\n---\n\n2017 (35%)\n\n\nDistinct\n6 (&lt;1%)\n\n2019 (12%)\n\n\nDuplicated origin\n23 693 (99.9%)\n\n2016 (12%)\n\n\nDupl (modify - origin)\n---\n\n2015 (5%)\n\n\nEmpty\n---\n\n2014 &lt;1%\n\n\nRAM (Mb)\n&lt;1 Mb\n\n\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\n\n\nСоздание новых числовых переменных\nСоздадим переменную соотношение жилой и общей площади\n\n\nShow the code\ndf['living_total_ratio'] = round(df['living_area'] / df['total_area'],2)\n\n\n\n\nShow the code\npagri_data_tools.my_info_column(df, 'living_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 42: living_total_ratio\n\n\n\n\n\nValues\n21 796 (92%)\n\nMax\n1\n\nAvg\n0.56\n\n0.56 (4%)\n\n\nMissing\n1 903 (8%)\n\n95%\n0.73\n\nMode\n0.56\n\n0.55 (4%)\n\n\nDistinct\n91 (&lt;1%)\n\n75%\n0.64\n\nRange\n0.98\n\n0.6 (4%)\n\n\nDuplicates\n23 607 (99.6%)\n\nMedian\n0.57\n\niQR\n0.14\n\n0.62 (4%)\n\n\nZeros\n---\n\n25%\n0.5\n\nstd\n0.11\n\n0.58 (4%)\n\n\nNegative\n---\n\n5%\n0.39\n\nkurt\n0.23\n\n0.57 (4%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.02\n\nskew\n-0.14\n\n0.59 (4%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим переменную отношения площади кухни к общей.\n\n\nShow the code\ndf['kitchen_total_ratio'] = round(df['kitchen_area'] / df['total_area'],2)\n\n\n\n\nShow the code\npagri_data_tools.my_info_column(df, 'kitchen_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 43: kitchen_total_ratio\n\n\n\n\n\nValues\n21 421 (90%)\n\nMax\n0.79\n\nAvg\n0.19\n\n0.14 (7%)\n\n\nMissing\n2 278 (10%)\n\n95%\n0.31\n\nMode\n0.14\n\n0.16 (7%)\n\n\nDistinct\n66 (&lt;1%)\n\n75%\n0.23\n\nRange\n0.76\n\n0.12 (7%)\n\n\nDuplicates\n23 632 (99.7%)\n\nMedian\n0.17\n\niQR\n0.1\n\n0.15 (6%)\n\n\nZeros\n---\n\n25%\n0.13\n\nstd\n0.07\n\n0.13 (6%)\n\n\nNegative\n---\n\n5%\n0.1\n\nkurt\n2.88\n\n0.11 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.03\n\nskew\n1.23\n\n0.19 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим переменную цена квадратного метра\n\n\nShow the code\ndf['price_per_sqm'] = (df['last_price'] / df['total_area']).astype(int)\n\n\n\n\nShow the code\npagri_data_tools.my_info_column(df, 'kitchen_total_ratio')\n\n\n\n        \n            \n\n\n\n\nTable 44: kitchen_total_ratio\n\n\n\n\n\nValues\n21 421 (90%)\n\nMax\n0.79\n\nAvg\n0.19\n\n0.14 (7%)\n\n\nMissing\n2 278 (10%)\n\n95%\n0.31\n\nMode\n0.14\n\n0.16 (7%)\n\n\nDistinct\n66 (&lt;1%)\n\n75%\n0.23\n\nRange\n0.76\n\n0.12 (7%)\n\n\nDuplicates\n23 632 (99.7%)\n\nMedian\n0.17\n\niQR\n0.1\n\n0.15 (6%)\n\n\nZeros\n---\n\n25%\n0.13\n\nstd\n0.07\n\n0.13 (6%)\n\n\nNegative\n---\n\n5%\n0.1\n\nkurt\n2.88\n\n0.11 (6%)\n\n\nRAM (Mb)\n&lt;1 Mb\n\nMin\n0.03\n\nskew\n1.23\n\n0.19 (5%)\n\n\n\n\n\n\n\n\n            \n                \n            \n        \n        \n\n\nСоздадим новую переменную - расстояние до центра киллометрах.\n\n\nShow the code\ndf.columns\n\n\nIndex(['total_images', 'last_price', 'total_area', 'first_day_exposition',\n       'rooms', 'ceiling_height', 'floors_total', 'living_area', 'floor',\n       'is_apartment', 'studio', 'open_plan', 'kitchen_area', 'balcony',\n       'locality_name', 'airports_nearest', 'city_centers_nearest',\n       'parks_around3000', 'parks_nearest', 'ponds_around3000',\n       'ponds_nearest', 'days_exposition'],\n      dtype='object')\n\n\n\n\nShow the code\ndf.city_centers_nearest.value_counts()\n\n\n\n\n\n\n\n\n\ncount\n\n\ncity_centers_nearest\n\n\n\n\n\n8460.0\n61\n\n\n20802.0\n32\n\n\n10720.0\n30\n\n\n20444.0\n27\n\n\n8434.0\n27\n\n\n...\n...\n\n\n16631.0\n1\n\n\n24311.0\n1\n\n\n15782.0\n1\n\n\n11940.0\n1\n\n\n6263.0\n1\n\n\n\n\n7642 rows × 1 columns\ndtype: int64\n\n\n\n\nShow the code\ndf['city_centers_nearest_km'] = round(df.city_centers_nearest / 1000)"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#анализ-корреляций-между-переменными",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#анализ-корреляций-между-переменными",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Анализ корреляций между переменными",
    "text": "Анализ корреляций между переменными\nВАЖНО\nпроверить, что все категориальные переменные по прежнему имеют категориальный тип, чтобы при анализе они не поетрялись\n\n\nShow the code\ndf.dtypes\n\n\n\nИсследование корреляционных связей\n\nТоп n значений одного столбца по значениям в другом Сделать функцию, чтобы в столбцах, где бльше 20 уникльных значений посмотреть топ n значений по другой колонке.\nНапример, топ 10 покупателей по сумме покупок и прочее.\nИдея в том, что если в столбце до 20 уникальных значений, то мы проанализируем комбинации с другими стобцами на графиках.\nА вот если у нас столбец не числовой и в нем больше 20 уникальных значений, то на графике мы не сможем понять топ n.\n\n\nИзучаем топ n значений в категориальных столбцах датафрейма, где значений больше порогового, по значению в столбце value_column.\nТут можно делать разные топы, использовать разные функции.\nЗадача изучить то, что мы не сможем изучить на графиках из-за болшого количества занчений в категориальной переменной,\nпоэтому мы берем топ n значений.\n\n\n\nShow the code\ngen = pagri_data_tools.top_n_values_gen()\nnext(gen)\n\n\n\nЧтобы сравнить метрики между собой мы можем - использовать корреляционный анализ (Пирсена, Спирмена, Кенделла)\n\n\nheatmap_corr(df)\n\n\n\nShow the code\npagri_data_tools.pagri_data_tools.heatmap_corr(df)\n\n\n\nИспользование регрессии и случайного леса для определения влияния переменных\n\n\nКоэффициенты регрессии позволяют оценить влияние каждой переменной на целевую переменную, учитывая влияние других переменных,\nв то время как важные компоненты в случайном лесе позволяют оценить важность каждой переменной для предсказания целевой переменной.\n\n\nИспользуем регрессиию\n\n\nЧтобы построить регрессию и посмотреть стат значимость и коэффициенты удобно использовать модуль statsmodel\n\n\nVIF означает Variance Inflation Factor (Фактор инфляции дисперсии). Это статистическая метрика,\nиспользуемая для обнаружения мультиколлинеарности (сильной корреляции) между предикторами (фичами) в линейной регрессии.\n\n\nОбычно, VIF интерпретируется следующим образом:\n\nVIF &lt; 5: слабая мультиколлинеарность\n5 ≤ VIF &lt; 10: умеренная мультиколлинеарность\nVIF ≥ 10: сильная мультиколлинеарность\n\n\n\nСмотрим R2 (коэффициент детерминации) - использовать коэффициенты у регресси Мы строим регрессию и смотрим, у каких метрик больше коэффициенты. Таким образом мы поймем какие метрики сильнее зависят с целевой.\nВажно, чтобы независимые переменные некоррелировали по отдельности и вместе (мультиколлиниарность).\nПо отдельности смотрим матрицу корреляции.\nЧтобы определить коррелириуют ли вместе, береме независимые переменные,\nи перебираем их выбирая одну из них целевой и смотрим R2.\nЕсли R2 большой, то значит эта метрика (которая целевая на этом шаге) хорошо описывается другими и ее можно выбросить. Также не забываем поправки на гетероскедостичность (HC0, HC1, HC2, HC3) в статпакетах.\nНам нужно ответить на следующие вопросы - Влияет ли метрика на целевую? Оцениваем коэффициенты в уравнении регресси у каждой метрики.\n- Как влияет метрика на целевую? Смотрим R2 (коэффициент детерминации). И определяем какая часть целевой переменной определяется независимыми метриками.\n- Коэффициенты при метриках в уравнении статистически значим? При какаом уровне значимости? Смотрим в стат пакете p value для каждого коэффициента, что нам говорит значим ли этот коэффициент.\nТо есть мы не просто смотрим его абсолютное значение, а учитываем p value.\n- Дайте содержательную интерпретацию коэффицентам? При увеличении метрики k на 1, целевая метрика увеличивается на \\(b_{k} * 1\\) То есть нужно перевести коэффициенты в реальное сравнение, насколько увелчисться целевая метрика при изменении определенной метрики на 1 - Найдите 95 процентный доверительный интервал. В стат пакете смотрим значение и оно говорит, что если мы многократно повторим ноши вычисления с новыми данными, то 95 процентов наших\nполученных коэффицентов будут лежать в этом диапазоне.\n\n\nСтроим модель и изучаем результат\nlinear_regression_with_vif\n\n\n\nShow the code\npagri_data_tools.linear_regression_with_vif()\n\n\n\nИспльзовать коэффициенты у классификацию\nСтроим случайный лес какие метрики сильнее всего влияют на решения модели.\nplot_feature_importances_classifier\nplot_feature_importances_regression\n\n\nТут нужно подумать как использовать категориальные переменные тоже\nНужно их перевести в one hot encoding или подобное, чтобы также проверить силу их влияния на целевую перменную\n\n\n\nShow the code\ntitles_for_axis = dict(\n    debt = 'долга'\n    , children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\n\npagri_data_tools.plot_feature_importances_classifier(df, target='debt', titles_for_axis=titles_for_axis)\npagri_data_tools.plot_feature_importances_regression()\n\n\n\nНа основе полученных данных формулируем гипотезы, которые будем проверять в блоке проверки гипотез\n\n\nиспользуем быблиотеку shap, чтобы определить метрики, которые лучше других помогают предсказывать целевую перемменную\n\n\n\nПромежуточный вывод"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#анализ-взаимосвязей-переменных-на-графиках",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#анализ-взаимосвязей-переменных-на-графиках",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Анализ взаимосвязей переменных на графиках",
    "text": "Анализ взаимосвязей переменных на графиках\nЕсли у нас много значений в переменной, то мы агрегируем данные и можем построить бары.\nНо если мы агрегируем данные по переменной, в которой много значений и нам это нужно.\nТо мы не сможем построить бары, и тогда мы строим гистограмму. То есть мы берем, например, для каждой заправки считаем среднее время заправки и так как у нас много заправок,\nно мы хотим визуализировать среднее время по ним, и не агрегировать по другому параметру, то мы можем испльзовать гистограмму.\nВ данном случае гистограмма своего рода агрегация в бины, то есть мы получаем как бы новую переменную из бинов, в каждом бине будет агрегированы данные.\nЭто работает, когда нам нужно просто посмотреть колечество, так как в бинах будет количество. Таким образом мы получаем сколько у нас заправок имеют определенное среднее вермя заправки.\n\nПро размер графиков\nСтандартный размер графиков width=600, height=400\nДля более сложных графиков, когда требуется больше места для отображения данных, можно использовать размеры width=800, height=600 или width=1000, height=800\n\n\nСравнивать количество элементов нужно в абсолютных и относительных величинах.\nКогда мы сравниваем только в абсолютных величинах, мы не учитываем размеры групп.\nВ одной группе может быть элементов больше чем в другой и тогда сравнение будет не совсем точным.\nЕсли у нас 2 категориальные переменные, то мы можем сравнивать отностельные величины\nпо одной переменной, а можем по другой.\nЭто как сравнивать суммарный возраст в группах, это не дает полной картины и мы сравниваем средний возраст,\nчтобы размер группы не влиял.\n\n\nВАЖНО Анализ графиков и выводы для них должны полностью перекрывать постановку задачи и цель.\nЭто значит, что если цель проанализировать зависимость наличия долга, то мы в идеале должны проанализировать\nвлиянеие каждой переменной на наличие долга (числовой и категориальной)\nКончено нужно проанализировать все возможные зависимости.\nНо все зависимости с переменной в постновке задачи мы обязаны проверить и дать выводы. И о наличии и об отсутствие.\nВажные выводы делаем не только о наличие интересных моментов, но и об отсутствие.\n\n\nСначала раздел графиков\nНа основе графиков формируются гипотезы (например, у нас у мужчин зп больше) И после раздела графиков идет раздел проверки гипотез. Тут мы првоеряем разные гипотезы новые и те, что увидели на графиках.\nЭто правильная последовательность сначала изучили графики и потом на основе их сформировали гипоетзы Перед разделом про графики идет раздел с корреляцией и поиском главных компонет случайного леса.\nМы выбиарем переменную, для которой мы далее хотим посмотреть разыне зависимости и указываем ее целевой для сучайного леса\nИ смотрим какие фичи сильнее влияют.\nИ теперь можем построить графики с целевой перменно и этими главными фичами и в выводе можно указать про то что это важные компоненты случаного леса\n\n\nНа основе полученных данных формулируем гипотезы, которые будем проверять в блоке проверки гипотез\n\n\nАнализ временных зависимостей\nИзучить сезонность.\nКогда мы хотим изучить верменную зависимость, то нам нуно создать новые переменные с обрезанными (trunc or round) значениям, чтобы можно было сгруппировать используя groupby or pivot_table\nпо этой обрезанной переменной и применить функцию агрегации и построить график, например, среднее время заправки на азс по часам.\nВот когда мы работаем с временем, нам нужно думать какие переменные создать, обрезая текущее время.\n\nСтроим когортный анализ, если есть возможность\n\n\nЕсли у нас есть даты, то мы можем посмотреть не просто абсолютные значения на каждую дату какой-то метрики,\nа посмотреть относительные значения относительно предыдущего значения.\nДля этого нужно составить таблицу, в которой будет изменение в процентах относительно предыдущего значения.\nИ затем визуализировать для каждой даты динамику этого показателя\n\n\n\nИзучение зависимостей между числовыми переменными\n\n\nShow the code\nПостроить hexbinplot\n\n\n\nИзучаем scatter plots\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    children = 'Кол-во детей'\n    , age = 'Возраст'\n    , total_income = 'Доход'\n)\n\n\n\n\nShow the code\npagri_data_tools.pairplot(df, titles_for_axis=titles_for_axis, horizontal_spacing=0.12, height=400, width=1200, rows=1, cols=3).show(config=dict(displayModeBar=False, dpi=200), renderer=\"png\")\n# если нужно интерактивый график, то\nfig = pagri_data_tools.pairplot(df, titles_for_axis=titles_for_axis, horizontal_spacing=0.12, height=800, width=800)\nfig.show()\n\n\n\n\nИзучение зависимостей между категориальными переменными\n\n\nShow the code\ngen = pagri_graphs.categorical_graph_analys_gen(df)\n\n\n\n\nShow the code\nnext(gen)\n\n\n\nСтроим матрицу тепловой карты для категориальных переменных и изучаем зависимости\ncategorical_heatmap_matrix_gen\n\n\nПосмотрим на распределение количества элементов между группами\n\n\nНужно подумать как отобразить не только процент от всего количества, но и пороцент в группе\nТо есть у нас есть значение в ячейке, сумма всех, сумма по категории на оси x и сумма по категории на оси Y\nВот нужно как-то отобразить процент от суммы, процент от одной категории и от другой категории\n\n\n\nShow the code\n12 (0.5% of total, 20% of row, 15% of col)\n\n\n\nМожно сделать кнопки, чтобы можно было подсветку делать внури колонок и строк\n\n\nМожно сделать кнопки (процент от общего) (процент от тут указывается название оси x) (аналогично для второй оси)\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количество детей', 0]\n    , age = ['Возраст, лет', 'возраст', 1]\n    , total_income = ['Ежемесячный доход', 'ежемесячный доход', 1]\n     # category column\n    , education = ['Уровень образования', 'уровня образования']\n    , family_status = ['Семейное положение', 'семейного положения']\n    , gender = ['Пол', 'пола']\n    , income_type = ['Тип занятости', 'типа занятости']\n    , debt = ['Задолженность', 'задолженности']\n    , purpose = ['Цель получения кредита', 'цели получения кредита']\n    , has_child = ['Наличие детей', 'наличия детей']\n    , age_cat = ['Возрастная категория, лет', 'возрастной категории']\n    , total_income_cat = ['Категория дохода', 'категории дохода']\n)\n\n\n\n\nShow the code\npagri_data_tools.categorical_graph_analys_gen()\n\n\n\nСтроим treemap\ntreemap\ntreemap_dash\napp = treemap_dash(df)\nif __name__ == '__main__':\n   app.run_server(debug=True)\n\n\n\nShow the code\npagri_data_tools.treemap()\n\n\n\n\nShow the code\napp = pagri_data_tools.treemap_dash(df)\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\n\nСтроим parallel_categories\nparallel_categories\nparallel_categories_dash\napp = treemap_dash(df)\nif __name__ == '__main__':\n   app.run_server(debug=True)\n\n\n\nShow the code\npagri_data_tools.parallel_categories()\n\n\n\n\nShow the code\napp = pagri_data_tools.parallel_categories_dash(df)\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\n\nСтроим Sankey\nsankey\nsankey_dash\napp = treemap_dash(df)\nif __name__ == '__main__':\n   app.run_server(debug=True)\n\n\n\nShow the code\npagri_data_tools.sankey()\n\n\n\n\nShow the code\napp = pagri_data_tools.sankey_dash(df)\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\n\n\nИзучение зависимостей между числовыми и категориальными переменными\n\nМожно добавить кнопку среднее и количество\nЧтобы можно было посмотртеть распределение по количеству, когда смотрить среднее.\n\n\ngraph_analysis\n\n\n\nShow the code\ngen = pagri_data_tools.graph_analysis()\n\n\n\nКогда выбрали нужные графики, то стоим их\n\n\nЧтобы автоматически генерировались подписи осей и заголовок графика, нужно заполшнить такой словарь.\nПервый элемент списка - это подпись оси\nВторой элемент списка - это как это название будет отображаться в заголовке графика\nДля числовых столбцов также указывается род, чтобы правильно выбрать (Середнее, средний, средняя) (0 - средний род, 1 - мужской род, 2 - женский род)\n\n\n\nShow the code\nf'Среднее / Медианное / Суммарное {numeric} в зависимости от {category} и {category}'\n\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column (0 - средний род, 1 - мужской род, 2 - женский род) (Середнее образовние, средний доход, средняя температура) )\n    children = ['Количество детей', 'количество детей', 0]\n    , age = ['Возраст, лет', 'возраст', 1]\n    , total_income = ['Ежемесячный доход', 'ежемесячный доход', 1]\n     # category column\n    , education = ['Уровень образования', 'уровня образования']\n    , family_status = ['Семейное положение', 'семейного положения']\n    , gender = ['Пол', 'пола']\n    , income_type = ['Тип занятости', 'типа занятости']\n    , debt = ['Задолженность (1 - имеется, 0 - нет)', 'задолженности']\n    , purpose = ['Цель получения кредита', 'цели получения кредита']\n    , dob_cat = ['Возрастная категория, лет', 'возрастной категории']\n    , total_income_cat = ['Категория дохода', 'категории дохода']\n)\n\n\n\n\nShow the code\nsummory = []\ncolumns = []\n\n\n\n\nShow the code\ngen = pagri_data_tools.graph_analysis_gen(df)\n\n\n\nСначала запускаем код через 1 ячейку columns = next(gen),\nчтобы появлися график и в colunns появились текущие названия колонок\nДалее пишем наблюдения, если хотим сохранить график и выполняем ячейку ниже.\nЕсли сохранять не хотим, то просто выполняем дальше columns = next(gen)\n\n\n\nShow the code\nsummory.append(dict(\n    columns = columns\n    , observations =\n'''\n**Наблюдения:**\n- 21\n- Размер больше\n- 1\n- Сильнее других\n-\n'''))\n\n\n\n\nShow the code\ncolumns = next(gen)\n\n\n\nВ summory находятся названия колонок и наблюдения для графиков, которые стоит построить\n\n\nВАЖНО\nПосле построеня всех графиков и коппирования комментариев из summory\nМы в предваретельном выводе после раздела графиков вставляем выводы из summory\nЧтобы их не собирать вручную у каждого графика\n\n\n\nShow the code\ndef gen_temp():\n    for item in summory:\n        colunns = item['columns']\n        observations = item['observations']\n        print(observations)\n        yield colunns\n\n\n\n\nShow the code\ngen = gen_temp()\n\n\n\n\nShow the code\ncolunns = next(gen)\n\n\n\n**Наблюдения:**  \n- 21\n- Размер больше\n- 1\n- Сильнее других\n- \n\n\n\n\nЧтобы построить график без category- просто закоментируй строку с category.\n\n\n\nShow the code\nconfig = dict(df = df\n    , x = colunns[1]\n    , y = colunns[0]\n    , category = colunns[2]\n    # , width = 800\n    # , orientation = 'h'\n)\npagri_data_tools.bar(config, titles_for_axis)\n\n\nНаблюдения: - У мужчин средний доход выше\nНаблюдения: - текст\n\n\nПромежуточный вывод"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#формулирование-и-провера-гипотез",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#формулирование-и-провера-гипотез",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Формулирование и провера гипотез",
    "text": "Формулирование и провера гипотез\n\nФормулирование гипотез\n\nНа основе проведенного анализа данных сформулирем следующие гипотезы:\n\n\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок.\nГипотеза 2: У мужчин средний доход выше\nГипотеза 3: Цель получения кредита не зависит от среднего ежемесяченого доход\nГипотеза 4: Средний доход по семейному статусу одинаковый, но у вдовцов отличается\nГипотеза 5: У должников в среднем больше детей\nГипотеза 6: У должников средний возраст ниже\nГипотеза 7: Медианный доход у должников и не должников не отличается\n\n\nНе забываем что гипотезы можно проверять и между 2 категориальными переменными.\nПроверять есть ли между ними зависимости.\nТакже если мы на графиках определили, что есть между 2 категориальными перменными связь, то тут можем это проверить\n\n\n\nПроверка гипотез\n\nПроверим сформулированные гипотезы.\n\n\nhypothesis Гипотеза 1: Название гипотезы\n\n\nH0: The two categorical variables are independent.\nH1: The two categorical variables are not independent (i.e., there is a significant association between them).\n\n\nПримеры гипотез - Есть ли зависимость между наличием детей и возвратом кредита в срок?\n\n\nЭто будет часто возникать когда у нас категориальная целевая переменная и другие категориальные переменные.\nИ мы хотим проверить влияют ли категориальные переменные на целевую.\nНапример у нас есть поле наличие долга (есть или нет)\nВот тут мы можем провести тесты со всеми каетгориями на наличие зависимости с наличием долга.\nВ идеале мы на графиках должны найти гипотезы и тут их проверить.\nНо если у нас целевая переменная, то мы можем сравнить ее со всеми категориями\n\n\n\nShow the code\npagri_data_tools.chi2_pearson()\n\n\n\nФормируем словарь для подписей осей и названия гистограм\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количества детей']\n    , age = ['Возраст', 'возраста']\n    , total_income = ['Ежемесячный доход', 'ежемесячного дохода']\n)\n\n\n\nНулевая гипотеза должна быть направлена на отсутствие эффекта, а альтернативная гипотеза должна быть направлена на наличие эффекта.\n\n\nФормулируем гипотезу через H0, H1\n\n\nH0: У мужчин средний доход не выше, чем у женщин\nH1: У мужчин средний доход выше, чем у женщин\n\n\nСмотрим распределение метрики\n\n\n\nShow the code\npagri_data_tools.histogram(df.total_income, titles_for_axis)\n\n\n\nДелаем вывод о распределении.\nВыбираем критерий для проверки гипотезы.\nОпределяем уровнь значимости.\n\n\nПроводим тест\nВАЖНО\ndf в ttest_ind_df и подобных можно испльзовать только для 2 стороннего случая\nДля одностороннего нужно придумать как определять какая группа первая по порядку пойдет в тест,\nв зависимости от постановки гипотезы, так как альтернатива опредляется исходя из порядка аргументов в функции теста\n\n\nЕсли используем ттест или анову, то сначала проводим тест на проверку дисперсии\n\n\nH0: У должников и не должников дисперсия не отличается\nH1: У должников и не должников дисперсия отличается\n\n\n\nShow the code\npagri_data_tools.levene_df\npagri_data_tools.levene\npagri_data_tools.bartlett_df\npagri_data_tools.bartlett\n\n\n\nВыбираем критерий\n\n\n\nShow the code\npagri_data_tools.chi2_pearson\npagri_data_tools.ttest_ind_df\npagri_data_tools.ttest_ind\npagri_data_tools.mannwhitneyu_df\npagri_data_tools.mannwhitneyu\npagri_data_tools.proportion_ztest_1sample\npagri_data_tools.proportions_ztest_2sample\npagri_data_tools.proportions_ztest_column_2sample\npagri_data_tools.proportions_chi2\npagri_data_tools.proportions_chi2_column\npagri_data_tools.anova_oneway_df\npagri_data_tools.anova_oneway\npagri_data_tools.tukey_hsd_df\npagri_data_tools.anova_oneway_welch_df\npagri_data_tools.kruskal_df\npagri_data_tools.kruskal\npagri_data_tools.bootstrap_diff_2sample # важно, сохраняем fig и в следующей ячейке делаем fig.shwo(), иначе на google colab работает некорректно\n\n\n\nПроводим тест\n\n\nЕсли отклоняем гипотезу, то строим доверитлеьный интервал\n\n\n\nShow the code\npagri_data_tools.confint_t_2samples\npagri_data_tools.confint_t_2samples_df\npagri_data_tools.confint_proportion_ztest_2sample\npagri_data_tools.confint_proportion_ztest_column_2sample\npagri_data_tools.confint_proportion_2sample_statsmodels\npagri_data_tools.confint_proportion_coluns_2sample_statsmodels\n\n\n\n\nShow the code\ntitles_for_axis = dict(\n    # numeric column\n    children = ['Количество детей', 'количества детей']\n    , age = ['Возраст', 'возраста']\n    , total_income = ['Ежемесячный доход', 'ежемесячного дохода']\n)\n\n\n\nПроверим эти гипотезы\n\nГипотеза 1: Нет зависимость между наличием детей и возвратом кредита в срок\n\nH0: Наличие детей не влияет на возврат кредита в срок.\nH1: Наличие детей влияет на возврат кредита в срок.\n\n\nТак как у нас обе переменных категориальные, то воспользуемся критерием хи-квадрат Пирсона.\nУровень значимости alpha выберем 0.05\n\n\n\nShow the code\npagri_data_tools.chi2_pearson(df.has_child, df.debt)\n\n\nХи-квадрат Пирсона\nalpha =  0.05\np-value =  1.724356890544321e-05\nОтклоняем нулевую гипотезу, поскольку p-value меньше уровня значимости\n\n\nРезультат:\n&gt;На уровне значимости 0.05 гипотеза, что наличие детей не влияет на возврат кредита в срок не подтвердилась.\n\nСделать опцию в бутстреп функции, чтобы строился только доверительный интервал\n\n\nТакже сделать функцию для доверилеьных интервалов для мана уитни через\nthe Hodges-Lehmann estimation, which provides a point estimate and a confidence interval for the difference in medians.\n\n\n\nShow the code\nimport pingouin as pg\n\n# Perform the Mann-Whitney U test and calculate the confidence interval\nmw_test = pg.mwu(x, y, tail='two-sided', confidence=0.95)\n\n# Print the results\nprint(mw_test)\n\n\n\n\nShow the code\nimport numpy as np\nfrom scipy import stats\n\n# Perform the Mann-Whitney U test\nu_stat, p_value = stats.mannwhitneyu(x, y, alternative='two-sided')\n\n# Calculate the Hodges-Lehmann estimation\nhl_est = np.median(np.array([x_i - y_j for x_i in x for y_j in y]))\n\n# Calculate the confidence interval\nci = stats.t.interval(0.95, len(x) + len(y) - 2, loc=hl_est, scale=stats.sem(np.array([x_i - y_j for x_i in x for y_j in y])))\n\n# Print the results\nprint('Hodges-Lehmann estimation:', hl_est)\nprint('Confidence interval:', ci)\n\n\n\nПодход следуюищй - мы до раздела проверка гипотез, когда изучаем данные (разделы пропусков, выбросов, дубликатов, зависиместей между перменными и графики),\nто мы делаем выводы и формируем наблюдеия.\nВот эти наблюдения и выводы нужно проверить в проверке гипотез.\nИ потом в основном выводе уже писать не просто, что у нас мужчин больше чем женьшин, а писать, что на уровен значисомти таком то у нас мужчина больше чем\nженщин с таким то доверительным интервалом.\nТаким образом выводы по вомзожности должны проходить через этап проверки гипотез, тогда эти выводы становятся более существенными.\n\n\nГипотезы появляются, когда мы задаем вопросы данным. Мы изучили данные, преобработали и теперь начинаем задавать вопросы.\n\nВыдвигаем гипотезу (заметили что-то необычное и хотим проверить), далее формулируем ее и далее проверяем.\n\nНе забываем формулировать гипотезы словами. Пишем что является гипотезой H0, а что гипотезой H1\n\nФормулируем все гипотезы, которые хотим проверить. Если будет 100 гипотез, то все 100 нужно сформулировать и потом проверить и сделать вывод.\n\nГипотезы могут быть и простыми вопросами без гипотез H0 и H1, такие гипотезы мы проверяем графиками или анализируя таблицу.\n\nВосновном, когда мы собиаремся применить стат аппарат для проверки гипотезы, то мы должны записать ее через H0 и H1.\n\n\nАлгоритм проверки статистических гипотез\n\nпостановка задачи\n\nСформулировать, что мы хотим узнать о выборках с точки зрения бизнес задачи (равны ли средние доходы в группах)\nперевод бизнес-вопроса на язык статистики: средний доход в группах - проверка равенства средних значений\n\nформулировка гипотез\n\nформулировка нулевой гипотезы - с т.зр. равенства стат прараметров оцениваемых выборок\n(Н0: Средние траты клиентов по группе А равны средним тратам клинентов по группе В)\nформулировка альтернативной гипотезы - с точки зрения неравенства параметров\n(Н1: Средние траты клиентов по группе А не равны средним тратам клинентов по группе В)\n\nвыбор критерия alpha (почему 0.05 или 0.01)\n\nцена ошибки первого рода (при большой цене ошибки - в мед исследованиях, потенциальном ущербе ) - значение может быть больше, например 0.1\nв ежедневных бизнес задачах, обычно - 0.05\n\nанализ распределения\n\nвизуальная оценка\nследим за выбросами\nпроверка гипотез о типе распредеделения (например критерий Шапиро-Уилка)\nесли распределение не нормальное и размер выборки достаточный (больше 30-50 элементов)\nможет быть использован t-test именно для проверки гипотезы о равенстве средних.\nСогласно ЦПТ (центральная предельная теорема) средние этих выборок будут распределены нормально. См. статью Зотова\n\nвыбор критерия\n\nпри оценке равенства средних T-test или Welch T-test (если есть сомнения, то лучше Уэлча)\n\nпри рвенстве дисперсий используем обычный т тест\nесли дисперсии в выборках разные, то используем т теста Уэлча\n\n\nполучение результата\n\nрасчет p-value\n\nинтерпретация p-value\n\nсравнение p-value и alpha\nесли альфа &gt; p-value - отвергаем нулевую гипотезу\nесли альфа &lt; p-value - не можем отвергнуть нулевую гипотезу\n\n\n\n\nКакая у нас задача - Исследовать взаимосвязь между 2 переменными - обе переменные наминативные - Хи-квадрат Пирсона (не чувствителен к гетероскедастичности) (нормальность не обязательна) - обе переменные количественные - Коэффициент корреляции Пирсона (параметрика) (чувствителен к выбросам) (только непрерывные переменные) - Коэффициент корреляции Спирмена (чувствителен к выбросам) / Кендалла (менее чувствителен к выбросам) (непараметрика) (непрерывные переменные и порядковые категориальные переменные)\n- одна переменная номинативная (принимает 2 занчения), вторая количественная - значения - Т-критерий Стьюдента (параметрика) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) - если дисперсии равны (тест левена, барлета) и количество в группах равно (тест на равенство пропорций), то используем обычный т тест (эта формула более точно даст результат для этого случая) - если дисперсии не равны (тест левена, барлета) или количество в группах не равно (тест на равенство пропорций), то используем тест Уэлча (эта формула использует больше неопределенности и лучше подходит для этого случая) - U-критерий Манна-Уитни (непараметрика) (нормальность не обязательна) (не чувствителен к гетероскедастичности) Если тестируемая фича полностью сдвигает выборку на некий коэффициент theta или масштабирует выборку на некий параметр theta (theta &gt; 0),\nто критерий Манна-Уитни применим - доли - Z тест для долей (параметрика) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) - Chi-square тест для долей (непараметрика) (нормальность не обязательна) (не чувствителен к гетероскедастичности) - Исследовать взаимосвязь между несколькими переменными - Дисперсионный анализ (параметрика) (дисперсии в группах должны быть примерно равны) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) - Welch’s ANOVA (устройчив к разной дисперсии в группах) (требует более больших размеров групп для точных результатов) (желательно нормальность) (чувствителен к выбросам) (не чувствителен к гетероскедастичности) - Критерий Краскела-Уоллиса (непараметрика) (нормальность не обязательна) (не чувствителен к гетероскедастичности) - Тест Тьюки (если anova или Краскела-Уоллиса нашил различия) (дисперсии в группах должны быть примерно равны) (параметрика) (желательно нормальность) (чувствителен к выбросам) (чувствителен к гетероскедастичности) - Проверить на равенство дисперсий в группах перед anova - Levene’s test (не требует нормальность) (менее чувствительный) - Bartlett’s test (требует нормальность) (более чувствительный)\n\n\nОтличная статья про доверительные интервалы для разных статистик\nhttps://habr.com/ru/articles/807051/\n\n\nBootstrapping\n\n\nВ бутстрепе, если мы хотим сравнить две выборки, то нельзя смотреть\nгде находится исходная разница средних в бутстрапированной выборке\nТак как мы берем бутстреп из наших выборок и впролне реально.что наша разность\nбудет близка к с реднему бутстропированной выборки\nПоэтому p value нужно определять по месту нуля в бутстропированной выборке\n\n\nПосмотрим p value для 0 (если различий нет, то разница должна быть 0) Для этого посчитаем cdf для + и - среднего, чтобы получить 2 значения cdf а теперь возьмем минимум и умножим на 2, так как альт гипотеза у нас.что просто не равно 0, значит и справа и слева\n\n\n\nShow the code\nEstimating the power of a non-parametric test using bootstrapping involves simulating the testing process multiple times to estimate the probability of rejecting the null hypothesis. Here's a general outline of the steps:\n\n**Specify the null and alternative hypotheses **: Define the null and alternative hypotheses for your test. For example, the null hypothesis might be that the two groups have the same distribution, and the alternative hypothesis might be that the two groups have different distributions.\n\nGenerate simulated data: Generate simulated data that reflects the null hypothesis. For example, you could generate two groups of random data from the same distribution.\n\nPerform the Mann-Whitney U test: Perform the Mann-Whitney U test on the simulated data to obtain a p-value.\n\nRepeat steps 2-3 many times: Repeat steps 2-3 many times (e.g., 1000 times) to generate a distribution of p-values under the null hypothesis.\n\nEstimate the power: Estimate the power of the test by calculating the proportion of times the p-value is below a certain significance level (e.g., 0.05) when the alternative hypothesis is true. To do this, you'll need to generate simulated data that reflects the alternative hypothesis and repeat steps 2-4.\n\n\n\n\nПромежуточный вывод"
  },
  {
    "objectID": "projects/housing-ads-investigation/housing_ads_investigation.html#общий-вывод",
    "href": "projects/housing-ads-investigation/housing_ads_investigation.html#общий-вывод",
    "title": "Исследование объявлений о продаже квартир",
    "section": "Общий вывод",
    "text": "Общий вывод\nВыводы:\n\nДолги есть у людей с разным доходом.\nУ должников в среднем больше детей.\nУ должников среднее количество детей больше у женщин, а у не должников срднее количество детей больше у мужчин\nУ должников средний возраст немного ниже для всех категорий семейного положения.\nМедианный доход у должников и не должников практически не отличается\nДолжники имеют ниже средний возраст как мужчины так и женщины. Ситуация сохраняется во всех группах дохода.\nЦель получения кредита практически не зависит от среднего ежемесяченого дохода.\n92 % клиентов не имеют долга.\nЛюди от 30 до 50 лет имеют самый высокий средний доход.\nБольше всего кредит берут на цели, связанные с недвижимостью, кроме людей в гражданском браке\nЛюди в гражданском браке чаще берут кредит на свадьбу\nЖенщины чаще возвращают кредит.\nАнализ значимости признаков для модели случайного леса показал, что доход является самым значимым признаком для предсказания задолженности.\n58 % клиентов либо женаты, либо замужем. 19 % в гражданском браке. Можно сделать вывод что большинство в браке.\n\nБольшинство клиентов женщины (66 процентов).\nТолько 5 процентов клиентов моложе 25 лет. Основная часть клиентов старше 30 лет.\nЧем меньше количество детей, тем больше значений с высоким доходом.\nБолшая часть женатых имеет доход 100-200 тыс\nНа всех уровнях образоания, кроме ученой степени, доход у мужчин выше.\nУ мужчин, которые в браке или были в браке, количество детей больше, чем у женщин в той же категории.\n\nАномалии и особенности в данных: - В датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.\n- В столбце с количеством детей есть отрицательные значения. 47 штук. Меньше 1 процента от всего датафрейма. Также есть клиенты с 20 детьми. - Колонока общий трудовой стаж содержит 74 % отрицаетльных значений. А также максимальное количество дней стажа больше 400 тысяч дней, это больше 1000 лет. - В колонке возраста 101 нулевое значени. - Колонка дохода имеет слишком много знаков после запятой. - В колонке с образованием присутствуют одни и те же знчения с разными регистрами. При этом в колонке с id образования все впрорядке.\nРезультаты предобработки данных: - Удалили колонки с id образования и семейного статуса, так как нам для графиков лучше подойдут названия, а не id. - Колонка со стажем имеет совершенно некорректные данные. Чтобы не внести искажение в анализ, удалим эту колонку.\nРезультаты проверки гипотез:\n- Гипотеза 1: У мужчин средний доход выше, чем у женщин\n&gt; Результат: На уровне значимости 0.05 гипотеза подтвердилась. - Гипотеза 2: Цель получения кредита практически не зависит от среднего ежемесячного дохода\n&gt; Результат: На уровне значимости 0.05 у нас нет оснований отвергнуть гипотезу. - Гипотеза 3: Средний доход по семейному статусу примерно одинаковый, но у вдовцов отличается\n&gt; Результат: На уровне значимости 0.05 гипотеза подтвердилась. - Гипотеза 4: У должников в среднем больше детей\n&gt; Результат: На уровне значимости 0.05 гипотеза подтвердилась.\n- Гипотеза 5: У должников средний возраст ниже\n&gt; Результат: На уровне значимости 0.05 гипотеза подтвердилась. 95% доверительный интервал для разницы средних возрастов для должников и не должников равен (-inf, -2.74).\n- Гипотеза 6: Медианный доход у должников и не должников не отличается\n&gt; Результат: На уровне значимости 0.05 нет оснований отвергнуть гипотезу. 95% доверительный интервал разницы между медианным доходом должников и не должников равен (-2648.05, 179.34).\n- Гипотеза 7: Наличие детей не влияет на возврат кредита в срок\n&gt; Результат: На уровне значимости 0.05 гипотеза не подтвердилась.\nРекомендации: - Добавить контроль данных, чтобы не дублировались значения с разными регистрами в колонке с образованием. - Добавить уникальный идентификатор клиента, чтобы избежать дублирования строк. - Добавить проверку на отрицательные значения и на слишком болшьшие значения в количестве детей при загрузке данных. - Выяснить откуда возникают отрицательные значения в трудовом стаже и добавить контроль ввода невалидных данных. - Выяснить причину нулевых значений в колонке возраста и добавить проверку на нулевые значения при загрузке данных. - Выяснить причину большого количества знаков после запятой в колонке дохода.\n\nЧто нужно сообщить в выводе - информацию о том, что удалось подтвердить гипотезы (тут пишем только те, которые удалось подтвердить) - всю информацию о датасете, которые важны. Дубликаты, которые несут практическую пользу и рекомендации по ним, пропуски также с рекомендациями\nи остальные моменты по данным и рекомендации. Тут важно указывать именно найденные аномалии, которые имеют практическую пользу, которые нужно исправить и прочее.\nПишем, что были найдены выбросы, они были связаны возможно с тем то и тем то. - и в конце обязательно call to action написать что необходимо сделать с этими результатами\n\n\nСоветы по оформлению общего выывод - не нужно вставлять таблицы и графики в вывод. В выводе пишем словами самое важное и практически полезное, что мы получили, причем в порядке убывания важности.\nИ когда мы пишем, что увидели то-то, то приводим гиперссылку на график или результат ячейки, где это получено.\nТак будет компактный вывод и при необходимости человек сможет быстро перейти и посмотреть график или таблицу\n\nУдалось подтвердить гипотезу о влиянии различных характеристик клиента на факт погашения кредита в срок. Каждый из рассмотренных параметров оказывает влияние на надёжность заёмщика. Рассмотренные факторы по-разному влияют на надёжность заёмщиков. Например, семейное положение оказалось более значимым фактором, чем уровень дохода.\n\nВ ходе анализа исходного набора данных было проведено (были устранены пропуски в двух колонках с числовыми значениями - ‘total_income’ и ‘days_employed’).\n\nПосле устранения явных и скрытых дупликатов и удаления оставшихся после обогащения пропусков объем датасета сократился на 0.05%\nБыли устранены выбросы в колонках ‘days_employed’ и ‘children’: в первом случае выбросы возникли в результате системной ошибки (данные были внесены в часах, а не в днях); во втором случае ошибка, вероятнее всего была допущена людьми, вносившими данные в систему\n…\n\nНеобходимо\n\n\nЗапросить в отделе по работе с клиентами информацию о возможности брать кредит без подтверждения дохода.\nСообщить коллегам, занимающимся выгрузкой о наличие дубликатов, если вопрос не разрешится, запросить индентификационный номер клиента к датасету.\nПрописать в задаче на поставку данных формат данных (пол только F и M, положительные значения). Приложить информацию о найденных аномалиях.\n\n\nСначала проверяем орфографические ошибки\n\n\nShow the code\npagri_data_tools.correct_notebook_text()\n\n\nЗатем создаем номера у глав и оглавление\n\nЧтобы добавить номера глав и ссылки для оглавления и сделать оглавлнеие\nоглавление добавиться в начало ноутбука\n\n\nСначала можно в режиме draft сделать пробный варант, проверить и потом уже запустить в режиме final\n\n\n\nShow the code\npagri_data_tools.make_headers_link_and_toc()\n\n\nДалее создаем ссыки на выводы и аномалии\n\nЧтобы было удобно искать где вставить якорь для ссылки, названия выводов и аномалий должно точно совпадать\nв итоговом списке аномалий и выводов и в тех местах (то есть в наблюдениях под ячейками), куда мы будем помещать ссылки\n\n\nЧтобы сделать ссылки на выводы и аномалии, нужно\nв тех местах, куда хотим переходить по ссылке вставить текст выводов или аномалий (берем прямо из основных выводов)\nвыводы должны начинаться с _conclusion_\nаномалии должны начинаться с _anomaly_\nПримеры:\n\n\n\nShow the code\n_anomalies_ В столбце с количеством детей есть отрицательные значения. 47 штук.\n\n\n\nМожно в одной ячейке и выводы и аномалии, с обеих ссылок будет переходить сюда, но назад будет возвращаться только в одно место,\nв то, которое было первым в ячейке\n\n\n\nShow the code\n_conclusion_ Только 5 процентов клиентов моложе 25 лет. Основная часть клиентов старше 30 лет.\n_anomalies_ В колонке возраста 101 нулевое значени.\n\n\n\nСодеражние выводов и аномалий появится в начале ноутбука\nтакже 2 режима draft и final\n\n\nПодумать как сделать удобнее создание выводов\nПока лучше сначала взять выводы из наблюдений и выбрать из них наиболее важные и интересные, не меняя их.\nДалее берем этот список и поиском находим ячейку с этим выводом и перед графиком помещаем\nconclusion и сам вывод\n\n\nЧтобы был нужный порядок в списке выводов и аномалий в начале отчета, нужно передвать словарь со списками выводов и аномалий.\nПеременная order принимает словарь, где ключи onclusions и anomalies, а значения это соответствующие списки\n\n\nПримеры списков\n\n\n\nShow the code\norder = dict(\n            conclusions =[ 'Женщины чаще возвращают кредит, чем мужчины.']\n            , anomalies = ['В датафрейме есть строки дубликаты. 54 строки. Меньше 1 % от всего датафрейма.  ']\n)\n\n\n\n\nShow the code\npagri_data_tools.add_conclusions_and_anomalies()\n\n\nЕсли сильно нужно, создаем ссыки на гипотезы\n\nВ главе гипотез для каждой гипоетзы, куда будем переходить из оглавления, в начале перед гипотезой ставим hypothesis и пробел\n\n\n\nShow the code\n_hypothesis_ **Гипотеза 1: Название гипотезы**\n\n\n\nВыполняем следующую функцию и в начале отчета появится список гипотез с ссылками\nДалее нужно добавить результат гипотез вручную\n\n\n\nShow the code\npagri_data_tools.add_hypotheses_links_and_toc()\n\n\nФинальное размещение ноутбука на git hub с ссылкой на google colab\n\nКомитим на гит хаб финальную версию ноутбука.\nСоздаем на гит хаб readme файл проекта, в котором в начале идет ссылка на google colab\nДалее ее открываем и переходим на google colab\nВыполняем все ячейки, смотрим все ли правильно отобразилось.\nДалее в меню File выбираем сохранить копию на гит хаб.\nНе меняем имя, тогда все содержимое ноутбука сохраниться на гит хаб."
  }
]